/******/ (function(modules) { // webpackBootstrap
/******/ 	var parentHotUpdateCallback = this["webpackHotUpdate"];
/******/ 	this["webpackHotUpdate"] = 
/******/ 	function webpackHotUpdateCallback(chunkId, moreModules) { // eslint-disable-line no-unused-vars
/******/ 		hotAddUpdateChunk(chunkId, moreModules);
/******/ 		if(parentHotUpdateCallback) parentHotUpdateCallback(chunkId, moreModules);
/******/ 	}
/******/ 	
/******/ 	function hotDownloadUpdateChunk(chunkId) { // eslint-disable-line no-unused-vars
/******/ 		var head = document.getElementsByTagName("head")[0];
/******/ 		var script = document.createElement("script");
/******/ 		script.type = "text/javascript";
/******/ 		script.charset = "utf-8";
/******/ 		script.src = __webpack_require__.p + "" + chunkId + "." + hotCurrentHash + ".hot-update.js";
/******/ 		head.appendChild(script);
/******/ 	}
/******/ 	
/******/ 	function hotDownloadManifest(callback) { // eslint-disable-line no-unused-vars
/******/ 		if(typeof XMLHttpRequest === "undefined")
/******/ 			return callback(new Error("No browser support"));
/******/ 		try {
/******/ 			var request = new XMLHttpRequest();
/******/ 			var requestPath = __webpack_require__.p + "" + hotCurrentHash + ".hot-update.json";
/******/ 			request.open("GET", requestPath, true);
/******/ 			request.timeout = 10000;
/******/ 			request.send(null);
/******/ 		} catch(err) {
/******/ 			return callback(err);
/******/ 		}
/******/ 		request.onreadystatechange = function() {
/******/ 			if(request.readyState !== 4) return;
/******/ 			if(request.status === 0) {
/******/ 				// timeout
/******/ 				callback(new Error("Manifest request to " + requestPath + " timed out."));
/******/ 			} else if(request.status === 404) {
/******/ 				// no update available
/******/ 				callback();
/******/ 			} else if(request.status !== 200 && request.status !== 304) {
/******/ 				// other failure
/******/ 				callback(new Error("Manifest request to " + requestPath + " failed."));
/******/ 			} else {
/******/ 				// success
/******/ 				try {
/******/ 					var update = JSON.parse(request.responseText);
/******/ 				} catch(e) {
/******/ 					callback(e);
/******/ 					return;
/******/ 				}
/******/ 				callback(null, update);
/******/ 			}
/******/ 		};
/******/ 	}

/******/ 	
/******/ 	
/******/ 	// Copied from https://github.com/facebook/react/blob/bef45b0/src/shared/utils/canDefineProperty.js
/******/ 	var canDefineProperty = false;
/******/ 	try {
/******/ 		Object.defineProperty({}, "x", {
/******/ 			get: function() {}
/******/ 		});
/******/ 		canDefineProperty = true;
/******/ 	} catch(x) {
/******/ 		// IE will fail on defineProperty
/******/ 	}
/******/ 	
/******/ 	var hotApplyOnUpdate = true;
/******/ 	var hotCurrentHash = "0f206a1f8307fa044b19"; // eslint-disable-line no-unused-vars
/******/ 	var hotCurrentModuleData = {};
/******/ 	var hotCurrentParents = []; // eslint-disable-line no-unused-vars
/******/ 	
/******/ 	function hotCreateRequire(moduleId) { // eslint-disable-line no-unused-vars
/******/ 		var me = installedModules[moduleId];
/******/ 		if(!me) return __webpack_require__;
/******/ 		var fn = function(request) {
/******/ 			if(me.hot.active) {
/******/ 				if(installedModules[request]) {
/******/ 					if(installedModules[request].parents.indexOf(moduleId) < 0)
/******/ 						installedModules[request].parents.push(moduleId);
/******/ 					if(me.children.indexOf(request) < 0)
/******/ 						me.children.push(request);
/******/ 				} else hotCurrentParents = [moduleId];
/******/ 			} else {
/******/ 				console.warn("[HMR] unexpected require(" + request + ") from disposed module " + moduleId);
/******/ 				hotCurrentParents = [];
/******/ 			}
/******/ 			return __webpack_require__(request);
/******/ 		};
/******/ 		for(var name in __webpack_require__) {
/******/ 			if(Object.prototype.hasOwnProperty.call(__webpack_require__, name)) {
/******/ 				if(canDefineProperty) {
/******/ 					Object.defineProperty(fn, name, (function(name) {
/******/ 						return {
/******/ 							configurable: true,
/******/ 							enumerable: true,
/******/ 							get: function() {
/******/ 								return __webpack_require__[name];
/******/ 							},
/******/ 							set: function(value) {
/******/ 								__webpack_require__[name] = value;
/******/ 							}
/******/ 						};
/******/ 					}(name)));
/******/ 				} else {
/******/ 					fn[name] = __webpack_require__[name];
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 	
/******/ 		function ensure(chunkId, callback) {
/******/ 			if(hotStatus === "ready")
/******/ 				hotSetStatus("prepare");
/******/ 			hotChunksLoading++;
/******/ 			__webpack_require__.e(chunkId, function() {
/******/ 				try {
/******/ 					callback.call(null, fn);
/******/ 				} finally {
/******/ 					finishChunkLoading();
/******/ 				}
/******/ 	
/******/ 				function finishChunkLoading() {
/******/ 					hotChunksLoading--;
/******/ 					if(hotStatus === "prepare") {
/******/ 						if(!hotWaitingFilesMap[chunkId]) {
/******/ 							hotEnsureUpdateChunk(chunkId);
/******/ 						}
/******/ 						if(hotChunksLoading === 0 && hotWaitingFiles === 0) {
/******/ 							hotUpdateDownloaded();
/******/ 						}
/******/ 					}
/******/ 				}
/******/ 			});
/******/ 		}
/******/ 		if(canDefineProperty) {
/******/ 			Object.defineProperty(fn, "e", {
/******/ 				enumerable: true,
/******/ 				value: ensure
/******/ 			});
/******/ 		} else {
/******/ 			fn.e = ensure;
/******/ 		}
/******/ 		return fn;
/******/ 	}
/******/ 	
/******/ 	function hotCreateModule(moduleId) { // eslint-disable-line no-unused-vars
/******/ 		var hot = {
/******/ 			// private stuff
/******/ 			_acceptedDependencies: {},
/******/ 			_declinedDependencies: {},
/******/ 			_selfAccepted: false,
/******/ 			_selfDeclined: false,
/******/ 			_disposeHandlers: [],
/******/ 	
/******/ 			// Module API
/******/ 			active: true,
/******/ 			accept: function(dep, callback) {
/******/ 				if(typeof dep === "undefined")
/******/ 					hot._selfAccepted = true;
/******/ 				else if(typeof dep === "function")
/******/ 					hot._selfAccepted = dep;
/******/ 				else if(typeof dep === "object")
/******/ 					for(var i = 0; i < dep.length; i++)
/******/ 						hot._acceptedDependencies[dep[i]] = callback;
/******/ 				else
/******/ 					hot._acceptedDependencies[dep] = callback;
/******/ 			},
/******/ 			decline: function(dep) {
/******/ 				if(typeof dep === "undefined")
/******/ 					hot._selfDeclined = true;
/******/ 				else if(typeof dep === "number")
/******/ 					hot._declinedDependencies[dep] = true;
/******/ 				else
/******/ 					for(var i = 0; i < dep.length; i++)
/******/ 						hot._declinedDependencies[dep[i]] = true;
/******/ 			},
/******/ 			dispose: function(callback) {
/******/ 				hot._disposeHandlers.push(callback);
/******/ 			},
/******/ 			addDisposeHandler: function(callback) {
/******/ 				hot._disposeHandlers.push(callback);
/******/ 			},
/******/ 			removeDisposeHandler: function(callback) {
/******/ 				var idx = hot._disposeHandlers.indexOf(callback);
/******/ 				if(idx >= 0) hot._disposeHandlers.splice(idx, 1);
/******/ 			},
/******/ 	
/******/ 			// Management API
/******/ 			check: hotCheck,
/******/ 			apply: hotApply,
/******/ 			status: function(l) {
/******/ 				if(!l) return hotStatus;
/******/ 				hotStatusHandlers.push(l);
/******/ 			},
/******/ 			addStatusHandler: function(l) {
/******/ 				hotStatusHandlers.push(l);
/******/ 			},
/******/ 			removeStatusHandler: function(l) {
/******/ 				var idx = hotStatusHandlers.indexOf(l);
/******/ 				if(idx >= 0) hotStatusHandlers.splice(idx, 1);
/******/ 			},
/******/ 	
/******/ 			//inherit from previous dispose call
/******/ 			data: hotCurrentModuleData[moduleId]
/******/ 		};
/******/ 		return hot;
/******/ 	}
/******/ 	
/******/ 	var hotStatusHandlers = [];
/******/ 	var hotStatus = "idle";
/******/ 	
/******/ 	function hotSetStatus(newStatus) {
/******/ 		hotStatus = newStatus;
/******/ 		for(var i = 0; i < hotStatusHandlers.length; i++)
/******/ 			hotStatusHandlers[i].call(null, newStatus);
/******/ 	}
/******/ 	
/******/ 	// while downloading
/******/ 	var hotWaitingFiles = 0;
/******/ 	var hotChunksLoading = 0;
/******/ 	var hotWaitingFilesMap = {};
/******/ 	var hotRequestedFilesMap = {};
/******/ 	var hotAvailibleFilesMap = {};
/******/ 	var hotCallback;
/******/ 	
/******/ 	// The update info
/******/ 	var hotUpdate, hotUpdateNewHash;
/******/ 	
/******/ 	function toModuleId(id) {
/******/ 		var isNumber = (+id) + "" === id;
/******/ 		return isNumber ? +id : id;
/******/ 	}
/******/ 	
/******/ 	function hotCheck(apply, callback) {
/******/ 		if(hotStatus !== "idle") throw new Error("check() is only allowed in idle status");
/******/ 		if(typeof apply === "function") {
/******/ 			hotApplyOnUpdate = false;
/******/ 			callback = apply;
/******/ 		} else {
/******/ 			hotApplyOnUpdate = apply;
/******/ 			callback = callback || function(err) {
/******/ 				if(err) throw err;
/******/ 			};
/******/ 		}
/******/ 		hotSetStatus("check");
/******/ 		hotDownloadManifest(function(err, update) {
/******/ 			if(err) return callback(err);
/******/ 			if(!update) {
/******/ 				hotSetStatus("idle");
/******/ 				callback(null, null);
/******/ 				return;
/******/ 			}
/******/ 	
/******/ 			hotRequestedFilesMap = {};
/******/ 			hotAvailibleFilesMap = {};
/******/ 			hotWaitingFilesMap = {};
/******/ 			for(var i = 0; i < update.c.length; i++)
/******/ 				hotAvailibleFilesMap[update.c[i]] = true;
/******/ 			hotUpdateNewHash = update.h;
/******/ 	
/******/ 			hotSetStatus("prepare");
/******/ 			hotCallback = callback;
/******/ 			hotUpdate = {};
/******/ 			var chunkId = 0;
/******/ 			{ // eslint-disable-line no-lone-blocks
/******/ 				/*globals chunkId */
/******/ 				hotEnsureUpdateChunk(chunkId);
/******/ 			}
/******/ 			if(hotStatus === "prepare" && hotChunksLoading === 0 && hotWaitingFiles === 0) {
/******/ 				hotUpdateDownloaded();
/******/ 			}
/******/ 		});
/******/ 	}
/******/ 	
/******/ 	function hotAddUpdateChunk(chunkId, moreModules) { // eslint-disable-line no-unused-vars
/******/ 		if(!hotAvailibleFilesMap[chunkId] || !hotRequestedFilesMap[chunkId])
/******/ 			return;
/******/ 		hotRequestedFilesMap[chunkId] = false;
/******/ 		for(var moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				hotUpdate[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(--hotWaitingFiles === 0 && hotChunksLoading === 0) {
/******/ 			hotUpdateDownloaded();
/******/ 		}
/******/ 	}
/******/ 	
/******/ 	function hotEnsureUpdateChunk(chunkId) {
/******/ 		if(!hotAvailibleFilesMap[chunkId]) {
/******/ 			hotWaitingFilesMap[chunkId] = true;
/******/ 		} else {
/******/ 			hotRequestedFilesMap[chunkId] = true;
/******/ 			hotWaitingFiles++;
/******/ 			hotDownloadUpdateChunk(chunkId);
/******/ 		}
/******/ 	}
/******/ 	
/******/ 	function hotUpdateDownloaded() {
/******/ 		hotSetStatus("ready");
/******/ 		var callback = hotCallback;
/******/ 		hotCallback = null;
/******/ 		if(!callback) return;
/******/ 		if(hotApplyOnUpdate) {
/******/ 			hotApply(hotApplyOnUpdate, callback);
/******/ 		} else {
/******/ 			var outdatedModules = [];
/******/ 			for(var id in hotUpdate) {
/******/ 				if(Object.prototype.hasOwnProperty.call(hotUpdate, id)) {
/******/ 					outdatedModules.push(toModuleId(id));
/******/ 				}
/******/ 			}
/******/ 			callback(null, outdatedModules);
/******/ 		}
/******/ 	}
/******/ 	
/******/ 	function hotApply(options, callback) {
/******/ 		if(hotStatus !== "ready") throw new Error("apply() is only allowed in ready status");
/******/ 		if(typeof options === "function") {
/******/ 			callback = options;
/******/ 			options = {};
/******/ 		} else if(options && typeof options === "object") {
/******/ 			callback = callback || function(err) {
/******/ 				if(err) throw err;
/******/ 			};
/******/ 		} else {
/******/ 			options = {};
/******/ 			callback = callback || function(err) {
/******/ 				if(err) throw err;
/******/ 			};
/******/ 		}
/******/ 	
/******/ 		function getAffectedStuff(module) {
/******/ 			var outdatedModules = [module];
/******/ 			var outdatedDependencies = {};
/******/ 	
/******/ 			var queue = outdatedModules.slice();
/******/ 			while(queue.length > 0) {
/******/ 				var moduleId = queue.pop();
/******/ 				var module = installedModules[moduleId];
/******/ 				if(!module || module.hot._selfAccepted)
/******/ 					continue;
/******/ 				if(module.hot._selfDeclined) {
/******/ 					return new Error("Aborted because of self decline: " + moduleId);
/******/ 				}
/******/ 				if(moduleId === 0) {
/******/ 					return;
/******/ 				}
/******/ 				for(var i = 0; i < module.parents.length; i++) {
/******/ 					var parentId = module.parents[i];
/******/ 					var parent = installedModules[parentId];
/******/ 					if(parent.hot._declinedDependencies[moduleId]) {
/******/ 						return new Error("Aborted because of declined dependency: " + moduleId + " in " + parentId);
/******/ 					}
/******/ 					if(outdatedModules.indexOf(parentId) >= 0) continue;
/******/ 					if(parent.hot._acceptedDependencies[moduleId]) {
/******/ 						if(!outdatedDependencies[parentId])
/******/ 							outdatedDependencies[parentId] = [];
/******/ 						addAllToSet(outdatedDependencies[parentId], [moduleId]);
/******/ 						continue;
/******/ 					}
/******/ 					delete outdatedDependencies[parentId];
/******/ 					outdatedModules.push(parentId);
/******/ 					queue.push(parentId);
/******/ 				}
/******/ 			}
/******/ 	
/******/ 			return [outdatedModules, outdatedDependencies];
/******/ 		}
/******/ 	
/******/ 		function addAllToSet(a, b) {
/******/ 			for(var i = 0; i < b.length; i++) {
/******/ 				var item = b[i];
/******/ 				if(a.indexOf(item) < 0)
/******/ 					a.push(item);
/******/ 			}
/******/ 		}
/******/ 	
/******/ 		// at begin all updates modules are outdated
/******/ 		// the "outdated" status can propagate to parents if they don't accept the children
/******/ 		var outdatedDependencies = {};
/******/ 		var outdatedModules = [];
/******/ 		var appliedUpdate = {};
/******/ 		for(var id in hotUpdate) {
/******/ 			if(Object.prototype.hasOwnProperty.call(hotUpdate, id)) {
/******/ 				var moduleId = toModuleId(id);
/******/ 				var result = getAffectedStuff(moduleId);
/******/ 				if(!result) {
/******/ 					if(options.ignoreUnaccepted)
/******/ 						continue;
/******/ 					hotSetStatus("abort");
/******/ 					return callback(new Error("Aborted because " + moduleId + " is not accepted"));
/******/ 				}
/******/ 				if(result instanceof Error) {
/******/ 					hotSetStatus("abort");
/******/ 					return callback(result);
/******/ 				}
/******/ 				appliedUpdate[moduleId] = hotUpdate[moduleId];
/******/ 				addAllToSet(outdatedModules, result[0]);
/******/ 				for(var moduleId in result[1]) {
/******/ 					if(Object.prototype.hasOwnProperty.call(result[1], moduleId)) {
/******/ 						if(!outdatedDependencies[moduleId])
/******/ 							outdatedDependencies[moduleId] = [];
/******/ 						addAllToSet(outdatedDependencies[moduleId], result[1][moduleId]);
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 	
/******/ 		// Store self accepted outdated modules to require them later by the module system
/******/ 		var outdatedSelfAcceptedModules = [];
/******/ 		for(var i = 0; i < outdatedModules.length; i++) {
/******/ 			var moduleId = outdatedModules[i];
/******/ 			if(installedModules[moduleId] && installedModules[moduleId].hot._selfAccepted)
/******/ 				outdatedSelfAcceptedModules.push({
/******/ 					module: moduleId,
/******/ 					errorHandler: installedModules[moduleId].hot._selfAccepted
/******/ 				});
/******/ 		}
/******/ 	
/******/ 		// Now in "dispose" phase
/******/ 		hotSetStatus("dispose");
/******/ 		var queue = outdatedModules.slice();
/******/ 		while(queue.length > 0) {
/******/ 			var moduleId = queue.pop();
/******/ 			var module = installedModules[moduleId];
/******/ 			if(!module) continue;
/******/ 	
/******/ 			var data = {};
/******/ 	
/******/ 			// Call dispose handlers
/******/ 			var disposeHandlers = module.hot._disposeHandlers;
/******/ 			for(var j = 0; j < disposeHandlers.length; j++) {
/******/ 				var cb = disposeHandlers[j];
/******/ 				cb(data);
/******/ 			}
/******/ 			hotCurrentModuleData[moduleId] = data;
/******/ 	
/******/ 			// disable module (this disables requires from this module)
/******/ 			module.hot.active = false;
/******/ 	
/******/ 			// remove module from cache
/******/ 			delete installedModules[moduleId];
/******/ 	
/******/ 			// remove "parents" references from all children
/******/ 			for(var j = 0; j < module.children.length; j++) {
/******/ 				var child = installedModules[module.children[j]];
/******/ 				if(!child) continue;
/******/ 				var idx = child.parents.indexOf(moduleId);
/******/ 				if(idx >= 0) {
/******/ 					child.parents.splice(idx, 1);
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 	
/******/ 		// remove outdated dependency from module children
/******/ 		for(var moduleId in outdatedDependencies) {
/******/ 			if(Object.prototype.hasOwnProperty.call(outdatedDependencies, moduleId)) {
/******/ 				var module = installedModules[moduleId];
/******/ 				var moduleOutdatedDependencies = outdatedDependencies[moduleId];
/******/ 				for(var j = 0; j < moduleOutdatedDependencies.length; j++) {
/******/ 					var dependency = moduleOutdatedDependencies[j];
/******/ 					var idx = module.children.indexOf(dependency);
/******/ 					if(idx >= 0) module.children.splice(idx, 1);
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 	
/******/ 		// Not in "apply" phase
/******/ 		hotSetStatus("apply");
/******/ 	
/******/ 		hotCurrentHash = hotUpdateNewHash;
/******/ 	
/******/ 		// insert new code
/******/ 		for(var moduleId in appliedUpdate) {
/******/ 			if(Object.prototype.hasOwnProperty.call(appliedUpdate, moduleId)) {
/******/ 				modules[moduleId] = appliedUpdate[moduleId];
/******/ 			}
/******/ 		}
/******/ 	
/******/ 		// call accept handlers
/******/ 		var error = null;
/******/ 		for(var moduleId in outdatedDependencies) {
/******/ 			if(Object.prototype.hasOwnProperty.call(outdatedDependencies, moduleId)) {
/******/ 				var module = installedModules[moduleId];
/******/ 				var moduleOutdatedDependencies = outdatedDependencies[moduleId];
/******/ 				var callbacks = [];
/******/ 				for(var i = 0; i < moduleOutdatedDependencies.length; i++) {
/******/ 					var dependency = moduleOutdatedDependencies[i];
/******/ 					var cb = module.hot._acceptedDependencies[dependency];
/******/ 					if(callbacks.indexOf(cb) >= 0) continue;
/******/ 					callbacks.push(cb);
/******/ 				}
/******/ 				for(var i = 0; i < callbacks.length; i++) {
/******/ 					var cb = callbacks[i];
/******/ 					try {
/******/ 						cb(outdatedDependencies);
/******/ 					} catch(err) {
/******/ 						if(!error)
/******/ 							error = err;
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 	
/******/ 		// Load self accepted modules
/******/ 		for(var i = 0; i < outdatedSelfAcceptedModules.length; i++) {
/******/ 			var item = outdatedSelfAcceptedModules[i];
/******/ 			var moduleId = item.module;
/******/ 			hotCurrentParents = [moduleId];
/******/ 			try {
/******/ 				__webpack_require__(moduleId);
/******/ 			} catch(err) {
/******/ 				if(typeof item.errorHandler === "function") {
/******/ 					try {
/******/ 						item.errorHandler(err);
/******/ 					} catch(err) {
/******/ 						if(!error)
/******/ 							error = err;
/******/ 					}
/******/ 				} else if(!error)
/******/ 					error = err;
/******/ 			}
/******/ 		}
/******/ 	
/******/ 		// handle errors in accept handlers and self accepted module load
/******/ 		if(error) {
/******/ 			hotSetStatus("fail");
/******/ 			return callback(error);
/******/ 		}
/******/ 	
/******/ 		hotSetStatus("idle");
/******/ 		callback(null, outdatedModules);
/******/ 	}

/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			hot: hotCreateModule(moduleId),
/******/ 			parents: hotCurrentParents,
/******/ 			children: []
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, hotCreateRequire(moduleId));

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// __webpack_hash__
/******/ 	__webpack_require__.h = function() { return hotCurrentHash; };

/******/ 	// Load entry module and return exports
/******/ 	return hotCreateRequire(0)(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	//require("!style!css!./src/web/assets/css/style.css");
	//require("!style!css!./src/web/assets/css/ie.css");
	// require("./src/app/app.js");
	__webpack_require__(1);
	__webpack_require__(2);

	//Controller
	__webpack_require__(3);
	__webpack_require__(8);
	__webpack_require__(9);
	__webpack_require__(8);
	__webpack_require__(10);
	__webpack_require__(11);

	__webpack_require__(12);
	__webpack_require__(13);
	__webpack_require__(14);
	__webpack_require__(15);

	//services
	__webpack_require__(16);
	__webpack_require__(17);
	__webpack_require__(18);

	//Directives
	__webpack_require__(19);
	__webpack_require__(20);
	__webpack_require__(21);
	__webpack_require__(22);
	__webpack_require__(23);
	__webpack_require__(24);
	__webpack_require__(25);
	__webpack_require__(26);
	__webpack_require__(27);
	__webpack_require__(28);

	//Mobile zone
	// require("./src/web/app/mobile/MobileHome.js");
	__webpack_require__(29);
	__webpack_require__(30);
	__webpack_require__(31);
	__webpack_require__(32);
	__webpack_require__(36);
	__webpack_require__(37);
	__webpack_require__(38);
	__webpack_require__(39);

	__webpack_require__(40);
	__webpack_require__(41);
	__webpack_require__(42);
	__webpack_require__(43);

	//Libs
	__webpack_require__(44);
	__webpack_require__(45);
	__webpack_require__(46);
	__webpack_require__(154);
	// require("./src/lib/services.js");

/***/ },
/* 1 */
/***/ function(module, exports) {

	"use strict";

	window.testData = [{
	  "type": "Ads",
	  "image": {
	    "cover": "http://file4.batdongsan.com.vn/crop/745x510/2015/04/10/raCcHWvA/20150410134022-9c8d.jpg",
	    "cover_small": "http://file4.batdongsan.com.vn/crop/120x90/2015/04/10/raCcHWvA/20150410134022-9c8d.jpg",
	    "images_small": ["http://file4.batdongsan.com.vn/resize/80x60/2015/04/10/raCcHWvA/20150410134022-9c8d.jpg", "http://file4.batdongsan.com.vn/resize/80x60/2015/04/10/raCcHWvA/20150410134026-4fa1.jpg", "http://file4.batdongsan.com.vn/resize/80x60/2015/04/10/raCcHWvA/20150410134013-6bbf.jpg", "http://file4.batdongsan.com.vn/resize/80x60/2015/04/10/raCcHWvA/20150410134007-e0a3.jpg", "http://file4.batdongsan.com.vn/resize/80x60/2015/04/10/raCcHWvA/20150410133956-f528.jpg"],
	    "images": ["http://file4.batdongsan.com.vn/resize/745x510/2015/04/10/raCcHWvA/20150410134022-9c8d.jpg", "http://file4.batdongsan.com.vn/resize/745x510/2015/04/10/raCcHWvA/20150410134026-4fa1.jpg", "http://file4.batdongsan.com.vn/resize/745x510/2015/04/10/raCcHWvA/20150410134013-6bbf.jpg", "http://file4.batdongsan.com.vn/resize/745x510/2015/04/10/raCcHWvA/20150410134007-e0a3.jpg", "http://file4.batdongsan.com.vn/resize/745x510/2015/04/10/raCcHWvA/20150410133956-f528.jpg"]
	  },
	  "adsID": "BÁN BIỆT THỰ DIỆN TÍCH 142M2 Ở HOÀNG MAI, HÀ NỘI",
	  "dangBoi": {
	    "userID": "matchiakhoa@icloud.com",
	    "email": "matchiakhoa@icloud.com",
	    "name": "mất chìa khóa",
	    "phone": "0983456780"
	  },
	  "ngayDangTin": "09-04-2016",
	  "gia": 10900,
	  "dienTich": 142,
	  "place": {
	    "geo": {
	      "lat": 20.9869785197508,
	      "lon": 105.85273479259001
	    },
	    "diaChi": "Đường Nguyễn Đức Cảnh, Hoàng Mai, Hà Nội",
	    "diaChinh": {
	      "tinh": "Hà Nội",
	      "huyen": "Hoàng Mai",
	      "xa": "Đường Nguyễn Đức Cảnh"
	    },
	    "duAnFullName": null,
	    "diaChinhFullName": "Đường Nguyễn Đức Cảnh, Hoàng Mai, Hà Nội"
	  },
	  "loaiTin": 0,
	  "loaiNhaDat": 4,
	  "ten_loaiTin": "Bán",
	  "ten_loaiNhaDat": "Biệt thự, liền kề",
	  "chiTiet": "Cần bán biệt thự sân vườn 4 tầng đã hoàn thiện. Khung cửa, cầu thang, sàn nhà làm bằng gỗ hương đẹp. Phòng tắm, vệ sinh hiện đại.Nhà gồm 4 phòng ngủ, 1 phòng thờ, 1 phòng giặt phơi, 1 phòng khách, 1 phòng ăn, 1 garage, 1 hầm rươu. Sân vườn trước và sau.Diện tích:142m2Giá: 10.9 tỷ Liên hệ: 0983456780.\r\n        \r\n            Tìm kiếm theo từ khóa: \r\n        \r\n                Bán biệt thự 142m2 Hoàng Mai Hoàng Mai\r\n            \r\n                , \r\n            \r\n                Bán biệt thự 142m2 Hoàng Mai\r\n            \r\n                , \r\n            \r\n                Bán biệt thự dự án 142m2 Hoàng Mai"
	}, {
	  "type": "Ads",
	  "image": {
	    "cover": "http://file4.batdongsan.com.vn/crop/745x510/2016/03/30/20160330134616-2ece.jpg",
	    "cover_small": "http://file4.batdongsan.com.vn/crop/120x90/2016/03/30/20160330134616-2ece.jpg",
	    "images_small": ["http://file4.batdongsan.com.vn/resize/80x60/2016/03/30/20160330134616-2ece.jpg", "http://file4.batdongsan.com.vn/resize/80x60/2016/03/30/20160330134647-5245.jpg", "http://file4.batdongsan.com.vn/resize/80x60/2016/03/30/20160330134655-35e8.jpg"],
	    "images": ["http://file4.batdongsan.com.vn/resize/745x510/2016/03/30/20160330134616-2ece.jpg", "http://file4.batdongsan.com.vn/resize/745x510/2016/03/30/20160330134647-5245.jpg", "http://file4.batdongsan.com.vn/resize/745x510/2016/03/30/20160330134655-35e8.jpg"]
	  },
	  "adsID": "BÁN BIỆT THỰ, NHÀ PHỐ TẠI KĐT ECOPARK KHU VƯỜN TÙNG-VƯỜN MAI- AQUABAY GIÁ TỐT NHẤT, LH 0912.893.882",
	  "dangBoi": {
	    "userID": "loi.gpost@gmail.com",
	    "email": "loi.gpost@gmail.com",
	    "name": "nguyễn đức lợi",
	    "phone": "0974848998"
	  },
	  "ngayDangTin": "09-04-2016",
	  "gia": null,
	  "dienTich": null,
	  "place": {
	    "duAn": "Khu đô thị Ecopark",
	    "geo": {
	      "lat": 20.97170192976994,
	      "lon": 105.92677592834457
	    },
	    "diaChi": "Dự án Ecopark, Văn Giang, Hưng Yên",
	    "diaChinh": {
	      "tinh": "Hưng Yên",
	      "huyen": "Văn Giang"
	    },
	    "duAnFullName": "Khu đô thị Ecopark, Văn Giang, Hưng Yên",
	    "diaChinhFullName": "Dự án Ecopark, Văn Giang, Hưng Yên"
	  },
	  "loaiTin": 0,
	  "loaiNhaDat": 4,
	  "ten_loaiTin": "Bán",
	  "ten_loaiNhaDat": "Biệt thự, liền kề",
	  "chiTiet": "Bán biệt thự, nhà phố tại KĐT EcoPark, khu Vườn Tùng - Vườn Mai - Aquabay giá tốt nhất thị trường, LH: 0912 893 882.\r\r+ Biệt thự Vườn Tùng - Vườn Mai xây thô hoàn thiện mặt ngoài.\r1. Biệt thự song lập, diện tích cơ bản 162 m2, giá bán từ 41 tr/m2.\r2. Biệt thự đơn lập, diện tích cơ bản từ 324 m2, giá bán từ 35tr/m2.\rVà còn nhiều loại diện tích khác, căn góc, mặt lõi vườn hoa, VIP vị trí đẹp theo nhu cầu của khách hàng.\r\rLH: 0974 84 8998, để mua được giá tốt nhất.\rTư vấn nhiệt tình, trung thực.\r\r+ Biệt thự - nhà phố Aqua Bay EcoPark, biệt thự Mimosa, biệt thự Marina, nhà phố Thảo Nguyên, Thủy Nguyên.\r1. Biệt thự Mimosa & Marina diện tích 189m2 - 210m2 - 400m2 - 712m2.\r2. Nhà phố Thảo Nguyên, Thủy Nguyên diện tích: 90m2 - 100m2 - 110m2 - 180m2 - 200m2 - 250m2 - 300m2.\rVị trí đẹp, giá tốt nhất thị trường, thủ tục nhanh gọn.\rMọi thông tin chi tiết xin liên hệ:\rTel: 0912 893 882 - 0974 84 8998.\rTrân trọng!\r\n        \r\n            Tìm kiếm theo từ khóa: \r\n        \r\n                Bán biệt thự Ecopark Văn Giang\r\n            \r\n                , \r\n            \r\n                Bán biệt thự Ecopark\r\n            \r\n                , \r\n            \r\n                Bán biệt thự dự án Ecopark"
	}, {
	  "type": "Ads",
	  "image": {
	    "cover": "http://file4.batdongsan.com.vn/crop/745x510/2016/03/29/20160329100405-0146.jpg",
	    "cover_small": "http://file4.batdongsan.com.vn/crop/120x90/2016/03/29/20160329100405-0146.jpg",
	    "images_small": ["http://file4.batdongsan.com.vn/resize/80x60/2016/03/29/20160329100405-0146.jpg", "http://file4.batdongsan.com.vn/resize/80x60/2016/03/29/20160329100411-ff4d.jpg", "http://file4.batdongsan.com.vn/resize/80x60/2016/03/29/20160329100432-b663.jpg", "http://file4.batdongsan.com.vn/resize/80x60/2016/03/29/20160329100502-d46e.jpg", "http://file4.batdongsan.com.vn/resize/80x60/2016/03/29/20160329100539-1145.jpg"],
	    "images": ["http://file4.batdongsan.com.vn/resize/745x510/2016/03/29/20160329100405-0146.jpg", "http://file4.batdongsan.com.vn/resize/745x510/2016/03/29/20160329100411-ff4d.jpg", "http://file4.batdongsan.com.vn/resize/745x510/2016/03/29/20160329100432-b663.jpg", "http://file4.batdongsan.com.vn/resize/745x510/2016/03/29/20160329100502-d46e.jpg", "http://file4.batdongsan.com.vn/resize/745x510/2016/03/29/20160329100539-1145.jpg"]
	  },
	  "adsID": "BÁN CĂN HỘ GREEN STARS SUẤT NGOẠI GIAO GIÁ TỪ 24 TR/M2 - NHẬN NGAY NHÀ MỚI TƯ VẤN XEM NHÀ MIỄN PHÍ",
	  "dangBoi": {
	    "userID": "tranhhai123456@gmail.com",
	    "email": "tranhhai123456@gmail.com",
	    "name": "Lê Thị Mỹ Linh",
	    "phone": "0981023245"
	  },
	  "ngayDangTin": "09-04-2016",
	  "gia": 1444.8000000000002,
	  "dienTich": 60.2,
	  "place": {
	    "duAn": "Green Stars",
	    "geo": {
	      "lat": 21.05186800701654,
	      "lon": 105.78082561492954
	    },
	    "diaChi": "Dự án Green Stars, Đường Phạm Văn Đồng, Phường Cổ Nhuế 1, Bắc Từ Liêm, Hà Nội",
	    "diaChinh": {
	      "tinh": "Hà Nội",
	      "huyen": "Bắc Từ Liêm",
	      "xa": "Phường Cổ Nhuế 1",
	      "duong": "Đường Phạm Văn Đồng"
	    },
	    "duAnFullName": "Green Stars, Bắc Từ Liêm, Hà Nội",
	    "diaChinhFullName": "Dự án Green Stars, Đường Phạm Văn Đồng, Phường Cổ Nhuế 1, Bắc Từ Liêm, Hà Nội"
	  },
	  "soPhongNgu": 2,
	  "loaiTin": 0,
	  "loaiNhaDat": 1,
	  "ten_loaiTin": "Bán",
	  "ten_loaiNhaDat": "Căn hộ chung cư",
	  "chiTiet": "Dự án Green Stars nằm trong khu đô thị xanh, với hồ nước không gian thiên nhiên thoáng đãng, đáp ứng việc nghỉ ngơi tối ưu sau một ngày dài làm việc.Được đầu tư bởi tập đoàn Geleximco uy tín thương hiệu trên thị trường Hà Nội, cung cấp đến khách hàng một tiêu chuẩn sống đẳng cấp vượt trội mới. Đây là sự kết hợp hoàn chính giữa bất động sản nhà ở và dịch vụ khu đô thị tiện nghi cao cấp, không gian sống.Căn hộ tại Thành phố Giao lưu mang hơi thở cuộc sống mới thoải mái trong lành, cùng với sự hiện đại năng động. Đồng thời kiến tạo cho người dân với quy hoạch đồng bộ, nhà ở chất lượng, dịch vụ xứng tầm, môi trường trong lành an, an ninh đảm bảo.* Tiện ích: Trung tâm thương mại Vincom lớn nhất quận Bắc Từ Liêm tại tầng hầm dự án đưa vào sử dụng. Ngoài ra còn siêu thị Metro để cư dân mua sắm rau củ quả.Trường liên cấp: Trường mẫu giáo, tiểu học, cấp II Phạm Văn Đồng, cấp III.* Gần các trường đại học như đại học Ngoại Ngữ, ĐH Quốc Gia, Học Viện Báo Chí, Sư Phạm, gần bệnh viện E...* Diện tích phù hợp, tận dụng triệt để không gian sống:- 2 phòng ngủ: 60.2m2 - 66,8m2 (1 căn 60.2m2, 5 căn 66.8m2).- 3 phòng ngủ: Căn thường 102m2 (tặng 15 triệu), căn góc 102m2 (tặng 5 triệu).Tòa A3 ký hợp đồng trực tiếp chủ đầu tư!Các căn ngoại giao Bộ Công An giá từ 24,2 tr đến 27,5 tr/m2.Nhận nhà ngay!Giá từ: Từ 24tr - 28 triệu/m2.Dự án được Ngân hàng BIDV, Vietinbank, PV Bank, MB, VP Bank... Hỗ trợ tới 70% giá trị căn hộ, thủ tục đơn giản nhanh chóng.Để lựa chọn căn hộ đẹp và ưng ý nhất cũng như đi xem khu đô thị quý khách vui lòng gọi theo số: – 0989 62 93 62.1. Đóng 30% ký HĐMB. Trong vòng 5 đến 7 ngày khi đặt cọc mua căn hộ.2. Trước 10/03/2016 đóng 40%.3. Nhận bàn giao 25% + PBT.4. Bàn giao sổ thanh toán 5% còn lại.Quý khách có thể đóng đủ 95% để nhận nhà sớm hơn.Xem nhà ngay khi có yêu cầu!Hotline: 0989 62 93 62.\r\n        \r\n            Tìm kiếm theo từ khóa: \r\n        \r\n                Bán chung cư Tòa A3 Green Stars\r\n            \r\n                , \r\n            \r\n                Bán căn hộ Green Stars Bắc Từ Liêm\r\n            \r\n                , \r\n            \r\n                Bán căn hộ Green Stars\r\n            \r\n                , \r\n            \r\n                Bán chung cư Tòa A3 Green Stars\r\n            \r\n                , \r\n            \r\n                Bán căn hộ Green Stars Bắc Từ Liêm\r\n            \r\n                , \r\n            \r\n                Bán căn hộ Green Stars"
	}, {
	  "title": "3 ĐIỀU KHÁCH HÀNG CẦN PHẢI LƯU TÂM KHI CHỌN MUA BIỆT THỰ VINHOMES RIVERSIDE LONG BIÊN",
	  "images_small": ["http://file4.batdongsan.com.vn/resize/80x60/2016/04/02/20160402112917-e2aa.jpg", "http://file4.batdongsan.com.vn/resize/80x60/2016/04/02/20160402112923-efb3.jpg", "http://file4.batdongsan.com.vn/resize/80x60/2016/04/02/20160402112928-16a8.jpg", "http://file4.batdongsan.com.vn/resize/80x60/2016/04/02/20160402112935-0433.jpg"],
	  "price_value": "Thỏa",
	  "price_unit": "thuận",
	  "dienTich": null,
	  "area_full": "Không xác định",
	  "loc": "Bán nhà biệt thự, liền kề tại Vinhomes Riverside - Quận Long Biên - Hà Nội",
	  "hdLat": 21.0464653799386,
	  "hdLong": 105.91568207740806,
	  "duAn": "Vinhomes Riverside",
	  "diaChi": "Dự án Vinhomes Riverside, Long Biên, Hà Nội",
	  "maSo": "9043877",
	  "loaiTinRao": "Bán nhà biệt thự, liền kề (nhà trong dự án quy hoạch)",
	  "ngayDangTin": "02-04-2016",
	  "ngayHetHan": "12-04-2016",
	  "soTang_full": "3\r\n                                    (tầng)",
	  "soPhongNgu_full": "4(phòng)",
	  "soPhongTam_full": "4",
	  "tenLienLac": "tungmanh",
	  "cust_phone": "0966002151",
	  "cust_mobile": "0966002151",
	  "cust_email": "tungmanhvinhomes@gmail.com",
	  "cust_dangBoi": "tungmanh",
	  "loaiTin": 0,
	  "loaiNhaDat": 4,
	  "ten_loaiTin": "Bán",
	  "ten_loaiNhaDat": "Bán biệt thự, liền kề",
	  "soPhongNgu": 4,
	  "soTang": 3,
	  "soPhongTam": 4,
	  "gia": null,
	  "place": {
	    "duAn": "Vinhomes Riverside",
	    "geo": {
	      "lat": 21.0464653799386,
	      "lon": 105.91568207740806
	    },
	    "diaChi": "Dự án Vinhomes Riverside, Long Biên, Hà Nội",
	    "diaChinh": {
	      "tinh": "Hà Nội",
	      "huyen": "Long Biên"
	    },
	    "duAnFullName": "Vinhomes Riverside, Long Biên, Hà Nội"
	  },
	  "type": "Ads",
	  "cover": "http://file4.batdongsan.com.vn/crop/120x90/2016/04/02/20160402112917-e2aa.jpg"
	}];

	window.hot_ads_cat = [{
	  name: "Biệt thự",
	  location: "Hồ Tây",
	  list: window.testData
	}, {
	  name: "Chung cư",
	  location: "Thanh Xuân",
	  list: window.testData
	}];

/***/ },
/* 2 */
/***/ function(module, exports) {

	'use strict';

	window.RewayClientUtils = function ($) {
		'use strict';

		var div_icon = {
			type: 'div',
			iconSize: [230, 0],
			html: 'Using <strong>Bold text as an icon</strong>: Lisbon',
			popupAnchor: [0, 0]
		};
		return {
			createPlaceAutoComplete: function createPlaceAutoComplete(callback, inputTagId, map, source) {
				var sourceP = function sourceP(request, response) {
					var options = {
						input: request.term,
						//types: ['(cities)'],
						//region: 'US',
						componentRestrictions: { country: "vn" }
					};
					function callback(predictions, status) {
						var results = [];
						if (predictions) {
							for (var i = 0, prediction; prediction = predictions[i]; i++) {
								results.push({
									description: prediction.description,
									types: prediction.types,
									place_id: prediction.place_id,
									class: "iconLocation gray"
								});
							}
						}
						response(results);
					}
					var service = new google.maps.places.AutocompleteService();
					service.getPlacePredictions(options, callback);

					var results = [];
				};
				if (source) sourceP = source;
				$("#" + inputTagId).autocomplete({
					minLength: 0,
					source: sourceP,
					focus: function focus(event, ui) {
						$("#" + inputTagId).val(ui.item.description);
						return false;
					},
					select: function select(event, ui) {
						$("#" + inputTagId).val(ui.item.description);
						// $( "#project-id" ).val( ui.item.value );
						// $( "#project-description" ).html( ui.item.desc );
						// $( "#project-icon" ).attr( "src", "images/" + ui.item.icon );
						//alert(ui.item.place_id);
						//var map = $scope.map.control.getGMap();
						var service = new google.maps.places.PlacesService(map);

						service.getDetails({
							placeId: ui.item.place_id
						}, function (place, status) {
							if (status === google.maps.places.PlacesServiceStatus.OK && callback) {
								callback(place);
							}
						});
						return false;
					}
				}).autocomplete("instance")._renderItem = function (ul, item) {
					ul.addClass('relandAutoOne');
					return $("<li class='googlemap'>").append("<p><i class='" + item.class + "'></i>" + item.description + "<span>" + window.RewayPlaceUtil.getTypeName(item) + "</span></p>")
					// .append( "<span>" + item.description +  "<span style='float: right;'>" + window.RewayPlaceUtil.getTypeName(item) + "</span></span>" )
					.appendTo(ul);
				};
			},
			getBoundsAtLatLngWithZoom: function getBoundsAtLatLngWithZoom(maps, map, center, zoom) {},
			isSameDate: function isSameDate(date1, date2) {
				if (date1 && date2) {
					return date1.getYear() == date2.getYear() && date1.getMonth() == date2.getMonth() && date1.getDate() == date2.getDate();
				}
				return false;
			},
			addChatMessage: function addChatMessage(chatbox, msg) {
				var messages = chatbox.messages;
				if (messages.length > 0) {
					var lastDate = messages[messages.length - 1].date;
					msg.date = new Date(msg.date);
					msg.showDate = lastDate && msg.date && !this.isSameDate(lastDate, msg.date);
				} else {
					msg.showDate = true;
					msg.date = new Date(msg.date);
					msg.dateDisplay = this.formatDateWeekDay(msg.date);
				}
				messages.push(msg);
			},
			formatDateWeekDay: function formatDateWeekDay(date) {
				if (date) {
					var days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
					var months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
					var day = days[date.getDay()];
					var month = months[date.getMonth()];
					return day + " " + month + " " + date.getFullYear();
				}
				return "";
			},
			placeAutoComplete: function placeAutoComplete(callback, inputTagId, source) {
				var sourceP = function sourceP(request, response) {
					function callback(predictions, status) {
						var results = [];
						if (predictions) {
							for (var i = 0, prediction; prediction = predictions[i]; i++) {
								results.push({
									description: prediction.description,
									types: prediction.types,
									place_id: prediction.place_id,
									class: "iconLocation gray"
								});
							}
						}
						response(results);
					}
					var service = new google.maps.places.AutocompleteService();
					service.getPlacePredictions(options, callback);

					api / place / autocomplete;

					var results = [];
				};
				if (source) sourceP = source;
				$("#" + inputTagId).autocomplete({
					minLength: 0,
					source: sourceP,
					focus: function focus(event, ui) {
						$("#" + inputTagId).val(ui.item.description);
						return false;
					},
					select: function select(event, ui) {
						$("#" + inputTagId).val(ui.item.description);
						// $( "#project-id" ).val( ui.item.value );
						// $( "#project-description" ).html( ui.item.desc );
						// $( "#project-icon" ).attr( "src", "images/" + ui.item.icon );
						//alert(ui.item.place_id);
						//var map = $scope.map.control.getGMap();
						// var service = new google.maps.places.PlacesService(map);

						// service.getDetails({
						// 	placeId: ui.item.place_id
						// }, function(place, status) {
						// 	if (status === google.maps.places.PlacesServiceStatus.OK && callback) {
						// 		callback(place);
						// 	}
						// });
						return false;
					}
				}).autocomplete("instance")._renderItem = function (ul, item) {
					ul.addClass('relandAutoOne');
					return $("<li class='googlemap'>").append("<p><i class='" + item.class + "'></i>" + item.description + "<span>" + window.RewayPlaceUtil.getTypeName(item) + "</span></p>")
					// .append( "<span>" + item.description +  "<span style='float: right;'>" + window.RewayPlaceUtil.getTypeName(item) + "</span></span>" )
					.appendTo(ul);
				};
			}
		};
	}(jQuery);

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	(function () {
	  'use strict';

	  window.initData = {};

	  var postal = __webpack_require__(4);

	  var tap = postal.addWireTap(function (d, e) {
	    console.log(JSON.stringify(e));
	  });

	  var _ = __webpack_require__(5);

	  var bds = angular.module('bds', ['ngCookies', 'ui.router', 'nemLogging', 'ngMap', 'ngMessages', 'ngStorage', 'ngFileUpload', 'btford.socket-io', 'angular-jwt', 'infinite-scroll', 'ngDialog']).run(['jwtHelper', '$rootScope', '$localStorage', '$cookieStore', '$http', '$compile', 'HouseService', function (jwtHelper, $rootScope, $localStorage, $cookieStore, $http, $compile, HouseService) {
	    $rootScope.globals = $cookieStore.get('globals') || {};
	    //$rootScope.center = "Hanoi Vietnam";
	    $rootScope.center = {
	      lat: 16.0439,
	      lng: 108.199
	    };
	    //alert($localStorage.relandToken);

	    var decodedToken = {};
	    $rootScope.loginbox = {};
	    $rootScope.chatBoxes = [];
	    $rootScope.menuitems = window.RewayListValue.menu;
	    $rootScope.user = {
	      userID: undefined,
	      adsLikes: [],
	      lastSearch: null,
	      autoSearch: false
	    };
	    $rootScope.pageSize = 25;

	    if ($localStorage.relandToken) {
	      decodedToken = jwtHelper.decodeToken($localStorage.relandToken);
	      HouseService.profile({ userID: decodedToken.userID }).then(function (res) {
	        //$rootScope.user.userID = decodedToken.userID;
	        if (res.data.success == true)
	          //Nhannc edit, Hung check lai
	          //$rootScope.user = res.data.user;
	          $rootScope.user.userName = res.data.user.name;
	        $rootScope.user.userID = res.data.user.id;
	        $rootScope.user.userAvatar = res.data.user.avatar;
	        $rootScope.user.adsLikes = res.data.user.adsLikes;
	        $rootScope.user.userEmail = res.data.user.email;
	        $rootScope.user.phone = res.data.user.phone;
	        //LastSearch may use in storega
	        if ($localStorage.lastSearch) {
	          $rootScope.user.lastSearch = $localStorage.lastSearch;
	        }
	        if (res.data.user.fullName) $rootScope.user.fullName = res.data.user.fullName;
	        $rootScope.user.lastViewAds = res.data.user.lastViewAds;
	        $rootScope.user.saveSearch = res.data.user.saveSearch;
	      });
	    }

	    // $rootScope.searchData = {
	    //   giaBETWEEN: [0,9999999999999],
	    //   "loaiTin": 0,
	    //   "loaiNhaDat": 0,
	    //   "loaiNhaDats": [],
	    //   "soPhongNguGREATER": 0,
	    //   "soPhongTamGREATER": 0,
	    //   "soTangGREATER": 0,
	    //   "dienTichBETWEEN": [0,99999999999999],
	    //   "huongNha": 0,
	    //   "huongNhas": [],
	    //   "radiusInKm": 2,
	    //   "ngayDaDang": undefined,
	    //   "userID": $rootScope.user.userID,
	    //   //"geoBox": [  vm.map.getBounds().H.j,  vm.map.getBounds().j.j ,vm.map.getBounds().H.H, vm.map.getBounds().j.H],
	    //   "limit": $rootScope.pageSize,
	    //   "orderBy": 0,
	    //   "pageNo": 1
	    // }

	    $rootScope.searchData = {
	      "placeId": undefined,
	      "loaiTin": 0,
	      "giaBETWEEN": [0, 999999999],
	      "dienTichBETWEEN": [0, 99999999999],
	      "ngayDangTinGREATER": "19810101",
	      "viewport": {
	        "northeast": {
	          "lat": 23.393395,
	          "lon": 109.4689483
	        },
	        "southwest": {
	          "lat": 8.412729499999999,
	          "lon": 102.14441
	        }
	      },
	      // "viewport" : {
	      //   "northeast" : {
	      //     "lat" : 21.385027,
	      //     "lon" : 106.0198859
	      //   },
	      //   "southwest" : {
	      //     "lat" : 20.562323,
	      //     "lon" : 105.2854659
	      //   }
	      // },
	      "diaChinh": {
	        "tinhKhongDau": "ha-noi",
	        "huyenKhongDau": "cau-giay"
	      },
	      // circle : {
	      //   center : PointModel,
	      //   radius : Joi.number()
	      // },
	      "orderBy": { "name": "ngayDangTin", "type": "ASC" },
	      "limit": 25,
	      "pageNo": 1,
	      "isIncludeCountInResponse": false,
	      "updateLastSearch": true
	    };
	    //mobile login box controll

	    $rootScope.ENTER_EMAIL = 1;
	    $rootScope.ENTER_PASSWORD = 2;
	    $rootScope.LOGGED_IN = 3;
	    $rootScope.FORGOT_PASSWORD = 4;
	    $rootScope.SENT_PASSWORD = 5;
	    $rootScope.RESET_PASSWORD = 6;

	    $rootScope.loginbox.state = $rootScope.ENTER_EMAIL;

	    $rootScope.currentLocation = {
	      lat: undefined,
	      lon: undefined
	    };
	    $rootScope.lastSearch = undefined;

	    $rootScope.getLastSearch = function (localStorage) {
	      if (localStorage && localStorage.lastSearch && localStorage.lastSearch.length > 0) {
	        var clone = _.cloneDeep(localStorage.lastSearch[localStorage.lastSearch.length - 1]);
	        return clone;
	      }
	      return undefined;
	    };
	    $rootScope.getAllLastSearch = function (localStorage) {
	      if (localStorage) {
	        return localStorage.lastSearch;
	      }
	    };

	    $rootScope.addLastSearch = function (localStorage, oLastSearch) {
	      var lastSearch = _.cloneDeep(oLastSearch);
	      if (localStorage) {
	        if (!localStorage.lastSearch || localStorage.lastSearch.length == 0) {
	          localStorage.lastSearch = [];
	        } else if (localStorage.lastSearch.length == 2) {
	          localStorage.lastSearch = _(localStorage.lastSearch).slice(1, localStorage.lastSearch.length).value();
	        }
	        localStorage.lastSearch.push({
	          time: new Date().toString('yyyyMMdd HH:mm:ss'),
	          query: lastSearch
	        });

	        $rootScope.$bus.publish({
	          channel: 'search',
	          topic: 'search',
	          data: $rootScope.getLastSearch(localStorage)
	        });
	      }
	    };

	    $rootScope.signin = function () {};
	    //end mobild login box controll

	    $rootScope.alreadyLike = function (adsID) {
	      return _.indexOf($rootScope.user.adsLikes, adsID) >= 0;
	    };

	    // show notify
	    $rootScope.showNotify = function (text, box, item, itemtext) {
	      if (item !== null || item != "") $(item).html(itemtext);
	      if (text !== null || text != "") $(".notifyBox").html(text);
	      if (box !== null || box != "") {
	        $(box).fadeIn(100).delay(1800).slideUp(150);
	      } else {
	        $(".notifyBox").fadeIn(100).delay(900).slideUp(150);
	      }
	    };

	    $rootScope.showDangNhapForLike = function () {};

	    $rootScope.isLoggedIn = function () {

	      if ($rootScope.user.userID) return true;
	      return false;
	    };

	    $rootScope.$on('$stateChangeSuccess', function (ev, to, toParams, from, fromParams) {
	      $rootScope.lastState = from;
	      $rootScope.lastStateParams = fromParams;
	    });

	    $rootScope.chat_visible = true;
	    $rootScope.showChat = function (user, scope) {
	      if ($rootScope.chatBoxes.hasOwnProperty(user.email)) {} else {
	        $rootScope.chatBoxes[user.email] = user;
	        var divElement = angular.element(document.querySelector('#chat-container'));
	        var appendHtml = $compile('<bds-chat visible="$root.chat_visible" useremail="email"></bds-chat>')(scope);
	        divElement.append(appendHtml);
	      }

	      /*if(true || $rootScope.user.userName){
	        $rootScope.chat_visible = true;
	        $rootScope.chat_user = user;
	        }
	      else{
	        alert(window.RewayConst.MSG.LOGIN_REQUIRED);
	      }*/
	    };
	    $rootScope.closeChat = function () {
	      $rootScope.chat_visible = false;
	    };

	    $rootScope.postPageRendered = function () {
	      // alert('aaa');
	      //window.DesignCommon.adjustPage();
	    };

	    $rootScope.suggestedSearch = [{
	      description: "Vị trí hiện tại",
	      types: "1",
	      place_id: "111",
	      class: "iconLocation gray"
	    }];

	    $rootScope.signout = function () {
	      $rootScope.loginbox.resetLoginBox();
	    };
	    $rootScope.bodyClass = "page-home";

	    $rootScope.$on('$stateChangeStart', function (event, toState, toParams, fromState, fromParams, options) {
	      //alert(toState.name);
	      // if (toState.name === 'msearch') {
	      //   if(toParams.viewMode == "list"){
	      //     toState.templateUrl = '/web/mobile/list.html'; 
	      //   }else{
	      //     toState.templateUrl = '/web/mobile/maps.html';
	      //   }
	      // }
	      //else{
	      //   if(!toState.templateUrl)ss
	      //     toState.templateUrl = '/web/'+toState.name+'.html';
	      //   //toState.templateUrl = '/web/marker.html';
	      // }
	      if (!toState.templateUrl) toState.templateUrl = '/web/' + toState.name + '.html';
	      //if (toState.name === 'list') {
	      //  alert(toState);

	      //}
	    });
	    $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {
	      console.log("changed to state " + toState);
	    });

	    $rootScope.getGoogleLocation = function (val) {
	      return $http.get('https://maps.googleapis.com/maps/api/geocode/json', {
	        params: {
	          address: val,
	          //language: 'en',
	          key: 'AIzaSyAnioOM0qiWwUoCz8hNS8B2YuzKiYYaDdU',
	          //types: 'gecodes,cities,places',
	          components: 'country:vn',
	          sensor: false
	        }
	      }).then(function (response) {
	        /*return response.data.results.map(function(item){
	          return item;
	        });*/
	        return response.data.results;
	      });
	      // return $http.get('https://maps.googleapis.com/maps/api/place/autocomplete/json', {
	      //   params: {
	      //     input: val,
	      //     language: 'en',
	      //     key: 'AIzaSyAnioOM0qiWwUoCz8hNS8B2YuzKiYYaDdU',
	      //     //types: 'gecodes,cities',
	      //     components: 'country:vn',
	      //     sensor: false
	      //   }
	      // }).then(function(response){
	      //   /*return response.data.results.map(function(item){
	      //     return item;
	      //   });*/
	      //   return response.data.results;
	      // });
	    };
	    $rootScope.getGoogleLocationById = function (val) {
	      return $http.get('https://maps.googleapis.com/maps/api/place/details/json', {
	        params: {
	          placeid: val,
	          // language: 'en',
	          key: 'AIzaSyAnioOM0qiWwUoCz8hNS8B2YuzKiYYaDdU'
	          //types: 'gecodes,cities',
	          // components: 'country:vn',
	          // sensor: false
	        }
	      }).then(function (response) {
	        /*return response.data.results.map(function(item){
	          return item;
	        });*/
	        return response.data.result;
	      });
	    };
	  }]);
	  bds.config(function ($provide, $stateProvider, $urlRouterProvider, $locationProvider, $interpolateProvider, $httpProvider) {
	    // For any unmatched url, send to /route1
	    $locationProvider.html5Mode(true);

	    $provide.decorator('$rootScope', ['$delegate', '$window', function ($delegate, $window) {
	      Object.defineProperty($delegate.constructor.prototype, '$bus', {
	        value: postal,
	        enumerable: false
	      });
	      return $delegate;
	    }]);

	    $httpProvider.interceptors.push(['$q', '$location', '$localStorage', function ($q, $location, $localStorage) {
	      return {
	        'request': function request(config) {
	          config.headers = config.headers || {};
	          if ($localStorage.relandToken) {
	            config.headers.Authorization = 'Bearer ' + $localStorage.relandToken;
	          }
	          return config;
	        },
	        'responseError': function responseError(response) {
	          if (response.status === 401 || response.status === 403) {
	            //$location.path('/signin');
	            alert("Đăng nhập hệ thống để sử dụng tính năng này");
	          }
	          return $q.reject(response);
	        }
	      };
	    }]);

	    //$urlRouterProvider.otherwise("/web/list.html")
	    //alert('sss');
	    // $interpolateProvider.startSymbol('{[{');
	    // $interpolateProvider.endSymbol('}]}');

	    /*uiGmapGoogleMapApiProvider.configure({
	         //    key: 'your api key',
	         v: '3.20', //defaults to latest 3.X anyhow
	         libraries: 'places,geometry,visualization' // Required for SearchBox.
	     });*/
	    $stateProvider.state('package', {
	      url: "/hotlist/:packageID/:viewMode",
	      templateUrl: "/web/search.html",
	      controller: "SearchCtrl",
	      controllerAs: 'mc',
	      resolve: {
	        title: function title(HouseService, $stateParams, $rootScope) {
	          var result = HouseService.getAllAds();
	          //var result = $rootScope.getGoogleLocationById($stateParams.place);
	          //alert($state.params.place);
	          //var result = HouseService.findAdsSpatial($stateParams.place);
	          result.then(function (data) {
	            window.initData = data.data;
	          });
	          return result;
	        }
	      },
	      data: {}
	      //bodyClass: "page-search",
	      //abc: title

	      // ,
	      // controller: function($scope,sellingHouses){
	      //   $scope.sellingHouses = sellingHouses;
	      //   //alert(sellingHouses.length);
	      // }
	    }).state('searchdc', {
	      url: "/searchdc/:tinh/:huyen/:xa/:loaiTin/:loaiNhaDat/:viewMode",
	      templateUrl: "/web/search.html",
	      controller: "SearchCtrl",
	      controllerAs: 'mc',
	      resolve: {
	        title: function title(HouseService, $stateParams, $rootScope) {
	          var result = HouseService.getAllAds();
	          //var result = $rootScope.getGoogleLocationById($stateParams.place);
	          //alert($state.params.place);
	          //var result = HouseService.findAdsSpatial($stateParams.place);
	          result.then(function (data) {
	            window.initData = data.data;
	          });
	          return result;
	        }
	      },
	      data: {}
	      //bodyClass: "page-search",
	      //abc: title

	      // ,
	      // controller: function($scope,sellingHouses){
	      //   $scope.sellingHouses = sellingHouses;
	      //   //alert(sellingHouses.length);
	      // }
	    }).state('search', {
	      url: "/search/:place/:loaiTin/:loaiNhaDat/:viewMode",
	      // templateUrl: "/web/search.tpl.html",
	      controller: "SearchCtrl",
	      controllerAs: 'mc',
	      resolve: {
	        title: function title(HouseService, $stateParams, $rootScope) {
	          var result = HouseService.getAllAds();
	          //var result = $rootScope.getGoogleLocationById($stateParams.place);
	          //alert($state.params.place);
	          //var result = HouseService.findAdsSpatial($stateParams.place);
	          result.then(function (data) {
	            window.initData = data.data;
	          });
	          return result;
	        }
	      },
	      data: {}
	      //bodyClass: "page-search",
	      //abc: title

	      // ,
	      // controller: function($scope,sellingHouses){
	      //   $scope.sellingHouses = sellingHouses;
	      //   //alert(sellingHouses.length);
	      // }
	    }).state('home', {
	      url: "/index.html",
	      templateUrl: "/web/index_content.html",
	      controller: "MainCtrl",
	      controllerAs: 'mc',
	      resolve: {
	        title: function title(HouseService) {
	          //alert(HouseService);
	          //return HouseService.getAllAds();
	          /*.then(function(data){
	            return data.data;
	          });*/
	          //return $http.get("http://www.dantri.com");
	          window.initData = [{ a: 'a' }, { b: 'b' }];
	        }
	      },
	      data: {
	        bodyClass: "page-home",
	        xyz: [{ a: 'b' }]
	      }
	    }).state('detail', {
	      url: "/detail/:adsID",
	      //templateUrl: "/web/index_content.html",
	      controller: "DetailCtrl",
	      controllerAs: 'dt',
	      data: {
	        bodyClass: "page-detail"
	      }
	    }).state('news', {
	      url: "/news/:rootCatId",
	      controller: "NewsCtrl",
	      controllerAs: 'nc',
	      data: {}
	    }).state('newsDetail', {
	      url: "/newsDetail/:rootCatId/:articleId",
	      controller: "NewsDetailCtrl",
	      controllerAs: 'ndc',
	      data: {}
	    }).state('resetPassword', {
	      url: "/resetPassword",
	      templateUrl: "/web/index_content.html",
	      controller: "MainCtrl",
	      controllerAs: 'mc',
	      data: {
	        bodyClass: "page-detail"
	      }
	    }).state('profile', {
	      url: "/profile/:userID",
	      templateUrl: "/web/profile.tpl.html",
	      controller: "ProfileCtrl",
	      controllerAs: 'pc',
	      data: {
	        bodyClass: "page-detail"
	      }
	    }).state('dangtin', {
	      url: "/dangtin",
	      templateUrl: "/web/dang-tin.html",
	      controller: "DangTinCtrl",
	      controllerAs: 'dt',
	      data: {
	        bodyClass: "page-detail"
	      }
	    }).state('topview', {
	      url: "/topview/:tinhKhongDau/:huyenKhongDau/:ngayDaDang",
	      templateUrl: "/web/search.html",
	      controller: "SearchCtrl",
	      controllerAs: 'mc',
	      resolve: {
	        title: function title(HouseService, $stateParams, $rootScope) {
	          var result = HouseService.getAllAds();
	          //var result = $rootScope.getGoogleLocationById($stateParams.place);
	          //alert($state.params.place);
	          //var result = HouseService.findAdsSpatial($stateParams.place);
	          result.then(function (data) {
	            window.initData = data.data;
	          });
	          return result;
	        }
	      }
	    }).state('mhome', {
	      url: "/mobile/index.html",
	      templateUrl: "/web/mobile/index_content.html",
	      controller: "MobileHomeCtrl",
	      controllerAs: 'mhc'
	    }).state('msearch', {
	      // url: "/mobile/search/:place/:loaiTin/:loaiNhaDat/:viewMode",
	      url: "/mobile/search/:placeId/:loaiTin/:loaiNhaDat/:viewMode",
	      templateUrl: "/web/mobile/search.html",
	      controller: "MobileSearchCtrl",
	      params: { query: null },
	      controllerAs: 'msc'
	    }).state('mdetail', {
	      url: "/mobile/detail/:adsID",
	      templateUrl: "/web/mobile/detail.html",
	      controller: "MobileDetailCtrl",
	      controllerAs: 'mdt'
	    }).state('mpost', {
	      url: "/mobile/post/:adsID",
	      templateUrl: "/web/mobile/post.html",
	      controller: "MobilePostCtrl",
	      controllerAs: 'mpc'
	    }).state('madsMgmt', {
	      url: "/mobile/adsMgmt",
	      templateUrl: "/web/mobile/adsMgmt.html",
	      controller: "MobileAdsMgmtCtrl",
	      controllerAs: 'mamc'
	    }).state('mchats', {
	      url: "/mobile/chats",
	      templateUrl: "/web/mobile/chats.html",
	      controller: "MobileChatCtrl",
	      controllerAs: 'mcc'
	    }).state('mchatDetail', {
	      url: "/mobile/chatDetail/:adsID/:toUserID",
	      templateUrl: "/web/mobile/chatDetail.html",
	      controller: "MobileChatDetailCtrl",
	      controllerAs: 'mcdc'
	    }).state('mlistMore', {
	      url: "/mobile/more",
	      templateUrl: "/web/mobile/listMoreAds.html",
	      controller: "MobileListAdsCtrl",
	      controllerAs: 'mlm',
	      params: { query: null }
	    });
	  });
	  bds.factory('socket', function (socketFactory) {
	    // var socket = io.connect("http://localhost:5000");
	    var socket = io.connect();
	    //socket.forward('error');
	    // socket.connect();
	    return socket;
	  });
	})();

	var hello = function hello() {
	  alert('hello buddy! how are you today?');
	};

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * postal - Pub/Sub library providing wildcard subscriptions, complex message handling, etc.  Works server and client-side.
	 * Author: Jim Cowart (http://ifandelse.com)
	 * Version: v2.0.0
	 * Url: http://github.com/postaljs/postal.js
	 * License(s): MIT
	 */

	( function( root, factory ) {
		
		if ( true ) {
			// AMD. Register as an anonymous module.
			!(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(5) ], __WEBPACK_AMD_DEFINE_RESULT__ = function( _ ) {
				return factory( _, root );
			}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		
		} else if ( typeof module === "object" && module.exports ) {
			// Node, or CommonJS-Like environments
			module.exports = factory( require( "lodash" ), this );
		} else {
			// Browser globals
			root.postal = factory( root._, root );
		}
	}( this, function( _, global, undefined ) {
		var prevPostal = global && global.postal;
		var _defaultConfig = {
			DEFAULT_CHANNEL: "/",
			SYSTEM_CHANNEL: "postal",
			enableSystemMessages: true,
			cacheKeyDelimiter: "|",
			autoCompactResolver: false
		};
		var postal = {
			configuration: _.extend( {}, _defaultConfig )
		};
		var _config = postal.configuration;

		

	var ChannelDefinition = function( channelName, bus ) {
		this.bus = bus;
		this.channel = channelName || _config.DEFAULT_CHANNEL;
	};

	ChannelDefinition.prototype.subscribe = function() {
		return this.bus.subscribe( {
			channel: this.channel,
			topic: ( arguments.length === 1 ? arguments[ 0 ].topic : arguments[ 0 ] ),
			callback: ( arguments.length === 1 ? arguments[ 0 ].callback : arguments[ 1 ] )
		} );
	};

	/*
	    publish( envelope [, callback ] );
	    publish( topic, data [, callback ] );
	*/
	ChannelDefinition.prototype.publish = function() {
		var envelope = {};
		var callback;
		if ( typeof arguments[ 0 ] === "string" ) {
			envelope.topic = arguments[ 0 ];
			envelope.data = arguments[ 1 ];
			callback = arguments[ 2 ];
		} else {
			envelope = arguments[ 0 ];
			callback = arguments[ 1 ];
		}
		if ( typeof envelope !== "object" ) {
			throw new Error( "The first argument to ChannelDefinition.publish should be either an envelope object or a string topic." );
		}
		envelope.channel = this.channel;
		this.bus.publish( envelope, callback );
	};

		
	var SubscriptionDefinition = function( channel, topic, callback ) {
		if ( arguments.length !== 3 ) {
			throw new Error( "You must provide a channel, topic and callback when creating a SubscriptionDefinition instance." );
		}
		if ( topic.length === 0 ) {
			throw new Error( "Topics cannot be empty" );
		}
		this.channel = channel;
		this.topic = topic;
		this.callback = callback;
		this.pipeline = [];
		this.cacheKeys = [];
		this._context = undefined;
	};

	var ConsecutiveDistinctPredicate = function() {
		var previous;
		return function( data ) {
			var eq = false;
			if ( typeof data === "string" ) {
				eq = data === previous;
				previous = data;
			} else {
				eq = _.isEqual( data, previous );
				previous = _.extend( {}, data );
			}
			return !eq;
		};
	};

	var DistinctPredicate = function DistinctPredicateFactory() {
		var previous = [];
		return function DistinctPredicate( data ) {
			var isDistinct = !_.some( previous, function( p ) {
				return _.isEqual( data, p );
			} );
			if ( isDistinct ) {
				previous.push( data );
			}
			return isDistinct;
		};
	};

	SubscriptionDefinition.prototype = {

		"catch": function( errorHandler ) {
			var original = this.callback;
			var safeCallback = function() {
				try {
					original.apply( this, arguments );
				} catch ( err ) {
					errorHandler( err, arguments[ 0 ] );
				}
			};
			this.callback = safeCallback;
			return this;
		},

		defer: function defer() {
			return this.delay( 0 );
		},

		disposeAfter: function disposeAfter( maxCalls ) {
			if ( typeof maxCalls !== "number" || maxCalls <= 0 ) {
				throw new Error( "The value provided to disposeAfter (maxCalls) must be a number greater than zero." );
			}
			var dispose = _.after( maxCalls, this.unsubscribe.bind( this ) );
			this.pipeline.push( function( data, env, next ) {
				next( data, env );
				dispose();
			} );
			return this;
		},

		distinct: function distinct() {
			return this.constraint( new DistinctPredicate() );
		},

		distinctUntilChanged: function distinctUntilChanged() {
			return this.constraint( new ConsecutiveDistinctPredicate() );
		},

		invokeSubscriber: function invokeSubscriber( data, env ) {
			if ( !this.inactive ) {
				var self = this;
				var pipeline = self.pipeline;
				var len = pipeline.length;
				var context = self._context;
				var idx = -1;
				var invoked = false;
				if ( !len ) {
					self.callback.call( context, data, env );
					invoked = true;
				} else {
					pipeline = pipeline.concat( [ self.callback ] );
					var step = function step( d, e ) {
						idx += 1;
						if ( idx < len ) {
							pipeline[ idx ].call( context, d, e, step );
						} else {
							self.callback.call( context, d, e );
							invoked = true;
						}
					};
					step( data, env, 0 );
				}
				return invoked;
			}
		},

		logError: function logError() {
			
			if ( console ) {
				var report;
				if ( console.warn ) {
					report = console.warn;
				} else {
					report = console.log;
				}
				this.catch( report );
			}
			return this;
		},

		once: function once() {
			return this.disposeAfter( 1 );
		},

		subscribe: function subscribe( callback ) {
			this.callback = callback;
			return this;
		},

		unsubscribe: function unsubscribe() {
			
			if ( !this.inactive ) {
				postal.unsubscribe( this );
			}
		},

		constraint: function constraint( predicate ) {
			if ( typeof predicate !== "function" ) {
				throw new Error( "Predicate constraint must be a function" );
			}
			this.pipeline.push( function( data, env, next ) {
				if ( predicate.call( this, data, env ) ) {
					next( data, env );
				}
			} );
			return this;
		},

		constraints: function constraints( predicates ) {
			var self = this;
			
			_.each( predicates, function( predicate ) {
				self.constraint( predicate );
			} );
			return self;
		},

		context: function contextSetter( context ) {
			this._context = context;
			return this;
		},

		debounce: function debounce( milliseconds, immediate ) {
			if ( typeof milliseconds !== "number" ) {
				throw new Error( "Milliseconds must be a number" );
			}

			var options = {};

			if ( !!immediate === true ) { 
				options.leading = true;
				options.trailing = false;
			}

			this.pipeline.push(
				_.debounce( function( data, env, next ) {
					next( data, env );
				},
					milliseconds,
					options
				)
			);
			return this;
		},

		delay: function delay( milliseconds ) {
			if ( typeof milliseconds !== "number" ) {
				throw new Error( "Milliseconds must be a number" );
			}
			var self = this;
			self.pipeline.push( function( data, env, next ) {
				setTimeout( function() {
					next( data, env );
				}, milliseconds );
			} );
			return this;
		},

		throttle: function throttle( milliseconds ) {
			if ( typeof milliseconds !== "number" ) {
				throw new Error( "Milliseconds must be a number" );
			}
			var fn = function( data, env, next ) {
				next( data, env );
			};
			this.pipeline.push( _.throttle( fn, milliseconds ) );
			return this;
		}
	};

		


	var bindingsResolver = _config.resolver = {
		cache: {},
		regex: {},
		enableCache: true,

		compare: function compare( binding, topic, headerOptions ) {
			var pattern;
			var rgx;
			var prevSegment;
			var cacheKey = topic + _config.cacheKeyDelimiter + binding;
			var result = ( this.cache[ cacheKey ] );
			var opt = headerOptions || {};
			var saveToCache = this.enableCache && !opt.resolverNoCache;
			// result is cached?
			if ( result === true ) {
				return result;
			}
			// plain string matching?
			if ( binding.indexOf( "#" ) === -1 && binding.indexOf( "*" ) === -1 ) {
				result = ( topic === binding );
				if ( saveToCache ) {
					this.cache[ cacheKey ] = result;
				}
				return result;
			}
			// ah, regex matching, then
			if ( !( rgx = this.regex[ binding ] ) ) {
				pattern = "^" + _.map( binding.split( "." ), function mapTopicBinding( segment ) {
						var res = "";
						if ( !!prevSegment ) {
							res = prevSegment !== "#" ? "\\.\\b" : "\\b";
						}
						if ( segment === "#" ) {
							res += "[\\s\\S]*";
						} else if ( segment === "*" ) {
							res += "[^.]+";
						} else {
							res += segment;
						}
						prevSegment = segment;
						return res;
					} ).join( "" ) + "$";
				rgx = this.regex[ binding ] = new RegExp( pattern );
			}
			result = rgx.test( topic );
			if ( saveToCache ) {
				this.cache[ cacheKey ] = result;
			}
			return result;
		},

		reset: function reset() {
			this.cache = {};
			this.regex = {};
		},

		purge: function( options ) {
			var self = this;
			var keyDelimiter = _config.cacheKeyDelimiter;
			var matchPredicate = function( val, key ) {
				var split = key.split( keyDelimiter );
				var topic = split[ 0 ];
				var binding = split[ 1 ];
				if ( ( typeof options.topic === "undefined" || options.topic === topic ) &&
						( typeof options.binding === "undefined" || options.binding === binding ) ) {
					delete self.cache[ key ];
				}
			};

			var compactPredicate = function( val, key ) {
				var split = key.split( keyDelimiter );
				if ( postal.getSubscribersFor( { topic: split[ 0 ] } ).length === 0 ) {
					delete self.cache[ key ];
				}
			};

			if ( typeof options === "undefined" ) {
				this.reset();
			} else {
				var handler = options.compact === true ? compactPredicate : matchPredicate;
				_.each( this.cache, handler );
			}
		}
	};

		


	var pubInProgress = 0;
	var unSubQueue = [];
	var autoCompactIndex = 0;

	function clearUnSubQueue() {
		while ( unSubQueue.length ) {
			postal.unsubscribe( unSubQueue.shift() );
		}
	}

	function getCachePurger( subDef, key, cache ) {
		return function( sub, i, list ) {
			if ( sub === subDef ) {
				list.splice( i, 1 );
			}
			if ( list.length === 0 ) {
				delete cache[ key ];
			}
		};
	}

	function getCacher( topic, pubCache, cacheKey, done, envelope ) {
		var headers = envelope && envelope.headers || {};
		return function( subDef ) {
			var cache;
			if ( _config.resolver.compare( subDef.topic, topic, headers ) ) {
				if ( !headers.resolverNoCache ) {
					cache = pubCache[ cacheKey ] = ( pubCache[ cacheKey ] || [] );
					cache.push( subDef );
				}
				subDef.cacheKeys.push( cacheKey );
				if ( done ) {
					done( subDef );
				}
			}
		};
	}

	function getSystemMessage( kind, subDef ) {
		return {
			channel: _config.SYSTEM_CHANNEL,
			topic: "subscription." + kind,
			data: {
				event: "subscription." + kind,
				channel: subDef.channel,
				topic: subDef.topic
			}
		};
	}

	var sysCreatedMessage = getSystemMessage.bind( undefined, "created" );
	var sysRemovedMessage = getSystemMessage.bind( undefined, "removed" );

	function getPredicate( options, resolver ) {
		if ( typeof options === "function" ) {
			return options;
		} else if ( !options ) {
			return function() {
				return true;
			};
		} else {
			return function( sub ) {
				var compared = 0;
				var matched = 0;
				_.each( options, function( val, prop ) {
					compared += 1;
					if (
					// We use the bindings resolver to compare the options.topic to subDef.topic
					( prop === "topic" && resolver.compare( sub.topic, options.topic, { resolverNoCache: true } ) ) ||
							( prop === "context" && options.context === sub._context ) ||
							// Any other potential prop/value matching outside topic & context...
							( sub[ prop ] === options[ prop ] ) ) {
						matched += 1;
					}
				} );
				return compared === matched;
			};
		}
	}

	_.extend( postal, {
		cache: {},
		subscriptions: {},
		wireTaps: [],

		ChannelDefinition: ChannelDefinition,
		SubscriptionDefinition: SubscriptionDefinition,

		channel: function channel( channelName ) {
			return new ChannelDefinition( channelName, this );
		},

		addWireTap: function addWireTap( callback ) {
			var self = this;
			self.wireTaps.push( callback );
			return function() {
				var idx = self.wireTaps.indexOf( callback );
				if ( idx !== -1 ) {
					self.wireTaps.splice( idx, 1 );
				}
			};
		},

		noConflict: function noConflict() {
			
			if ( typeof window === "undefined" || ( typeof window !== "undefined" && "function" === "function" && __webpack_require__(7) ) ) {
				throw new Error( "noConflict can only be used in browser clients which aren't using AMD modules" );
			}
			global.postal = prevPostal;
			return this;
		},

		getSubscribersFor: function getSubscribersFor( options ) {
			var result = [];
			var self = this;
			_.each( self.subscriptions, function( channel ) {
				_.each( channel, function( subList ) {
					result = result.concat( _.filter( subList, getPredicate( options, _config.resolver ) ) );
				} );
			} );
			return result;
		},

		publish: function publish( envelope, cb ) {
			++pubInProgress;
			var channel = envelope.channel = envelope.channel || _config.DEFAULT_CHANNEL;
			var topic = envelope.topic;
			envelope.timeStamp = new Date();
			if ( this.wireTaps.length ) {
				_.each( this.wireTaps, function( tap ) {
					tap( envelope.data, envelope, pubInProgress );
				} );
			}
			var cacheKey = channel + _config.cacheKeyDelimiter + topic;
			var cache = this.cache[ cacheKey ];
			var skipped = 0;
			var activated = 0;
			if ( !cache ) {
				var cacherFn = getCacher(
					topic,
					this.cache,
					cacheKey,
					function( candidate ) {
						if ( candidate.invokeSubscriber( envelope.data, envelope ) ) {
							activated++;
						} else {
							skipped++;
						}
					},
					envelope
				);
				_.each( this.subscriptions[ channel ], function( candidates ) {
					_.each( candidates, cacherFn );
				} );
			} else {
				_.each( cache, function( subDef ) {
					if ( subDef.invokeSubscriber( envelope.data, envelope ) ) {
						activated++;
					} else {
						skipped++;
					}
				} );
			}
			if ( --pubInProgress === 0 ) {
				clearUnSubQueue();
			}
			if ( cb ) {
				cb( {
					activated: activated,
					skipped: skipped
				} );
			}
		},

		reset: function reset() {
			this.unsubscribeFor();
			_config.resolver.reset();
			this.subscriptions = {};
			this.cache = {};
		},

		subscribe: function subscribe( options ) {
			var subscriptions = this.subscriptions;
			var subDef = new SubscriptionDefinition( options.channel || _config.DEFAULT_CHANNEL, options.topic, options.callback );
			var channel = subscriptions[ subDef.channel ];
			var channelLen = subDef.channel.length;
			var subs;
			if ( !channel ) {
				channel = subscriptions[ subDef.channel ] = {};
			}
			subs = subscriptions[ subDef.channel ][ subDef.topic ];
			if ( !subs ) {
				subs = subscriptions[ subDef.channel ][ subDef.topic ] = [];
			}
			// First, add the SubscriptionDefinition to the channel list
			subs.push( subDef );
			// Next, add the SubscriptionDefinition to any relevant existing cache(s)
			var cache = this.cache;
			_.each( _.keys( cache ), function( cacheKey ) {
				if ( cacheKey.substr( 0, channelLen ) === subDef.channel ) {
					getCacher(
						cacheKey.split( _config.cacheKeyDelimiter )[1],
						cache,
						cacheKey )( subDef );
				}
			} );
			
			if ( _config.enableSystemMessages ) {
				this.publish( sysCreatedMessage( subDef ) );
			}
			return subDef;
		},

		unsubscribe: function unsubscribe() {
			var unSubLen = arguments.length;
			var unSubIdx = 0;
			var subDef;
			var channelSubs;
			var topicSubs;
			var idx;
			for ( ; unSubIdx < unSubLen; unSubIdx++ ) {
				subDef = arguments[ unSubIdx ];
				subDef.inactive = true;
				if ( pubInProgress ) {
					unSubQueue.push( subDef );
					return;
				}
				channelSubs = this.subscriptions[ subDef.channel ];
				topicSubs = channelSubs && channelSubs[ subDef.topic ];
				
				if ( topicSubs ) {
					var len = topicSubs.length;
					idx = 0;
					// remove SubscriptionDefinition from channel list
					while ( idx < len ) {
						
						if ( topicSubs[ idx ] === subDef ) {
							topicSubs.splice( idx, 1 );
							break;
						}
						idx += 1;
					}
					if ( topicSubs.length === 0 ) {
						delete channelSubs[ subDef.topic ];
						if ( !_.keys( channelSubs ).length ) {
							delete this.subscriptions[ subDef.channel ];
						}
					}
					// remove SubscriptionDefinition from postal cache
					if ( subDef.cacheKeys && subDef.cacheKeys.length ) {
						var key;
						while ( key = subDef.cacheKeys.pop() ) {
							_.each( this.cache[ key ], getCachePurger( subDef, key, this.cache ) );
						}
					}
					if ( typeof _config.resolver.purge === "function" ) {
						// check to see if relevant resolver cache entries can be purged
						var autoCompact = _config.autoCompactResolver === true ?
							0 : typeof _config.autoCompactResolver === "number" ?
								( _config.autoCompactResolver - 1 ) : false;
						if ( autoCompact >= 0 && autoCompactIndex === autoCompact ) {
							_config.resolver.purge( { compact: true } );
							autoCompactIndex = 0;
						} else if ( autoCompact >= 0 && autoCompactIndex < autoCompact ) {
							autoCompactIndex += 1;
						}
					}
				}
				if ( _config.enableSystemMessages ) {
					this.publish( sysRemovedMessage( subDef ) );
				}
			}
		},

		unsubscribeFor: function unsubscribeFor( options ) {
			var toDispose = [];
			
			if ( this.subscriptions ) {
				toDispose = this.getSubscribersFor( options );
				this.unsubscribe.apply( this, toDispose );
			}
		}
	} );


		
		if ( global && Object.prototype.hasOwnProperty.call( global, "__postalReady__" ) && _.isArray( global.__postalReady__ ) ) {
			while ( global.__postalReady__.length ) {
				global.__postalReady__.shift().onReady( postal );
			}
		}
		

		return postal;
	} ) );


/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global) {/**
	 * @license
	 * lodash 4.7.0 <https://lodash.com/>
	 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
	 * Released under MIT license <https://lodash.com/license>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 */
	;(function() {

	  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
	  var undefined;

	  /** Used as the semantic version number. */
	  var VERSION = '4.7.0';

	  /** Used as the size to enable large array optimizations. */
	  var LARGE_ARRAY_SIZE = 200;

	  /** Used as the `TypeError` message for "Functions" methods. */
	  var FUNC_ERROR_TEXT = 'Expected a function';

	  /** Used to stand-in for `undefined` hash values. */
	  var HASH_UNDEFINED = '__lodash_hash_undefined__';

	  /** Used as the internal argument placeholder. */
	  var PLACEHOLDER = '__lodash_placeholder__';

	  /** Used to compose bitmasks for wrapper metadata. */
	  var BIND_FLAG = 1,
	      BIND_KEY_FLAG = 2,
	      CURRY_BOUND_FLAG = 4,
	      CURRY_FLAG = 8,
	      CURRY_RIGHT_FLAG = 16,
	      PARTIAL_FLAG = 32,
	      PARTIAL_RIGHT_FLAG = 64,
	      ARY_FLAG = 128,
	      REARG_FLAG = 256,
	      FLIP_FLAG = 512;

	  /** Used to compose bitmasks for comparison styles. */
	  var UNORDERED_COMPARE_FLAG = 1,
	      PARTIAL_COMPARE_FLAG = 2;

	  /** Used as default options for `_.truncate`. */
	  var DEFAULT_TRUNC_LENGTH = 30,
	      DEFAULT_TRUNC_OMISSION = '...';

	  /** Used to detect hot functions by number of calls within a span of milliseconds. */
	  var HOT_COUNT = 150,
	      HOT_SPAN = 16;

	  /** Used to indicate the type of lazy iteratees. */
	  var LAZY_FILTER_FLAG = 1,
	      LAZY_MAP_FLAG = 2,
	      LAZY_WHILE_FLAG = 3;

	  /** Used as references for various `Number` constants. */
	  var INFINITY = 1 / 0,
	      MAX_SAFE_INTEGER = 9007199254740991,
	      MAX_INTEGER = 1.7976931348623157e+308,
	      NAN = 0 / 0;

	  /** Used as references for the maximum length and index of an array. */
	  var MAX_ARRAY_LENGTH = 4294967295,
	      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
	      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

	  /** `Object#toString` result references. */
	  var argsTag = '[object Arguments]',
	      arrayTag = '[object Array]',
	      boolTag = '[object Boolean]',
	      dateTag = '[object Date]',
	      errorTag = '[object Error]',
	      funcTag = '[object Function]',
	      genTag = '[object GeneratorFunction]',
	      mapTag = '[object Map]',
	      numberTag = '[object Number]',
	      objectTag = '[object Object]',
	      promiseTag = '[object Promise]',
	      regexpTag = '[object RegExp]',
	      setTag = '[object Set]',
	      stringTag = '[object String]',
	      symbolTag = '[object Symbol]',
	      weakMapTag = '[object WeakMap]',
	      weakSetTag = '[object WeakSet]';

	  var arrayBufferTag = '[object ArrayBuffer]',
	      dataViewTag = '[object DataView]',
	      float32Tag = '[object Float32Array]',
	      float64Tag = '[object Float64Array]',
	      int8Tag = '[object Int8Array]',
	      int16Tag = '[object Int16Array]',
	      int32Tag = '[object Int32Array]',
	      uint8Tag = '[object Uint8Array]',
	      uint8ClampedTag = '[object Uint8ClampedArray]',
	      uint16Tag = '[object Uint16Array]',
	      uint32Tag = '[object Uint32Array]';

	  /** Used to match empty string literals in compiled template source. */
	  var reEmptyStringLeading = /\b__p \+= '';/g,
	      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
	      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

	  /** Used to match HTML entities and HTML characters. */
	  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39|#96);/g,
	      reUnescapedHtml = /[&<>"'`]/g,
	      reHasEscapedHtml = RegExp(reEscapedHtml.source),
	      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

	  /** Used to match template delimiters. */
	  var reEscape = /<%-([\s\S]+?)%>/g,
	      reEvaluate = /<%([\s\S]+?)%>/g,
	      reInterpolate = /<%=([\s\S]+?)%>/g;

	  /** Used to match property names within property paths. */
	  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
	      reIsPlainProp = /^\w*$/,
	      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]/g;

	  /** Used to match `RegExp` [syntax characters](http://ecma-international.org/ecma-262/6.0/#sec-patterns). */
	  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
	      reHasRegExpChar = RegExp(reRegExpChar.source);

	  /** Used to match leading and trailing whitespace. */
	  var reTrim = /^\s+|\s+$/g,
	      reTrimStart = /^\s+/,
	      reTrimEnd = /\s+$/;

	  /** Used to match backslashes in property paths. */
	  var reEscapeChar = /\\(\\)?/g;

	  /** Used to match [ES template delimiters](http://ecma-international.org/ecma-262/6.0/#sec-template-literal-lexical-components). */
	  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

	  /** Used to match `RegExp` flags from their coerced string values. */
	  var reFlags = /\w*$/;

	  /** Used to detect hexadecimal string values. */
	  var reHasHexPrefix = /^0x/i;

	  /** Used to detect bad signed hexadecimal string values. */
	  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

	  /** Used to detect binary string values. */
	  var reIsBinary = /^0b[01]+$/i;

	  /** Used to detect host constructors (Safari). */
	  var reIsHostCtor = /^\[object .+?Constructor\]$/;

	  /** Used to detect octal string values. */
	  var reIsOctal = /^0o[0-7]+$/i;

	  /** Used to detect unsigned integer values. */
	  var reIsUint = /^(?:0|[1-9]\d*)$/;

	  /** Used to match latin-1 supplementary letters (excluding mathematical operators). */
	  var reLatin1 = /[\xc0-\xd6\xd8-\xde\xdf-\xf6\xf8-\xff]/g;

	  /** Used to ensure capturing order of template delimiters. */
	  var reNoMatch = /($^)/;

	  /** Used to match unescaped characters in compiled string literals. */
	  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

	  /** Used to compose unicode character classes. */
	  var rsAstralRange = '\\ud800-\\udfff',
	      rsComboMarksRange = '\\u0300-\\u036f\\ufe20-\\ufe23',
	      rsComboSymbolsRange = '\\u20d0-\\u20f0',
	      rsDingbatRange = '\\u2700-\\u27bf',
	      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
	      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
	      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
	      rsQuoteRange = '\\u2018\\u2019\\u201c\\u201d',
	      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
	      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
	      rsVarRange = '\\ufe0e\\ufe0f',
	      rsBreakRange = rsMathOpRange + rsNonCharRange + rsQuoteRange + rsSpaceRange;

	  /** Used to compose unicode capture groups. */
	  var rsAstral = '[' + rsAstralRange + ']',
	      rsBreak = '[' + rsBreakRange + ']',
	      rsCombo = '[' + rsComboMarksRange + rsComboSymbolsRange + ']',
	      rsDigits = '\\d+',
	      rsDingbat = '[' + rsDingbatRange + ']',
	      rsLower = '[' + rsLowerRange + ']',
	      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
	      rsFitz = '\\ud83c[\\udffb-\\udfff]',
	      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
	      rsNonAstral = '[^' + rsAstralRange + ']',
	      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
	      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
	      rsUpper = '[' + rsUpperRange + ']',
	      rsZWJ = '\\u200d';

	  /** Used to compose unicode regexes. */
	  var rsLowerMisc = '(?:' + rsLower + '|' + rsMisc + ')',
	      rsUpperMisc = '(?:' + rsUpper + '|' + rsMisc + ')',
	      reOptMod = rsModifier + '?',
	      rsOptVar = '[' + rsVarRange + ']?',
	      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
	      rsSeq = rsOptVar + reOptMod + rsOptJoin,
	      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
	      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

	  /**
	   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
	   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
	   */
	  var reComboMark = RegExp(rsCombo, 'g');

	  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
	  var reComplexSymbol = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

	  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
	  var reHasComplexSymbol = RegExp('[' + rsZWJ + rsAstralRange  + rsComboMarksRange + rsComboSymbolsRange + rsVarRange + ']');

	  /** Used to match non-compound words composed of alphanumeric characters. */
	  var reBasicWord = /[a-zA-Z0-9]+/g;

	  /** Used to match complex or compound words. */
	  var reComplexWord = RegExp([
	    rsUpper + '?' + rsLower + '+(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
	    rsUpperMisc + '+(?=' + [rsBreak, rsUpper + rsLowerMisc, '$'].join('|') + ')',
	    rsUpper + '?' + rsLowerMisc + '+',
	    rsUpper + '+',
	    rsDigits,
	    rsEmoji
	  ].join('|'), 'g');

	  /** Used to detect strings that need a more robust regexp to match words. */
	  var reHasComplexWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

	  /** Used to assign default `context` object properties. */
	  var contextProps = [
	    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
	    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
	    'Promise', 'Reflect', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError',
	    'Uint8Array', 'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
	    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
	  ];

	  /** Used to make template sourceURLs easier to identify. */
	  var templateCounter = -1;

	  /** Used to identify `toStringTag` values of typed arrays. */
	  var typedArrayTags = {};
	  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
	  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
	  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
	  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
	  typedArrayTags[uint32Tag] = true;
	  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
	  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
	  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
	  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
	  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
	  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
	  typedArrayTags[setTag] = typedArrayTags[stringTag] =
	  typedArrayTags[weakMapTag] = false;

	  /** Used to identify `toStringTag` values supported by `_.clone`. */
	  var cloneableTags = {};
	  cloneableTags[argsTag] = cloneableTags[arrayTag] =
	  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
	  cloneableTags[boolTag] = cloneableTags[dateTag] =
	  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
	  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
	  cloneableTags[int32Tag] = cloneableTags[mapTag] =
	  cloneableTags[numberTag] = cloneableTags[objectTag] =
	  cloneableTags[regexpTag] = cloneableTags[setTag] =
	  cloneableTags[stringTag] = cloneableTags[symbolTag] =
	  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
	  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
	  cloneableTags[errorTag] = cloneableTags[funcTag] =
	  cloneableTags[weakMapTag] = false;

	  /** Used to map latin-1 supplementary letters to basic latin letters. */
	  var deburredLetters = {
	    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
	    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
	    '\xc7': 'C',  '\xe7': 'c',
	    '\xd0': 'D',  '\xf0': 'd',
	    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
	    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
	    '\xcC': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
	    '\xeC': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
	    '\xd1': 'N',  '\xf1': 'n',
	    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
	    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
	    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
	    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
	    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
	    '\xc6': 'Ae', '\xe6': 'ae',
	    '\xde': 'Th', '\xfe': 'th',
	    '\xdf': 'ss'
	  };

	  /** Used to map characters to HTML entities. */
	  var htmlEscapes = {
	    '&': '&amp;',
	    '<': '&lt;',
	    '>': '&gt;',
	    '"': '&quot;',
	    "'": '&#39;',
	    '`': '&#96;'
	  };

	  /** Used to map HTML entities to characters. */
	  var htmlUnescapes = {
	    '&amp;': '&',
	    '&lt;': '<',
	    '&gt;': '>',
	    '&quot;': '"',
	    '&#39;': "'",
	    '&#96;': '`'
	  };

	  /** Used to determine if values are of the language type `Object`. */
	  var objectTypes = {
	    'function': true,
	    'object': true
	  };

	  /** Used to escape characters for inclusion in compiled string literals. */
	  var stringEscapes = {
	    '\\': '\\',
	    "'": "'",
	    '\n': 'n',
	    '\r': 'r',
	    '\u2028': 'u2028',
	    '\u2029': 'u2029'
	  };

	  /** Built-in method references without a dependency on `root`. */
	  var freeParseFloat = parseFloat,
	      freeParseInt = parseInt;

	  /** Detect free variable `exports`. */
	  var freeExports = (objectTypes[typeof exports] && exports && !exports.nodeType)
	    ? exports
	    : undefined;

	  /** Detect free variable `module`. */
	  var freeModule = (objectTypes[typeof module] && module && !module.nodeType)
	    ? module
	    : undefined;

	  /** Detect the popular CommonJS extension `module.exports`. */
	  var moduleExports = (freeModule && freeModule.exports === freeExports)
	    ? freeExports
	    : undefined;

	  /** Detect free variable `global` from Node.js. */
	  var freeGlobal = checkGlobal(freeExports && freeModule && typeof global == 'object' && global);

	  /** Detect free variable `self`. */
	  var freeSelf = checkGlobal(objectTypes[typeof self] && self);

	  /** Detect free variable `window`. */
	  var freeWindow = checkGlobal(objectTypes[typeof window] && window);

	  /** Detect `this` as the global object. */
	  var thisGlobal = checkGlobal(objectTypes[typeof this] && this);

	  /**
	   * Used as a reference to the global object.
	   *
	   * The `this` value is used if it's the global object to avoid Greasemonkey's
	   * restricted `window` object, otherwise the `window` object is used.
	   */
	  var root = freeGlobal ||
	    ((freeWindow !== (thisGlobal && thisGlobal.window)) && freeWindow) ||
	      freeSelf || thisGlobal || Function('return this')();

	  /*--------------------------------------------------------------------------*/

	  /**
	   * Adds the key-value `pair` to `map`.
	   *
	   * @private
	   * @param {Object} map The map to modify.
	   * @param {Array} pair The key-value pair to add.
	   * @returns {Object} Returns `map`.
	   */
	  function addMapEntry(map, pair) {
	    // Don't return `Map#set` because it doesn't return the map instance in IE 11.
	    map.set(pair[0], pair[1]);
	    return map;
	  }

	  /**
	   * Adds `value` to `set`.
	   *
	   * @private
	   * @param {Object} set The set to modify.
	   * @param {*} value The value to add.
	   * @returns {Object} Returns `set`.
	   */
	  function addSetEntry(set, value) {
	    set.add(value);
	    return set;
	  }

	  /**
	   * A faster alternative to `Function#apply`, this function invokes `func`
	   * with the `this` binding of `thisArg` and the arguments of `args`.
	   *
	   * @private
	   * @param {Function} func The function to invoke.
	   * @param {*} thisArg The `this` binding of `func`.
	   * @param {...*} args The arguments to invoke `func` with.
	   * @returns {*} Returns the result of `func`.
	   */
	  function apply(func, thisArg, args) {
	    var length = args.length;
	    switch (length) {
	      case 0: return func.call(thisArg);
	      case 1: return func.call(thisArg, args[0]);
	      case 2: return func.call(thisArg, args[0], args[1]);
	      case 3: return func.call(thisArg, args[0], args[1], args[2]);
	    }
	    return func.apply(thisArg, args);
	  }

	  /**
	   * A specialized version of `baseAggregator` for arrays.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} setter The function to set `accumulator` values.
	   * @param {Function} iteratee The iteratee to transform keys.
	   * @param {Object} accumulator The initial aggregated object.
	   * @returns {Function} Returns `accumulator`.
	   */
	  function arrayAggregator(array, setter, iteratee, accumulator) {
	    var index = -1,
	        length = array.length;

	    while (++index < length) {
	      var value = array[index];
	      setter(accumulator, value, iteratee(value), array);
	    }
	    return accumulator;
	  }

	  /**
	   * Creates a new array concatenating `array` with `other`.
	   *
	   * @private
	   * @param {Array} array The first array to concatenate.
	   * @param {Array} other The second array to concatenate.
	   * @returns {Array} Returns the new concatenated array.
	   */
	  function arrayConcat(array, other) {
	    var index = -1,
	        length = array.length,
	        othIndex = -1,
	        othLength = other.length,
	        result = Array(length + othLength);

	    while (++index < length) {
	      result[index] = array[index];
	    }
	    while (++othIndex < othLength) {
	      result[index++] = other[othIndex];
	    }
	    return result;
	  }

	  /**
	   * A specialized version of `_.forEach` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns `array`.
	   */
	  function arrayEach(array, iteratee) {
	    var index = -1,
	        length = array.length;

	    while (++index < length) {
	      if (iteratee(array[index], index, array) === false) {
	        break;
	      }
	    }
	    return array;
	  }

	  /**
	   * A specialized version of `_.forEachRight` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns `array`.
	   */
	  function arrayEachRight(array, iteratee) {
	    var length = array.length;

	    while (length--) {
	      if (iteratee(array[length], length, array) === false) {
	        break;
	      }
	    }
	    return array;
	  }

	  /**
	   * A specialized version of `_.every` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} predicate The function invoked per iteration.
	   * @returns {boolean} Returns `true` if all elements pass the predicate check,
	   *  else `false`.
	   */
	  function arrayEvery(array, predicate) {
	    var index = -1,
	        length = array.length;

	    while (++index < length) {
	      if (!predicate(array[index], index, array)) {
	        return false;
	      }
	    }
	    return true;
	  }

	  /**
	   * A specialized version of `_.filter` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} predicate The function invoked per iteration.
	   * @returns {Array} Returns the new filtered array.
	   */
	  function arrayFilter(array, predicate) {
	    var index = -1,
	        length = array.length,
	        resIndex = 0,
	        result = [];

	    while (++index < length) {
	      var value = array[index];
	      if (predicate(value, index, array)) {
	        result[resIndex++] = value;
	      }
	    }
	    return result;
	  }

	  /**
	   * A specialized version of `_.includes` for arrays without support for
	   * specifying an index to search from.
	   *
	   * @private
	   * @param {Array} array The array to search.
	   * @param {*} target The value to search for.
	   * @returns {boolean} Returns `true` if `target` is found, else `false`.
	   */
	  function arrayIncludes(array, value) {
	    return !!array.length && baseIndexOf(array, value, 0) > -1;
	  }

	  /**
	   * This function is like `arrayIncludes` except that it accepts a comparator.
	   *
	   * @private
	   * @param {Array} array The array to search.
	   * @param {*} target The value to search for.
	   * @param {Function} comparator The comparator invoked per element.
	   * @returns {boolean} Returns `true` if `target` is found, else `false`.
	   */
	  function arrayIncludesWith(array, value, comparator) {
	    var index = -1,
	        length = array.length;

	    while (++index < length) {
	      if (comparator(value, array[index])) {
	        return true;
	      }
	    }
	    return false;
	  }

	  /**
	   * A specialized version of `_.map` for arrays without support for iteratee
	   * shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns the new mapped array.
	   */
	  function arrayMap(array, iteratee) {
	    var index = -1,
	        length = array.length,
	        result = Array(length);

	    while (++index < length) {
	      result[index] = iteratee(array[index], index, array);
	    }
	    return result;
	  }

	  /**
	   * Appends the elements of `values` to `array`.
	   *
	   * @private
	   * @param {Array} array The array to modify.
	   * @param {Array} values The values to append.
	   * @returns {Array} Returns `array`.
	   */
	  function arrayPush(array, values) {
	    var index = -1,
	        length = values.length,
	        offset = array.length;

	    while (++index < length) {
	      array[offset + index] = values[index];
	    }
	    return array;
	  }

	  /**
	   * A specialized version of `_.reduce` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @param {*} [accumulator] The initial value.
	   * @param {boolean} [initAccum] Specify using the first element of `array` as
	   *  the initial value.
	   * @returns {*} Returns the accumulated value.
	   */
	  function arrayReduce(array, iteratee, accumulator, initAccum) {
	    var index = -1,
	        length = array.length;

	    if (initAccum && length) {
	      accumulator = array[++index];
	    }
	    while (++index < length) {
	      accumulator = iteratee(accumulator, array[index], index, array);
	    }
	    return accumulator;
	  }

	  /**
	   * A specialized version of `_.reduceRight` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @param {*} [accumulator] The initial value.
	   * @param {boolean} [initAccum] Specify using the last element of `array` as
	   *  the initial value.
	   * @returns {*} Returns the accumulated value.
	   */
	  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
	    var length = array.length;
	    if (initAccum && length) {
	      accumulator = array[--length];
	    }
	    while (length--) {
	      accumulator = iteratee(accumulator, array[length], length, array);
	    }
	    return accumulator;
	  }

	  /**
	   * A specialized version of `_.some` for arrays without support for iteratee
	   * shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} predicate The function invoked per iteration.
	   * @returns {boolean} Returns `true` if any element passes the predicate check,
	   *  else `false`.
	   */
	  function arraySome(array, predicate) {
	    var index = -1,
	        length = array.length;

	    while (++index < length) {
	      if (predicate(array[index], index, array)) {
	        return true;
	      }
	    }
	    return false;
	  }

	  /**
	   * The base implementation of methods like `_.max` and `_.min` which accepts a
	   * `comparator` to determine the extremum value.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} iteratee The iteratee invoked per iteration.
	   * @param {Function} comparator The comparator used to compare values.
	   * @returns {*} Returns the extremum value.
	   */
	  function baseExtremum(array, iteratee, comparator) {
	    var index = -1,
	        length = array.length;

	    while (++index < length) {
	      var value = array[index],
	          current = iteratee(value);

	      if (current != null && (computed === undefined
	            ? current === current
	            : comparator(current, computed)
	          )) {
	        var computed = current,
	            result = value;
	      }
	    }
	    return result;
	  }

	  /**
	   * The base implementation of methods like `_.find` and `_.findKey`, without
	   * support for iteratee shorthands, which iterates over `collection` using
	   * `eachFunc`.
	   *
	   * @private
	   * @param {Array|Object} collection The collection to search.
	   * @param {Function} predicate The function invoked per iteration.
	   * @param {Function} eachFunc The function to iterate over `collection`.
	   * @param {boolean} [retKey] Specify returning the key of the found element
	   *  instead of the element itself.
	   * @returns {*} Returns the found element or its key, else `undefined`.
	   */
	  function baseFind(collection, predicate, eachFunc, retKey) {
	    var result;
	    eachFunc(collection, function(value, key, collection) {
	      if (predicate(value, key, collection)) {
	        result = retKey ? key : value;
	        return false;
	      }
	    });
	    return result;
	  }

	  /**
	   * The base implementation of `_.findIndex` and `_.findLastIndex` without
	   * support for iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to search.
	   * @param {Function} predicate The function invoked per iteration.
	   * @param {boolean} [fromRight] Specify iterating from right to left.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function baseFindIndex(array, predicate, fromRight) {
	    var length = array.length,
	        index = fromRight ? length : -1;

	    while ((fromRight ? index-- : ++index < length)) {
	      if (predicate(array[index], index, array)) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
	   *
	   * @private
	   * @param {Array} array The array to search.
	   * @param {*} value The value to search for.
	   * @param {number} fromIndex The index to search from.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function baseIndexOf(array, value, fromIndex) {
	    if (value !== value) {
	      return indexOfNaN(array, fromIndex);
	    }
	    var index = fromIndex - 1,
	        length = array.length;

	    while (++index < length) {
	      if (array[index] === value) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * This function is like `baseIndexOf` except that it accepts a comparator.
	   *
	   * @private
	   * @param {Array} array The array to search.
	   * @param {*} value The value to search for.
	   * @param {number} fromIndex The index to search from.
	   * @param {Function} comparator The comparator invoked per element.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function baseIndexOfWith(array, value, fromIndex, comparator) {
	    var index = fromIndex - 1,
	        length = array.length;

	    while (++index < length) {
	      if (comparator(array[index], value)) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * The base implementation of `_.mean` and `_.meanBy` without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {number} Returns the mean.
	   */
	  function baseMean(array, iteratee) {
	    var length = array ? array.length : 0;
	    return length ? (baseSum(array, iteratee) / length) : NAN;
	  }

	  /**
	   * The base implementation of `_.reduce` and `_.reduceRight`, without support
	   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
	   *
	   * @private
	   * @param {Array|Object} collection The collection to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @param {*} accumulator The initial value.
	   * @param {boolean} initAccum Specify using the first or last element of
	   *  `collection` as the initial value.
	   * @param {Function} eachFunc The function to iterate over `collection`.
	   * @returns {*} Returns the accumulated value.
	   */
	  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
	    eachFunc(collection, function(value, index, collection) {
	      accumulator = initAccum
	        ? (initAccum = false, value)
	        : iteratee(accumulator, value, index, collection);
	    });
	    return accumulator;
	  }

	  /**
	   * The base implementation of `_.sortBy` which uses `comparer` to define the
	   * sort order of `array` and replaces criteria objects with their corresponding
	   * values.
	   *
	   * @private
	   * @param {Array} array The array to sort.
	   * @param {Function} comparer The function to define sort order.
	   * @returns {Array} Returns `array`.
	   */
	  function baseSortBy(array, comparer) {
	    var length = array.length;

	    array.sort(comparer);
	    while (length--) {
	      array[length] = array[length].value;
	    }
	    return array;
	  }

	  /**
	   * The base implementation of `_.sum` and `_.sumBy` without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {number} Returns the sum.
	   */
	  function baseSum(array, iteratee) {
	    var result,
	        index = -1,
	        length = array.length;

	    while (++index < length) {
	      var current = iteratee(array[index]);
	      if (current !== undefined) {
	        result = result === undefined ? current : (result + current);
	      }
	    }
	    return result;
	  }

	  /**
	   * The base implementation of `_.times` without support for iteratee shorthands
	   * or max array length checks.
	   *
	   * @private
	   * @param {number} n The number of times to invoke `iteratee`.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns the array of results.
	   */
	  function baseTimes(n, iteratee) {
	    var index = -1,
	        result = Array(n);

	    while (++index < n) {
	      result[index] = iteratee(index);
	    }
	    return result;
	  }

	  /**
	   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
	   * of key-value pairs for `object` corresponding to the property names of `props`.
	   *
	   * @private
	   * @param {Object} object The object to query.
	   * @param {Array} props The property names to get values for.
	   * @returns {Object} Returns the new array of key-value pairs.
	   */
	  function baseToPairs(object, props) {
	    return arrayMap(props, function(key) {
	      return [key, object[key]];
	    });
	  }

	  /**
	   * The base implementation of `_.unary` without support for storing wrapper metadata.
	   *
	   * @private
	   * @param {Function} func The function to cap arguments for.
	   * @returns {Function} Returns the new function.
	   */
	  function baseUnary(func) {
	    return function(value) {
	      return func(value);
	    };
	  }

	  /**
	   * The base implementation of `_.values` and `_.valuesIn` which creates an
	   * array of `object` property values corresponding to the property names
	   * of `props`.
	   *
	   * @private
	   * @param {Object} object The object to query.
	   * @param {Array} props The property names to get values for.
	   * @returns {Object} Returns the array of property values.
	   */
	  function baseValues(object, props) {
	    return arrayMap(props, function(key) {
	      return object[key];
	    });
	  }

	  /**
	   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
	   * that is not found in the character symbols.
	   *
	   * @private
	   * @param {Array} strSymbols The string symbols to inspect.
	   * @param {Array} chrSymbols The character symbols to find.
	   * @returns {number} Returns the index of the first unmatched string symbol.
	   */
	  function charsStartIndex(strSymbols, chrSymbols) {
	    var index = -1,
	        length = strSymbols.length;

	    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
	    return index;
	  }

	  /**
	   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
	   * that is not found in the character symbols.
	   *
	   * @private
	   * @param {Array} strSymbols The string symbols to inspect.
	   * @param {Array} chrSymbols The character symbols to find.
	   * @returns {number} Returns the index of the last unmatched string symbol.
	   */
	  function charsEndIndex(strSymbols, chrSymbols) {
	    var index = strSymbols.length;

	    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
	    return index;
	  }

	  /**
	   * Checks if `value` is a global object.
	   *
	   * @private
	   * @param {*} value The value to check.
	   * @returns {null|Object} Returns `value` if it's a global object, else `null`.
	   */
	  function checkGlobal(value) {
	    return (value && value.Object === Object) ? value : null;
	  }

	  /**
	   * Compares values to sort them in ascending order.
	   *
	   * @private
	   * @param {*} value The value to compare.
	   * @param {*} other The other value to compare.
	   * @returns {number} Returns the sort order indicator for `value`.
	   */
	  function compareAscending(value, other) {
	    if (value !== other) {
	      var valIsNull = value === null,
	          valIsUndef = value === undefined,
	          valIsReflexive = value === value;

	      var othIsNull = other === null,
	          othIsUndef = other === undefined,
	          othIsReflexive = other === other;

	      if ((value > other && !othIsNull) || !valIsReflexive ||
	          (valIsNull && !othIsUndef && othIsReflexive) ||
	          (valIsUndef && othIsReflexive)) {
	        return 1;
	      }
	      if ((value < other && !valIsNull) || !othIsReflexive ||
	          (othIsNull && !valIsUndef && valIsReflexive) ||
	          (othIsUndef && valIsReflexive)) {
	        return -1;
	      }
	    }
	    return 0;
	  }

	  /**
	   * Used by `_.orderBy` to compare multiple properties of a value to another
	   * and stable sort them.
	   *
	   * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
	   * specify an order of "desc" for descending or "asc" for ascending sort order
	   * of corresponding values.
	   *
	   * @private
	   * @param {Object} object The object to compare.
	   * @param {Object} other The other object to compare.
	   * @param {boolean[]|string[]} orders The order to sort by for each property.
	   * @returns {number} Returns the sort order indicator for `object`.
	   */
	  function compareMultiple(object, other, orders) {
	    var index = -1,
	        objCriteria = object.criteria,
	        othCriteria = other.criteria,
	        length = objCriteria.length,
	        ordersLength = orders.length;

	    while (++index < length) {
	      var result = compareAscending(objCriteria[index], othCriteria[index]);
	      if (result) {
	        if (index >= ordersLength) {
	          return result;
	        }
	        var order = orders[index];
	        return result * (order == 'desc' ? -1 : 1);
	      }
	    }
	    // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
	    // that causes it, under certain circumstances, to provide the same value for
	    // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
	    // for more details.
	    //
	    // This also ensures a stable sort in V8 and other engines.
	    // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
	    return object.index - other.index;
	  }

	  /**
	   * Gets the number of `placeholder` occurrences in `array`.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {*} placeholder The placeholder to search for.
	   * @returns {number} Returns the placeholder count.
	   */
	  function countHolders(array, placeholder) {
	    var length = array.length,
	        result = 0;

	    while (length--) {
	      if (array[length] === placeholder) {
	        result++;
	      }
	    }
	    return result;
	  }

	  /**
	   * Creates a function that performs a mathematical operation on two values.
	   *
	   * @private
	   * @param {Function} operator The function to perform the operation.
	   * @returns {Function} Returns the new mathematical operation function.
	   */
	  function createMathOperation(operator) {
	    return function(value, other) {
	      var result;
	      if (value === undefined && other === undefined) {
	        return 0;
	      }
	      if (value !== undefined) {
	        result = value;
	      }
	      if (other !== undefined) {
	        result = result === undefined ? other : operator(result, other);
	      }
	      return result;
	    };
	  }

	  /**
	   * Used by `_.deburr` to convert latin-1 supplementary letters to basic latin letters.
	   *
	   * @private
	   * @param {string} letter The matched letter to deburr.
	   * @returns {string} Returns the deburred letter.
	   */
	  function deburrLetter(letter) {
	    return deburredLetters[letter];
	  }

	  /**
	   * Used by `_.escape` to convert characters to HTML entities.
	   *
	   * @private
	   * @param {string} chr The matched character to escape.
	   * @returns {string} Returns the escaped character.
	   */
	  function escapeHtmlChar(chr) {
	    return htmlEscapes[chr];
	  }

	  /**
	   * Used by `_.template` to escape characters for inclusion in compiled string literals.
	   *
	   * @private
	   * @param {string} chr The matched character to escape.
	   * @returns {string} Returns the escaped character.
	   */
	  function escapeStringChar(chr) {
	    return '\\' + stringEscapes[chr];
	  }

	  /**
	   * Gets the index at which the first occurrence of `NaN` is found in `array`.
	   *
	   * @private
	   * @param {Array} array The array to search.
	   * @param {number} fromIndex The index to search from.
	   * @param {boolean} [fromRight] Specify iterating from right to left.
	   * @returns {number} Returns the index of the matched `NaN`, else `-1`.
	   */
	  function indexOfNaN(array, fromIndex, fromRight) {
	    var length = array.length,
	        index = fromIndex + (fromRight ? 0 : -1);

	    while ((fromRight ? index-- : ++index < length)) {
	      var other = array[index];
	      if (other !== other) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * Checks if `value` is a host object in IE < 9.
	   *
	   * @private
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
	   */
	  function isHostObject(value) {
	    // Many host objects are `Object` objects that can coerce to strings
	    // despite having improperly defined `toString` methods.
	    var result = false;
	    if (value != null && typeof value.toString != 'function') {
	      try {
	        result = !!(value + '');
	      } catch (e) {}
	    }
	    return result;
	  }

	  /**
	   * Checks if `value` is a valid array-like index.
	   *
	   * @private
	   * @param {*} value The value to check.
	   * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	   * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	   */
	  function isIndex(value, length) {
	    value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;
	    length = length == null ? MAX_SAFE_INTEGER : length;
	    return value > -1 && value % 1 == 0 && value < length;
	  }

	  /**
	   * Converts `iterator` to an array.
	   *
	   * @private
	   * @param {Object} iterator The iterator to convert.
	   * @returns {Array} Returns the converted array.
	   */
	  function iteratorToArray(iterator) {
	    var data,
	        result = [];

	    while (!(data = iterator.next()).done) {
	      result.push(data.value);
	    }
	    return result;
	  }

	  /**
	   * Converts `map` to an array.
	   *
	   * @private
	   * @param {Object} map The map to convert.
	   * @returns {Array} Returns the converted array.
	   */
	  function mapToArray(map) {
	    var index = -1,
	        result = Array(map.size);

	    map.forEach(function(value, key) {
	      result[++index] = [key, value];
	    });
	    return result;
	  }

	  /**
	   * Replaces all `placeholder` elements in `array` with an internal placeholder
	   * and returns an array of their indexes.
	   *
	   * @private
	   * @param {Array} array The array to modify.
	   * @param {*} placeholder The placeholder to replace.
	   * @returns {Array} Returns the new array of placeholder indexes.
	   */
	  function replaceHolders(array, placeholder) {
	    var index = -1,
	        length = array.length,
	        resIndex = 0,
	        result = [];

	    while (++index < length) {
	      var value = array[index];
	      if (value === placeholder || value === PLACEHOLDER) {
	        array[index] = PLACEHOLDER;
	        result[resIndex++] = index;
	      }
	    }
	    return result;
	  }

	  /**
	   * Converts `set` to an array.
	   *
	   * @private
	   * @param {Object} set The set to convert.
	   * @returns {Array} Returns the converted array.
	   */
	  function setToArray(set) {
	    var index = -1,
	        result = Array(set.size);

	    set.forEach(function(value) {
	      result[++index] = value;
	    });
	    return result;
	  }

	  /**
	   * Gets the number of symbols in `string`.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {number} Returns the string size.
	   */
	  function stringSize(string) {
	    if (!(string && reHasComplexSymbol.test(string))) {
	      return string.length;
	    }
	    var result = reComplexSymbol.lastIndex = 0;
	    while (reComplexSymbol.test(string)) {
	      result++;
	    }
	    return result;
	  }

	  /**
	   * Converts `string` to an array.
	   *
	   * @private
	   * @param {string} string The string to convert.
	   * @returns {Array} Returns the converted array.
	   */
	  function stringToArray(string) {
	    return string.match(reComplexSymbol);
	  }

	  /**
	   * Used by `_.unescape` to convert HTML entities to characters.
	   *
	   * @private
	   * @param {string} chr The matched character to unescape.
	   * @returns {string} Returns the unescaped character.
	   */
	  function unescapeHtmlChar(chr) {
	    return htmlUnescapes[chr];
	  }

	  /*--------------------------------------------------------------------------*/

	  /**
	   * Create a new pristine `lodash` function using the `context` object.
	   *
	   * @static
	   * @memberOf _
	   * @since 1.1.0
	   * @category Util
	   * @param {Object} [context=root] The context object.
	   * @returns {Function} Returns a new `lodash` function.
	   * @example
	   *
	   * _.mixin({ 'foo': _.constant('foo') });
	   *
	   * var lodash = _.runInContext();
	   * lodash.mixin({ 'bar': lodash.constant('bar') });
	   *
	   * _.isFunction(_.foo);
	   * // => true
	   * _.isFunction(_.bar);
	   * // => false
	   *
	   * lodash.isFunction(lodash.foo);
	   * // => false
	   * lodash.isFunction(lodash.bar);
	   * // => true
	   *
	   * // Use `context` to mock `Date#getTime` use in `_.now`.
	   * var mock = _.runInContext({
	   *   'Date': function() {
	   *     return { 'getTime': getTimeMock };
	   *   }
	   * });
	   *
	   * // Create a suped-up `defer` in Node.js.
	   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
	   */
	  function runInContext(context) {
	    context = context ? _.defaults({}, context, _.pick(root, contextProps)) : root;

	    /** Built-in constructor references. */
	    var Date = context.Date,
	        Error = context.Error,
	        Math = context.Math,
	        RegExp = context.RegExp,
	        TypeError = context.TypeError;

	    /** Used for built-in method references. */
	    var arrayProto = context.Array.prototype,
	        objectProto = context.Object.prototype;

	    /** Used to resolve the decompiled source of functions. */
	    var funcToString = context.Function.prototype.toString;

	    /** Used to check objects for own properties. */
	    var hasOwnProperty = objectProto.hasOwnProperty;

	    /** Used to generate unique IDs. */
	    var idCounter = 0;

	    /** Used to infer the `Object` constructor. */
	    var objectCtorString = funcToString.call(Object);

	    /**
	     * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	     * of values.
	     */
	    var objectToString = objectProto.toString;

	    /** Used to restore the original `_` reference in `_.noConflict`. */
	    var oldDash = root._;

	    /** Used to detect if a method is native. */
	    var reIsNative = RegExp('^' +
	      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
	      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	    );

	    /** Built-in value references. */
	    var Buffer = moduleExports ? context.Buffer : undefined,
	        Reflect = context.Reflect,
	        Symbol = context.Symbol,
	        Uint8Array = context.Uint8Array,
	        clearTimeout = context.clearTimeout,
	        enumerate = Reflect ? Reflect.enumerate : undefined,
	        getOwnPropertySymbols = Object.getOwnPropertySymbols,
	        iteratorSymbol = typeof (iteratorSymbol = Symbol && Symbol.iterator) == 'symbol' ? iteratorSymbol : undefined,
	        objectCreate = Object.create,
	        propertyIsEnumerable = objectProto.propertyIsEnumerable,
	        setTimeout = context.setTimeout,
	        splice = arrayProto.splice;

	    /* Built-in method references for those with the same name as other `lodash` methods. */
	    var nativeCeil = Math.ceil,
	        nativeFloor = Math.floor,
	        nativeGetPrototype = Object.getPrototypeOf,
	        nativeIsFinite = context.isFinite,
	        nativeJoin = arrayProto.join,
	        nativeKeys = Object.keys,
	        nativeMax = Math.max,
	        nativeMin = Math.min,
	        nativeParseInt = context.parseInt,
	        nativeRandom = Math.random,
	        nativeReverse = arrayProto.reverse;

	    /* Built-in method references that are verified to be native. */
	    var DataView = getNative(context, 'DataView'),
	        Map = getNative(context, 'Map'),
	        Promise = getNative(context, 'Promise'),
	        Set = getNative(context, 'Set'),
	        WeakMap = getNative(context, 'WeakMap'),
	        nativeCreate = getNative(Object, 'create');

	    /** Used to store function metadata. */
	    var metaMap = WeakMap && new WeakMap;

	    /** Detect if properties shadowing those on `Object.prototype` are non-enumerable. */
	    var nonEnumShadows = !propertyIsEnumerable.call({ 'valueOf': 1 }, 'valueOf');

	    /** Used to lookup unminified function names. */
	    var realNames = {};

	    /** Used to detect maps, sets, and weakmaps. */
	    var dataViewCtorString = DataView ? (DataView + '') : '',
	        mapCtorString = Map ? funcToString.call(Map) : '',
	        promiseCtorString = Promise ? funcToString.call(Promise) : '',
	        setCtorString = Set ? funcToString.call(Set) : '',
	        weakMapCtorString = WeakMap ? funcToString.call(WeakMap) : '';

	    /** Used to convert symbols to primitives and strings. */
	    var symbolProto = Symbol ? Symbol.prototype : undefined,
	        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
	        symbolToString = symbolProto ? symbolProto.toString : undefined;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a `lodash` object which wraps `value` to enable implicit method
	     * chain sequences. Methods that operate on and return arrays, collections,
	     * and functions can be chained together. Methods that retrieve a single value
	     * or may return a primitive value will automatically end the chain sequence
	     * and return the unwrapped value. Otherwise, the value must be unwrapped
	     * with `_#value`.
	     *
	     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
	     * enabled using `_.chain`.
	     *
	     * The execution of chained methods is lazy, that is, it's deferred until
	     * `_#value` is implicitly or explicitly called.
	     *
	     * Lazy evaluation allows several methods to support shortcut fusion.
	     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
	     * the creation of intermediate arrays and can greatly reduce the number of
	     * iteratee executions. Sections of a chain sequence qualify for shortcut
	     * fusion if the section is applied to an array of at least two hundred
	     * elements and any iteratees accept only one argument. The heuristic for
	     * whether a section qualifies for shortcut fusion is subject to change.
	     *
	     * Chaining is supported in custom builds as long as the `_#value` method is
	     * directly or indirectly included in the build.
	     *
	     * In addition to lodash methods, wrappers have `Array` and `String` methods.
	     *
	     * The wrapper `Array` methods are:
	     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
	     *
	     * The wrapper `String` methods are:
	     * `replace` and `split`
	     *
	     * The wrapper methods that support shortcut fusion are:
	     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
	     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
	     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
	     *
	     * The chainable wrapper methods are:
	     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
	     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
	     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
	     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
	     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
	     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
	     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
	     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
	     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
	     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
	     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
	     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
	     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
	     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
	     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
	     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
	     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
	     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
	     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
	     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
	     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
	     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
	     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
	     * `zipObject`, `zipObjectDeep`, and `zipWith`
	     *
	     * The wrapper methods that are **not** chainable by default are:
	     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
	     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `deburr`, `divide`, `each`,
	     * `eachRight`, `endsWith`, `eq`, `escape`, `escapeRegExp`, `every`, `find`,
	     * `findIndex`, `findKey`, `findLast`, `findLastIndex`, `findLastKey`, `first`,
	     * `floor`, `forEach`, `forEachRight`, `forIn`, `forInRight`, `forOwn`,
	     * `forOwnRight`, `get`, `gt`, `gte`, `has`, `hasIn`, `head`, `identity`,
	     * `includes`, `indexOf`, `inRange`, `invoke`, `isArguments`, `isArray`,
	     * `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`, `isBoolean`, `isBuffer`,
	     * `isDate`, `isElement`, `isEmpty`, `isEqual`, `isEqualWith`, `isError`,
	     * `isFinite`, `isFunction`, `isInteger`, `isLength`, `isMap`, `isMatch`,
	     * `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`, `isNumber`,
	     * `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`, `isSafeInteger`,
	     * `isSet`, `isString`, `isUndefined`, `isTypedArray`, `isWeakMap`, `isWeakSet`,
	     * `join`, `kebabCase`, `last`, `lastIndexOf`, `lowerCase`, `lowerFirst`,
	     * `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`, `min`, `minBy`, `multiply`,
	     * `noConflict`, `noop`, `now`, `pad`, `padEnd`, `padStart`, `parseInt`,
	     * `pop`, `random`, `reduce`, `reduceRight`, `repeat`, `result`, `round`,
	     * `runInContext`, `sample`, `shift`, `size`, `snakeCase`, `some`, `sortedIndex`,
	     * `sortedIndexBy`, `sortedLastIndex`, `sortedLastIndexBy`, `startCase`,
	     * `startsWith`, `subtract`, `sum`, `sumBy`, `template`, `times`, `toInteger`,
	     * `toJSON`, `toLength`, `toLower`, `toNumber`, `toSafeInteger`, `toString`,
	     * `toUpper`, `trim`, `trimEnd`, `trimStart`, `truncate`, `unescape`,
	     * `uniqueId`, `upperCase`, `upperFirst`, `value`, and `words`
	     *
	     * @name _
	     * @constructor
	     * @category Seq
	     * @param {*} value The value to wrap in a `lodash` instance.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var wrapped = _([1, 2, 3]);
	     *
	     * // Returns an unwrapped value.
	     * wrapped.reduce(_.add);
	     * // => 6
	     *
	     * // Returns a wrapped value.
	     * var squares = wrapped.map(square);
	     *
	     * _.isArray(squares);
	     * // => false
	     *
	     * _.isArray(squares.value());
	     * // => true
	     */
	    function lodash(value) {
	      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
	        if (value instanceof LodashWrapper) {
	          return value;
	        }
	        if (hasOwnProperty.call(value, '__wrapped__')) {
	          return wrapperClone(value);
	        }
	      }
	      return new LodashWrapper(value);
	    }

	    /**
	     * The function whose prototype chain sequence wrappers inherit from.
	     *
	     * @private
	     */
	    function baseLodash() {
	      // No operation performed.
	    }

	    /**
	     * The base constructor for creating `lodash` wrapper objects.
	     *
	     * @private
	     * @param {*} value The value to wrap.
	     * @param {boolean} [chainAll] Enable explicit method chain sequences.
	     */
	    function LodashWrapper(value, chainAll) {
	      this.__wrapped__ = value;
	      this.__actions__ = [];
	      this.__chain__ = !!chainAll;
	      this.__index__ = 0;
	      this.__values__ = undefined;
	    }

	    /**
	     * By default, the template delimiters used by lodash are like those in
	     * embedded Ruby (ERB). Change the following template settings to use
	     * alternative delimiters.
	     *
	     * @static
	     * @memberOf _
	     * @type {Object}
	     */
	    lodash.templateSettings = {

	      /**
	       * Used to detect `data` property values to be HTML-escaped.
	       *
	       * @memberOf _.templateSettings
	       * @type {RegExp}
	       */
	      'escape': reEscape,

	      /**
	       * Used to detect code to be evaluated.
	       *
	       * @memberOf _.templateSettings
	       * @type {RegExp}
	       */
	      'evaluate': reEvaluate,

	      /**
	       * Used to detect `data` property values to inject.
	       *
	       * @memberOf _.templateSettings
	       * @type {RegExp}
	       */
	      'interpolate': reInterpolate,

	      /**
	       * Used to reference the data object in the template text.
	       *
	       * @memberOf _.templateSettings
	       * @type {string}
	       */
	      'variable': '',

	      /**
	       * Used to import variables into the compiled template.
	       *
	       * @memberOf _.templateSettings
	       * @type {Object}
	       */
	      'imports': {

	        /**
	         * A reference to the `lodash` function.
	         *
	         * @memberOf _.templateSettings.imports
	         * @type {Function}
	         */
	        '_': lodash
	      }
	    };

	    // Ensure wrappers are instances of `baseLodash`.
	    lodash.prototype = baseLodash.prototype;
	    lodash.prototype.constructor = lodash;

	    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
	    LodashWrapper.prototype.constructor = LodashWrapper;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
	     *
	     * @private
	     * @constructor
	     * @param {*} value The value to wrap.
	     */
	    function LazyWrapper(value) {
	      this.__wrapped__ = value;
	      this.__actions__ = [];
	      this.__dir__ = 1;
	      this.__filtered__ = false;
	      this.__iteratees__ = [];
	      this.__takeCount__ = MAX_ARRAY_LENGTH;
	      this.__views__ = [];
	    }

	    /**
	     * Creates a clone of the lazy wrapper object.
	     *
	     * @private
	     * @name clone
	     * @memberOf LazyWrapper
	     * @returns {Object} Returns the cloned `LazyWrapper` object.
	     */
	    function lazyClone() {
	      var result = new LazyWrapper(this.__wrapped__);
	      result.__actions__ = copyArray(this.__actions__);
	      result.__dir__ = this.__dir__;
	      result.__filtered__ = this.__filtered__;
	      result.__iteratees__ = copyArray(this.__iteratees__);
	      result.__takeCount__ = this.__takeCount__;
	      result.__views__ = copyArray(this.__views__);
	      return result;
	    }

	    /**
	     * Reverses the direction of lazy iteration.
	     *
	     * @private
	     * @name reverse
	     * @memberOf LazyWrapper
	     * @returns {Object} Returns the new reversed `LazyWrapper` object.
	     */
	    function lazyReverse() {
	      if (this.__filtered__) {
	        var result = new LazyWrapper(this);
	        result.__dir__ = -1;
	        result.__filtered__ = true;
	      } else {
	        result = this.clone();
	        result.__dir__ *= -1;
	      }
	      return result;
	    }

	    /**
	     * Extracts the unwrapped value from its lazy wrapper.
	     *
	     * @private
	     * @name value
	     * @memberOf LazyWrapper
	     * @returns {*} Returns the unwrapped value.
	     */
	    function lazyValue() {
	      var array = this.__wrapped__.value(),
	          dir = this.__dir__,
	          isArr = isArray(array),
	          isRight = dir < 0,
	          arrLength = isArr ? array.length : 0,
	          view = getView(0, arrLength, this.__views__),
	          start = view.start,
	          end = view.end,
	          length = end - start,
	          index = isRight ? end : (start - 1),
	          iteratees = this.__iteratees__,
	          iterLength = iteratees.length,
	          resIndex = 0,
	          takeCount = nativeMin(length, this.__takeCount__);

	      if (!isArr || arrLength < LARGE_ARRAY_SIZE ||
	          (arrLength == length && takeCount == length)) {
	        return baseWrapperValue(array, this.__actions__);
	      }
	      var result = [];

	      outer:
	      while (length-- && resIndex < takeCount) {
	        index += dir;

	        var iterIndex = -1,
	            value = array[index];

	        while (++iterIndex < iterLength) {
	          var data = iteratees[iterIndex],
	              iteratee = data.iteratee,
	              type = data.type,
	              computed = iteratee(value);

	          if (type == LAZY_MAP_FLAG) {
	            value = computed;
	          } else if (!computed) {
	            if (type == LAZY_FILTER_FLAG) {
	              continue outer;
	            } else {
	              break outer;
	            }
	          }
	        }
	        result[resIndex++] = value;
	      }
	      return result;
	    }

	    // Ensure `LazyWrapper` is an instance of `baseLodash`.
	    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
	    LazyWrapper.prototype.constructor = LazyWrapper;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates an hash object.
	     *
	     * @private
	     * @constructor
	     * @returns {Object} Returns the new hash object.
	     */
	    function Hash() {}

	    /**
	     * Removes `key` and its value from the hash.
	     *
	     * @private
	     * @param {Object} hash The hash to modify.
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	     */
	    function hashDelete(hash, key) {
	      return hashHas(hash, key) && delete hash[key];
	    }

	    /**
	     * Gets the hash value for `key`.
	     *
	     * @private
	     * @param {Object} hash The hash to query.
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the entry value.
	     */
	    function hashGet(hash, key) {
	      if (nativeCreate) {
	        var result = hash[key];
	        return result === HASH_UNDEFINED ? undefined : result;
	      }
	      return hasOwnProperty.call(hash, key) ? hash[key] : undefined;
	    }

	    /**
	     * Checks if a hash value for `key` exists.
	     *
	     * @private
	     * @param {Object} hash The hash to query.
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function hashHas(hash, key) {
	      return nativeCreate ? hash[key] !== undefined : hasOwnProperty.call(hash, key);
	    }

	    /**
	     * Sets the hash `key` to `value`.
	     *
	     * @private
	     * @param {Object} hash The hash to modify.
	     * @param {string} key The key of the value to set.
	     * @param {*} value The value to set.
	     */
	    function hashSet(hash, key, value) {
	      hash[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
	    }

	    // Avoid inheriting from `Object.prototype` when possible.
	    Hash.prototype = nativeCreate ? nativeCreate(null) : objectProto;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a map cache object to store key-value pairs.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [values] The values to cache.
	     */
	    function MapCache(values) {
	      var index = -1,
	          length = values ? values.length : 0;

	      this.clear();
	      while (++index < length) {
	        var entry = values[index];
	        this.set(entry[0], entry[1]);
	      }
	    }

	    /**
	     * Removes all key-value entries from the map.
	     *
	     * @private
	     * @name clear
	     * @memberOf MapCache
	     */
	    function mapClear() {
	      this.__data__ = {
	        'hash': new Hash,
	        'map': Map ? new Map : [],
	        'string': new Hash
	      };
	    }

	    /**
	     * Removes `key` and its value from the map.
	     *
	     * @private
	     * @name delete
	     * @memberOf MapCache
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	     */
	    function mapDelete(key) {
	      var data = this.__data__;
	      if (isKeyable(key)) {
	        return hashDelete(typeof key == 'string' ? data.string : data.hash, key);
	      }
	      return Map ? data.map['delete'](key) : assocDelete(data.map, key);
	    }

	    /**
	     * Gets the map value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf MapCache
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the entry value.
	     */
	    function mapGet(key) {
	      var data = this.__data__;
	      if (isKeyable(key)) {
	        return hashGet(typeof key == 'string' ? data.string : data.hash, key);
	      }
	      return Map ? data.map.get(key) : assocGet(data.map, key);
	    }

	    /**
	     * Checks if a map value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf MapCache
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function mapHas(key) {
	      var data = this.__data__;
	      if (isKeyable(key)) {
	        return hashHas(typeof key == 'string' ? data.string : data.hash, key);
	      }
	      return Map ? data.map.has(key) : assocHas(data.map, key);
	    }

	    /**
	     * Sets the map `key` to `value`.
	     *
	     * @private
	     * @name set
	     * @memberOf MapCache
	     * @param {string} key The key of the value to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns the map cache instance.
	     */
	    function mapSet(key, value) {
	      var data = this.__data__;
	      if (isKeyable(key)) {
	        hashSet(typeof key == 'string' ? data.string : data.hash, key, value);
	      } else if (Map) {
	        data.map.set(key, value);
	      } else {
	        assocSet(data.map, key, value);
	      }
	      return this;
	    }

	    // Add methods to `MapCache`.
	    MapCache.prototype.clear = mapClear;
	    MapCache.prototype['delete'] = mapDelete;
	    MapCache.prototype.get = mapGet;
	    MapCache.prototype.has = mapHas;
	    MapCache.prototype.set = mapSet;

	    /*------------------------------------------------------------------------*/

	    /**
	     *
	     * Creates a set cache object to store unique values.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [values] The values to cache.
	     */
	    function SetCache(values) {
	      var index = -1,
	          length = values ? values.length : 0;

	      this.__data__ = new MapCache;
	      while (++index < length) {
	        this.push(values[index]);
	      }
	    }

	    /**
	     * Checks if `value` is in `cache`.
	     *
	     * @private
	     * @param {Object} cache The set cache to search.
	     * @param {*} value The value to search for.
	     * @returns {number} Returns `true` if `value` is found, else `false`.
	     */
	    function cacheHas(cache, value) {
	      var map = cache.__data__;
	      if (isKeyable(value)) {
	        var data = map.__data__,
	            hash = typeof value == 'string' ? data.string : data.hash;

	        return hash[value] === HASH_UNDEFINED;
	      }
	      return map.has(value);
	    }

	    /**
	     * Adds `value` to the set cache.
	     *
	     * @private
	     * @name push
	     * @memberOf SetCache
	     * @param {*} value The value to cache.
	     */
	    function cachePush(value) {
	      var map = this.__data__;
	      if (isKeyable(value)) {
	        var data = map.__data__,
	            hash = typeof value == 'string' ? data.string : data.hash;

	        hash[value] = HASH_UNDEFINED;
	      }
	      else {
	        map.set(value, HASH_UNDEFINED);
	      }
	    }

	    // Add methods to `SetCache`.
	    SetCache.prototype.push = cachePush;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a stack cache object to store key-value pairs.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [values] The values to cache.
	     */
	    function Stack(values) {
	      var index = -1,
	          length = values ? values.length : 0;

	      this.clear();
	      while (++index < length) {
	        var entry = values[index];
	        this.set(entry[0], entry[1]);
	      }
	    }

	    /**
	     * Removes all key-value entries from the stack.
	     *
	     * @private
	     * @name clear
	     * @memberOf Stack
	     */
	    function stackClear() {
	      this.__data__ = { 'array': [], 'map': null };
	    }

	    /**
	     * Removes `key` and its value from the stack.
	     *
	     * @private
	     * @name delete
	     * @memberOf Stack
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	     */
	    function stackDelete(key) {
	      var data = this.__data__,
	          array = data.array;

	      return array ? assocDelete(array, key) : data.map['delete'](key);
	    }

	    /**
	     * Gets the stack value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf Stack
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the entry value.
	     */
	    function stackGet(key) {
	      var data = this.__data__,
	          array = data.array;

	      return array ? assocGet(array, key) : data.map.get(key);
	    }

	    /**
	     * Checks if a stack value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf Stack
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function stackHas(key) {
	      var data = this.__data__,
	          array = data.array;

	      return array ? assocHas(array, key) : data.map.has(key);
	    }

	    /**
	     * Sets the stack `key` to `value`.
	     *
	     * @private
	     * @name set
	     * @memberOf Stack
	     * @param {string} key The key of the value to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns the stack cache instance.
	     */
	    function stackSet(key, value) {
	      var data = this.__data__,
	          array = data.array;

	      if (array) {
	        if (array.length < (LARGE_ARRAY_SIZE - 1)) {
	          assocSet(array, key, value);
	        } else {
	          data.array = null;
	          data.map = new MapCache(array);
	        }
	      }
	      var map = data.map;
	      if (map) {
	        map.set(key, value);
	      }
	      return this;
	    }

	    // Add methods to `Stack`.
	    Stack.prototype.clear = stackClear;
	    Stack.prototype['delete'] = stackDelete;
	    Stack.prototype.get = stackGet;
	    Stack.prototype.has = stackHas;
	    Stack.prototype.set = stackSet;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Removes `key` and its value from the associative array.
	     *
	     * @private
	     * @param {Array} array The array to modify.
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	     */
	    function assocDelete(array, key) {
	      var index = assocIndexOf(array, key);
	      if (index < 0) {
	        return false;
	      }
	      var lastIndex = array.length - 1;
	      if (index == lastIndex) {
	        array.pop();
	      } else {
	        splice.call(array, index, 1);
	      }
	      return true;
	    }

	    /**
	     * Gets the associative array value for `key`.
	     *
	     * @private
	     * @param {Array} array The array to query.
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the entry value.
	     */
	    function assocGet(array, key) {
	      var index = assocIndexOf(array, key);
	      return index < 0 ? undefined : array[index][1];
	    }

	    /**
	     * Checks if an associative array value for `key` exists.
	     *
	     * @private
	     * @param {Array} array The array to query.
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function assocHas(array, key) {
	      return assocIndexOf(array, key) > -1;
	    }

	    /**
	     * Gets the index at which the `key` is found in `array` of key-value pairs.
	     *
	     * @private
	     * @param {Array} array The array to search.
	     * @param {*} key The key to search for.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     */
	    function assocIndexOf(array, key) {
	      var length = array.length;
	      while (length--) {
	        if (eq(array[length][0], key)) {
	          return length;
	        }
	      }
	      return -1;
	    }

	    /**
	     * Sets the associative array `key` to `value`.
	     *
	     * @private
	     * @param {Array} array The array to modify.
	     * @param {string} key The key of the value to set.
	     * @param {*} value The value to set.
	     */
	    function assocSet(array, key, value) {
	      var index = assocIndexOf(array, key);
	      if (index < 0) {
	        array.push([key, value]);
	      } else {
	        array[index][1] = value;
	      }
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Used by `_.defaults` to customize its `_.assignIn` use.
	     *
	     * @private
	     * @param {*} objValue The destination value.
	     * @param {*} srcValue The source value.
	     * @param {string} key The key of the property to assign.
	     * @param {Object} object The parent object of `objValue`.
	     * @returns {*} Returns the value to assign.
	     */
	    function assignInDefaults(objValue, srcValue, key, object) {
	      if (objValue === undefined ||
	          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
	        return srcValue;
	      }
	      return objValue;
	    }

	    /**
	     * This function is like `assignValue` except that it doesn't assign
	     * `undefined` values.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {string} key The key of the property to assign.
	     * @param {*} value The value to assign.
	     */
	    function assignMergeValue(object, key, value) {
	      if ((value !== undefined && !eq(object[key], value)) ||
	          (typeof key == 'number' && value === undefined && !(key in object))) {
	        object[key] = value;
	      }
	    }

	    /**
	     * Assigns `value` to `key` of `object` if the existing value is not equivalent
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {string} key The key of the property to assign.
	     * @param {*} value The value to assign.
	     */
	    function assignValue(object, key, value) {
	      var objValue = object[key];
	      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
	          (value === undefined && !(key in object))) {
	        object[key] = value;
	      }
	    }

	    /**
	     * Aggregates elements of `collection` on `accumulator` with keys transformed
	     * by `iteratee` and values set by `setter`.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} setter The function to set `accumulator` values.
	     * @param {Function} iteratee The iteratee to transform keys.
	     * @param {Object} accumulator The initial aggregated object.
	     * @returns {Function} Returns `accumulator`.
	     */
	    function baseAggregator(collection, setter, iteratee, accumulator) {
	      baseEach(collection, function(value, key, collection) {
	        setter(accumulator, value, iteratee(value), collection);
	      });
	      return accumulator;
	    }

	    /**
	     * The base implementation of `_.assign` without support for multiple sources
	     * or `customizer` functions.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @returns {Object} Returns `object`.
	     */
	    function baseAssign(object, source) {
	      return object && copyObject(source, keys(source), object);
	    }

	    /**
	     * The base implementation of `_.at` without support for individual paths.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {string[]} paths The property paths of elements to pick.
	     * @returns {Array} Returns the new array of picked elements.
	     */
	    function baseAt(object, paths) {
	      var index = -1,
	          isNil = object == null,
	          length = paths.length,
	          result = Array(length);

	      while (++index < length) {
	        result[index] = isNil ? undefined : get(object, paths[index]);
	      }
	      return result;
	    }

	    /**
	     * Casts `value` to an empty array if it's not an array like object.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @returns {Array|Object} Returns the cast array-like object.
	     */
	    function baseCastArrayLikeObject(value) {
	      return isArrayLikeObject(value) ? value : [];
	    }

	    /**
	     * Casts `value` to `identity` if it's not a function.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @returns {Function} Returns cast function.
	     */
	    function baseCastFunction(value) {
	      return typeof value == 'function' ? value : identity;
	    }

	    /**
	     * Casts `value` to a string if it's not a string or symbol.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @returns {string|symbol} Returns the cast key.
	     */
	    function baseCastKey(key) {
	      return (typeof key == 'string' || isSymbol(key)) ? key : (key + '');
	    }

	    /**
	     * Casts `value` to a path array if it's not one.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @returns {Array} Returns the cast property path array.
	     */
	    function baseCastPath(value) {
	      return isArray(value) ? value : stringToPath(value);
	    }

	    /**
	     * The base implementation of `_.clamp` which doesn't coerce arguments to numbers.
	     *
	     * @private
	     * @param {number} number The number to clamp.
	     * @param {number} [lower] The lower bound.
	     * @param {number} upper The upper bound.
	     * @returns {number} Returns the clamped number.
	     */
	    function baseClamp(number, lower, upper) {
	      if (number === number) {
	        if (upper !== undefined) {
	          number = number <= upper ? number : upper;
	        }
	        if (lower !== undefined) {
	          number = number >= lower ? number : lower;
	        }
	      }
	      return number;
	    }

	    /**
	     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
	     * traversed objects.
	     *
	     * @private
	     * @param {*} value The value to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @param {boolean} [isFull] Specify a clone including symbols.
	     * @param {Function} [customizer] The function to customize cloning.
	     * @param {string} [key] The key of `value`.
	     * @param {Object} [object] The parent object of `value`.
	     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
	     * @returns {*} Returns the cloned value.
	     */
	    function baseClone(value, isDeep, isFull, customizer, key, object, stack) {
	      var result;
	      if (customizer) {
	        result = object ? customizer(value, key, object, stack) : customizer(value);
	      }
	      if (result !== undefined) {
	        return result;
	      }
	      if (!isObject(value)) {
	        return value;
	      }
	      var isArr = isArray(value);
	      if (isArr) {
	        result = initCloneArray(value);
	        if (!isDeep) {
	          return copyArray(value, result);
	        }
	      } else {
	        var tag = getTag(value),
	            isFunc = tag == funcTag || tag == genTag;

	        if (isBuffer(value)) {
	          return cloneBuffer(value, isDeep);
	        }
	        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
	          if (isHostObject(value)) {
	            return object ? value : {};
	          }
	          result = initCloneObject(isFunc ? {} : value);
	          if (!isDeep) {
	            return copySymbols(value, baseAssign(result, value));
	          }
	        } else {
	          if (!cloneableTags[tag]) {
	            return object ? value : {};
	          }
	          result = initCloneByTag(value, tag, baseClone, isDeep);
	        }
	      }
	      // Check for circular references and return its corresponding clone.
	      stack || (stack = new Stack);
	      var stacked = stack.get(value);
	      if (stacked) {
	        return stacked;
	      }
	      stack.set(value, result);

	      if (!isArr) {
	        var props = isFull ? getAllKeys(value) : keys(value);
	      }
	      // Recursively populate clone (susceptible to call stack limits).
	      arrayEach(props || value, function(subValue, key) {
	        if (props) {
	          key = subValue;
	          subValue = value[key];
	        }
	        assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.conforms` which doesn't clone `source`.
	     *
	     * @private
	     * @param {Object} source The object of property predicates to conform to.
	     * @returns {Function} Returns the new function.
	     */
	    function baseConforms(source) {
	      var props = keys(source),
	          length = props.length;

	      return function(object) {
	        if (object == null) {
	          return !length;
	        }
	        var index = length;
	        while (index--) {
	          var key = props[index],
	              predicate = source[key],
	              value = object[key];

	          if ((value === undefined &&
	              !(key in Object(object))) || !predicate(value)) {
	            return false;
	          }
	        }
	        return true;
	      };
	    }

	    /**
	     * The base implementation of `_.create` without support for assigning
	     * properties to the created object.
	     *
	     * @private
	     * @param {Object} prototype The object to inherit from.
	     * @returns {Object} Returns the new object.
	     */
	    function baseCreate(proto) {
	      return isObject(proto) ? objectCreate(proto) : {};
	    }

	    /**
	     * The base implementation of `_.delay` and `_.defer` which accepts an array
	     * of `func` arguments.
	     *
	     * @private
	     * @param {Function} func The function to delay.
	     * @param {number} wait The number of milliseconds to delay invocation.
	     * @param {Object} args The arguments to provide to `func`.
	     * @returns {number} Returns the timer id.
	     */
	    function baseDelay(func, wait, args) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      return setTimeout(function() { func.apply(undefined, args); }, wait);
	    }

	    /**
	     * The base implementation of methods like `_.difference` without support
	     * for excluding multiple arrays or iteratee shorthands.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Array} values The values to exclude.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     */
	    function baseDifference(array, values, iteratee, comparator) {
	      var index = -1,
	          includes = arrayIncludes,
	          isCommon = true,
	          length = array.length,
	          result = [],
	          valuesLength = values.length;

	      if (!length) {
	        return result;
	      }
	      if (iteratee) {
	        values = arrayMap(values, baseUnary(iteratee));
	      }
	      if (comparator) {
	        includes = arrayIncludesWith;
	        isCommon = false;
	      }
	      else if (values.length >= LARGE_ARRAY_SIZE) {
	        includes = cacheHas;
	        isCommon = false;
	        values = new SetCache(values);
	      }
	      outer:
	      while (++index < length) {
	        var value = array[index],
	            computed = iteratee ? iteratee(value) : value;

	        if (isCommon && computed === computed) {
	          var valuesIndex = valuesLength;
	          while (valuesIndex--) {
	            if (values[valuesIndex] === computed) {
	              continue outer;
	            }
	          }
	          result.push(value);
	        }
	        else if (!includes(values, computed, comparator)) {
	          result.push(value);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.forEach` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array|Object} Returns `collection`.
	     */
	    var baseEach = createBaseEach(baseForOwn);

	    /**
	     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array|Object} Returns `collection`.
	     */
	    var baseEachRight = createBaseEach(baseForOwnRight, true);

	    /**
	     * The base implementation of `_.every` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
	     *  else `false`
	     */
	    function baseEvery(collection, predicate) {
	      var result = true;
	      baseEach(collection, function(value, index, collection) {
	        result = !!predicate(value, index, collection);
	        return result;
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.fill` without an iteratee call guard.
	     *
	     * @private
	     * @param {Array} array The array to fill.
	     * @param {*} value The value to fill `array` with.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns `array`.
	     */
	    function baseFill(array, value, start, end) {
	      var length = array.length;

	      start = toInteger(start);
	      if (start < 0) {
	        start = -start > length ? 0 : (length + start);
	      }
	      end = (end === undefined || end > length) ? length : toInteger(end);
	      if (end < 0) {
	        end += length;
	      }
	      end = start > end ? 0 : toLength(end);
	      while (start < end) {
	        array[start++] = value;
	      }
	      return array;
	    }

	    /**
	     * The base implementation of `_.filter` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     */
	    function baseFilter(collection, predicate) {
	      var result = [];
	      baseEach(collection, function(value, index, collection) {
	        if (predicate(value, index, collection)) {
	          result.push(value);
	        }
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.flatten` with support for restricting flattening.
	     *
	     * @private
	     * @param {Array} array The array to flatten.
	     * @param {number} depth The maximum recursion depth.
	     * @param {boolean} [isStrict] Restrict flattening to arrays-like objects.
	     * @param {Array} [result=[]] The initial result value.
	     * @returns {Array} Returns the new flattened array.
	     */
	    function baseFlatten(array, depth, isStrict, result) {
	      result || (result = []);

	      var index = -1,
	          length = array.length;

	      while (++index < length) {
	        var value = array[index];
	        if (depth > 0 && isArrayLikeObject(value) &&
	            (isStrict || isArray(value) || isArguments(value))) {
	          if (depth > 1) {
	            // Recursively flatten arrays (susceptible to call stack limits).
	            baseFlatten(value, depth - 1, isStrict, result);
	          } else {
	            arrayPush(result, value);
	          }
	        } else if (!isStrict) {
	          result[result.length] = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `baseForOwn` which iterates over `object`
	     * properties returned by `keysFunc` invoking `iteratee` for each property.
	     * Iteratee functions may exit iteration early by explicitly returning `false`.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @returns {Object} Returns `object`.
	     */
	    var baseFor = createBaseFor();

	    /**
	     * This function is like `baseFor` except that it iterates over properties
	     * in the opposite order.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @returns {Object} Returns `object`.
	     */
	    var baseForRight = createBaseFor(true);

	    /**
	     * The base implementation of `_.forOwn` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */
	    function baseForOwn(object, iteratee) {
	      return object && baseFor(object, iteratee, keys);
	    }

	    /**
	     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */
	    function baseForOwnRight(object, iteratee) {
	      return object && baseForRight(object, iteratee, keys);
	    }

	    /**
	     * The base implementation of `_.functions` which creates an array of
	     * `object` function property names filtered from `props`.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Array} props The property names to filter.
	     * @returns {Array} Returns the new array of filtered property names.
	     */
	    function baseFunctions(object, props) {
	      return arrayFilter(props, function(key) {
	        return isFunction(object[key]);
	      });
	    }

	    /**
	     * The base implementation of `_.get` without support for default values.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to get.
	     * @returns {*} Returns the resolved value.
	     */
	    function baseGet(object, path) {
	      path = isKey(path, object) ? [path] : baseCastPath(path);

	      var index = 0,
	          length = path.length;

	      while (object != null && index < length) {
	        object = object[path[index++]];
	      }
	      return (index && index == length) ? object : undefined;
	    }

	    /**
	     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
	     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
	     * symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @param {Function} symbolsFunc The function to get the symbols of `object`.
	     * @returns {Array} Returns the array of property names and symbols.
	     */
	    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
	      var result = keysFunc(object);
	      return isArray(object)
	        ? result
	        : arrayPush(result, symbolsFunc(object));
	    }

	    /**
	     * The base implementation of `_.has` without support for deep paths.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} key The key to check.
	     * @returns {boolean} Returns `true` if `key` exists, else `false`.
	     */
	    function baseHas(object, key) {
	      // Avoid a bug in IE 10-11 where objects with a [[Prototype]] of `null`,
	      // that are composed entirely of index properties, return `false` for
	      // `hasOwnProperty` checks of them.
	      return hasOwnProperty.call(object, key) ||
	        (typeof object == 'object' && key in object && getPrototype(object) === null);
	    }

	    /**
	     * The base implementation of `_.hasIn` without support for deep paths.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} key The key to check.
	     * @returns {boolean} Returns `true` if `key` exists, else `false`.
	     */
	    function baseHasIn(object, key) {
	      return key in Object(object);
	    }

	    /**
	     * The base implementation of `_.inRange` which doesn't coerce arguments to numbers.
	     *
	     * @private
	     * @param {number} number The number to check.
	     * @param {number} start The start of the range.
	     * @param {number} end The end of the range.
	     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
	     */
	    function baseInRange(number, start, end) {
	      return number >= nativeMin(start, end) && number < nativeMax(start, end);
	    }

	    /**
	     * The base implementation of methods like `_.intersection`, without support
	     * for iteratee shorthands, that accepts an array of arrays to inspect.
	     *
	     * @private
	     * @param {Array} arrays The arrays to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of shared values.
	     */
	    function baseIntersection(arrays, iteratee, comparator) {
	      var includes = comparator ? arrayIncludesWith : arrayIncludes,
	          length = arrays[0].length,
	          othLength = arrays.length,
	          othIndex = othLength,
	          caches = Array(othLength),
	          maxLength = Infinity,
	          result = [];

	      while (othIndex--) {
	        var array = arrays[othIndex];
	        if (othIndex && iteratee) {
	          array = arrayMap(array, baseUnary(iteratee));
	        }
	        maxLength = nativeMin(array.length, maxLength);
	        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
	          ? new SetCache(othIndex && array)
	          : undefined;
	      }
	      array = arrays[0];

	      var index = -1,
	          seen = caches[0];

	      outer:
	      while (++index < length && result.length < maxLength) {
	        var value = array[index],
	            computed = iteratee ? iteratee(value) : value;

	        if (!(seen
	              ? cacheHas(seen, computed)
	              : includes(result, computed, comparator)
	            )) {
	          othIndex = othLength;
	          while (--othIndex) {
	            var cache = caches[othIndex];
	            if (!(cache
	                  ? cacheHas(cache, computed)
	                  : includes(arrays[othIndex], computed, comparator))
	                ) {
	              continue outer;
	            }
	          }
	          if (seen) {
	            seen.push(computed);
	          }
	          result.push(value);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.invert` and `_.invertBy` which inverts
	     * `object` with values transformed by `iteratee` and set by `setter`.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} setter The function to set `accumulator` values.
	     * @param {Function} iteratee The iteratee to transform values.
	     * @param {Object} accumulator The initial inverted object.
	     * @returns {Function} Returns `accumulator`.
	     */
	    function baseInverter(object, setter, iteratee, accumulator) {
	      baseForOwn(object, function(value, key, object) {
	        setter(accumulator, iteratee(value), key, object);
	      });
	      return accumulator;
	    }

	    /**
	     * The base implementation of `_.invoke` without support for individual
	     * method arguments.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the method to invoke.
	     * @param {Array} args The arguments to invoke the method with.
	     * @returns {*} Returns the result of the invoked method.
	     */
	    function baseInvoke(object, path, args) {
	      if (!isKey(path, object)) {
	        path = baseCastPath(path);
	        object = parent(object, path);
	        path = last(path);
	      }
	      var func = object == null ? object : object[path];
	      return func == null ? undefined : apply(func, object, args);
	    }

	    /**
	     * The base implementation of `_.isEqual` which supports partial comparisons
	     * and tracks traversed objects.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @param {boolean} [bitmask] The bitmask of comparison flags.
	     *  The bitmask may be composed of the following flags:
	     *     1 - Unordered comparison
	     *     2 - Partial comparison
	     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     */
	    function baseIsEqual(value, other, customizer, bitmask, stack) {
	      if (value === other) {
	        return true;
	      }
	      if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
	        return value !== value && other !== other;
	      }
	      return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);
	    }

	    /**
	     * A specialized version of `baseIsEqual` for arrays and objects which performs
	     * deep comparisons and tracks traversed objects enabling objects with circular
	     * references to be compared.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual`
	     *  for more details.
	     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {
	      var objIsArr = isArray(object),
	          othIsArr = isArray(other),
	          objTag = arrayTag,
	          othTag = arrayTag;

	      if (!objIsArr) {
	        objTag = getTag(object);
	        objTag = objTag == argsTag ? objectTag : objTag;
	      }
	      if (!othIsArr) {
	        othTag = getTag(other);
	        othTag = othTag == argsTag ? objectTag : othTag;
	      }
	      var objIsObj = objTag == objectTag && !isHostObject(object),
	          othIsObj = othTag == objectTag && !isHostObject(other),
	          isSameTag = objTag == othTag;

	      if (isSameTag && !objIsObj) {
	        stack || (stack = new Stack);
	        return (objIsArr || isTypedArray(object))
	          ? equalArrays(object, other, equalFunc, customizer, bitmask, stack)
	          : equalByTag(object, other, objTag, equalFunc, customizer, bitmask, stack);
	      }
	      if (!(bitmask & PARTIAL_COMPARE_FLAG)) {
	        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
	            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

	        if (objIsWrapped || othIsWrapped) {
	          var objUnwrapped = objIsWrapped ? object.value() : object,
	              othUnwrapped = othIsWrapped ? other.value() : other;

	          stack || (stack = new Stack);
	          return equalFunc(objUnwrapped, othUnwrapped, customizer, bitmask, stack);
	        }
	      }
	      if (!isSameTag) {
	        return false;
	      }
	      stack || (stack = new Stack);
	      return equalObjects(object, other, equalFunc, customizer, bitmask, stack);
	    }

	    /**
	     * The base implementation of `_.isMatch` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property values to match.
	     * @param {Array} matchData The property names, values, and compare flags to match.
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     */
	    function baseIsMatch(object, source, matchData, customizer) {
	      var index = matchData.length,
	          length = index,
	          noCustomizer = !customizer;

	      if (object == null) {
	        return !length;
	      }
	      object = Object(object);
	      while (index--) {
	        var data = matchData[index];
	        if ((noCustomizer && data[2])
	              ? data[1] !== object[data[0]]
	              : !(data[0] in object)
	            ) {
	          return false;
	        }
	      }
	      while (++index < length) {
	        data = matchData[index];
	        var key = data[0],
	            objValue = object[key],
	            srcValue = data[1];

	        if (noCustomizer && data[2]) {
	          if (objValue === undefined && !(key in object)) {
	            return false;
	          }
	        } else {
	          var stack = new Stack;
	          if (customizer) {
	            var result = customizer(objValue, srcValue, key, object, source, stack);
	          }
	          if (!(result === undefined
	                ? baseIsEqual(srcValue, objValue, customizer, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG, stack)
	                : result
	              )) {
	            return false;
	          }
	        }
	      }
	      return true;
	    }

	    /**
	     * The base implementation of `_.iteratee`.
	     *
	     * @private
	     * @param {*} [value=_.identity] The value to convert to an iteratee.
	     * @returns {Function} Returns the iteratee.
	     */
	    function baseIteratee(value) {
	      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
	      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
	      if (typeof value == 'function') {
	        return value;
	      }
	      if (value == null) {
	        return identity;
	      }
	      if (typeof value == 'object') {
	        return isArray(value)
	          ? baseMatchesProperty(value[0], value[1])
	          : baseMatches(value);
	      }
	      return property(value);
	    }

	    /**
	     * The base implementation of `_.keys` which doesn't skip the constructor
	     * property of prototypes or treat sparse arrays as dense.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     */
	    function baseKeys(object) {
	      return nativeKeys(Object(object));
	    }

	    /**
	     * The base implementation of `_.keysIn` which doesn't skip the constructor
	     * property of prototypes or treat sparse arrays as dense.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     */
	    function baseKeysIn(object) {
	      object = object == null ? object : Object(object);

	      var result = [];
	      for (var key in object) {
	        result.push(key);
	      }
	      return result;
	    }

	    // Fallback for IE < 9 with es6-shim.
	    if (enumerate && !propertyIsEnumerable.call({ 'valueOf': 1 }, 'valueOf')) {
	      baseKeysIn = function(object) {
	        return iteratorToArray(enumerate(object));
	      };
	    }

	    /**
	     * The base implementation of `_.map` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array} Returns the new mapped array.
	     */
	    function baseMap(collection, iteratee) {
	      var index = -1,
	          result = isArrayLike(collection) ? Array(collection.length) : [];

	      baseEach(collection, function(value, key, collection) {
	        result[++index] = iteratee(value, key, collection);
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.matches` which doesn't clone `source`.
	     *
	     * @private
	     * @param {Object} source The object of property values to match.
	     * @returns {Function} Returns the new function.
	     */
	    function baseMatches(source) {
	      var matchData = getMatchData(source);
	      if (matchData.length == 1 && matchData[0][2]) {
	        var key = matchData[0][0],
	            value = matchData[0][1];

	        return function(object) {
	          if (object == null) {
	            return false;
	          }
	          return object[key] === value &&
	            (value !== undefined || (key in Object(object)));
	        };
	      }
	      return function(object) {
	        return object === source || baseIsMatch(object, source, matchData);
	      };
	    }

	    /**
	     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
	     *
	     * @private
	     * @param {string} path The path of the property to get.
	     * @param {*} srcValue The value to match.
	     * @returns {Function} Returns the new function.
	     */
	    function baseMatchesProperty(path, srcValue) {
	      return function(object) {
	        var objValue = get(object, path);
	        return (objValue === undefined && objValue === srcValue)
	          ? hasIn(object, path)
	          : baseIsEqual(srcValue, objValue, undefined, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG);
	      };
	    }

	    /**
	     * The base implementation of `_.merge` without support for multiple sources.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {number} srcIndex The index of `source`.
	     * @param {Function} [customizer] The function to customize merged values.
	     * @param {Object} [stack] Tracks traversed source values and their merged
	     *  counterparts.
	     */
	    function baseMerge(object, source, srcIndex, customizer, stack) {
	      if (object === source) {
	        return;
	      }
	      if (!(isArray(source) || isTypedArray(source))) {
	        var props = keysIn(source);
	      }
	      arrayEach(props || source, function(srcValue, key) {
	        if (props) {
	          key = srcValue;
	          srcValue = source[key];
	        }
	        if (isObject(srcValue)) {
	          stack || (stack = new Stack);
	          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
	        }
	        else {
	          var newValue = customizer
	            ? customizer(object[key], srcValue, (key + ''), object, source, stack)
	            : undefined;

	          if (newValue === undefined) {
	            newValue = srcValue;
	          }
	          assignMergeValue(object, key, newValue);
	        }
	      });
	    }

	    /**
	     * A specialized version of `baseMerge` for arrays and objects which performs
	     * deep merges and tracks traversed objects enabling objects with circular
	     * references to be merged.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {string} key The key of the value to merge.
	     * @param {number} srcIndex The index of `source`.
	     * @param {Function} mergeFunc The function to merge values.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @param {Object} [stack] Tracks traversed source values and their merged
	     *  counterparts.
	     */
	    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
	      var objValue = object[key],
	          srcValue = source[key],
	          stacked = stack.get(srcValue);

	      if (stacked) {
	        assignMergeValue(object, key, stacked);
	        return;
	      }
	      var newValue = customizer
	        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
	        : undefined;

	      var isCommon = newValue === undefined;

	      if (isCommon) {
	        newValue = srcValue;
	        if (isArray(srcValue) || isTypedArray(srcValue)) {
	          if (isArray(objValue)) {
	            newValue = objValue;
	          }
	          else if (isArrayLikeObject(objValue)) {
	            newValue = copyArray(objValue);
	          }
	          else {
	            isCommon = false;
	            newValue = baseClone(srcValue, true);
	          }
	        }
	        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
	          if (isArguments(objValue)) {
	            newValue = toPlainObject(objValue);
	          }
	          else if (!isObject(objValue) || (srcIndex && isFunction(objValue))) {
	            isCommon = false;
	            newValue = baseClone(srcValue, true);
	          }
	          else {
	            newValue = objValue;
	          }
	        }
	        else {
	          isCommon = false;
	        }
	      }
	      stack.set(srcValue, newValue);

	      if (isCommon) {
	        // Recursively merge objects and arrays (susceptible to call stack limits).
	        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
	      }
	      stack['delete'](srcValue);
	      assignMergeValue(object, key, newValue);
	    }

	    /**
	     * The base implementation of `_.orderBy` without param guards.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
	     * @param {string[]} orders The sort orders of `iteratees`.
	     * @returns {Array} Returns the new sorted array.
	     */
	    function baseOrderBy(collection, iteratees, orders) {
	      var index = -1;
	      iteratees = arrayMap(iteratees.length ? iteratees : [identity], getIteratee());

	      var result = baseMap(collection, function(value, key, collection) {
	        var criteria = arrayMap(iteratees, function(iteratee) {
	          return iteratee(value);
	        });
	        return { 'criteria': criteria, 'index': ++index, 'value': value };
	      });

	      return baseSortBy(result, function(object, other) {
	        return compareMultiple(object, other, orders);
	      });
	    }

	    /**
	     * The base implementation of `_.pick` without support for individual
	     * property identifiers.
	     *
	     * @private
	     * @param {Object} object The source object.
	     * @param {string[]} props The property identifiers to pick.
	     * @returns {Object} Returns the new object.
	     */
	    function basePick(object, props) {
	      object = Object(object);
	      return arrayReduce(props, function(result, key) {
	        if (key in object) {
	          result[key] = object[key];
	        }
	        return result;
	      }, {});
	    }

	    /**
	     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Object} object The source object.
	     * @param {Function} predicate The function invoked per property.
	     * @returns {Object} Returns the new object.
	     */
	    function basePickBy(object, predicate) {
	      var index = -1,
	          props = getAllKeysIn(object),
	          length = props.length,
	          result = {};

	      while (++index < length) {
	        var key = props[index],
	            value = object[key];

	        if (predicate(value, key)) {
	          result[key] = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.property` without support for deep paths.
	     *
	     * @private
	     * @param {string} key The key of the property to get.
	     * @returns {Function} Returns the new function.
	     */
	    function baseProperty(key) {
	      return function(object) {
	        return object == null ? undefined : object[key];
	      };
	    }

	    /**
	     * A specialized version of `baseProperty` which supports deep paths.
	     *
	     * @private
	     * @param {Array|string} path The path of the property to get.
	     * @returns {Function} Returns the new function.
	     */
	    function basePropertyDeep(path) {
	      return function(object) {
	        return baseGet(object, path);
	      };
	    }

	    /**
	     * The base implementation of `_.pullAllBy` without support for iteratee
	     * shorthands.
	     *
	     * @private
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to remove.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns `array`.
	     */
	    function basePullAll(array, values, iteratee, comparator) {
	      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
	          index = -1,
	          length = values.length,
	          seen = array;

	      if (iteratee) {
	        seen = arrayMap(array, baseUnary(iteratee));
	      }
	      while (++index < length) {
	        var fromIndex = 0,
	            value = values[index],
	            computed = iteratee ? iteratee(value) : value;

	        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
	          if (seen !== array) {
	            splice.call(seen, fromIndex, 1);
	          }
	          splice.call(array, fromIndex, 1);
	        }
	      }
	      return array;
	    }

	    /**
	     * The base implementation of `_.pullAt` without support for individual
	     * indexes or capturing the removed elements.
	     *
	     * @private
	     * @param {Array} array The array to modify.
	     * @param {number[]} indexes The indexes of elements to remove.
	     * @returns {Array} Returns `array`.
	     */
	    function basePullAt(array, indexes) {
	      var length = array ? indexes.length : 0,
	          lastIndex = length - 1;

	      while (length--) {
	        var index = indexes[length];
	        if (lastIndex == length || index != previous) {
	          var previous = index;
	          if (isIndex(index)) {
	            splice.call(array, index, 1);
	          }
	          else if (!isKey(index, array)) {
	            var path = baseCastPath(index),
	                object = parent(array, path);

	            if (object != null) {
	              delete object[last(path)];
	            }
	          }
	          else {
	            delete array[index];
	          }
	        }
	      }
	      return array;
	    }

	    /**
	     * The base implementation of `_.random` without support for returning
	     * floating-point numbers.
	     *
	     * @private
	     * @param {number} lower The lower bound.
	     * @param {number} upper The upper bound.
	     * @returns {number} Returns the random number.
	     */
	    function baseRandom(lower, upper) {
	      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
	    }

	    /**
	     * The base implementation of `_.range` and `_.rangeRight` which doesn't
	     * coerce arguments to numbers.
	     *
	     * @private
	     * @param {number} start The start of the range.
	     * @param {number} end The end of the range.
	     * @param {number} step The value to increment or decrement by.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Array} Returns the new array of numbers.
	     */
	    function baseRange(start, end, step, fromRight) {
	      var index = -1,
	          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
	          result = Array(length);

	      while (length--) {
	        result[fromRight ? length : ++index] = start;
	        start += step;
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.repeat` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {string} string The string to repeat.
	     * @param {number} n The number of times to repeat the string.
	     * @returns {string} Returns the repeated string.
	     */
	    function baseRepeat(string, n) {
	      var result = '';
	      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
	        return result;
	      }
	      // Leverage the exponentiation by squaring algorithm for a faster repeat.
	      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
	      do {
	        if (n % 2) {
	          result += string;
	        }
	        n = nativeFloor(n / 2);
	        if (n) {
	          string += string;
	        }
	      } while (n);

	      return result;
	    }

	    /**
	     * The base implementation of `_.set`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to set.
	     * @param {*} value The value to set.
	     * @param {Function} [customizer] The function to customize path creation.
	     * @returns {Object} Returns `object`.
	     */
	    function baseSet(object, path, value, customizer) {
	      path = isKey(path, object) ? [path] : baseCastPath(path);

	      var index = -1,
	          length = path.length,
	          lastIndex = length - 1,
	          nested = object;

	      while (nested != null && ++index < length) {
	        var key = path[index];
	        if (isObject(nested)) {
	          var newValue = value;
	          if (index != lastIndex) {
	            var objValue = nested[key];
	            newValue = customizer ? customizer(objValue, key, nested) : undefined;
	            if (newValue === undefined) {
	              newValue = objValue == null
	                ? (isIndex(path[index + 1]) ? [] : {})
	                : objValue;
	            }
	          }
	          assignValue(nested, key, newValue);
	        }
	        nested = nested[key];
	      }
	      return object;
	    }

	    /**
	     * The base implementation of `setData` without support for hot loop detection.
	     *
	     * @private
	     * @param {Function} func The function to associate metadata with.
	     * @param {*} data The metadata.
	     * @returns {Function} Returns `func`.
	     */
	    var baseSetData = !metaMap ? identity : function(func, data) {
	      metaMap.set(func, data);
	      return func;
	    };

	    /**
	     * The base implementation of `_.slice` without an iteratee call guard.
	     *
	     * @private
	     * @param {Array} array The array to slice.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function baseSlice(array, start, end) {
	      var index = -1,
	          length = array.length;

	      if (start < 0) {
	        start = -start > length ? 0 : (length + start);
	      }
	      end = end > length ? length : end;
	      if (end < 0) {
	        end += length;
	      }
	      length = start > end ? 0 : ((end - start) >>> 0);
	      start >>>= 0;

	      var result = Array(length);
	      while (++index < length) {
	        result[index] = array[index + start];
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.some` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if any element passes the predicate check,
	     *  else `false`.
	     */
	    function baseSome(collection, predicate) {
	      var result;

	      baseEach(collection, function(value, index, collection) {
	        result = predicate(value, index, collection);
	        return !result;
	      });
	      return !!result;
	    }

	    /**
	     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
	     * performs a binary search of `array` to determine the index at which `value`
	     * should be inserted into `array` in order to maintain its sort order.
	     *
	     * @private
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     */
	    function baseSortedIndex(array, value, retHighest) {
	      var low = 0,
	          high = array ? array.length : low;

	      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
	        while (low < high) {
	          var mid = (low + high) >>> 1,
	              computed = array[mid];

	          if ((retHighest ? (computed <= value) : (computed < value)) && computed !== null) {
	            low = mid + 1;
	          } else {
	            high = mid;
	          }
	        }
	        return high;
	      }
	      return baseSortedIndexBy(array, value, identity, retHighest);
	    }

	    /**
	     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
	     * which invokes `iteratee` for `value` and each element of `array` to compute
	     * their sort ranking. The iteratee is invoked with one argument; (value).
	     *
	     * @private
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function} iteratee The iteratee invoked per element.
	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     */
	    function baseSortedIndexBy(array, value, iteratee, retHighest) {
	      value = iteratee(value);

	      var low = 0,
	          high = array ? array.length : 0,
	          valIsNaN = value !== value,
	          valIsNull = value === null,
	          valIsUndef = value === undefined;

	      while (low < high) {
	        var mid = nativeFloor((low + high) / 2),
	            computed = iteratee(array[mid]),
	            isDef = computed !== undefined,
	            isReflexive = computed === computed;

	        if (valIsNaN) {
	          var setLow = isReflexive || retHighest;
	        } else if (valIsNull) {
	          setLow = isReflexive && isDef && (retHighest || computed != null);
	        } else if (valIsUndef) {
	          setLow = isReflexive && (retHighest || isDef);
	        } else if (computed == null) {
	          setLow = false;
	        } else {
	          setLow = retHighest ? (computed <= value) : (computed < value);
	        }
	        if (setLow) {
	          low = mid + 1;
	        } else {
	          high = mid;
	        }
	      }
	      return nativeMin(high, MAX_ARRAY_INDEX);
	    }

	    /**
	     * The base implementation of `_.sortedUniq`.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @returns {Array} Returns the new duplicate free array.
	     */
	    function baseSortedUniq(array) {
	      return baseSortedUniqBy(array);
	    }

	    /**
	     * The base implementation of `_.sortedUniqBy` without support for iteratee
	     * shorthands.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     */
	    function baseSortedUniqBy(array, iteratee) {
	      var index = 0,
	          length = array.length,
	          value = array[0],
	          computed = iteratee ? iteratee(value) : value,
	          seen = computed,
	          resIndex = 1,
	          result = [value];

	      while (++index < length) {
	        value = array[index],
	        computed = iteratee ? iteratee(value) : value;

	        if (!eq(computed, seen)) {
	          seen = computed;
	          result[resIndex++] = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     */
	    function baseUniq(array, iteratee, comparator) {
	      var index = -1,
	          includes = arrayIncludes,
	          length = array.length,
	          isCommon = true,
	          result = [],
	          seen = result;

	      if (comparator) {
	        isCommon = false;
	        includes = arrayIncludesWith;
	      }
	      else if (length >= LARGE_ARRAY_SIZE) {
	        var set = iteratee ? null : createSet(array);
	        if (set) {
	          return setToArray(set);
	        }
	        isCommon = false;
	        includes = cacheHas;
	        seen = new SetCache;
	      }
	      else {
	        seen = iteratee ? [] : result;
	      }
	      outer:
	      while (++index < length) {
	        var value = array[index],
	            computed = iteratee ? iteratee(value) : value;

	        if (isCommon && computed === computed) {
	          var seenIndex = seen.length;
	          while (seenIndex--) {
	            if (seen[seenIndex] === computed) {
	              continue outer;
	            }
	          }
	          if (iteratee) {
	            seen.push(computed);
	          }
	          result.push(value);
	        }
	        else if (!includes(seen, computed, comparator)) {
	          if (seen !== result) {
	            seen.push(computed);
	          }
	          result.push(value);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.unset`.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to unset.
	     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
	     */
	    function baseUnset(object, path) {
	      path = isKey(path, object) ? [path] : baseCastPath(path);
	      object = parent(object, path);
	      var key = last(path);
	      return (object != null && has(object, key)) ? delete object[key] : true;
	    }

	    /**
	     * The base implementation of `_.update`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to update.
	     * @param {Function} updater The function to produce the updated value.
	     * @param {Function} [customizer] The function to customize path creation.
	     * @returns {Object} Returns `object`.
	     */
	    function baseUpdate(object, path, updater, customizer) {
	      return baseSet(object, path, updater(baseGet(object, path)), customizer);
	    }

	    /**
	     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
	     * without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array} array The array to query.
	     * @param {Function} predicate The function invoked per iteration.
	     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function baseWhile(array, predicate, isDrop, fromRight) {
	      var length = array.length,
	          index = fromRight ? length : -1;

	      while ((fromRight ? index-- : ++index < length) &&
	        predicate(array[index], index, array)) {}

	      return isDrop
	        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
	        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
	    }

	    /**
	     * The base implementation of `wrapperValue` which returns the result of
	     * performing a sequence of actions on the unwrapped `value`, where each
	     * successive action is supplied the return value of the previous.
	     *
	     * @private
	     * @param {*} value The unwrapped value.
	     * @param {Array} actions Actions to perform to resolve the unwrapped value.
	     * @returns {*} Returns the resolved value.
	     */
	    function baseWrapperValue(value, actions) {
	      var result = value;
	      if (result instanceof LazyWrapper) {
	        result = result.value();
	      }
	      return arrayReduce(actions, function(result, action) {
	        return action.func.apply(action.thisArg, arrayPush([result], action.args));
	      }, result);
	    }

	    /**
	     * The base implementation of methods like `_.xor`, without support for
	     * iteratee shorthands, that accepts an array of arrays to inspect.
	     *
	     * @private
	     * @param {Array} arrays The arrays to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of values.
	     */
	    function baseXor(arrays, iteratee, comparator) {
	      var index = -1,
	          length = arrays.length;

	      while (++index < length) {
	        var result = result
	          ? arrayPush(
	              baseDifference(result, arrays[index], iteratee, comparator),
	              baseDifference(arrays[index], result, iteratee, comparator)
	            )
	          : arrays[index];
	      }
	      return (result && result.length) ? baseUniq(result, iteratee, comparator) : [];
	    }

	    /**
	     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
	     *
	     * @private
	     * @param {Array} props The property identifiers.
	     * @param {Array} values The property values.
	     * @param {Function} assignFunc The function to assign values.
	     * @returns {Object} Returns the new object.
	     */
	    function baseZipObject(props, values, assignFunc) {
	      var index = -1,
	          length = props.length,
	          valsLength = values.length,
	          result = {};

	      while (++index < length) {
	        var value = index < valsLength ? values[index] : undefined;
	        assignFunc(result, props[index], value);
	      }
	      return result;
	    }

	    /**
	     * Creates a clone of  `buffer`.
	     *
	     * @private
	     * @param {Buffer} buffer The buffer to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Buffer} Returns the cloned buffer.
	     */
	    function cloneBuffer(buffer, isDeep) {
	      if (isDeep) {
	        return buffer.slice();
	      }
	      var result = new buffer.constructor(buffer.length);
	      buffer.copy(result);
	      return result;
	    }

	    /**
	     * Creates a clone of `arrayBuffer`.
	     *
	     * @private
	     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
	     * @returns {ArrayBuffer} Returns the cloned array buffer.
	     */
	    function cloneArrayBuffer(arrayBuffer) {
	      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
	      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
	      return result;
	    }

	    /**
	     * Creates a clone of `dataView`.
	     *
	     * @private
	     * @param {Object} dataView The data view to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the cloned data view.
	     */
	    function cloneDataView(dataView, isDeep) {
	      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
	      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
	    }

	    /**
	     * Creates a clone of `map`.
	     *
	     * @private
	     * @param {Object} map The map to clone.
	     * @param {Function} cloneFunc The function to clone values.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the cloned map.
	     */
	    function cloneMap(map, isDeep, cloneFunc) {
	      var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);
	      return arrayReduce(array, addMapEntry, new map.constructor);
	    }

	    /**
	     * Creates a clone of `regexp`.
	     *
	     * @private
	     * @param {Object} regexp The regexp to clone.
	     * @returns {Object} Returns the cloned regexp.
	     */
	    function cloneRegExp(regexp) {
	      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
	      result.lastIndex = regexp.lastIndex;
	      return result;
	    }

	    /**
	     * Creates a clone of `set`.
	     *
	     * @private
	     * @param {Object} set The set to clone.
	     * @param {Function} cloneFunc The function to clone values.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the cloned set.
	     */
	    function cloneSet(set, isDeep, cloneFunc) {
	      var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);
	      return arrayReduce(array, addSetEntry, new set.constructor);
	    }

	    /**
	     * Creates a clone of the `symbol` object.
	     *
	     * @private
	     * @param {Object} symbol The symbol object to clone.
	     * @returns {Object} Returns the cloned symbol object.
	     */
	    function cloneSymbol(symbol) {
	      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
	    }

	    /**
	     * Creates a clone of `typedArray`.
	     *
	     * @private
	     * @param {Object} typedArray The typed array to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the cloned typed array.
	     */
	    function cloneTypedArray(typedArray, isDeep) {
	      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
	      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
	    }

	    /**
	     * Creates an array that is the composition of partially applied arguments,
	     * placeholders, and provided arguments into a single array of arguments.
	     *
	     * @private
	     * @param {Array|Object} args The provided arguments.
	     * @param {Array} partials The arguments to prepend to those provided.
	     * @param {Array} holders The `partials` placeholder indexes.
	     * @params {boolean} [isCurried] Specify composing for a curried function.
	     * @returns {Array} Returns the new array of composed arguments.
	     */
	    function composeArgs(args, partials, holders, isCurried) {
	      var argsIndex = -1,
	          argsLength = args.length,
	          holdersLength = holders.length,
	          leftIndex = -1,
	          leftLength = partials.length,
	          rangeLength = nativeMax(argsLength - holdersLength, 0),
	          result = Array(leftLength + rangeLength),
	          isUncurried = !isCurried;

	      while (++leftIndex < leftLength) {
	        result[leftIndex] = partials[leftIndex];
	      }
	      while (++argsIndex < holdersLength) {
	        if (isUncurried || argsIndex < argsLength) {
	          result[holders[argsIndex]] = args[argsIndex];
	        }
	      }
	      while (rangeLength--) {
	        result[leftIndex++] = args[argsIndex++];
	      }
	      return result;
	    }

	    /**
	     * This function is like `composeArgs` except that the arguments composition
	     * is tailored for `_.partialRight`.
	     *
	     * @private
	     * @param {Array|Object} args The provided arguments.
	     * @param {Array} partials The arguments to append to those provided.
	     * @param {Array} holders The `partials` placeholder indexes.
	     * @params {boolean} [isCurried] Specify composing for a curried function.
	     * @returns {Array} Returns the new array of composed arguments.
	     */
	    function composeArgsRight(args, partials, holders, isCurried) {
	      var argsIndex = -1,
	          argsLength = args.length,
	          holdersIndex = -1,
	          holdersLength = holders.length,
	          rightIndex = -1,
	          rightLength = partials.length,
	          rangeLength = nativeMax(argsLength - holdersLength, 0),
	          result = Array(rangeLength + rightLength),
	          isUncurried = !isCurried;

	      while (++argsIndex < rangeLength) {
	        result[argsIndex] = args[argsIndex];
	      }
	      var offset = argsIndex;
	      while (++rightIndex < rightLength) {
	        result[offset + rightIndex] = partials[rightIndex];
	      }
	      while (++holdersIndex < holdersLength) {
	        if (isUncurried || argsIndex < argsLength) {
	          result[offset + holders[holdersIndex]] = args[argsIndex++];
	        }
	      }
	      return result;
	    }

	    /**
	     * Copies the values of `source` to `array`.
	     *
	     * @private
	     * @param {Array} source The array to copy values from.
	     * @param {Array} [array=[]] The array to copy values to.
	     * @returns {Array} Returns `array`.
	     */
	    function copyArray(source, array) {
	      var index = -1,
	          length = source.length;

	      array || (array = Array(length));
	      while (++index < length) {
	        array[index] = source[index];
	      }
	      return array;
	    }

	    /**
	     * Copies properties of `source` to `object`.
	     *
	     * @private
	     * @param {Object} source The object to copy properties from.
	     * @param {Array} props The property identifiers to copy.
	     * @param {Object} [object={}] The object to copy properties to.
	     * @returns {Object} Returns `object`.
	     */
	    function copyObject(source, props, object) {
	      return copyObjectWith(source, props, object);
	    }

	    /**
	     * This function is like `copyObject` except that it accepts a function to
	     * customize copied values.
	     *
	     * @private
	     * @param {Object} source The object to copy properties from.
	     * @param {Array} props The property identifiers to copy.
	     * @param {Object} [object={}] The object to copy properties to.
	     * @param {Function} [customizer] The function to customize copied values.
	     * @returns {Object} Returns `object`.
	     */
	    function copyObjectWith(source, props, object, customizer) {
	      object || (object = {});

	      var index = -1,
	          length = props.length;

	      while (++index < length) {
	        var key = props[index];

	        var newValue = customizer
	          ? customizer(object[key], source[key], key, object, source)
	          : source[key];

	        assignValue(object, key, newValue);
	      }
	      return object;
	    }

	    /**
	     * Copies own symbol properties of `source` to `object`.
	     *
	     * @private
	     * @param {Object} source The object to copy symbols from.
	     * @param {Object} [object={}] The object to copy symbols to.
	     * @returns {Object} Returns `object`.
	     */
	    function copySymbols(source, object) {
	      return copyObject(source, getSymbols(source), object);
	    }

	    /**
	     * Creates a function like `_.groupBy`.
	     *
	     * @private
	     * @param {Function} setter The function to set accumulator values.
	     * @param {Function} [initializer] The accumulator object initializer.
	     * @returns {Function} Returns the new aggregator function.
	     */
	    function createAggregator(setter, initializer) {
	      return function(collection, iteratee) {
	        var func = isArray(collection) ? arrayAggregator : baseAggregator,
	            accumulator = initializer ? initializer() : {};

	        return func(collection, setter, getIteratee(iteratee), accumulator);
	      };
	    }

	    /**
	     * Creates a function like `_.assign`.
	     *
	     * @private
	     * @param {Function} assigner The function to assign values.
	     * @returns {Function} Returns the new assigner function.
	     */
	    function createAssigner(assigner) {
	      return rest(function(object, sources) {
	        var index = -1,
	            length = sources.length,
	            customizer = length > 1 ? sources[length - 1] : undefined,
	            guard = length > 2 ? sources[2] : undefined;

	        customizer = typeof customizer == 'function'
	          ? (length--, customizer)
	          : undefined;

	        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
	          customizer = length < 3 ? undefined : customizer;
	          length = 1;
	        }
	        object = Object(object);
	        while (++index < length) {
	          var source = sources[index];
	          if (source) {
	            assigner(object, source, index, customizer);
	          }
	        }
	        return object;
	      });
	    }

	    /**
	     * Creates a `baseEach` or `baseEachRight` function.
	     *
	     * @private
	     * @param {Function} eachFunc The function to iterate over a collection.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new base function.
	     */
	    function createBaseEach(eachFunc, fromRight) {
	      return function(collection, iteratee) {
	        if (collection == null) {
	          return collection;
	        }
	        if (!isArrayLike(collection)) {
	          return eachFunc(collection, iteratee);
	        }
	        var length = collection.length,
	            index = fromRight ? length : -1,
	            iterable = Object(collection);

	        while ((fromRight ? index-- : ++index < length)) {
	          if (iteratee(iterable[index], index, iterable) === false) {
	            break;
	          }
	        }
	        return collection;
	      };
	    }

	    /**
	     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new base function.
	     */
	    function createBaseFor(fromRight) {
	      return function(object, iteratee, keysFunc) {
	        var index = -1,
	            iterable = Object(object),
	            props = keysFunc(object),
	            length = props.length;

	        while (length--) {
	          var key = props[fromRight ? length : ++index];
	          if (iteratee(iterable[key], key, iterable) === false) {
	            break;
	          }
	        }
	        return object;
	      };
	    }

	    /**
	     * Creates a function that wraps `func` to invoke it with the optional `this`
	     * binding of `thisArg`.
	     *
	     * @private
	     * @param {Function} func The function to wrap.
	     * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper`
	     *  for more details.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createBaseWrapper(func, bitmask, thisArg) {
	      var isBind = bitmask & BIND_FLAG,
	          Ctor = createCtorWrapper(func);

	      function wrapper() {
	        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
	        return fn.apply(isBind ? thisArg : this, arguments);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates a function like `_.lowerFirst`.
	     *
	     * @private
	     * @param {string} methodName The name of the `String` case method to use.
	     * @returns {Function} Returns the new function.
	     */
	    function createCaseFirst(methodName) {
	      return function(string) {
	        string = toString(string);

	        var strSymbols = reHasComplexSymbol.test(string)
	          ? stringToArray(string)
	          : undefined;

	        var chr = strSymbols ? strSymbols[0] : string.charAt(0),
	            trailing = strSymbols ? strSymbols.slice(1).join('') : string.slice(1);

	        return chr[methodName]() + trailing;
	      };
	    }

	    /**
	     * Creates a function like `_.camelCase`.
	     *
	     * @private
	     * @param {Function} callback The function to combine each word.
	     * @returns {Function} Returns the new compounder function.
	     */
	    function createCompounder(callback) {
	      return function(string) {
	        return arrayReduce(words(deburr(string)), callback, '');
	      };
	    }

	    /**
	     * Creates a function that produces an instance of `Ctor` regardless of
	     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
	     *
	     * @private
	     * @param {Function} Ctor The constructor to wrap.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createCtorWrapper(Ctor) {
	      return function() {
	        // Use a `switch` statement to work with class constructors.
	        // See http://ecma-international.org/ecma-262/6.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
	        // for more details.
	        var args = arguments;
	        switch (args.length) {
	          case 0: return new Ctor;
	          case 1: return new Ctor(args[0]);
	          case 2: return new Ctor(args[0], args[1]);
	          case 3: return new Ctor(args[0], args[1], args[2]);
	          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
	          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
	          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
	          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
	        }
	        var thisBinding = baseCreate(Ctor.prototype),
	            result = Ctor.apply(thisBinding, args);

	        // Mimic the constructor's `return` behavior.
	        // See https://es5.github.io/#x13.2.2 for more details.
	        return isObject(result) ? result : thisBinding;
	      };
	    }

	    /**
	     * Creates a function that wraps `func` to enable currying.
	     *
	     * @private
	     * @param {Function} func The function to wrap.
	     * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper`
	     *  for more details.
	     * @param {number} arity The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createCurryWrapper(func, bitmask, arity) {
	      var Ctor = createCtorWrapper(func);

	      function wrapper() {
	        var length = arguments.length,
	            args = Array(length),
	            index = length,
	            placeholder = getPlaceholder(wrapper);

	        while (index--) {
	          args[index] = arguments[index];
	        }
	        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
	          ? []
	          : replaceHolders(args, placeholder);

	        length -= holders.length;
	        if (length < arity) {
	          return createRecurryWrapper(
	            func, bitmask, createHybridWrapper, wrapper.placeholder, undefined,
	            args, holders, undefined, undefined, arity - length);
	        }
	        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
	        return apply(fn, this, args);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates a `_.flow` or `_.flowRight` function.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new flow function.
	     */
	    function createFlow(fromRight) {
	      return rest(function(funcs) {
	        funcs = baseFlatten(funcs, 1);

	        var length = funcs.length,
	            index = length,
	            prereq = LodashWrapper.prototype.thru;

	        if (fromRight) {
	          funcs.reverse();
	        }
	        while (index--) {
	          var func = funcs[index];
	          if (typeof func != 'function') {
	            throw new TypeError(FUNC_ERROR_TEXT);
	          }
	          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
	            var wrapper = new LodashWrapper([], true);
	          }
	        }
	        index = wrapper ? index : length;
	        while (++index < length) {
	          func = funcs[index];

	          var funcName = getFuncName(func),
	              data = funcName == 'wrapper' ? getData(func) : undefined;

	          if (data && isLaziable(data[0]) &&
	                data[1] == (ARY_FLAG | CURRY_FLAG | PARTIAL_FLAG | REARG_FLAG) &&
	                !data[4].length && data[9] == 1
	              ) {
	            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
	          } else {
	            wrapper = (func.length == 1 && isLaziable(func))
	              ? wrapper[funcName]()
	              : wrapper.thru(func);
	          }
	        }
	        return function() {
	          var args = arguments,
	              value = args[0];

	          if (wrapper && args.length == 1 &&
	              isArray(value) && value.length >= LARGE_ARRAY_SIZE) {
	            return wrapper.plant(value).value();
	          }
	          var index = 0,
	              result = length ? funcs[index].apply(this, args) : value;

	          while (++index < length) {
	            result = funcs[index].call(this, result);
	          }
	          return result;
	        };
	      });
	    }

	    /**
	     * Creates a function that wraps `func` to invoke it with optional `this`
	     * binding of `thisArg`, partial application, and currying.
	     *
	     * @private
	     * @param {Function|string} func The function or method name to wrap.
	     * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper`
	     *  for more details.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to prepend to those provided to
	     *  the new function.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [partialsRight] The arguments to append to those provided
	     *  to the new function.
	     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createHybridWrapper(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
	      var isAry = bitmask & ARY_FLAG,
	          isBind = bitmask & BIND_FLAG,
	          isBindKey = bitmask & BIND_KEY_FLAG,
	          isCurried = bitmask & (CURRY_FLAG | CURRY_RIGHT_FLAG),
	          isFlip = bitmask & FLIP_FLAG,
	          Ctor = isBindKey ? undefined : createCtorWrapper(func);

	      function wrapper() {
	        var length = arguments.length,
	            index = length,
	            args = Array(length);

	        while (index--) {
	          args[index] = arguments[index];
	        }
	        if (isCurried) {
	          var placeholder = getPlaceholder(wrapper),
	              holdersCount = countHolders(args, placeholder);
	        }
	        if (partials) {
	          args = composeArgs(args, partials, holders, isCurried);
	        }
	        if (partialsRight) {
	          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
	        }
	        length -= holdersCount;
	        if (isCurried && length < arity) {
	          var newHolders = replaceHolders(args, placeholder);
	          return createRecurryWrapper(
	            func, bitmask, createHybridWrapper, wrapper.placeholder, thisArg,
	            args, newHolders, argPos, ary, arity - length
	          );
	        }
	        var thisBinding = isBind ? thisArg : this,
	            fn = isBindKey ? thisBinding[func] : func;

	        length = args.length;
	        if (argPos) {
	          args = reorder(args, argPos);
	        } else if (isFlip && length > 1) {
	          args.reverse();
	        }
	        if (isAry && ary < length) {
	          args.length = ary;
	        }
	        if (this && this !== root && this instanceof wrapper) {
	          fn = Ctor || createCtorWrapper(fn);
	        }
	        return fn.apply(thisBinding, args);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates a function like `_.invertBy`.
	     *
	     * @private
	     * @param {Function} setter The function to set accumulator values.
	     * @param {Function} toIteratee The function to resolve iteratees.
	     * @returns {Function} Returns the new inverter function.
	     */
	    function createInverter(setter, toIteratee) {
	      return function(object, iteratee) {
	        return baseInverter(object, setter, toIteratee(iteratee), {});
	      };
	    }

	    /**
	     * Creates a function like `_.over`.
	     *
	     * @private
	     * @param {Function} arrayFunc The function to iterate over iteratees.
	     * @returns {Function} Returns the new invoker function.
	     */
	    function createOver(arrayFunc) {
	      return rest(function(iteratees) {
	        iteratees = arrayMap(baseFlatten(iteratees, 1), getIteratee());
	        return rest(function(args) {
	          var thisArg = this;
	          return arrayFunc(iteratees, function(iteratee) {
	            return apply(iteratee, thisArg, args);
	          });
	        });
	      });
	    }

	    /**
	     * Creates the padding for `string` based on `length`. The `chars` string
	     * is truncated if the number of characters exceeds `length`.
	     *
	     * @private
	     * @param {number} length The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padding for `string`.
	     */
	    function createPadding(length, chars) {
	      chars = chars === undefined ? ' ' : (chars + '');

	      var charsLength = chars.length;
	      if (charsLength < 2) {
	        return charsLength ? baseRepeat(chars, length) : chars;
	      }
	      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
	      return reHasComplexSymbol.test(chars)
	        ? stringToArray(result).slice(0, length).join('')
	        : result.slice(0, length);
	    }

	    /**
	     * Creates a function that wraps `func` to invoke it with the optional `this`
	     * binding of `thisArg` and the `partials` prepended to those provided to
	     * the wrapper.
	     *
	     * @private
	     * @param {Function} func The function to wrap.
	     * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper`
	     *  for more details.
	     * @param {*} thisArg The `this` binding of `func`.
	     * @param {Array} partials The arguments to prepend to those provided to
	     *  the new function.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createPartialWrapper(func, bitmask, thisArg, partials) {
	      var isBind = bitmask & BIND_FLAG,
	          Ctor = createCtorWrapper(func);

	      function wrapper() {
	        var argsIndex = -1,
	            argsLength = arguments.length,
	            leftIndex = -1,
	            leftLength = partials.length,
	            args = Array(leftLength + argsLength),
	            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

	        while (++leftIndex < leftLength) {
	          args[leftIndex] = partials[leftIndex];
	        }
	        while (argsLength--) {
	          args[leftIndex++] = arguments[++argsIndex];
	        }
	        return apply(fn, isBind ? thisArg : this, args);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates a `_.range` or `_.rangeRight` function.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new range function.
	     */
	    function createRange(fromRight) {
	      return function(start, end, step) {
	        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
	          end = step = undefined;
	        }
	        // Ensure the sign of `-0` is preserved.
	        start = toNumber(start);
	        start = start === start ? start : 0;
	        if (end === undefined) {
	          end = start;
	          start = 0;
	        } else {
	          end = toNumber(end) || 0;
	        }
	        step = step === undefined ? (start < end ? 1 : -1) : (toNumber(step) || 0);
	        return baseRange(start, end, step, fromRight);
	      };
	    }

	    /**
	     * Creates a function that wraps `func` to continue currying.
	     *
	     * @private
	     * @param {Function} func The function to wrap.
	     * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper`
	     *  for more details.
	     * @param {Function} wrapFunc The function to create the `func` wrapper.
	     * @param {*} placeholder The placeholder value.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to prepend to those provided to
	     *  the new function.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createRecurryWrapper(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
	      var isCurry = bitmask & CURRY_FLAG,
	          newArgPos = argPos ? copyArray(argPos) : undefined,
	          newHolders = isCurry ? holders : undefined,
	          newHoldersRight = isCurry ? undefined : holders,
	          newPartials = isCurry ? partials : undefined,
	          newPartialsRight = isCurry ? undefined : partials;

	      bitmask |= (isCurry ? PARTIAL_FLAG : PARTIAL_RIGHT_FLAG);
	      bitmask &= ~(isCurry ? PARTIAL_RIGHT_FLAG : PARTIAL_FLAG);

	      if (!(bitmask & CURRY_BOUND_FLAG)) {
	        bitmask &= ~(BIND_FLAG | BIND_KEY_FLAG);
	      }
	      var newData = [
	        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
	        newHoldersRight, newArgPos, ary, arity
	      ];

	      var result = wrapFunc.apply(undefined, newData);
	      if (isLaziable(func)) {
	        setData(result, newData);
	      }
	      result.placeholder = placeholder;
	      return result;
	    }

	    /**
	     * Creates a function like `_.round`.
	     *
	     * @private
	     * @param {string} methodName The name of the `Math` method to use when rounding.
	     * @returns {Function} Returns the new round function.
	     */
	    function createRound(methodName) {
	      var func = Math[methodName];
	      return function(number, precision) {
	        number = toNumber(number);
	        precision = toInteger(precision);
	        if (precision) {
	          // Shift with exponential notation to avoid floating-point issues.
	          // See [MDN](https://mdn.io/round#Examples) for more details.
	          var pair = (toString(number) + 'e').split('e'),
	              value = func(pair[0] + 'e' + (+pair[1] + precision));

	          pair = (toString(value) + 'e').split('e');
	          return +(pair[0] + 'e' + (+pair[1] - precision));
	        }
	        return func(number);
	      };
	    }

	    /**
	     * Creates a set of `values`.
	     *
	     * @private
	     * @param {Array} values The values to add to the set.
	     * @returns {Object} Returns the new set.
	     */
	    var createSet = !(Set && new Set([1, 2]).size === 2) ? noop : function(values) {
	      return new Set(values);
	    };

	    /**
	     * Creates a function that either curries or invokes `func` with optional
	     * `this` binding and partially applied arguments.
	     *
	     * @private
	     * @param {Function|string} func The function or method name to wrap.
	     * @param {number} bitmask The bitmask of wrapper flags.
	     *  The bitmask may be composed of the following flags:
	     *     1 - `_.bind`
	     *     2 - `_.bindKey`
	     *     4 - `_.curry` or `_.curryRight` of a bound function
	     *     8 - `_.curry`
	     *    16 - `_.curryRight`
	     *    32 - `_.partial`
	     *    64 - `_.partialRight`
	     *   128 - `_.rearg`
	     *   256 - `_.ary`
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to be partially applied.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createWrapper(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
	      var isBindKey = bitmask & BIND_KEY_FLAG;
	      if (!isBindKey && typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      var length = partials ? partials.length : 0;
	      if (!length) {
	        bitmask &= ~(PARTIAL_FLAG | PARTIAL_RIGHT_FLAG);
	        partials = holders = undefined;
	      }
	      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
	      arity = arity === undefined ? arity : toInteger(arity);
	      length -= holders ? holders.length : 0;

	      if (bitmask & PARTIAL_RIGHT_FLAG) {
	        var partialsRight = partials,
	            holdersRight = holders;

	        partials = holders = undefined;
	      }
	      var data = isBindKey ? undefined : getData(func);

	      var newData = [
	        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
	        argPos, ary, arity
	      ];

	      if (data) {
	        mergeData(newData, data);
	      }
	      func = newData[0];
	      bitmask = newData[1];
	      thisArg = newData[2];
	      partials = newData[3];
	      holders = newData[4];
	      arity = newData[9] = newData[9] == null
	        ? (isBindKey ? 0 : func.length)
	        : nativeMax(newData[9] - length, 0);

	      if (!arity && bitmask & (CURRY_FLAG | CURRY_RIGHT_FLAG)) {
	        bitmask &= ~(CURRY_FLAG | CURRY_RIGHT_FLAG);
	      }
	      if (!bitmask || bitmask == BIND_FLAG) {
	        var result = createBaseWrapper(func, bitmask, thisArg);
	      } else if (bitmask == CURRY_FLAG || bitmask == CURRY_RIGHT_FLAG) {
	        result = createCurryWrapper(func, bitmask, arity);
	      } else if ((bitmask == PARTIAL_FLAG || bitmask == (BIND_FLAG | PARTIAL_FLAG)) && !holders.length) {
	        result = createPartialWrapper(func, bitmask, thisArg, partials);
	      } else {
	        result = createHybridWrapper.apply(undefined, newData);
	      }
	      var setter = data ? baseSetData : setData;
	      return setter(result, newData);
	    }

	    /**
	     * A specialized version of `baseIsEqualDeep` for arrays with support for
	     * partial deep comparisons.
	     *
	     * @private
	     * @param {Array} array The array to compare.
	     * @param {Array} other The other array to compare.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Function} customizer The function to customize comparisons.
	     * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
	     *  for more details.
	     * @param {Object} stack Tracks traversed `array` and `other` objects.
	     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
	     */
	    function equalArrays(array, other, equalFunc, customizer, bitmask, stack) {
	      var index = -1,
	          isPartial = bitmask & PARTIAL_COMPARE_FLAG,
	          isUnordered = bitmask & UNORDERED_COMPARE_FLAG,
	          arrLength = array.length,
	          othLength = other.length;

	      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
	        return false;
	      }
	      // Assume cyclic values are equal.
	      var stacked = stack.get(array);
	      if (stacked) {
	        return stacked == other;
	      }
	      var result = true;
	      stack.set(array, other);

	      // Ignore non-index properties.
	      while (++index < arrLength) {
	        var arrValue = array[index],
	            othValue = other[index];

	        if (customizer) {
	          var compared = isPartial
	            ? customizer(othValue, arrValue, index, other, array, stack)
	            : customizer(arrValue, othValue, index, array, other, stack);
	        }
	        if (compared !== undefined) {
	          if (compared) {
	            continue;
	          }
	          result = false;
	          break;
	        }
	        // Recursively compare arrays (susceptible to call stack limits).
	        if (isUnordered) {
	          if (!arraySome(other, function(othValue) {
	                return arrValue === othValue ||
	                  equalFunc(arrValue, othValue, customizer, bitmask, stack);
	              })) {
	            result = false;
	            break;
	          }
	        } else if (!(
	              arrValue === othValue ||
	                equalFunc(arrValue, othValue, customizer, bitmask, stack)
	            )) {
	          result = false;
	          break;
	        }
	      }
	      stack['delete'](array);
	      return result;
	    }

	    /**
	     * A specialized version of `baseIsEqualDeep` for comparing objects of
	     * the same `toStringTag`.
	     *
	     * **Note:** This function only supports comparing values with tags of
	     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {string} tag The `toStringTag` of the objects to compare.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Function} customizer The function to customize comparisons.
	     * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
	     *  for more details.
	     * @param {Object} stack Tracks traversed `object` and `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function equalByTag(object, other, tag, equalFunc, customizer, bitmask, stack) {
	      switch (tag) {
	        case dataViewTag:
	          if ((object.byteLength != other.byteLength) ||
	              (object.byteOffset != other.byteOffset)) {
	            return false;
	          }
	          object = object.buffer;
	          other = other.buffer;

	        case arrayBufferTag:
	          if ((object.byteLength != other.byteLength) ||
	              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
	            return false;
	          }
	          return true;

	        case boolTag:
	        case dateTag:
	          // Coerce dates and booleans to numbers, dates to milliseconds and
	          // booleans to `1` or `0` treating invalid dates coerced to `NaN` as
	          // not equal.
	          return +object == +other;

	        case errorTag:
	          return object.name == other.name && object.message == other.message;

	        case numberTag:
	          // Treat `NaN` vs. `NaN` as equal.
	          return (object != +object) ? other != +other : object == +other;

	        case regexpTag:
	        case stringTag:
	          // Coerce regexes to strings and treat strings, primitives and objects,
	          // as equal. See https://es5.github.io/#x15.10.6.4 for more details.
	          return object == (other + '');

	        case mapTag:
	          var convert = mapToArray;

	        case setTag:
	          var isPartial = bitmask & PARTIAL_COMPARE_FLAG;
	          convert || (convert = setToArray);

	          if (object.size != other.size && !isPartial) {
	            return false;
	          }
	          // Assume cyclic values are equal.
	          var stacked = stack.get(object);
	          if (stacked) {
	            return stacked == other;
	          }
	          bitmask |= UNORDERED_COMPARE_FLAG;
	          stack.set(object, other);

	          // Recursively compare objects (susceptible to call stack limits).
	          return equalArrays(convert(object), convert(other), equalFunc, customizer, bitmask, stack);

	        case symbolTag:
	          if (symbolValueOf) {
	            return symbolValueOf.call(object) == symbolValueOf.call(other);
	          }
	      }
	      return false;
	    }

	    /**
	     * A specialized version of `baseIsEqualDeep` for objects with support for
	     * partial deep comparisons.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Function} customizer The function to customize comparisons.
	     * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
	     *  for more details.
	     * @param {Object} stack Tracks traversed `object` and `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function equalObjects(object, other, equalFunc, customizer, bitmask, stack) {
	      var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
	          objProps = keys(object),
	          objLength = objProps.length,
	          othProps = keys(other),
	          othLength = othProps.length;

	      if (objLength != othLength && !isPartial) {
	        return false;
	      }
	      var index = objLength;
	      while (index--) {
	        var key = objProps[index];
	        if (!(isPartial ? key in other : baseHas(other, key))) {
	          return false;
	        }
	      }
	      // Assume cyclic values are equal.
	      var stacked = stack.get(object);
	      if (stacked) {
	        return stacked == other;
	      }
	      var result = true;
	      stack.set(object, other);

	      var skipCtor = isPartial;
	      while (++index < objLength) {
	        key = objProps[index];
	        var objValue = object[key],
	            othValue = other[key];

	        if (customizer) {
	          var compared = isPartial
	            ? customizer(othValue, objValue, key, other, object, stack)
	            : customizer(objValue, othValue, key, object, other, stack);
	        }
	        // Recursively compare objects (susceptible to call stack limits).
	        if (!(compared === undefined
	              ? (objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack))
	              : compared
	            )) {
	          result = false;
	          break;
	        }
	        skipCtor || (skipCtor = key == 'constructor');
	      }
	      if (result && !skipCtor) {
	        var objCtor = object.constructor,
	            othCtor = other.constructor;

	        // Non `Object` object instances with different constructors are not equal.
	        if (objCtor != othCtor &&
	            ('constructor' in object && 'constructor' in other) &&
	            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
	              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
	          result = false;
	        }
	      }
	      stack['delete'](object);
	      return result;
	    }

	    /**
	     * Creates an array of own enumerable property names and symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names and symbols.
	     */
	    function getAllKeys(object) {
	      return baseGetAllKeys(object, keys, getSymbols);
	    }

	    /**
	     * Creates an array of own and inherited enumerable property names and
	     * symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names and symbols.
	     */
	    function getAllKeysIn(object) {
	      return baseGetAllKeys(object, keysIn, getSymbolsIn);
	    }

	    /**
	     * Gets metadata for `func`.
	     *
	     * @private
	     * @param {Function} func The function to query.
	     * @returns {*} Returns the metadata for `func`.
	     */
	    var getData = !metaMap ? noop : function(func) {
	      return metaMap.get(func);
	    };

	    /**
	     * Gets the name of `func`.
	     *
	     * @private
	     * @param {Function} func The function to query.
	     * @returns {string} Returns the function name.
	     */
	    function getFuncName(func) {
	      var result = (func.name + ''),
	          array = realNames[result],
	          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

	      while (length--) {
	        var data = array[length],
	            otherFunc = data.func;
	        if (otherFunc == null || otherFunc == func) {
	          return data.name;
	        }
	      }
	      return result;
	    }

	    /**
	     * Gets the appropriate "iteratee" function. If the `_.iteratee` method is
	     * customized this function returns the custom method, otherwise it returns
	     * `baseIteratee`. If arguments are provided the chosen function is invoked
	     * with them and its result is returned.
	     *
	     * @private
	     * @param {*} [value] The value to convert to an iteratee.
	     * @param {number} [arity] The arity of the created iteratee.
	     * @returns {Function} Returns the chosen function or its result.
	     */
	    function getIteratee() {
	      var result = lodash.iteratee || iteratee;
	      result = result === iteratee ? baseIteratee : result;
	      return arguments.length ? result(arguments[0], arguments[1]) : result;
	    }

	    /**
	     * Gets the "length" property value of `object`.
	     *
	     * **Note:** This function is used to avoid a
	     * [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792) that affects
	     * Safari on at least iOS 8.1-8.3 ARM64.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {*} Returns the "length" value.
	     */
	    var getLength = baseProperty('length');

	    /**
	     * Gets the property names, values, and compare flags of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the match data of `object`.
	     */
	    function getMatchData(object) {
	      var result = toPairs(object),
	          length = result.length;

	      while (length--) {
	        result[length][2] = isStrictComparable(result[length][1]);
	      }
	      return result;
	    }

	    /**
	     * Gets the native function at `key` of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {string} key The key of the method to get.
	     * @returns {*} Returns the function if it's native, else `undefined`.
	     */
	    function getNative(object, key) {
	      var value = object[key];
	      return isNative(value) ? value : undefined;
	    }

	    /**
	     * Gets the argument placeholder value for `func`.
	     *
	     * @private
	     * @param {Function} func The function to inspect.
	     * @returns {*} Returns the placeholder value.
	     */
	    function getPlaceholder(func) {
	      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
	      return object.placeholder;
	    }

	    /**
	     * Gets the `[[Prototype]]` of `value`.
	     *
	     * @private
	     * @param {*} value The value to query.
	     * @returns {null|Object} Returns the `[[Prototype]]`.
	     */
	    function getPrototype(value) {
	      return nativeGetPrototype(Object(value));
	    }

	    /**
	     * Creates an array of the own enumerable symbol properties of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of symbols.
	     */
	    function getSymbols(object) {
	      // Coerce `object` to an object to avoid non-object errors in V8.
	      // See https://bugs.chromium.org/p/v8/issues/detail?id=3443 for more details.
	      return getOwnPropertySymbols(Object(object));
	    }

	    // Fallback for IE < 11.
	    if (!getOwnPropertySymbols) {
	      getSymbols = function() {
	        return [];
	      };
	    }

	    /**
	     * Creates an array of the own and inherited enumerable symbol properties
	     * of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of symbols.
	     */
	    var getSymbolsIn = !getOwnPropertySymbols ? getSymbols : function(object) {
	      var result = [];
	      while (object) {
	        arrayPush(result, getSymbols(object));
	        object = getPrototype(object);
	      }
	      return result;
	    };

	    /**
	     * Gets the `toStringTag` of `value`.
	     *
	     * @private
	     * @param {*} value The value to query.
	     * @returns {string} Returns the `toStringTag`.
	     */
	    function getTag(value) {
	      return objectToString.call(value);
	    }

	    // Fallback for data views, maps, sets, and weak maps in IE 11,
	    // for data views in Edge, and promises in Node.js.
	    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
	        (Map && getTag(new Map) != mapTag) ||
	        (Promise && getTag(Promise.resolve()) != promiseTag) ||
	        (Set && getTag(new Set) != setTag) ||
	        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
	      getTag = function(value) {
	        var result = objectToString.call(value),
	            Ctor = result == objectTag ? value.constructor : null,
	            ctorString = typeof Ctor == 'function' ? funcToString.call(Ctor) : '';

	        if (ctorString) {
	          switch (ctorString) {
	            case dataViewCtorString: return dataViewTag;
	            case mapCtorString: return mapTag;
	            case promiseCtorString: return promiseTag;
	            case setCtorString: return setTag;
	            case weakMapCtorString: return weakMapTag;
	          }
	        }
	        return result;
	      };
	    }

	    /**
	     * Gets the view, applying any `transforms` to the `start` and `end` positions.
	     *
	     * @private
	     * @param {number} start The start of the view.
	     * @param {number} end The end of the view.
	     * @param {Array} transforms The transformations to apply to the view.
	     * @returns {Object} Returns an object containing the `start` and `end`
	     *  positions of the view.
	     */
	    function getView(start, end, transforms) {
	      var index = -1,
	          length = transforms.length;

	      while (++index < length) {
	        var data = transforms[index],
	            size = data.size;

	        switch (data.type) {
	          case 'drop':      start += size; break;
	          case 'dropRight': end -= size; break;
	          case 'take':      end = nativeMin(end, start + size); break;
	          case 'takeRight': start = nativeMax(start, end - size); break;
	        }
	      }
	      return { 'start': start, 'end': end };
	    }

	    /**
	     * Checks if `path` exists on `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path to check.
	     * @param {Function} hasFunc The function to check properties.
	     * @returns {boolean} Returns `true` if `path` exists, else `false`.
	     */
	    function hasPath(object, path, hasFunc) {
	      if (object == null) {
	        return false;
	      }
	      var result = hasFunc(object, path);
	      if (!result && !isKey(path)) {
	        path = baseCastPath(path);

	        var index = -1,
	            length = path.length;

	        while (object != null && ++index < length) {
	          var key = path[index];
	          if (!(result = hasFunc(object, key))) {
	            break;
	          }
	          object = object[key];
	        }
	      }
	      var length = object ? object.length : undefined;
	      return result || (
	        !!length && isLength(length) && isIndex(path, length) &&
	        (isArray(object) || isString(object) || isArguments(object))
	      );
	    }

	    /**
	     * Initializes an array clone.
	     *
	     * @private
	     * @param {Array} array The array to clone.
	     * @returns {Array} Returns the initialized clone.
	     */
	    function initCloneArray(array) {
	      var length = array.length,
	          result = array.constructor(length);

	      // Add properties assigned by `RegExp#exec`.
	      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
	        result.index = array.index;
	        result.input = array.input;
	      }
	      return result;
	    }

	    /**
	     * Initializes an object clone.
	     *
	     * @private
	     * @param {Object} object The object to clone.
	     * @returns {Object} Returns the initialized clone.
	     */
	    function initCloneObject(object) {
	      return (typeof object.constructor == 'function' && !isPrototype(object))
	        ? baseCreate(getPrototype(object))
	        : {};
	    }

	    /**
	     * Initializes an object clone based on its `toStringTag`.
	     *
	     * **Note:** This function only supports cloning values with tags of
	     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	     *
	     * @private
	     * @param {Object} object The object to clone.
	     * @param {string} tag The `toStringTag` of the object to clone.
	     * @param {Function} cloneFunc The function to clone values.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the initialized clone.
	     */
	    function initCloneByTag(object, tag, cloneFunc, isDeep) {
	      var Ctor = object.constructor;
	      switch (tag) {
	        case arrayBufferTag:
	          return cloneArrayBuffer(object);

	        case boolTag:
	        case dateTag:
	          return new Ctor(+object);

	        case dataViewTag:
	          return cloneDataView(object, isDeep);

	        case float32Tag: case float64Tag:
	        case int8Tag: case int16Tag: case int32Tag:
	        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
	          return cloneTypedArray(object, isDeep);

	        case mapTag:
	          return cloneMap(object, isDeep, cloneFunc);

	        case numberTag:
	        case stringTag:
	          return new Ctor(object);

	        case regexpTag:
	          return cloneRegExp(object);

	        case setTag:
	          return cloneSet(object, isDeep, cloneFunc);

	        case symbolTag:
	          return cloneSymbol(object);
	      }
	    }

	    /**
	     * Creates an array of index keys for `object` values of arrays,
	     * `arguments` objects, and strings, otherwise `null` is returned.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array|null} Returns index keys, else `null`.
	     */
	    function indexKeys(object) {
	      var length = object ? object.length : undefined;
	      if (isLength(length) &&
	          (isArray(object) || isString(object) || isArguments(object))) {
	        return baseTimes(length, String);
	      }
	      return null;
	    }

	    /**
	     * Checks if the given arguments are from an iteratee call.
	     *
	     * @private
	     * @param {*} value The potential iteratee value argument.
	     * @param {*} index The potential iteratee index or key argument.
	     * @param {*} object The potential iteratee object argument.
	     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
	     *  else `false`.
	     */
	    function isIterateeCall(value, index, object) {
	      if (!isObject(object)) {
	        return false;
	      }
	      var type = typeof index;
	      if (type == 'number'
	            ? (isArrayLike(object) && isIndex(index, object.length))
	            : (type == 'string' && index in object)
	          ) {
	        return eq(object[index], value);
	      }
	      return false;
	    }

	    /**
	     * Checks if `value` is a property name and not a property path.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @param {Object} [object] The object to query keys on.
	     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
	     */
	    function isKey(value, object) {
	      var type = typeof value;
	      if (type == 'number' || type == 'symbol') {
	        return true;
	      }
	      return !isArray(value) &&
	        (isSymbol(value) || reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
	          (object != null && value in Object(object)));
	    }

	    /**
	     * Checks if `value` is suitable for use as unique object key.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
	     */
	    function isKeyable(value) {
	      var type = typeof value;
	      return type == 'number' || type == 'boolean' ||
	        (type == 'string' && value != '__proto__') || value == null;
	    }

	    /**
	     * Checks if `func` has a lazy counterpart.
	     *
	     * @private
	     * @param {Function} func The function to check.
	     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
	     *  else `false`.
	     */
	    function isLaziable(func) {
	      var funcName = getFuncName(func),
	          other = lodash[funcName];

	      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
	        return false;
	      }
	      if (func === other) {
	        return true;
	      }
	      var data = getData(other);
	      return !!data && func === data[0];
	    }

	    /**
	     * Checks if `value` is likely a prototype object.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
	     */
	    function isPrototype(value) {
	      var Ctor = value && value.constructor,
	          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

	      return value === proto;
	    }

	    /**
	     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` if suitable for strict
	     *  equality comparisons, else `false`.
	     */
	    function isStrictComparable(value) {
	      return value === value && !isObject(value);
	    }

	    /**
	     * Merges the function metadata of `source` into `data`.
	     *
	     * Merging metadata reduces the number of wrappers used to invoke a function.
	     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
	     * may be applied regardless of execution order. Methods like `_.ary` and
	     * `_.rearg` modify function arguments, making the order in which they are
	     * executed important, preventing the merging of metadata. However, we make
	     * an exception for a safe combined case where curried functions have `_.ary`
	     * and or `_.rearg` applied.
	     *
	     * @private
	     * @param {Array} data The destination metadata.
	     * @param {Array} source The source metadata.
	     * @returns {Array} Returns `data`.
	     */
	    function mergeData(data, source) {
	      var bitmask = data[1],
	          srcBitmask = source[1],
	          newBitmask = bitmask | srcBitmask,
	          isCommon = newBitmask < (BIND_FLAG | BIND_KEY_FLAG | ARY_FLAG);

	      var isCombo =
	        ((srcBitmask == ARY_FLAG) && (bitmask == CURRY_FLAG)) ||
	        ((srcBitmask == ARY_FLAG) && (bitmask == REARG_FLAG) && (data[7].length <= source[8])) ||
	        ((srcBitmask == (ARY_FLAG | REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == CURRY_FLAG));

	      // Exit early if metadata can't be merged.
	      if (!(isCommon || isCombo)) {
	        return data;
	      }
	      // Use source `thisArg` if available.
	      if (srcBitmask & BIND_FLAG) {
	        data[2] = source[2];
	        // Set when currying a bound function.
	        newBitmask |= bitmask & BIND_FLAG ? 0 : CURRY_BOUND_FLAG;
	      }
	      // Compose partial arguments.
	      var value = source[3];
	      if (value) {
	        var partials = data[3];
	        data[3] = partials ? composeArgs(partials, value, source[4]) : copyArray(value);
	        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : copyArray(source[4]);
	      }
	      // Compose partial right arguments.
	      value = source[5];
	      if (value) {
	        partials = data[5];
	        data[5] = partials ? composeArgsRight(partials, value, source[6]) : copyArray(value);
	        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : copyArray(source[6]);
	      }
	      // Use source `argPos` if available.
	      value = source[7];
	      if (value) {
	        data[7] = copyArray(value);
	      }
	      // Use source `ary` if it's smaller.
	      if (srcBitmask & ARY_FLAG) {
	        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
	      }
	      // Use source `arity` if one is not provided.
	      if (data[9] == null) {
	        data[9] = source[9];
	      }
	      // Use source `func` and merge bitmasks.
	      data[0] = source[0];
	      data[1] = newBitmask;

	      return data;
	    }

	    /**
	     * Used by `_.defaultsDeep` to customize its `_.merge` use.
	     *
	     * @private
	     * @param {*} objValue The destination value.
	     * @param {*} srcValue The source value.
	     * @param {string} key The key of the property to merge.
	     * @param {Object} object The parent object of `objValue`.
	     * @param {Object} source The parent object of `srcValue`.
	     * @param {Object} [stack] Tracks traversed source values and their merged
	     *  counterparts.
	     * @returns {*} Returns the value to assign.
	     */
	    function mergeDefaults(objValue, srcValue, key, object, source, stack) {
	      if (isObject(objValue) && isObject(srcValue)) {
	        baseMerge(objValue, srcValue, undefined, mergeDefaults, stack.set(srcValue, objValue));
	      }
	      return objValue;
	    }

	    /**
	     * Gets the parent value at `path` of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array} path The path to get the parent value of.
	     * @returns {*} Returns the parent value.
	     */
	    function parent(object, path) {
	      return path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
	    }

	    /**
	     * Reorder `array` according to the specified indexes where the element at
	     * the first index is assigned as the first element, the element at
	     * the second index is assigned as the second element, and so on.
	     *
	     * @private
	     * @param {Array} array The array to reorder.
	     * @param {Array} indexes The arranged array indexes.
	     * @returns {Array} Returns `array`.
	     */
	    function reorder(array, indexes) {
	      var arrLength = array.length,
	          length = nativeMin(indexes.length, arrLength),
	          oldArray = copyArray(array);

	      while (length--) {
	        var index = indexes[length];
	        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
	      }
	      return array;
	    }

	    /**
	     * Sets metadata for `func`.
	     *
	     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
	     * period of time, it will trip its breaker and transition to an identity
	     * function to avoid garbage collection pauses in V8. See
	     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
	     * for more details.
	     *
	     * @private
	     * @param {Function} func The function to associate metadata with.
	     * @param {*} data The metadata.
	     * @returns {Function} Returns `func`.
	     */
	    var setData = (function() {
	      var count = 0,
	          lastCalled = 0;

	      return function(key, value) {
	        var stamp = now(),
	            remaining = HOT_SPAN - (stamp - lastCalled);

	        lastCalled = stamp;
	        if (remaining > 0) {
	          if (++count >= HOT_COUNT) {
	            return key;
	          }
	        } else {
	          count = 0;
	        }
	        return baseSetData(key, value);
	      };
	    }());

	    /**
	     * Converts `string` to a property path array.
	     *
	     * @private
	     * @param {string} string The string to convert.
	     * @returns {Array} Returns the property path array.
	     */
	    var stringToPath = memoize(function(string) {
	      var result = [];
	      toString(string).replace(rePropName, function(match, number, quote, string) {
	        result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
	      });
	      return result;
	    });

	    /**
	     * Creates a clone of `wrapper`.
	     *
	     * @private
	     * @param {Object} wrapper The wrapper to clone.
	     * @returns {Object} Returns the cloned wrapper.
	     */
	    function wrapperClone(wrapper) {
	      if (wrapper instanceof LazyWrapper) {
	        return wrapper.clone();
	      }
	      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
	      result.__actions__ = copyArray(wrapper.__actions__);
	      result.__index__  = wrapper.__index__;
	      result.__values__ = wrapper.__values__;
	      return result;
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates an array of elements split into groups the length of `size`.
	     * If `array` can't be split evenly, the final chunk will be the remaining
	     * elements.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to process.
	     * @param {number} [size=0] The length of each chunk.
	     * @returns {Array} Returns the new array containing chunks.
	     * @example
	     *
	     * _.chunk(['a', 'b', 'c', 'd'], 2);
	     * // => [['a', 'b'], ['c', 'd']]
	     *
	     * _.chunk(['a', 'b', 'c', 'd'], 3);
	     * // => [['a', 'b', 'c'], ['d']]
	     */
	    function chunk(array, size) {
	      size = nativeMax(toInteger(size), 0);

	      var length = array ? array.length : 0;
	      if (!length || size < 1) {
	        return [];
	      }
	      var index = 0,
	          resIndex = 0,
	          result = Array(nativeCeil(length / size));

	      while (index < length) {
	        result[resIndex++] = baseSlice(array, index, (index += size));
	      }
	      return result;
	    }

	    /**
	     * Creates an array with all falsey values removed. The values `false`, `null`,
	     * `0`, `""`, `undefined`, and `NaN` are falsey.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to compact.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.compact([0, 1, false, 2, '', 3]);
	     * // => [1, 2, 3]
	     */
	    function compact(array) {
	      var index = -1,
	          length = array ? array.length : 0,
	          resIndex = 0,
	          result = [];

	      while (++index < length) {
	        var value = array[index];
	        if (value) {
	          result[resIndex++] = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * Creates a new array concatenating `array` with any additional arrays
	     * and/or values.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to concatenate.
	     * @param {...*} [values] The values to concatenate.
	     * @returns {Array} Returns the new concatenated array.
	     * @example
	     *
	     * var array = [1];
	     * var other = _.concat(array, 2, [3], [[4]]);
	     *
	     * console.log(other);
	     * // => [1, 2, 3, [4]]
	     *
	     * console.log(array);
	     * // => [1]
	     */
	    function concat() {
	      var length = arguments.length,
	          array = castArray(arguments[0]);

	      if (length < 2) {
	        return length ? copyArray(array) : [];
	      }
	      var args = Array(length - 1);
	      while (length--) {
	        args[length - 1] = arguments[length];
	      }
	      return arrayConcat(array, baseFlatten(args, 1));
	    }

	    /**
	     * Creates an array of unique `array` values not included in the other given
	     * arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons. The order of result values is determined by the
	     * order they occur in the first array.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...Array} [values] The values to exclude.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.difference([3, 2, 1], [4, 2]);
	     * // => [3, 1]
	     */
	    var difference = rest(function(array, values) {
	      return isArrayLikeObject(array)
	        ? baseDifference(array, baseFlatten(values, 1, true))
	        : [];
	    });

	    /**
	     * This method is like `_.difference` except that it accepts `iteratee` which
	     * is invoked for each element of `array` and `values` to generate the criterion
	     * by which they're compared. Result values are chosen from the first array.
	     * The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...Array} [values] The values to exclude.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The iteratee invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.differenceBy([3.1, 2.2, 1.3], [4.4, 2.5], Math.floor);
	     * // => [3.1, 1.3]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
	     * // => [{ 'x': 2 }]
	     */
	    var differenceBy = rest(function(array, values) {
	      var iteratee = last(values);
	      if (isArrayLikeObject(iteratee)) {
	        iteratee = undefined;
	      }
	      return isArrayLikeObject(array)
	        ? baseDifference(array, baseFlatten(values, 1, true), getIteratee(iteratee))
	        : [];
	    });

	    /**
	     * This method is like `_.difference` except that it accepts `comparator`
	     * which is invoked to compare elements of `array` to `values`. Result values
	     * are chosen from the first array. The comparator is invoked with two arguments:
	     * (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...Array} [values] The values to exclude.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
	     *
	     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
	     * // => [{ 'x': 2, 'y': 1 }]
	     */
	    var differenceWith = rest(function(array, values) {
	      var comparator = last(values);
	      if (isArrayLikeObject(comparator)) {
	        comparator = undefined;
	      }
	      return isArrayLikeObject(array)
	        ? baseDifference(array, baseFlatten(values, 1, true), undefined, comparator)
	        : [];
	    });

	    /**
	     * Creates a slice of `array` with `n` elements dropped from the beginning.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.5.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to drop.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.drop([1, 2, 3]);
	     * // => [2, 3]
	     *
	     * _.drop([1, 2, 3], 2);
	     * // => [3]
	     *
	     * _.drop([1, 2, 3], 5);
	     * // => []
	     *
	     * _.drop([1, 2, 3], 0);
	     * // => [1, 2, 3]
	     */
	    function drop(array, n, guard) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      n = (guard || n === undefined) ? 1 : toInteger(n);
	      return baseSlice(array, n < 0 ? 0 : n, length);
	    }

	    /**
	     * Creates a slice of `array` with `n` elements dropped from the end.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to drop.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.dropRight([1, 2, 3]);
	     * // => [1, 2]
	     *
	     * _.dropRight([1, 2, 3], 2);
	     * // => [1]
	     *
	     * _.dropRight([1, 2, 3], 5);
	     * // => []
	     *
	     * _.dropRight([1, 2, 3], 0);
	     * // => [1, 2, 3]
	     */
	    function dropRight(array, n, guard) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      n = (guard || n === undefined) ? 1 : toInteger(n);
	      n = length - n;
	      return baseSlice(array, 0, n < 0 ? 0 : n);
	    }

	    /**
	     * Creates a slice of `array` excluding elements dropped from the end.
	     * Elements are dropped until `predicate` returns falsey. The predicate is
	     * invoked with three arguments: (value, index, array).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Array|Function|Object|string} [predicate=_.identity]
	     *  The function invoked per iteration.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * _.dropRightWhile(users, function(o) { return !o.active; });
	     * // => objects for ['barney']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
	     * // => objects for ['barney', 'fred']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.dropRightWhile(users, ['active', false]);
	     * // => objects for ['barney']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.dropRightWhile(users, 'active');
	     * // => objects for ['barney', 'fred', 'pebbles']
	     */
	    function dropRightWhile(array, predicate) {
	      return (array && array.length)
	        ? baseWhile(array, getIteratee(predicate, 3), true, true)
	        : [];
	    }

	    /**
	     * Creates a slice of `array` excluding elements dropped from the beginning.
	     * Elements are dropped until `predicate` returns falsey. The predicate is
	     * invoked with three arguments: (value, index, array).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Array|Function|Object|string} [predicate=_.identity]
	     *  The function invoked per iteration.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * _.dropWhile(users, function(o) { return !o.active; });
	     * // => objects for ['pebbles']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.dropWhile(users, { 'user': 'barney', 'active': false });
	     * // => objects for ['fred', 'pebbles']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.dropWhile(users, ['active', false]);
	     * // => objects for ['pebbles']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.dropWhile(users, 'active');
	     * // => objects for ['barney', 'fred', 'pebbles']
	     */
	    function dropWhile(array, predicate) {
	      return (array && array.length)
	        ? baseWhile(array, getIteratee(predicate, 3), true)
	        : [];
	    }

	    /**
	     * Fills elements of `array` with `value` from `start` up to, but not
	     * including, `end`.
	     *
	     * **Note:** This method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.2.0
	     * @category Array
	     * @param {Array} array The array to fill.
	     * @param {*} value The value to fill `array` with.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _.fill(array, 'a');
	     * console.log(array);
	     * // => ['a', 'a', 'a']
	     *
	     * _.fill(Array(3), 2);
	     * // => [2, 2, 2]
	     *
	     * _.fill([4, 6, 8, 10], '*', 1, 3);
	     * // => [4, '*', '*', 10]
	     */
	    function fill(array, value, start, end) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
	        start = 0;
	        end = length;
	      }
	      return baseFill(array, value, start, end);
	    }

	    /**
	     * This method is like `_.find` except that it returns the index of the first
	     * element `predicate` returns truthy for instead of the element itself.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.1.0
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {Array|Function|Object|string} [predicate=_.identity]
	     *  The function invoked per iteration.
	     * @returns {number} Returns the index of the found element, else `-1`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * _.findIndex(users, function(o) { return o.user == 'barney'; });
	     * // => 0
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.findIndex(users, { 'user': 'fred', 'active': false });
	     * // => 1
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.findIndex(users, ['active', false]);
	     * // => 0
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.findIndex(users, 'active');
	     * // => 2
	     */
	    function findIndex(array, predicate) {
	      return (array && array.length)
	        ? baseFindIndex(array, getIteratee(predicate, 3))
	        : -1;
	    }

	    /**
	     * This method is like `_.findIndex` except that it iterates over elements
	     * of `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {Array|Function|Object|string} [predicate=_.identity]
	     *  The function invoked per iteration.
	     * @returns {number} Returns the index of the found element, else `-1`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
	     * // => 2
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
	     * // => 0
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.findLastIndex(users, ['active', false]);
	     * // => 2
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.findLastIndex(users, 'active');
	     * // => 0
	     */
	    function findLastIndex(array, predicate) {
	      return (array && array.length)
	        ? baseFindIndex(array, getIteratee(predicate, 3), true)
	        : -1;
	    }

	    /**
	     * Flattens `array` a single level deep.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to flatten.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * _.flatten([1, [2, [3, [4]], 5]]);
	     * // => [1, 2, [3, [4]], 5]
	     */
	    function flatten(array) {
	      var length = array ? array.length : 0;
	      return length ? baseFlatten(array, 1) : [];
	    }

	    /**
	     * Recursively flattens `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to flatten.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * _.flattenDeep([1, [2, [3, [4]], 5]]);
	     * // => [1, 2, 3, 4, 5]
	     */
	    function flattenDeep(array) {
	      var length = array ? array.length : 0;
	      return length ? baseFlatten(array, INFINITY) : [];
	    }

	    /**
	     * Recursively flatten `array` up to `depth` times.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.4.0
	     * @category Array
	     * @param {Array} array The array to flatten.
	     * @param {number} [depth=1] The maximum recursion depth.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * var array = [1, [2, [3, [4]], 5]];
	     *
	     * _.flattenDepth(array, 1);
	     * // => [1, 2, [3, [4]], 5]
	     *
	     * _.flattenDepth(array, 2);
	     * // => [1, 2, 3, [4], 5]
	     */
	    function flattenDepth(array, depth) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      depth = depth === undefined ? 1 : toInteger(depth);
	      return baseFlatten(array, depth);
	    }

	    /**
	     * The inverse of `_.toPairs`; this method returns an object composed
	     * from key-value `pairs`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} pairs The key-value pairs.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * _.fromPairs([['fred', 30], ['barney', 40]]);
	     * // => { 'fred': 30, 'barney': 40 }
	     */
	    function fromPairs(pairs) {
	      var index = -1,
	          length = pairs ? pairs.length : 0,
	          result = {};

	      while (++index < length) {
	        var pair = pairs[index];
	        result[pair[0]] = pair[1];
	      }
	      return result;
	    }

	    /**
	     * Gets the first element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @alias first
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {*} Returns the first element of `array`.
	     * @example
	     *
	     * _.head([1, 2, 3]);
	     * // => 1
	     *
	     * _.head([]);
	     * // => undefined
	     */
	    function head(array) {
	      return array ? array[0] : undefined;
	    }

	    /**
	     * Gets the index at which the first occurrence of `value` is found in `array`
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons. If `fromIndex` is negative, it's used as the offset
	     * from the end of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {*} value The value to search for.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.indexOf([1, 2, 1, 2], 2);
	     * // => 1
	     *
	     * // Search from the `fromIndex`.
	     * _.indexOf([1, 2, 1, 2], 2, 2);
	     * // => 3
	     */
	    function indexOf(array, value, fromIndex) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return -1;
	      }
	      fromIndex = toInteger(fromIndex);
	      if (fromIndex < 0) {
	        fromIndex = nativeMax(length + fromIndex, 0);
	      }
	      return baseIndexOf(array, value, fromIndex);
	    }

	    /**
	     * Gets all but the last element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.initial([1, 2, 3]);
	     * // => [1, 2]
	     */
	    function initial(array) {
	      return dropRight(array, 1);
	    }

	    /**
	     * Creates an array of unique values that are included in all given arrays
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons. The order of result values is determined by the
	     * order they occur in the first array.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of intersecting values.
	     * @example
	     *
	     * _.intersection([2, 1], [4, 2], [1, 2]);
	     * // => [2]
	     */
	    var intersection = rest(function(arrays) {
	      var mapped = arrayMap(arrays, baseCastArrayLikeObject);
	      return (mapped.length && mapped[0] === arrays[0])
	        ? baseIntersection(mapped)
	        : [];
	    });

	    /**
	     * This method is like `_.intersection` except that it accepts `iteratee`
	     * which is invoked for each element of each `arrays` to generate the criterion
	     * by which they're compared. Result values are chosen from the first array.
	     * The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The iteratee invoked per element.
	     * @returns {Array} Returns the new array of intersecting values.
	     * @example
	     *
	     * _.intersectionBy([2.1, 1.2], [4.3, 2.4], Math.floor);
	     * // => [2.1]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 1 }]
	     */
	    var intersectionBy = rest(function(arrays) {
	      var iteratee = last(arrays),
	          mapped = arrayMap(arrays, baseCastArrayLikeObject);

	      if (iteratee === last(mapped)) {
	        iteratee = undefined;
	      } else {
	        mapped.pop();
	      }
	      return (mapped.length && mapped[0] === arrays[0])
	        ? baseIntersection(mapped, getIteratee(iteratee))
	        : [];
	    });

	    /**
	     * This method is like `_.intersection` except that it accepts `comparator`
	     * which is invoked to compare elements of `arrays`. Result values are chosen
	     * from the first array. The comparator is invoked with two arguments:
	     * (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of intersecting values.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
	     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
	     *
	     * _.intersectionWith(objects, others, _.isEqual);
	     * // => [{ 'x': 1, 'y': 2 }]
	     */
	    var intersectionWith = rest(function(arrays) {
	      var comparator = last(arrays),
	          mapped = arrayMap(arrays, baseCastArrayLikeObject);

	      if (comparator === last(mapped)) {
	        comparator = undefined;
	      } else {
	        mapped.pop();
	      }
	      return (mapped.length && mapped[0] === arrays[0])
	        ? baseIntersection(mapped, undefined, comparator)
	        : [];
	    });

	    /**
	     * Converts all elements in `array` into a string separated by `separator`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to convert.
	     * @param {string} [separator=','] The element separator.
	     * @returns {string} Returns the joined string.
	     * @example
	     *
	     * _.join(['a', 'b', 'c'], '~');
	     * // => 'a~b~c'
	     */
	    function join(array, separator) {
	      return array ? nativeJoin.call(array, separator) : '';
	    }

	    /**
	     * Gets the last element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {*} Returns the last element of `array`.
	     * @example
	     *
	     * _.last([1, 2, 3]);
	     * // => 3
	     */
	    function last(array) {
	      var length = array ? array.length : 0;
	      return length ? array[length - 1] : undefined;
	    }

	    /**
	     * This method is like `_.indexOf` except that it iterates over elements of
	     * `array` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {*} value The value to search for.
	     * @param {number} [fromIndex=array.length-1] The index to search from.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.lastIndexOf([1, 2, 1, 2], 2);
	     * // => 3
	     *
	     * // Search from the `fromIndex`.
	     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
	     * // => 1
	     */
	    function lastIndexOf(array, value, fromIndex) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return -1;
	      }
	      var index = length;
	      if (fromIndex !== undefined) {
	        index = toInteger(fromIndex);
	        index = (
	          index < 0
	            ? nativeMax(length + index, 0)
	            : nativeMin(index, length - 1)
	        ) + 1;
	      }
	      if (value !== value) {
	        return indexOfNaN(array, index, true);
	      }
	      while (index--) {
	        if (array[index] === value) {
	          return index;
	        }
	      }
	      return -1;
	    }

	    /**
	     * Removes all given values from `array` using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
	     * to remove elements from an array by predicate.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {...*} [values] The values to remove.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [1, 2, 3, 1, 2, 3];
	     *
	     * _.pull(array, 2, 3);
	     * console.log(array);
	     * // => [1, 1]
	     */
	    var pull = rest(pullAll);

	    /**
	     * This method is like `_.pull` except that it accepts an array of values to remove.
	     *
	     * **Note:** Unlike `_.difference`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to remove.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [1, 2, 3, 1, 2, 3];
	     *
	     * _.pullAll(array, [2, 3]);
	     * console.log(array);
	     * // => [1, 1]
	     */
	    function pullAll(array, values) {
	      return (array && array.length && values && values.length)
	        ? basePullAll(array, values)
	        : array;
	    }

	    /**
	     * This method is like `_.pullAll` except that it accepts `iteratee` which is
	     * invoked for each element of `array` and `values` to generate the criterion
	     * by which they're compared. The iteratee is invoked with one argument: (value).
	     *
	     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to remove.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The iteratee invoked per element.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
	     *
	     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
	     * console.log(array);
	     * // => [{ 'x': 2 }]
	     */
	    function pullAllBy(array, values, iteratee) {
	      return (array && array.length && values && values.length)
	        ? basePullAll(array, values, getIteratee(iteratee))
	        : array;
	    }

	    /**
	     * This method is like `_.pullAll` except that it accepts `comparator` which
	     * is invoked to compare elements of `array` to `values`. The comparator is
	     * invoked with two arguments: (arrVal, othVal).
	     *
	     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.6.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to remove.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
	     *
	     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
	     * console.log(array);
	     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
	     */
	    function pullAllWith(array, values, comparator) {
	      return (array && array.length && values && values.length)
	        ? basePullAll(array, values, undefined, comparator)
	        : array;
	    }

	    /**
	     * Removes elements from `array` corresponding to `indexes` and returns an
	     * array of removed elements.
	     *
	     * **Note:** Unlike `_.at`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {...(number|number[])} [indexes] The indexes of elements to remove,
	     *  specified individually or in arrays.
	     * @returns {Array} Returns the new array of removed elements.
	     * @example
	     *
	     * var array = [5, 10, 15, 20];
	     * var evens = _.pullAt(array, 1, 3);
	     *
	     * console.log(array);
	     * // => [5, 15]
	     *
	     * console.log(evens);
	     * // => [10, 20]
	     */
	    var pullAt = rest(function(array, indexes) {
	      indexes = arrayMap(baseFlatten(indexes, 1), String);

	      var result = baseAt(array, indexes);
	      basePullAt(array, indexes.sort(compareAscending));
	      return result;
	    });

	    /**
	     * Removes all elements from `array` that `predicate` returns truthy for
	     * and returns an array of the removed elements. The predicate is invoked
	     * with three arguments: (value, index, array).
	     *
	     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
	     * to pull elements from an array by value.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Array|Function|Object|string} [predicate=_.identity]
	     *  The function invoked per iteration.
	     * @returns {Array} Returns the new array of removed elements.
	     * @example
	     *
	     * var array = [1, 2, 3, 4];
	     * var evens = _.remove(array, function(n) {
	     *   return n % 2 == 0;
	     * });
	     *
	     * console.log(array);
	     * // => [1, 3]
	     *
	     * console.log(evens);
	     * // => [2, 4]
	     */
	    function remove(array, predicate) {
	      var result = [];
	      if (!(array && array.length)) {
	        return result;
	      }
	      var index = -1,
	          indexes = [],
	          length = array.length;

	      predicate = getIteratee(predicate, 3);
	      while (++index < length) {
	        var value = array[index];
	        if (predicate(value, index, array)) {
	          result.push(value);
	          indexes.push(index);
	        }
	      }
	      basePullAt(array, indexes);
	      return result;
	    }

	    /**
	     * Reverses `array` so that the first element becomes the last, the second
	     * element becomes the second to last, and so on.
	     *
	     * **Note:** This method mutates `array` and is based on
	     * [`Array#reverse`](https://mdn.io/Array/reverse).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _.reverse(array);
	     * // => [3, 2, 1]
	     *
	     * console.log(array);
	     * // => [3, 2, 1]
	     */
	    function reverse(array) {
	      return array ? nativeReverse.call(array) : array;
	    }

	    /**
	     * Creates a slice of `array` from `start` up to, but not including, `end`.
	     *
	     * **Note:** This method is used instead of
	     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
	     * returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to slice.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function slice(array, start, end) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
	        start = 0;
	        end = length;
	      }
	      else {
	        start = start == null ? 0 : toInteger(start);
	        end = end === undefined ? length : toInteger(end);
	      }
	      return baseSlice(array, start, end);
	    }

	    /**
	     * Uses a binary search to determine the lowest index at which `value`
	     * should be inserted into `array` in order to maintain its sort order.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * _.sortedIndex([30, 50], 40);
	     * // => 1
	     *
	     * _.sortedIndex([4, 5], 4);
	     * // => 0
	     */
	    function sortedIndex(array, value) {
	      return baseSortedIndex(array, value);
	    }

	    /**
	     * This method is like `_.sortedIndex` except that it accepts `iteratee`
	     * which is invoked for `value` and each element of `array` to compute their
	     * sort ranking. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The iteratee invoked per element.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * var dict = { 'thirty': 30, 'forty': 40, 'fifty': 50 };
	     *
	     * _.sortedIndexBy(['thirty', 'fifty'], 'forty', _.propertyOf(dict));
	     * // => 1
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.sortedIndexBy([{ 'x': 4 }, { 'x': 5 }], { 'x': 4 }, 'x');
	     * // => 0
	     */
	    function sortedIndexBy(array, value, iteratee) {
	      return baseSortedIndexBy(array, value, getIteratee(iteratee));
	    }

	    /**
	     * This method is like `_.indexOf` except that it performs a binary
	     * search on a sorted `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {*} value The value to search for.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.sortedIndexOf([1, 1, 2, 2], 2);
	     * // => 2
	     */
	    function sortedIndexOf(array, value) {
	      var length = array ? array.length : 0;
	      if (length) {
	        var index = baseSortedIndex(array, value);
	        if (index < length && eq(array[index], value)) {
	          return index;
	        }
	      }
	      return -1;
	    }

	    /**
	     * This method is like `_.sortedIndex` except that it returns the highest
	     * index at which `value` should be inserted into `array` in order to
	     * maintain its sort order.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * _.sortedLastIndex([4, 5], 4);
	     * // => 1
	     */
	    function sortedLastIndex(array, value) {
	      return baseSortedIndex(array, value, true);
	    }

	    /**
	     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
	     * which is invoked for `value` and each element of `array` to compute their
	     * sort ranking. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The iteratee invoked per element.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.sortedLastIndexBy([{ 'x': 4 }, { 'x': 5 }], { 'x': 4 }, 'x');
	     * // => 1
	     */
	    function sortedLastIndexBy(array, value, iteratee) {
	      return baseSortedIndexBy(array, value, getIteratee(iteratee), true);
	    }

	    /**
	     * This method is like `_.lastIndexOf` except that it performs a binary
	     * search on a sorted `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {*} value The value to search for.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.sortedLastIndexOf([1, 1, 2, 2], 2);
	     * // => 3
	     */
	    function sortedLastIndexOf(array, value) {
	      var length = array ? array.length : 0;
	      if (length) {
	        var index = baseSortedIndex(array, value, true) - 1;
	        if (eq(array[index], value)) {
	          return index;
	        }
	      }
	      return -1;
	    }

	    /**
	     * This method is like `_.uniq` except that it's designed and optimized
	     * for sorted arrays.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * _.sortedUniq([1, 1, 2]);
	     * // => [1, 2]
	     */
	    function sortedUniq(array) {
	      return (array && array.length)
	        ? baseSortedUniq(array)
	        : [];
	    }

	    /**
	     * This method is like `_.uniqBy` except that it's designed and optimized
	     * for sorted arrays.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
	     * // => [1.1, 2.3]
	     */
	    function sortedUniqBy(array, iteratee) {
	      return (array && array.length)
	        ? baseSortedUniqBy(array, getIteratee(iteratee))
	        : [];
	    }

	    /**
	     * Gets all but the first element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.tail([1, 2, 3]);
	     * // => [2, 3]
	     */
	    function tail(array) {
	      return drop(array, 1);
	    }

	    /**
	     * Creates a slice of `array` with `n` elements taken from the beginning.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to take.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.take([1, 2, 3]);
	     * // => [1]
	     *
	     * _.take([1, 2, 3], 2);
	     * // => [1, 2]
	     *
	     * _.take([1, 2, 3], 5);
	     * // => [1, 2, 3]
	     *
	     * _.take([1, 2, 3], 0);
	     * // => []
	     */
	    function take(array, n, guard) {
	      if (!(array && array.length)) {
	        return [];
	      }
	      n = (guard || n === undefined) ? 1 : toInteger(n);
	      return baseSlice(array, 0, n < 0 ? 0 : n);
	    }

	    /**
	     * Creates a slice of `array` with `n` elements taken from the end.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to take.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.takeRight([1, 2, 3]);
	     * // => [3]
	     *
	     * _.takeRight([1, 2, 3], 2);
	     * // => [2, 3]
	     *
	     * _.takeRight([1, 2, 3], 5);
	     * // => [1, 2, 3]
	     *
	     * _.takeRight([1, 2, 3], 0);
	     * // => []
	     */
	    function takeRight(array, n, guard) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      n = (guard || n === undefined) ? 1 : toInteger(n);
	      n = length - n;
	      return baseSlice(array, n < 0 ? 0 : n, length);
	    }

	    /**
	     * Creates a slice of `array` with elements taken from the end. Elements are
	     * taken until `predicate` returns falsey. The predicate is invoked with
	     * three arguments: (value, index, array).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Array|Function|Object|string} [predicate=_.identity]
	     *  The function invoked per iteration.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * _.takeRightWhile(users, function(o) { return !o.active; });
	     * // => objects for ['fred', 'pebbles']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
	     * // => objects for ['pebbles']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.takeRightWhile(users, ['active', false]);
	     * // => objects for ['fred', 'pebbles']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.takeRightWhile(users, 'active');
	     * // => []
	     */
	    function takeRightWhile(array, predicate) {
	      return (array && array.length)
	        ? baseWhile(array, getIteratee(predicate, 3), false, true)
	        : [];
	    }

	    /**
	     * Creates a slice of `array` with elements taken from the beginning. Elements
	     * are taken until `predicate` returns falsey. The predicate is invoked with
	     * three arguments: (value, index, array).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Array|Function|Object|string} [predicate=_.identity]
	     *  The function invoked per iteration.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false},
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * _.takeWhile(users, function(o) { return !o.active; });
	     * // => objects for ['barney', 'fred']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.takeWhile(users, { 'user': 'barney', 'active': false });
	     * // => objects for ['barney']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.takeWhile(users, ['active', false]);
	     * // => objects for ['barney', 'fred']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.takeWhile(users, 'active');
	     * // => []
	     */
	    function takeWhile(array, predicate) {
	      return (array && array.length)
	        ? baseWhile(array, getIteratee(predicate, 3))
	        : [];
	    }

	    /**
	     * Creates an array of unique values, in order, from all given arrays using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of combined values.
	     * @example
	     *
	     * _.union([2, 1], [4, 2], [1, 2]);
	     * // => [2, 1, 4]
	     */
	    var union = rest(function(arrays) {
	      return baseUniq(baseFlatten(arrays, 1, true));
	    });

	    /**
	     * This method is like `_.union` except that it accepts `iteratee` which is
	     * invoked for each element of each `arrays` to generate the criterion by
	     * which uniqueness is computed. The iteratee is invoked with one argument:
	     * (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The iteratee invoked per element.
	     * @returns {Array} Returns the new array of combined values.
	     * @example
	     *
	     * _.unionBy([2.1, 1.2], [4.3, 2.4], Math.floor);
	     * // => [2.1, 1.2, 4.3]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 1 }, { 'x': 2 }]
	     */
	    var unionBy = rest(function(arrays) {
	      var iteratee = last(arrays);
	      if (isArrayLikeObject(iteratee)) {
	        iteratee = undefined;
	      }
	      return baseUniq(baseFlatten(arrays, 1, true), getIteratee(iteratee));
	    });

	    /**
	     * This method is like `_.union` except that it accepts `comparator` which
	     * is invoked to compare elements of `arrays`. The comparator is invoked
	     * with two arguments: (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of combined values.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
	     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
	     *
	     * _.unionWith(objects, others, _.isEqual);
	     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
	     */
	    var unionWith = rest(function(arrays) {
	      var comparator = last(arrays);
	      if (isArrayLikeObject(comparator)) {
	        comparator = undefined;
	      }
	      return baseUniq(baseFlatten(arrays, 1, true), undefined, comparator);
	    });

	    /**
	     * Creates a duplicate-free version of an array, using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons, in which only the first occurrence of each
	     * element is kept.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * _.uniq([2, 1, 2]);
	     * // => [2, 1]
	     */
	    function uniq(array) {
	      return (array && array.length)
	        ? baseUniq(array)
	        : [];
	    }

	    /**
	     * This method is like `_.uniq` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the criterion by which
	     * uniqueness is computed. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The iteratee invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
	     * // => [2.1, 1.2]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 1 }, { 'x': 2 }]
	     */
	    function uniqBy(array, iteratee) {
	      return (array && array.length)
	        ? baseUniq(array, getIteratee(iteratee))
	        : [];
	    }

	    /**
	     * This method is like `_.uniq` except that it accepts `comparator` which
	     * is invoked to compare elements of `array`. The comparator is invoked with
	     * two arguments: (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 },  { 'x': 1, 'y': 2 }];
	     *
	     * _.uniqWith(objects, _.isEqual);
	     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
	     */
	    function uniqWith(array, comparator) {
	      return (array && array.length)
	        ? baseUniq(array, undefined, comparator)
	        : [];
	    }

	    /**
	     * This method is like `_.zip` except that it accepts an array of grouped
	     * elements and creates an array regrouping the elements to their pre-zip
	     * configuration.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.2.0
	     * @category Array
	     * @param {Array} array The array of grouped elements to process.
	     * @returns {Array} Returns the new array of regrouped elements.
	     * @example
	     *
	     * var zipped = _.zip(['fred', 'barney'], [30, 40], [true, false]);
	     * // => [['fred', 30, true], ['barney', 40, false]]
	     *
	     * _.unzip(zipped);
	     * // => [['fred', 'barney'], [30, 40], [true, false]]
	     */
	    function unzip(array) {
	      if (!(array && array.length)) {
	        return [];
	      }
	      var length = 0;
	      array = arrayFilter(array, function(group) {
	        if (isArrayLikeObject(group)) {
	          length = nativeMax(group.length, length);
	          return true;
	        }
	      });
	      return baseTimes(length, function(index) {
	        return arrayMap(array, baseProperty(index));
	      });
	    }

	    /**
	     * This method is like `_.unzip` except that it accepts `iteratee` to specify
	     * how regrouped values should be combined. The iteratee is invoked with the
	     * elements of each group: (...group).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.8.0
	     * @category Array
	     * @param {Array} array The array of grouped elements to process.
	     * @param {Function} [iteratee=_.identity] The function to combine
	     *  regrouped values.
	     * @returns {Array} Returns the new array of regrouped elements.
	     * @example
	     *
	     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
	     * // => [[1, 10, 100], [2, 20, 200]]
	     *
	     * _.unzipWith(zipped, _.add);
	     * // => [3, 30, 300]
	     */
	    function unzipWith(array, iteratee) {
	      if (!(array && array.length)) {
	        return [];
	      }
	      var result = unzip(array);
	      if (iteratee == null) {
	        return result;
	      }
	      return arrayMap(result, function(group) {
	        return apply(iteratee, undefined, group);
	      });
	    }

	    /**
	     * Creates an array excluding all given values using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to filter.
	     * @param {...*} [values] The values to exclude.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.without([1, 2, 1, 3], 1, 2);
	     * // => [3]
	     */
	    var without = rest(function(array, values) {
	      return isArrayLikeObject(array)
	        ? baseDifference(array, values)
	        : [];
	    });

	    /**
	     * Creates an array of unique values that is the
	     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
	     * of the given arrays. The order of result values is determined by the order
	     * they occur in the arrays.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of values.
	     * @example
	     *
	     * _.xor([2, 1], [4, 2]);
	     * // => [1, 4]
	     */
	    var xor = rest(function(arrays) {
	      return baseXor(arrayFilter(arrays, isArrayLikeObject));
	    });

	    /**
	     * This method is like `_.xor` except that it accepts `iteratee` which is
	     * invoked for each element of each `arrays` to generate the criterion by
	     * which by which they're compared. The iteratee is invoked with one argument:
	     * (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The iteratee invoked per element.
	     * @returns {Array} Returns the new array of values.
	     * @example
	     *
	     * _.xorBy([2.1, 1.2], [4.3, 2.4], Math.floor);
	     * // => [1.2, 4.3]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 2 }]
	     */
	    var xorBy = rest(function(arrays) {
	      var iteratee = last(arrays);
	      if (isArrayLikeObject(iteratee)) {
	        iteratee = undefined;
	      }
	      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee));
	    });

	    /**
	     * This method is like `_.xor` except that it accepts `comparator` which is
	     * invoked to compare elements of `arrays`. The comparator is invoked with
	     * two arguments: (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of values.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
	     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
	     *
	     * _.xorWith(objects, others, _.isEqual);
	     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
	     */
	    var xorWith = rest(function(arrays) {
	      var comparator = last(arrays);
	      if (isArrayLikeObject(comparator)) {
	        comparator = undefined;
	      }
	      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
	    });

	    /**
	     * Creates an array of grouped elements, the first of which contains the
	     * first elements of the given arrays, the second of which contains the
	     * second elements of the given arrays, and so on.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to process.
	     * @returns {Array} Returns the new array of grouped elements.
	     * @example
	     *
	     * _.zip(['fred', 'barney'], [30, 40], [true, false]);
	     * // => [['fred', 30, true], ['barney', 40, false]]
	     */
	    var zip = rest(unzip);

	    /**
	     * This method is like `_.fromPairs` except that it accepts two arrays,
	     * one of property identifiers and one of corresponding values.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.4.0
	     * @category Array
	     * @param {Array} [props=[]] The property identifiers.
	     * @param {Array} [values=[]] The property values.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * _.zipObject(['a', 'b'], [1, 2]);
	     * // => { 'a': 1, 'b': 2 }
	     */
	    function zipObject(props, values) {
	      return baseZipObject(props || [], values || [], assignValue);
	    }

	    /**
	     * This method is like `_.zipObject` except that it supports property paths.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.1.0
	     * @category Array
	     * @param {Array} [props=[]] The property identifiers.
	     * @param {Array} [values=[]] The property values.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
	     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
	     */
	    function zipObjectDeep(props, values) {
	      return baseZipObject(props || [], values || [], baseSet);
	    }

	    /**
	     * This method is like `_.zip` except that it accepts `iteratee` to specify
	     * how grouped values should be combined. The iteratee is invoked with the
	     * elements of each group: (...group).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.8.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to process.
	     * @param {Function} [iteratee=_.identity] The function to combine grouped values.
	     * @returns {Array} Returns the new array of grouped elements.
	     * @example
	     *
	     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
	     *   return a + b + c;
	     * });
	     * // => [111, 222]
	     */
	    var zipWith = rest(function(arrays) {
	      var length = arrays.length,
	          iteratee = length > 1 ? arrays[length - 1] : undefined;

	      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
	      return unzipWith(arrays, iteratee);
	    });

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
	     * chain sequences enabled. The result of such sequences must be unwrapped
	     * with `_#value`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.3.0
	     * @category Seq
	     * @param {*} value The value to wrap.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36 },
	     *   { 'user': 'fred',    'age': 40 },
	     *   { 'user': 'pebbles', 'age': 1 }
	     * ];
	     *
	     * var youngest = _
	     *   .chain(users)
	     *   .sortBy('age')
	     *   .map(function(o) {
	     *     return o.user + ' is ' + o.age;
	     *   })
	     *   .head()
	     *   .value();
	     * // => 'pebbles is 1'
	     */
	    function chain(value) {
	      var result = lodash(value);
	      result.__chain__ = true;
	      return result;
	    }

	    /**
	     * This method invokes `interceptor` and returns `value`. The interceptor
	     * is invoked with one argument; (value). The purpose of this method is to
	     * "tap into" a method chain sequence in order to modify intermediate results.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Seq
	     * @param {*} value The value to provide to `interceptor`.
	     * @param {Function} interceptor The function to invoke.
	     * @returns {*} Returns `value`.
	     * @example
	     *
	     * _([1, 2, 3])
	     *  .tap(function(array) {
	     *    // Mutate input array.
	     *    array.pop();
	     *  })
	     *  .reverse()
	     *  .value();
	     * // => [2, 1]
	     */
	    function tap(value, interceptor) {
	      interceptor(value);
	      return value;
	    }

	    /**
	     * This method is like `_.tap` except that it returns the result of `interceptor`.
	     * The purpose of this method is to "pass thru" values replacing intermediate
	     * results in a method chain sequence.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Seq
	     * @param {*} value The value to provide to `interceptor`.
	     * @param {Function} interceptor The function to invoke.
	     * @returns {*} Returns the result of `interceptor`.
	     * @example
	     *
	     * _('  abc  ')
	     *  .chain()
	     *  .trim()
	     *  .thru(function(value) {
	     *    return [value];
	     *  })
	     *  .value();
	     * // => ['abc']
	     */
	    function thru(value, interceptor) {
	      return interceptor(value);
	    }

	    /**
	     * This method is the wrapper version of `_.at`.
	     *
	     * @name at
	     * @memberOf _
	     * @since 1.0.0
	     * @category Seq
	     * @param {...(string|string[])} [paths] The property paths of elements to pick,
	     *  specified individually or in arrays.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
	     *
	     * _(object).at(['a[0].b.c', 'a[1]']).value();
	     * // => [3, 4]
	     *
	     * _(['a', 'b', 'c']).at(0, 2).value();
	     * // => ['a', 'c']
	     */
	    var wrapperAt = rest(function(paths) {
	      paths = baseFlatten(paths, 1);
	      var length = paths.length,
	          start = length ? paths[0] : 0,
	          value = this.__wrapped__,
	          interceptor = function(object) { return baseAt(object, paths); };

	      if (length > 1 || this.__actions__.length ||
	          !(value instanceof LazyWrapper) || !isIndex(start)) {
	        return this.thru(interceptor);
	      }
	      value = value.slice(start, +start + (length ? 1 : 0));
	      value.__actions__.push({
	        'func': thru,
	        'args': [interceptor],
	        'thisArg': undefined
	      });
	      return new LodashWrapper(value, this.__chain__).thru(function(array) {
	        if (length && !array.length) {
	          array.push(undefined);
	        }
	        return array;
	      });
	    });

	    /**
	     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
	     *
	     * @name chain
	     * @memberOf _
	     * @since 0.1.0
	     * @category Seq
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * // A sequence without explicit chaining.
	     * _(users).head();
	     * // => { 'user': 'barney', 'age': 36 }
	     *
	     * // A sequence with explicit chaining.
	     * _(users)
	     *   .chain()
	     *   .head()
	     *   .pick('user')
	     *   .value();
	     * // => { 'user': 'barney' }
	     */
	    function wrapperChain() {
	      return chain(this);
	    }

	    /**
	     * Executes the chain sequence and returns the wrapped result.
	     *
	     * @name commit
	     * @memberOf _
	     * @since 3.2.0
	     * @category Seq
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var array = [1, 2];
	     * var wrapped = _(array).push(3);
	     *
	     * console.log(array);
	     * // => [1, 2]
	     *
	     * wrapped = wrapped.commit();
	     * console.log(array);
	     * // => [1, 2, 3]
	     *
	     * wrapped.last();
	     * // => 3
	     *
	     * console.log(array);
	     * // => [1, 2, 3]
	     */
	    function wrapperCommit() {
	      return new LodashWrapper(this.value(), this.__chain__);
	    }

	    /**
	     * Gets the next value on a wrapped object following the
	     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
	     *
	     * @name next
	     * @memberOf _
	     * @since 4.0.0
	     * @category Seq
	     * @returns {Object} Returns the next iterator value.
	     * @example
	     *
	     * var wrapped = _([1, 2]);
	     *
	     * wrapped.next();
	     * // => { 'done': false, 'value': 1 }
	     *
	     * wrapped.next();
	     * // => { 'done': false, 'value': 2 }
	     *
	     * wrapped.next();
	     * // => { 'done': true, 'value': undefined }
	     */
	    function wrapperNext() {
	      if (this.__values__ === undefined) {
	        this.__values__ = toArray(this.value());
	      }
	      var done = this.__index__ >= this.__values__.length,
	          value = done ? undefined : this.__values__[this.__index__++];

	      return { 'done': done, 'value': value };
	    }

	    /**
	     * Enables the wrapper to be iterable.
	     *
	     * @name Symbol.iterator
	     * @memberOf _
	     * @since 4.0.0
	     * @category Seq
	     * @returns {Object} Returns the wrapper object.
	     * @example
	     *
	     * var wrapped = _([1, 2]);
	     *
	     * wrapped[Symbol.iterator]() === wrapped;
	     * // => true
	     *
	     * Array.from(wrapped);
	     * // => [1, 2]
	     */
	    function wrapperToIterator() {
	      return this;
	    }

	    /**
	     * Creates a clone of the chain sequence planting `value` as the wrapped value.
	     *
	     * @name plant
	     * @memberOf _
	     * @since 3.2.0
	     * @category Seq
	     * @param {*} value The value to plant.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var wrapped = _([1, 2]).map(square);
	     * var other = wrapped.plant([3, 4]);
	     *
	     * other.value();
	     * // => [9, 16]
	     *
	     * wrapped.value();
	     * // => [1, 4]
	     */
	    function wrapperPlant(value) {
	      var result,
	          parent = this;

	      while (parent instanceof baseLodash) {
	        var clone = wrapperClone(parent);
	        clone.__index__ = 0;
	        clone.__values__ = undefined;
	        if (result) {
	          previous.__wrapped__ = clone;
	        } else {
	          result = clone;
	        }
	        var previous = clone;
	        parent = parent.__wrapped__;
	      }
	      previous.__wrapped__ = value;
	      return result;
	    }

	    /**
	     * This method is the wrapper version of `_.reverse`.
	     *
	     * **Note:** This method mutates the wrapped array.
	     *
	     * @name reverse
	     * @memberOf _
	     * @since 0.1.0
	     * @category Seq
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _(array).reverse().value()
	     * // => [3, 2, 1]
	     *
	     * console.log(array);
	     * // => [3, 2, 1]
	     */
	    function wrapperReverse() {
	      var value = this.__wrapped__;
	      if (value instanceof LazyWrapper) {
	        var wrapped = value;
	        if (this.__actions__.length) {
	          wrapped = new LazyWrapper(this);
	        }
	        wrapped = wrapped.reverse();
	        wrapped.__actions__.push({
	          'func': thru,
	          'args': [reverse],
	          'thisArg': undefined
	        });
	        return new LodashWrapper(wrapped, this.__chain__);
	      }
	      return this.thru(reverse);
	    }

	    /**
	     * Executes the chain sequence to resolve the unwrapped value.
	     *
	     * @name value
	     * @memberOf _
	     * @since 0.1.0
	     * @alias toJSON, valueOf
	     * @category Seq
	     * @returns {*} Returns the resolved unwrapped value.
	     * @example
	     *
	     * _([1, 2, 3]).value();
	     * // => [1, 2, 3]
	     */
	    function wrapperValue() {
	      return baseWrapperValue(this.__wrapped__, this.__actions__);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` through `iteratee`. The corresponding value
	     * of each key is the number of times the key was returned by `iteratee`.
	     * The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.5.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The iteratee to transform keys.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * _.countBy([6.1, 4.2, 6.3], Math.floor);
	     * // => { '4': 1, '6': 2 }
	     *
	     * _.countBy(['one', 'two', 'three'], 'length');
	     * // => { '3': 2, '5': 1 }
	     */
	    var countBy = createAggregator(function(result, value, key) {
	      hasOwnProperty.call(result, key) ? ++result[key] : (result[key] = 1);
	    });

	    /**
	     * Checks if `predicate` returns truthy for **all** elements of `collection`.
	     * Iteration is stopped once `predicate` returns falsey. The predicate is
	     * invoked with three arguments: (value, index|key, collection).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array|Function|Object|string} [predicate=_.identity]
	     *  The function invoked per iteration.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
	     *  else `false`.
	     * @example
	     *
	     * _.every([true, 1, null, 'yes'], Boolean);
	     * // => false
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': false },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.every(users, { 'user': 'barney', 'active': false });
	     * // => false
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.every(users, ['active', false]);
	     * // => true
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.every(users, 'active');
	     * // => false
	     */
	    function every(collection, predicate, guard) {
	      var func = isArray(collection) ? arrayEvery : baseEvery;
	      if (guard && isIterateeCall(collection, predicate, guard)) {
	        predicate = undefined;
	      }
	      return func(collection, getIteratee(predicate, 3));
	    }

	    /**
	     * Iterates over elements of `collection`, returning an array of all elements
	     * `predicate` returns truthy for. The predicate is invoked with three
	     * arguments: (value, index|key, collection).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array|Function|Object|string} [predicate=_.identity]
	     *  The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * _.filter(users, function(o) { return !o.active; });
	     * // => objects for ['fred']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.filter(users, { 'age': 36, 'active': true });
	     * // => objects for ['barney']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.filter(users, ['active', false]);
	     * // => objects for ['fred']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.filter(users, 'active');
	     * // => objects for ['barney']
	     */
	    function filter(collection, predicate) {
	      var func = isArray(collection) ? arrayFilter : baseFilter;
	      return func(collection, getIteratee(predicate, 3));
	    }

	    /**
	     * Iterates over elements of `collection`, returning the first element
	     * `predicate` returns truthy for. The predicate is invoked with three
	     * arguments: (value, index|key, collection).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to search.
	     * @param {Array|Function|Object|string} [predicate=_.identity]
	     *  The function invoked per iteration.
	     * @returns {*} Returns the matched element, else `undefined`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36, 'active': true },
	     *   { 'user': 'fred',    'age': 40, 'active': false },
	     *   { 'user': 'pebbles', 'age': 1,  'active': true }
	     * ];
	     *
	     * _.find(users, function(o) { return o.age < 40; });
	     * // => object for 'barney'
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.find(users, { 'age': 1, 'active': true });
	     * // => object for 'pebbles'
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.find(users, ['active', false]);
	     * // => object for 'fred'
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.find(users, 'active');
	     * // => object for 'barney'
	     */
	    function find(collection, predicate) {
	      predicate = getIteratee(predicate, 3);
	      if (isArray(collection)) {
	        var index = baseFindIndex(collection, predicate);
	        return index > -1 ? collection[index] : undefined;
	      }
	      return baseFind(collection, predicate, baseEach);
	    }

	    /**
	     * This method is like `_.find` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to search.
	     * @param {Array|Function|Object|string} [predicate=_.identity]
	     *  The function invoked per iteration.
	     * @returns {*} Returns the matched element, else `undefined`.
	     * @example
	     *
	     * _.findLast([1, 2, 3, 4], function(n) {
	     *   return n % 2 == 1;
	     * });
	     * // => 3
	     */
	    function findLast(collection, predicate) {
	      predicate = getIteratee(predicate, 3);
	      if (isArray(collection)) {
	        var index = baseFindIndex(collection, predicate, true);
	        return index > -1 ? collection[index] : undefined;
	      }
	      return baseFind(collection, predicate, baseEachRight);
	    }

	    /**
	     * Creates a flattened array of values by running each element in `collection`
	     * through `iteratee` and flattening the mapped results. The iteratee is
	     * invoked with three arguments: (value, index|key, collection).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The function invoked per iteration.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * function duplicate(n) {
	     *   return [n, n];
	     * }
	     *
	     * _.flatMap([1, 2], duplicate);
	     * // => [1, 1, 2, 2]
	     */
	    function flatMap(collection, iteratee) {
	      return baseFlatten(map(collection, iteratee), 1);
	    }

	    /**
	     * This method is like `_.flatMap` except that it recursively flattens the
	     * mapped results.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The function invoked per iteration.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * function duplicate(n) {
	     *   return [[[n, n]]];
	     * }
	     *
	     * _.flatMapDeep([1, 2], duplicate);
	     * // => [1, 1, 2, 2]
	     */
	    function flatMapDeep(collection, iteratee) {
	      return baseFlatten(map(collection, iteratee), INFINITY);
	    }

	    /**
	     * This method is like `_.flatMap` except that it recursively flattens the
	     * mapped results up to `depth` times.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The function invoked per iteration.
	     * @param {number} [depth=1] The maximum recursion depth.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * function duplicate(n) {
	     *   return [[[n, n]]];
	     * }
	     *
	     * _.flatMapDepth([1, 2], duplicate, 2);
	     * // => [[1, 1], [2, 2]]
	     */
	    function flatMapDepth(collection, iteratee, depth) {
	      depth = depth === undefined ? 1 : toInteger(depth);
	      return baseFlatten(map(collection, iteratee), depth);
	    }

	    /**
	     * Iterates over elements of `collection` invoking `iteratee` for each element.
	     * The iteratee is invoked with three arguments: (value, index|key, collection).
	     * Iteratee functions may exit iteration early by explicitly returning `false`.
	     *
	     * **Note:** As with other "Collections" methods, objects with a "length"
	     * property are iterated like arrays. To avoid this behavior use `_.forIn`
	     * or `_.forOwn` for object iteration.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @alias each
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array|Object} Returns `collection`.
	     * @example
	     *
	     * _([1, 2]).forEach(function(value) {
	     *   console.log(value);
	     * });
	     * // => Logs `1` then `2`.
	     *
	     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
	     */
	    function forEach(collection, iteratee) {
	      return (typeof iteratee == 'function' && isArray(collection))
	        ? arrayEach(collection, iteratee)
	        : baseEach(collection, getIteratee(iteratee));
	    }

	    /**
	     * This method is like `_.forEach` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @alias eachRight
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array|Object} Returns `collection`.
	     * @example
	     *
	     * _.forEachRight([1, 2], function(value) {
	     *   console.log(value);
	     * });
	     * // => Logs `2` then `1`.
	     */
	    function forEachRight(collection, iteratee) {
	      return (typeof iteratee == 'function' && isArray(collection))
	        ? arrayEachRight(collection, iteratee)
	        : baseEachRight(collection, getIteratee(iteratee));
	    }

	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` through `iteratee`. The corresponding value
	     * of each key is an array of elements responsible for generating the key.
	     * The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The iteratee to transform keys.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
	     * // => { '4': [4.2], '6': [6.1, 6.3] }
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.groupBy(['one', 'two', 'three'], 'length');
	     * // => { '3': ['one', 'two'], '5': ['three'] }
	     */
	    var groupBy = createAggregator(function(result, value, key) {
	      if (hasOwnProperty.call(result, key)) {
	        result[key].push(value);
	      } else {
	        result[key] = [value];
	      }
	    });

	    /**
	     * Checks if `value` is in `collection`. If `collection` is a string it's
	     * checked for a substring of `value`, otherwise
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * is used for equality comparisons. If `fromIndex` is negative, it's used as
	     * the offset from the end of `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {*} value The value to search for.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
	     * @returns {boolean} Returns `true` if `value` is found, else `false`.
	     * @example
	     *
	     * _.includes([1, 2, 3], 1);
	     * // => true
	     *
	     * _.includes([1, 2, 3], 1, 2);
	     * // => false
	     *
	     * _.includes({ 'user': 'fred', 'age': 40 }, 'fred');
	     * // => true
	     *
	     * _.includes('pebbles', 'eb');
	     * // => true
	     */
	    function includes(collection, value, fromIndex, guard) {
	      collection = isArrayLike(collection) ? collection : values(collection);
	      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

	      var length = collection.length;
	      if (fromIndex < 0) {
	        fromIndex = nativeMax(length + fromIndex, 0);
	      }
	      return isString(collection)
	        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
	        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
	    }

	    /**
	     * Invokes the method at `path` of each element in `collection`, returning
	     * an array of the results of each invoked method. Any additional arguments
	     * are provided to each invoked method. If `methodName` is a function it's
	     * invoked for, and `this` bound to, each element in `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array|Function|string} path The path of the method to invoke or
	     *  the function invoked per iteration.
	     * @param {...*} [args] The arguments to invoke each method with.
	     * @returns {Array} Returns the array of results.
	     * @example
	     *
	     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
	     * // => [[1, 5, 7], [1, 2, 3]]
	     *
	     * _.invokeMap([123, 456], String.prototype.split, '');
	     * // => [['1', '2', '3'], ['4', '5', '6']]
	     */
	    var invokeMap = rest(function(collection, path, args) {
	      var index = -1,
	          isFunc = typeof path == 'function',
	          isProp = isKey(path),
	          result = isArrayLike(collection) ? Array(collection.length) : [];

	      baseEach(collection, function(value) {
	        var func = isFunc ? path : ((isProp && value != null) ? value[path] : undefined);
	        result[++index] = func ? apply(func, value, args) : baseInvoke(value, path, args);
	      });
	      return result;
	    });

	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` through `iteratee`. The corresponding value
	     * of each key is the last element responsible for generating the key. The
	     * iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The iteratee to transform keys.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * var array = [
	     *   { 'dir': 'left', 'code': 97 },
	     *   { 'dir': 'right', 'code': 100 }
	     * ];
	     *
	     * _.keyBy(array, function(o) {
	     *   return String.fromCharCode(o.code);
	     * });
	     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
	     *
	     * _.keyBy(array, 'dir');
	     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
	     */
	    var keyBy = createAggregator(function(result, value, key) {
	      result[key] = value;
	    });

	    /**
	     * Creates an array of values by running each element in `collection` through
	     * `iteratee`. The iteratee is invoked with three arguments:
	     * (value, index|key, collection).
	     *
	     * Many lodash methods are guarded to work as iteratees for methods like
	     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
	     *
	     * The guarded methods are:
	     * `ary`, `curry`, `curryRight`, `drop`, `dropRight`, `every`, `fill`,
	     * `invert`, `parseInt`, `random`, `range`, `rangeRight`, `slice`, `some`,
	     * `sortBy`, `take`, `takeRight`, `template`, `trim`, `trimEnd`, `trimStart`,
	     * and `words`
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The function invoked per iteration.
	     * @returns {Array} Returns the new mapped array.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * _.map([4, 8], square);
	     * // => [16, 64]
	     *
	     * _.map({ 'a': 4, 'b': 8 }, square);
	     * // => [16, 64] (iteration order is not guaranteed)
	     *
	     * var users = [
	     *   { 'user': 'barney' },
	     *   { 'user': 'fred' }
	     * ];
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.map(users, 'user');
	     * // => ['barney', 'fred']
	     */
	    function map(collection, iteratee) {
	      var func = isArray(collection) ? arrayMap : baseMap;
	      return func(collection, getIteratee(iteratee, 3));
	    }

	    /**
	     * This method is like `_.sortBy` except that it allows specifying the sort
	     * orders of the iteratees to sort by. If `orders` is unspecified, all values
	     * are sorted in ascending order. Otherwise, specify an order of "desc" for
	     * descending or "asc" for ascending sort order of corresponding values.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
	     *  The iteratees to sort by.
	     * @param {string[]} [orders] The sort orders of `iteratees`.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
	     * @returns {Array} Returns the new sorted array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'fred',   'age': 48 },
	     *   { 'user': 'barney', 'age': 34 },
	     *   { 'user': 'fred',   'age': 40 },
	     *   { 'user': 'barney', 'age': 36 }
	     * ];
	     *
	     * // Sort by `user` in ascending order and by `age` in descending order.
	     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
	     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
	     */
	    function orderBy(collection, iteratees, orders, guard) {
	      if (collection == null) {
	        return [];
	      }
	      if (!isArray(iteratees)) {
	        iteratees = iteratees == null ? [] : [iteratees];
	      }
	      orders = guard ? undefined : orders;
	      if (!isArray(orders)) {
	        orders = orders == null ? [] : [orders];
	      }
	      return baseOrderBy(collection, iteratees, orders);
	    }

	    /**
	     * Creates an array of elements split into two groups, the first of which
	     * contains elements `predicate` returns truthy for, the second of which
	     * contains elements `predicate` returns falsey for. The predicate is
	     * invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array|Function|Object|string} [predicate=_.identity]
	     *  The function invoked per iteration.
	     * @returns {Array} Returns the array of grouped elements.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36, 'active': false },
	     *   { 'user': 'fred',    'age': 40, 'active': true },
	     *   { 'user': 'pebbles', 'age': 1,  'active': false }
	     * ];
	     *
	     * _.partition(users, function(o) { return o.active; });
	     * // => objects for [['fred'], ['barney', 'pebbles']]
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.partition(users, { 'age': 1, 'active': false });
	     * // => objects for [['pebbles'], ['barney', 'fred']]
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.partition(users, ['active', false]);
	     * // => objects for [['barney', 'pebbles'], ['fred']]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.partition(users, 'active');
	     * // => objects for [['fred'], ['barney', 'pebbles']]
	     */
	    var partition = createAggregator(function(result, value, key) {
	      result[key ? 0 : 1].push(value);
	    }, function() { return [[], []]; });

	    /**
	     * Reduces `collection` to a value which is the accumulated result of running
	     * each element in `collection` through `iteratee`, where each successive
	     * invocation is supplied the return value of the previous. If `accumulator`
	     * is not given the first element of `collection` is used as the initial
	     * value. The iteratee is invoked with four arguments:
	     * (accumulator, value, index|key, collection).
	     *
	     * Many lodash methods are guarded to work as iteratees for methods like
	     * `_.reduce`, `_.reduceRight`, and `_.transform`.
	     *
	     * The guarded methods are:
	     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
	     * and `sortBy`
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @returns {*} Returns the accumulated value.
	     * @example
	     *
	     * _.reduce([1, 2], function(sum, n) {
	     *   return sum + n;
	     * }, 0);
	     * // => 3
	     *
	     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
	     *   (result[value] || (result[value] = [])).push(key);
	     *   return result;
	     * }, {});
	     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
	     */
	    function reduce(collection, iteratee, accumulator) {
	      var func = isArray(collection) ? arrayReduce : baseReduce,
	          initAccum = arguments.length < 3;

	      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
	    }

	    /**
	     * This method is like `_.reduce` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @returns {*} Returns the accumulated value.
	     * @example
	     *
	     * var array = [[0, 1], [2, 3], [4, 5]];
	     *
	     * _.reduceRight(array, function(flattened, other) {
	     *   return flattened.concat(other);
	     * }, []);
	     * // => [4, 5, 2, 3, 0, 1]
	     */
	    function reduceRight(collection, iteratee, accumulator) {
	      var func = isArray(collection) ? arrayReduceRight : baseReduce,
	          initAccum = arguments.length < 3;

	      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
	    }

	    /**
	     * The opposite of `_.filter`; this method returns the elements of `collection`
	     * that `predicate` does **not** return truthy for.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array|Function|Object|string} [predicate=_.identity]
	     *  The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': false },
	     *   { 'user': 'fred',   'age': 40, 'active': true }
	     * ];
	     *
	     * _.reject(users, function(o) { return !o.active; });
	     * // => objects for ['fred']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.reject(users, { 'age': 40, 'active': true });
	     * // => objects for ['barney']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.reject(users, ['active', false]);
	     * // => objects for ['fred']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.reject(users, 'active');
	     * // => objects for ['barney']
	     */
	    function reject(collection, predicate) {
	      var func = isArray(collection) ? arrayFilter : baseFilter;
	      predicate = getIteratee(predicate, 3);
	      return func(collection, function(value, index, collection) {
	        return !predicate(value, index, collection);
	      });
	    }

	    /**
	     * Gets a random element from `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to sample.
	     * @returns {*} Returns the random element.
	     * @example
	     *
	     * _.sample([1, 2, 3, 4]);
	     * // => 2
	     */
	    function sample(collection) {
	      var array = isArrayLike(collection) ? collection : values(collection),
	          length = array.length;

	      return length > 0 ? array[baseRandom(0, length - 1)] : undefined;
	    }

	    /**
	     * Gets `n` random elements at unique keys from `collection` up to the
	     * size of `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to sample.
	     * @param {number} [n=0] The number of elements to sample.
	     * @returns {Array} Returns the random elements.
	     * @example
	     *
	     * _.sampleSize([1, 2, 3], 2);
	     * // => [3, 1]
	     *
	     * _.sampleSize([1, 2, 3], 4);
	     * // => [2, 3, 1]
	     */
	    function sampleSize(collection, n) {
	      var index = -1,
	          result = toArray(collection),
	          length = result.length,
	          lastIndex = length - 1;

	      n = baseClamp(toInteger(n), 0, length);
	      while (++index < n) {
	        var rand = baseRandom(index, lastIndex),
	            value = result[rand];

	        result[rand] = result[index];
	        result[index] = value;
	      }
	      result.length = n;
	      return result;
	    }

	    /**
	     * Creates an array of shuffled values, using a version of the
	     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to shuffle.
	     * @returns {Array} Returns the new shuffled array.
	     * @example
	     *
	     * _.shuffle([1, 2, 3, 4]);
	     * // => [4, 1, 3, 2]
	     */
	    function shuffle(collection) {
	      return sampleSize(collection, MAX_ARRAY_LENGTH);
	    }

	    /**
	     * Gets the size of `collection` by returning its length for array-like
	     * values or the number of own enumerable string keyed properties for objects.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to inspect.
	     * @returns {number} Returns the collection size.
	     * @example
	     *
	     * _.size([1, 2, 3]);
	     * // => 3
	     *
	     * _.size({ 'a': 1, 'b': 2 });
	     * // => 2
	     *
	     * _.size('pebbles');
	     * // => 7
	     */
	    function size(collection) {
	      if (collection == null) {
	        return 0;
	      }
	      if (isArrayLike(collection)) {
	        var result = collection.length;
	        return (result && isString(collection)) ? stringSize(collection) : result;
	      }
	      if (isObjectLike(collection)) {
	        var tag = getTag(collection);
	        if (tag == mapTag || tag == setTag) {
	          return collection.size;
	        }
	      }
	      return keys(collection).length;
	    }

	    /**
	     * Checks if `predicate` returns truthy for **any** element of `collection`.
	     * Iteration is stopped once `predicate` returns truthy. The predicate is
	     * invoked with three arguments: (value, index|key, collection).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array|Function|Object|string} [predicate=_.identity]
	     *  The function invoked per iteration.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {boolean} Returns `true` if any element passes the predicate check,
	     *  else `false`.
	     * @example
	     *
	     * _.some([null, 0, 'yes', false], Boolean);
	     * // => true
	     *
	     * var users = [
	     *   { 'user': 'barney', 'active': true },
	     *   { 'user': 'fred',   'active': false }
	     * ];
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.some(users, { 'user': 'barney', 'active': false });
	     * // => false
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.some(users, ['active', false]);
	     * // => true
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.some(users, 'active');
	     * // => true
	     */
	    function some(collection, predicate, guard) {
	      var func = isArray(collection) ? arraySome : baseSome;
	      if (guard && isIterateeCall(collection, predicate, guard)) {
	        predicate = undefined;
	      }
	      return func(collection, getIteratee(predicate, 3));
	    }

	    /**
	     * Creates an array of elements, sorted in ascending order by the results of
	     * running each element in a collection through each iteratee. This method
	     * performs a stable sort, that is, it preserves the original sort order of
	     * equal elements. The iteratees are invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {...(Array|Array[]|Function|Function[]|Object|Object[]|string|string[])}
	     *  [iteratees=[_.identity]] The iteratees to sort by, specified individually
	     *  or in arrays.
	     * @returns {Array} Returns the new sorted array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'fred',   'age': 48 },
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 },
	     *   { 'user': 'barney', 'age': 34 }
	     * ];
	     *
	     * _.sortBy(users, function(o) { return o.user; });
	     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
	     *
	     * _.sortBy(users, ['user', 'age']);
	     * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]
	     *
	     * _.sortBy(users, 'user', function(o) {
	     *   return Math.floor(o.age / 10);
	     * });
	     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
	     */
	    var sortBy = rest(function(collection, iteratees) {
	      if (collection == null) {
	        return [];
	      }
	      var length = iteratees.length;
	      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
	        iteratees = [];
	      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
	        iteratees.length = 1;
	      }
	      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
	    });

	    /*------------------------------------------------------------------------*/

	    /**
	     * Gets the timestamp of the number of milliseconds that have elapsed since
	     * the Unix epoch (1 January 1970 00:00:00 UTC).
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @type {Function}
	     * @category Date
	     * @returns {number} Returns the timestamp.
	     * @example
	     *
	     * _.defer(function(stamp) {
	     *   console.log(_.now() - stamp);
	     * }, _.now());
	     * // => Logs the number of milliseconds it took for the deferred function to be invoked.
	     */
	    var now = Date.now;

	    /*------------------------------------------------------------------------*/

	    /**
	     * The opposite of `_.before`; this method creates a function that invokes
	     * `func` once it's called `n` or more times.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {number} n The number of calls before `func` is invoked.
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * var saves = ['profile', 'settings'];
	     *
	     * var done = _.after(saves.length, function() {
	     *   console.log('done saving!');
	     * });
	     *
	     * _.forEach(saves, function(type) {
	     *   asyncSave({ 'type': type, 'complete': done });
	     * });
	     * // => Logs 'done saving!' after the two async saves have completed.
	     */
	    function after(n, func) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      n = toInteger(n);
	      return function() {
	        if (--n < 1) {
	          return func.apply(this, arguments);
	        }
	      };
	    }

	    /**
	     * Creates a function that accepts up to `n` arguments, ignoring any
	     * additional arguments.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {Function} func The function to cap arguments for.
	     * @param {number} [n=func.length] The arity cap.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
	     * // => [6, 8, 10]
	     */
	    function ary(func, n, guard) {
	      n = guard ? undefined : n;
	      n = (func && n == null) ? func.length : n;
	      return createWrapper(func, ARY_FLAG, undefined, undefined, undefined, undefined, n);
	    }

	    /**
	     * Creates a function that invokes `func`, with the `this` binding and arguments
	     * of the created function, while it's called less than `n` times. Subsequent
	     * calls to the created function return the result of the last `func` invocation.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {number} n The number of calls at which `func` is no longer invoked.
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * jQuery(element).on('click', _.before(5, addContactToList));
	     * // => allows adding up to 4 contacts to the list
	     */
	    function before(n, func) {
	      var result;
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      n = toInteger(n);
	      return function() {
	        if (--n > 0) {
	          result = func.apply(this, arguments);
	        }
	        if (n <= 1) {
	          func = undefined;
	        }
	        return result;
	      };
	    }

	    /**
	     * Creates a function that invokes `func` with the `this` binding of `thisArg`
	     * and prepends any additional `_.bind` arguments to those provided to the
	     * bound function.
	     *
	     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
	     * may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** Unlike native `Function#bind` this method doesn't set the "length"
	     * property of bound functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to bind.
	     * @param {*} thisArg The `this` binding of `func`.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new bound function.
	     * @example
	     *
	     * var greet = function(greeting, punctuation) {
	     *   return greeting + ' ' + this.user + punctuation;
	     * };
	     *
	     * var object = { 'user': 'fred' };
	     *
	     * var bound = _.bind(greet, object, 'hi');
	     * bound('!');
	     * // => 'hi fred!'
	     *
	     * // Bound with placeholders.
	     * var bound = _.bind(greet, object, _, '!');
	     * bound('hi');
	     * // => 'hi fred!'
	     */
	    var bind = rest(function(func, thisArg, partials) {
	      var bitmask = BIND_FLAG;
	      if (partials.length) {
	        var holders = replaceHolders(partials, getPlaceholder(bind));
	        bitmask |= PARTIAL_FLAG;
	      }
	      return createWrapper(func, bitmask, thisArg, partials, holders);
	    });

	    /**
	     * Creates a function that invokes the method at `object[key]` and prepends
	     * any additional `_.bindKey` arguments to those provided to the bound function.
	     *
	     * This method differs from `_.bind` by allowing bound functions to reference
	     * methods that may be redefined or don't yet exist. See
	     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
	     * for more details.
	     *
	     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.10.0
	     * @category Function
	     * @param {Object} object The object to invoke the method on.
	     * @param {string} key The key of the method.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new bound function.
	     * @example
	     *
	     * var object = {
	     *   'user': 'fred',
	     *   'greet': function(greeting, punctuation) {
	     *     return greeting + ' ' + this.user + punctuation;
	     *   }
	     * };
	     *
	     * var bound = _.bindKey(object, 'greet', 'hi');
	     * bound('!');
	     * // => 'hi fred!'
	     *
	     * object.greet = function(greeting, punctuation) {
	     *   return greeting + 'ya ' + this.user + punctuation;
	     * };
	     *
	     * bound('!');
	     * // => 'hiya fred!'
	     *
	     * // Bound with placeholders.
	     * var bound = _.bindKey(object, 'greet', _, '!');
	     * bound('hi');
	     * // => 'hiya fred!'
	     */
	    var bindKey = rest(function(object, key, partials) {
	      var bitmask = BIND_FLAG | BIND_KEY_FLAG;
	      if (partials.length) {
	        var holders = replaceHolders(partials, getPlaceholder(bindKey));
	        bitmask |= PARTIAL_FLAG;
	      }
	      return createWrapper(key, bitmask, object, partials, holders);
	    });

	    /**
	     * Creates a function that accepts arguments of `func` and either invokes
	     * `func` returning its result, if at least `arity` number of arguments have
	     * been provided, or returns a function that accepts the remaining `func`
	     * arguments, and so on. The arity of `func` may be specified if `func.length`
	     * is not sufficient.
	     *
	     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
	     * may be used as a placeholder for provided arguments.
	     *
	     * **Note:** This method doesn't set the "length" property of curried functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Function
	     * @param {Function} func The function to curry.
	     * @param {number} [arity=func.length] The arity of `func`.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Function} Returns the new curried function.
	     * @example
	     *
	     * var abc = function(a, b, c) {
	     *   return [a, b, c];
	     * };
	     *
	     * var curried = _.curry(abc);
	     *
	     * curried(1)(2)(3);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2)(3);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2, 3);
	     * // => [1, 2, 3]
	     *
	     * // Curried with placeholders.
	     * curried(1)(_, 3)(2);
	     * // => [1, 2, 3]
	     */
	    function curry(func, arity, guard) {
	      arity = guard ? undefined : arity;
	      var result = createWrapper(func, CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
	      result.placeholder = curry.placeholder;
	      return result;
	    }

	    /**
	     * This method is like `_.curry` except that arguments are applied to `func`
	     * in the manner of `_.partialRight` instead of `_.partial`.
	     *
	     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for provided arguments.
	     *
	     * **Note:** This method doesn't set the "length" property of curried functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {Function} func The function to curry.
	     * @param {number} [arity=func.length] The arity of `func`.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Function} Returns the new curried function.
	     * @example
	     *
	     * var abc = function(a, b, c) {
	     *   return [a, b, c];
	     * };
	     *
	     * var curried = _.curryRight(abc);
	     *
	     * curried(3)(2)(1);
	     * // => [1, 2, 3]
	     *
	     * curried(2, 3)(1);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2, 3);
	     * // => [1, 2, 3]
	     *
	     * // Curried with placeholders.
	     * curried(3)(1, _)(2);
	     * // => [1, 2, 3]
	     */
	    function curryRight(func, arity, guard) {
	      arity = guard ? undefined : arity;
	      var result = createWrapper(func, CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
	      result.placeholder = curryRight.placeholder;
	      return result;
	    }

	    /**
	     * Creates a debounced function that delays invoking `func` until after `wait`
	     * milliseconds have elapsed since the last time the debounced function was
	     * invoked. The debounced function comes with a `cancel` method to cancel
	     * delayed `func` invocations and a `flush` method to immediately invoke them.
	     * Provide an options object to indicate whether `func` should be invoked on
	     * the leading and/or trailing edge of the `wait` timeout. The `func` is invoked
	     * with the last arguments provided to the debounced function. Subsequent calls
	     * to the debounced function return the result of the last `func` invocation.
	     *
	     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
	     * on the trailing edge of the timeout only if the debounced function is
	     * invoked more than once during the `wait` timeout.
	     *
	     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
	     * for details over the differences between `_.debounce` and `_.throttle`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to debounce.
	     * @param {number} [wait=0] The number of milliseconds to delay.
	     * @param {Object} [options={}] The options object.
	     * @param {boolean} [options.leading=false]
	     *  Specify invoking on the leading edge of the timeout.
	     * @param {number} [options.maxWait]
	     *  The maximum time `func` is allowed to be delayed before it's invoked.
	     * @param {boolean} [options.trailing=true]
	     *  Specify invoking on the trailing edge of the timeout.
	     * @returns {Function} Returns the new debounced function.
	     * @example
	     *
	     * // Avoid costly calculations while the window size is in flux.
	     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
	     *
	     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
	     * jQuery(element).on('click', _.debounce(sendMail, 300, {
	     *   'leading': true,
	     *   'trailing': false
	     * }));
	     *
	     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
	     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
	     * var source = new EventSource('/stream');
	     * jQuery(source).on('message', debounced);
	     *
	     * // Cancel the trailing debounced invocation.
	     * jQuery(window).on('popstate', debounced.cancel);
	     */
	    function debounce(func, wait, options) {
	      var lastArgs,
	          lastThis,
	          result,
	          timerId,
	          lastCallTime = 0,
	          lastInvokeTime = 0,
	          leading = false,
	          maxWait = false,
	          trailing = true;

	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      wait = toNumber(wait) || 0;
	      if (isObject(options)) {
	        leading = !!options.leading;
	        maxWait = 'maxWait' in options && nativeMax(toNumber(options.maxWait) || 0, wait);
	        trailing = 'trailing' in options ? !!options.trailing : trailing;
	      }

	      function invokeFunc(time) {
	        var args = lastArgs,
	            thisArg = lastThis;

	        lastArgs = lastThis = undefined;
	        lastInvokeTime = time;
	        result = func.apply(thisArg, args);
	        return result;
	      }

	      function leadingEdge(time) {
	        // Reset any `maxWait` timer.
	        lastInvokeTime = time;
	        // Start the timer for the trailing edge.
	        timerId = setTimeout(timerExpired, wait);
	        // Invoke the leading edge.
	        return leading ? invokeFunc(time) : result;
	      }

	      function remainingWait(time) {
	        var timeSinceLastCall = time - lastCallTime,
	            timeSinceLastInvoke = time - lastInvokeTime,
	            result = wait - timeSinceLastCall;

	        return maxWait === false ? result : nativeMin(result, maxWait - timeSinceLastInvoke);
	      }

	      function shouldInvoke(time) {
	        var timeSinceLastCall = time - lastCallTime,
	            timeSinceLastInvoke = time - lastInvokeTime;

	        // Either this is the first call, activity has stopped and we're at the
	        // trailing edge, the system time has gone backwards and we're treating
	        // it as the trailing edge, or we've hit the `maxWait` limit.
	        return (!lastCallTime || (timeSinceLastCall >= wait) ||
	          (timeSinceLastCall < 0) || (maxWait !== false && timeSinceLastInvoke >= maxWait));
	      }

	      function timerExpired() {
	        var time = now();
	        if (shouldInvoke(time)) {
	          return trailingEdge(time);
	        }
	        // Restart the timer.
	        timerId = setTimeout(timerExpired, remainingWait(time));
	      }

	      function trailingEdge(time) {
	        clearTimeout(timerId);
	        timerId = undefined;

	        // Only invoke if we have `lastArgs` which means `func` has been
	        // debounced at least once.
	        if (trailing && lastArgs) {
	          return invokeFunc(time);
	        }
	        lastArgs = lastThis = undefined;
	        return result;
	      }

	      function cancel() {
	        if (timerId !== undefined) {
	          clearTimeout(timerId);
	        }
	        lastCallTime = lastInvokeTime = 0;
	        lastArgs = lastThis = timerId = undefined;
	      }

	      function flush() {
	        return timerId === undefined ? result : trailingEdge(now());
	      }

	      function debounced() {
	        var time = now(),
	            isInvoking = shouldInvoke(time);

	        lastArgs = arguments;
	        lastThis = this;
	        lastCallTime = time;

	        if (isInvoking) {
	          if (timerId === undefined) {
	            return leadingEdge(lastCallTime);
	          }
	          // Handle invocations in a tight loop.
	          clearTimeout(timerId);
	          timerId = setTimeout(timerExpired, wait);
	          return invokeFunc(lastCallTime);
	        }
	        return result;
	      }
	      debounced.cancel = cancel;
	      debounced.flush = flush;
	      return debounced;
	    }

	    /**
	     * Defers invoking the `func` until the current call stack has cleared. Any
	     * additional arguments are provided to `func` when it's invoked.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to defer.
	     * @param {...*} [args] The arguments to invoke `func` with.
	     * @returns {number} Returns the timer id.
	     * @example
	     *
	     * _.defer(function(text) {
	     *   console.log(text);
	     * }, 'deferred');
	     * // => Logs 'deferred' after one or more milliseconds.
	     */
	    var defer = rest(function(func, args) {
	      return baseDelay(func, 1, args);
	    });

	    /**
	     * Invokes `func` after `wait` milliseconds. Any additional arguments are
	     * provided to `func` when it's invoked.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to delay.
	     * @param {number} wait The number of milliseconds to delay invocation.
	     * @param {...*} [args] The arguments to invoke `func` with.
	     * @returns {number} Returns the timer id.
	     * @example
	     *
	     * _.delay(function(text) {
	     *   console.log(text);
	     * }, 1000, 'later');
	     * // => Logs 'later' after one second.
	     */
	    var delay = rest(function(func, wait, args) {
	      return baseDelay(func, toNumber(wait) || 0, args);
	    });

	    /**
	     * Creates a function that invokes `func` with arguments reversed.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Function
	     * @param {Function} func The function to flip arguments for.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var flipped = _.flip(function() {
	     *   return _.toArray(arguments);
	     * });
	     *
	     * flipped('a', 'b', 'c', 'd');
	     * // => ['d', 'c', 'b', 'a']
	     */
	    function flip(func) {
	      return createWrapper(func, FLIP_FLAG);
	    }

	    /**
	     * Creates a function that memoizes the result of `func`. If `resolver` is
	     * provided it determines the cache key for storing the result based on the
	     * arguments provided to the memoized function. By default, the first argument
	     * provided to the memoized function is used as the map cache key. The `func`
	     * is invoked with the `this` binding of the memoized function.
	     *
	     * **Note:** The cache is exposed as the `cache` property on the memoized
	     * function. Its creation may be customized by replacing the `_.memoize.Cache`
	     * constructor with one whose instances implement the
	     * [`Map`](http://ecma-international.org/ecma-262/6.0/#sec-properties-of-the-map-prototype-object)
	     * method interface of `delete`, `get`, `has`, and `set`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to have its output memoized.
	     * @param {Function} [resolver] The function to resolve the cache key.
	     * @returns {Function} Returns the new memoizing function.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2 };
	     * var other = { 'c': 3, 'd': 4 };
	     *
	     * var values = _.memoize(_.values);
	     * values(object);
	     * // => [1, 2]
	     *
	     * values(other);
	     * // => [3, 4]
	     *
	     * object.a = 2;
	     * values(object);
	     * // => [1, 2]
	     *
	     * // Modify the result cache.
	     * values.cache.set(object, ['a', 'b']);
	     * values(object);
	     * // => ['a', 'b']
	     *
	     * // Replace `_.memoize.Cache`.
	     * _.memoize.Cache = WeakMap;
	     */
	    function memoize(func, resolver) {
	      if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      var memoized = function() {
	        var args = arguments,
	            key = resolver ? resolver.apply(this, args) : args[0],
	            cache = memoized.cache;

	        if (cache.has(key)) {
	          return cache.get(key);
	        }
	        var result = func.apply(this, args);
	        memoized.cache = cache.set(key, result);
	        return result;
	      };
	      memoized.cache = new (memoize.Cache || MapCache);
	      return memoized;
	    }

	    // Assign cache to `_.memoize`.
	    memoize.Cache = MapCache;

	    /**
	     * Creates a function that negates the result of the predicate `func`. The
	     * `func` predicate is invoked with the `this` binding and arguments of the
	     * created function.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {Function} predicate The predicate to negate.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function isEven(n) {
	     *   return n % 2 == 0;
	     * }
	     *
	     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
	     * // => [1, 3, 5]
	     */
	    function negate(predicate) {
	      if (typeof predicate != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      return function() {
	        return !predicate.apply(this, arguments);
	      };
	    }

	    /**
	     * Creates a function that is restricted to invoking `func` once. Repeat calls
	     * to the function return the value of the first invocation. The `func` is
	     * invoked with the `this` binding and arguments of the created function.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * var initialize = _.once(createApplication);
	     * initialize();
	     * initialize();
	     * // `initialize` invokes `createApplication` once
	     */
	    function once(func) {
	      return before(2, func);
	    }

	    /**
	     * Creates a function that invokes `func` with arguments transformed by
	     * corresponding `transforms`.
	     *
	     * @static
	     * @since 4.0.0
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to wrap.
	     * @param {...(Function|Function[])} [transforms] The functions to transform
	     * arguments, specified individually or in arrays.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function doubled(n) {
	     *   return n * 2;
	     * }
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var func = _.overArgs(function(x, y) {
	     *   return [x, y];
	     * }, square, doubled);
	     *
	     * func(9, 3);
	     * // => [81, 6]
	     *
	     * func(10, 5);
	     * // => [100, 10]
	     */
	    var overArgs = rest(function(func, transforms) {
	      transforms = arrayMap(baseFlatten(transforms, 1), getIteratee());

	      var funcsLength = transforms.length;
	      return rest(function(args) {
	        var index = -1,
	            length = nativeMin(args.length, funcsLength);

	        while (++index < length) {
	          args[index] = transforms[index].call(this, args[index]);
	        }
	        return apply(func, this, args);
	      });
	    });

	    /**
	     * Creates a function that invokes `func` with `partial` arguments prepended
	     * to those provided to the new function. This method is like `_.bind` except
	     * it does **not** alter the `this` binding.
	     *
	     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** This method doesn't set the "length" property of partially
	     * applied functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.2.0
	     * @category Function
	     * @param {Function} func The function to partially apply arguments to.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new partially applied function.
	     * @example
	     *
	     * var greet = function(greeting, name) {
	     *   return greeting + ' ' + name;
	     * };
	     *
	     * var sayHelloTo = _.partial(greet, 'hello');
	     * sayHelloTo('fred');
	     * // => 'hello fred'
	     *
	     * // Partially applied with placeholders.
	     * var greetFred = _.partial(greet, _, 'fred');
	     * greetFred('hi');
	     * // => 'hi fred'
	     */
	    var partial = rest(function(func, partials) {
	      var holders = replaceHolders(partials, getPlaceholder(partial));
	      return createWrapper(func, PARTIAL_FLAG, undefined, partials, holders);
	    });

	    /**
	     * This method is like `_.partial` except that partially applied arguments
	     * are appended to those provided to the new function.
	     *
	     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** This method doesn't set the "length" property of partially
	     * applied functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.0.0
	     * @category Function
	     * @param {Function} func The function to partially apply arguments to.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new partially applied function.
	     * @example
	     *
	     * var greet = function(greeting, name) {
	     *   return greeting + ' ' + name;
	     * };
	     *
	     * var greetFred = _.partialRight(greet, 'fred');
	     * greetFred('hi');
	     * // => 'hi fred'
	     *
	     * // Partially applied with placeholders.
	     * var sayHelloTo = _.partialRight(greet, 'hello', _);
	     * sayHelloTo('fred');
	     * // => 'hello fred'
	     */
	    var partialRight = rest(function(func, partials) {
	      var holders = replaceHolders(partials, getPlaceholder(partialRight));
	      return createWrapper(func, PARTIAL_RIGHT_FLAG, undefined, partials, holders);
	    });

	    /**
	     * Creates a function that invokes `func` with arguments arranged according
	     * to the specified indexes where the argument value at the first index is
	     * provided as the first argument, the argument value at the second index is
	     * provided as the second argument, and so on.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {Function} func The function to rearrange arguments for.
	     * @param {...(number|number[])} indexes The arranged argument indexes,
	     *  specified individually or in arrays.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var rearged = _.rearg(function(a, b, c) {
	     *   return [a, b, c];
	     * }, 2, 0, 1);
	     *
	     * rearged('b', 'c', 'a')
	     * // => ['a', 'b', 'c']
	     */
	    var rearg = rest(function(func, indexes) {
	      return createWrapper(func, REARG_FLAG, undefined, undefined, undefined, baseFlatten(indexes, 1));
	    });

	    /**
	     * Creates a function that invokes `func` with the `this` binding of the
	     * created function and arguments from `start` and beyond provided as
	     * an array.
	     *
	     * **Note:** This method is based on the
	     * [rest parameter](https://mdn.io/rest_parameters).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Function
	     * @param {Function} func The function to apply a rest parameter to.
	     * @param {number} [start=func.length-1] The start position of the rest parameter.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var say = _.rest(function(what, names) {
	     *   return what + ' ' + _.initial(names).join(', ') +
	     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
	     * });
	     *
	     * say('hello', 'fred', 'barney', 'pebbles');
	     * // => 'hello fred, barney, & pebbles'
	     */
	    function rest(func, start) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      start = nativeMax(start === undefined ? (func.length - 1) : toInteger(start), 0);
	      return function() {
	        var args = arguments,
	            index = -1,
	            length = nativeMax(args.length - start, 0),
	            array = Array(length);

	        while (++index < length) {
	          array[index] = args[start + index];
	        }
	        switch (start) {
	          case 0: return func.call(this, array);
	          case 1: return func.call(this, args[0], array);
	          case 2: return func.call(this, args[0], args[1], array);
	        }
	        var otherArgs = Array(start + 1);
	        index = -1;
	        while (++index < start) {
	          otherArgs[index] = args[index];
	        }
	        otherArgs[start] = array;
	        return apply(func, this, otherArgs);
	      };
	    }

	    /**
	     * Creates a function that invokes `func` with the `this` binding of the
	     * create function and an array of arguments much like
	     * [`Function#apply`](https://es5.github.io/#x15.3.4.3).
	     *
	     * **Note:** This method is based on the
	     * [spread operator](https://mdn.io/spread_operator).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.2.0
	     * @category Function
	     * @param {Function} func The function to spread arguments over.
	     * @param {number} [start=0] The start position of the spread.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var say = _.spread(function(who, what) {
	     *   return who + ' says ' + what;
	     * });
	     *
	     * say(['fred', 'hello']);
	     * // => 'fred says hello'
	     *
	     * var numbers = Promise.all([
	     *   Promise.resolve(40),
	     *   Promise.resolve(36)
	     * ]);
	     *
	     * numbers.then(_.spread(function(x, y) {
	     *   return x + y;
	     * }));
	     * // => a Promise of 76
	     */
	    function spread(func, start) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      start = start === undefined ? 0 : nativeMax(toInteger(start), 0);
	      return rest(function(args) {
	        var array = args[start],
	            otherArgs = args.slice(0, start);

	        if (array) {
	          arrayPush(otherArgs, array);
	        }
	        return apply(func, this, otherArgs);
	      });
	    }

	    /**
	     * Creates a throttled function that only invokes `func` at most once per
	     * every `wait` milliseconds. The throttled function comes with a `cancel`
	     * method to cancel delayed `func` invocations and a `flush` method to
	     * immediately invoke them. Provide an options object to indicate whether
	     * `func` should be invoked on the leading and/or trailing edge of the `wait`
	     * timeout. The `func` is invoked with the last arguments provided to the
	     * throttled function. Subsequent calls to the throttled function return the
	     * result of the last `func` invocation.
	     *
	     * **Note:** If `leading` and `trailing` options are `true`, `func` is
	     * invoked on the trailing edge of the timeout only if the throttled function
	     * is invoked more than once during the `wait` timeout.
	     *
	     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
	     * for details over the differences between `_.throttle` and `_.debounce`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to throttle.
	     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
	     * @param {Object} [options={}] The options object.
	     * @param {boolean} [options.leading=true]
	     *  Specify invoking on the leading edge of the timeout.
	     * @param {boolean} [options.trailing=true]
	     *  Specify invoking on the trailing edge of the timeout.
	     * @returns {Function} Returns the new throttled function.
	     * @example
	     *
	     * // Avoid excessively updating the position while scrolling.
	     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
	     *
	     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
	     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
	     * jQuery(element).on('click', throttled);
	     *
	     * // Cancel the trailing throttled invocation.
	     * jQuery(window).on('popstate', throttled.cancel);
	     */
	    function throttle(func, wait, options) {
	      var leading = true,
	          trailing = true;

	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      if (isObject(options)) {
	        leading = 'leading' in options ? !!options.leading : leading;
	        trailing = 'trailing' in options ? !!options.trailing : trailing;
	      }
	      return debounce(func, wait, {
	        'leading': leading,
	        'maxWait': wait,
	        'trailing': trailing
	      });
	    }

	    /**
	     * Creates a function that accepts up to one argument, ignoring any
	     * additional arguments.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Function
	     * @param {Function} func The function to cap arguments for.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * _.map(['6', '8', '10'], _.unary(parseInt));
	     * // => [6, 8, 10]
	     */
	    function unary(func) {
	      return ary(func, 1);
	    }

	    /**
	     * Creates a function that provides `value` to the wrapper function as its
	     * first argument. Any additional arguments provided to the function are
	     * appended to those provided to the wrapper function. The wrapper is invoked
	     * with the `this` binding of the created function.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {*} value The value to wrap.
	     * @param {Function} [wrapper=identity] The wrapper function.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var p = _.wrap(_.escape, function(func, text) {
	     *   return '<p>' + func(text) + '</p>';
	     * });
	     *
	     * p('fred, barney, & pebbles');
	     * // => '<p>fred, barney, &amp; pebbles</p>'
	     */
	    function wrap(value, wrapper) {
	      wrapper = wrapper == null ? identity : wrapper;
	      return partial(wrapper, value);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Casts `value` as an array if it's not one.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.4.0
	     * @category Lang
	     * @param {*} value The value to inspect.
	     * @returns {Array} Returns the cast array.
	     * @example
	     *
	     * _.castArray(1);
	     * // => [1]
	     *
	     * _.castArray({ 'a': 1 });
	     * // => [{ 'a': 1 }]
	     *
	     * _.castArray('abc');
	     * // => ['abc']
	     *
	     * _.castArray(null);
	     * // => [null]
	     *
	     * _.castArray(undefined);
	     * // => [undefined]
	     *
	     * _.castArray();
	     * // => []
	     *
	     * var array = [1, 2, 3];
	     * console.log(_.castArray(array) === array);
	     * // => true
	     */
	    function castArray() {
	      if (!arguments.length) {
	        return [];
	      }
	      var value = arguments[0];
	      return isArray(value) ? value : [value];
	    }

	    /**
	     * Creates a shallow clone of `value`.
	     *
	     * **Note:** This method is loosely based on the
	     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
	     * and supports cloning arrays, array buffers, booleans, date objects, maps,
	     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
	     * arrays. The own enumerable properties of `arguments` objects are cloned
	     * as plain objects. An empty object is returned for uncloneable values such
	     * as error objects, functions, DOM nodes, and WeakMaps.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to clone.
	     * @returns {*} Returns the cloned value.
	     * @example
	     *
	     * var objects = [{ 'a': 1 }, { 'b': 2 }];
	     *
	     * var shallow = _.clone(objects);
	     * console.log(shallow[0] === objects[0]);
	     * // => true
	     */
	    function clone(value) {
	      return baseClone(value, false, true);
	    }

	    /**
	     * This method is like `_.clone` except that it accepts `customizer` which
	     * is invoked to produce the cloned value. If `customizer` returns `undefined`
	     * cloning is handled by the method instead. The `customizer` is invoked with
	     * up to four arguments; (value [, index|key, object, stack]).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to clone.
	     * @param {Function} [customizer] The function to customize cloning.
	     * @returns {*} Returns the cloned value.
	     * @example
	     *
	     * function customizer(value) {
	     *   if (_.isElement(value)) {
	     *     return value.cloneNode(false);
	     *   }
	     * }
	     *
	     * var el = _.cloneWith(document.body, customizer);
	     *
	     * console.log(el === document.body);
	     * // => false
	     * console.log(el.nodeName);
	     * // => 'BODY'
	     * console.log(el.childNodes.length);
	     * // => 0
	     */
	    function cloneWith(value, customizer) {
	      return baseClone(value, false, true, customizer);
	    }

	    /**
	     * This method is like `_.clone` except that it recursively clones `value`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.0.0
	     * @category Lang
	     * @param {*} value The value to recursively clone.
	     * @returns {*} Returns the deep cloned value.
	     * @example
	     *
	     * var objects = [{ 'a': 1 }, { 'b': 2 }];
	     *
	     * var deep = _.cloneDeep(objects);
	     * console.log(deep[0] === objects[0]);
	     * // => false
	     */
	    function cloneDeep(value) {
	      return baseClone(value, true, true);
	    }

	    /**
	     * This method is like `_.cloneWith` except that it recursively clones `value`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to recursively clone.
	     * @param {Function} [customizer] The function to customize cloning.
	     * @returns {*} Returns the deep cloned value.
	     * @example
	     *
	     * function customizer(value) {
	     *   if (_.isElement(value)) {
	     *     return value.cloneNode(true);
	     *   }
	     * }
	     *
	     * var el = _.cloneDeepWith(document.body, customizer);
	     *
	     * console.log(el === document.body);
	     * // => false
	     * console.log(el.nodeName);
	     * // => 'BODY'
	     * console.log(el.childNodes.length);
	     * // => 20
	     */
	    function cloneDeepWith(value, customizer) {
	      return baseClone(value, true, true, customizer);
	    }

	    /**
	     * Performs a
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * comparison between two values to determine if they are equivalent.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     * var other = { 'user': 'fred' };
	     *
	     * _.eq(object, object);
	     * // => true
	     *
	     * _.eq(object, other);
	     * // => false
	     *
	     * _.eq('a', 'a');
	     * // => true
	     *
	     * _.eq('a', Object('a'));
	     * // => false
	     *
	     * _.eq(NaN, NaN);
	     * // => true
	     */
	    function eq(value, other) {
	      return value === other || (value !== value && other !== other);
	    }

	    /**
	     * Checks if `value` is greater than `other`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.9.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is greater than `other`,
	     *  else `false`.
	     * @example
	     *
	     * _.gt(3, 1);
	     * // => true
	     *
	     * _.gt(3, 3);
	     * // => false
	     *
	     * _.gt(1, 3);
	     * // => false
	     */
	    function gt(value, other) {
	      return value > other;
	    }

	    /**
	     * Checks if `value` is greater than or equal to `other`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.9.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is greater than or equal to
	     *  `other`, else `false`.
	     * @example
	     *
	     * _.gte(3, 1);
	     * // => true
	     *
	     * _.gte(3, 3);
	     * // => true
	     *
	     * _.gte(1, 3);
	     * // => false
	     */
	    function gte(value, other) {
	      return value >= other;
	    }

	    /**
	     * Checks if `value` is likely an `arguments` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified,
	     *  else `false`.
	     * @example
	     *
	     * _.isArguments(function() { return arguments; }());
	     * // => true
	     *
	     * _.isArguments([1, 2, 3]);
	     * // => false
	     */
	    function isArguments(value) {
	      // Safari 8.1 incorrectly makes `arguments.callee` enumerable in strict mode.
	      return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
	        (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
	    }

	    /**
	     * Checks if `value` is classified as an `Array` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @type {Function}
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified,
	     *  else `false`.
	     * @example
	     *
	     * _.isArray([1, 2, 3]);
	     * // => true
	     *
	     * _.isArray(document.body.children);
	     * // => false
	     *
	     * _.isArray('abc');
	     * // => false
	     *
	     * _.isArray(_.noop);
	     * // => false
	     */
	    var isArray = Array.isArray;

	    /**
	     * Checks if `value` is classified as an `ArrayBuffer` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified,
	     *  else `false`.
	     * @example
	     *
	     * _.isArrayBuffer(new ArrayBuffer(2));
	     * // => true
	     *
	     * _.isArrayBuffer(new Array(2));
	     * // => false
	     */
	    function isArrayBuffer(value) {
	      return isObjectLike(value) && objectToString.call(value) == arrayBufferTag;
	    }

	    /**
	     * Checks if `value` is array-like. A value is considered array-like if it's
	     * not a function and has a `value.length` that's an integer greater than or
	     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	     * @example
	     *
	     * _.isArrayLike([1, 2, 3]);
	     * // => true
	     *
	     * _.isArrayLike(document.body.children);
	     * // => true
	     *
	     * _.isArrayLike('abc');
	     * // => true
	     *
	     * _.isArrayLike(_.noop);
	     * // => false
	     */
	    function isArrayLike(value) {
	      return value != null && isLength(getLength(value)) && !isFunction(value);
	    }

	    /**
	     * This method is like `_.isArrayLike` except that it also checks if `value`
	     * is an object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an array-like object,
	     *  else `false`.
	     * @example
	     *
	     * _.isArrayLikeObject([1, 2, 3]);
	     * // => true
	     *
	     * _.isArrayLikeObject(document.body.children);
	     * // => true
	     *
	     * _.isArrayLikeObject('abc');
	     * // => false
	     *
	     * _.isArrayLikeObject(_.noop);
	     * // => false
	     */
	    function isArrayLikeObject(value) {
	      return isObjectLike(value) && isArrayLike(value);
	    }

	    /**
	     * Checks if `value` is classified as a boolean primitive or object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified,
	     *  else `false`.
	     * @example
	     *
	     * _.isBoolean(false);
	     * // => true
	     *
	     * _.isBoolean(null);
	     * // => false
	     */
	    function isBoolean(value) {
	      return value === true || value === false ||
	        (isObjectLike(value) && objectToString.call(value) == boolTag);
	    }

	    /**
	     * Checks if `value` is a buffer.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
	     * @example
	     *
	     * _.isBuffer(new Buffer(2));
	     * // => true
	     *
	     * _.isBuffer(new Uint8Array(2));
	     * // => false
	     */
	    var isBuffer = !Buffer ? constant(false) : function(value) {
	      return value instanceof Buffer;
	    };

	    /**
	     * Checks if `value` is classified as a `Date` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified,
	     *  else `false`.
	     * @example
	     *
	     * _.isDate(new Date);
	     * // => true
	     *
	     * _.isDate('Mon April 23 2012');
	     * // => false
	     */
	    function isDate(value) {
	      return isObjectLike(value) && objectToString.call(value) == dateTag;
	    }

	    /**
	     * Checks if `value` is likely a DOM element.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a DOM element,
	     *  else `false`.
	     * @example
	     *
	     * _.isElement(document.body);
	     * // => true
	     *
	     * _.isElement('<body>');
	     * // => false
	     */
	    function isElement(value) {
	      return !!value && value.nodeType === 1 && isObjectLike(value) && !isPlainObject(value);
	    }

	    /**
	     * Checks if `value` is an empty object, collection, map, or set.
	     *
	     * Objects are considered empty if they have no own enumerable string keyed
	     * properties.
	     *
	     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
	     * jQuery-like collections are considered empty if they have a `length` of `0`.
	     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
	     * @example
	     *
	     * _.isEmpty(null);
	     * // => true
	     *
	     * _.isEmpty(true);
	     * // => true
	     *
	     * _.isEmpty(1);
	     * // => true
	     *
	     * _.isEmpty([1, 2, 3]);
	     * // => false
	     *
	     * _.isEmpty({ 'a': 1 });
	     * // => false
	     */
	    function isEmpty(value) {
	      if (isArrayLike(value) &&
	          (isArray(value) || isString(value) || isFunction(value.splice) ||
	            isArguments(value) || isBuffer(value))) {
	        return !value.length;
	      }
	      if (isObjectLike(value)) {
	        var tag = getTag(value);
	        if (tag == mapTag || tag == setTag) {
	          return !value.size;
	        }
	      }
	      for (var key in value) {
	        if (hasOwnProperty.call(value, key)) {
	          return false;
	        }
	      }
	      return !(nonEnumShadows && keys(value).length);
	    }

	    /**
	     * Performs a deep comparison between two values to determine if they are
	     * equivalent.
	     *
	     * **Note:** This method supports comparing arrays, array buffers, booleans,
	     * date objects, error objects, maps, numbers, `Object` objects, regexes,
	     * sets, strings, symbols, and typed arrays. `Object` objects are compared
	     * by their own, not inherited, enumerable properties. Functions and DOM
	     * nodes are **not** supported.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if the values are equivalent,
	     *  else `false`.
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     * var other = { 'user': 'fred' };
	     *
	     * _.isEqual(object, other);
	     * // => true
	     *
	     * object === other;
	     * // => false
	     */
	    function isEqual(value, other) {
	      return baseIsEqual(value, other);
	    }

	    /**
	     * This method is like `_.isEqual` except that it accepts `customizer` which
	     * is invoked to compare values. If `customizer` returns `undefined` comparisons
	     * are handled by the method instead. The `customizer` is invoked with up to
	     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @returns {boolean} Returns `true` if the values are equivalent,
	     *  else `false`.
	     * @example
	     *
	     * function isGreeting(value) {
	     *   return /^h(?:i|ello)$/.test(value);
	     * }
	     *
	     * function customizer(objValue, othValue) {
	     *   if (isGreeting(objValue) && isGreeting(othValue)) {
	     *     return true;
	     *   }
	     * }
	     *
	     * var array = ['hello', 'goodbye'];
	     * var other = ['hi', 'goodbye'];
	     *
	     * _.isEqualWith(array, other, customizer);
	     * // => true
	     */
	    function isEqualWith(value, other, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined;
	      var result = customizer ? customizer(value, other) : undefined;
	      return result === undefined ? baseIsEqual(value, other, customizer) : !!result;
	    }

	    /**
	     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
	     * `SyntaxError`, `TypeError`, or `URIError` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an error object,
	     *  else `false`.
	     * @example
	     *
	     * _.isError(new Error);
	     * // => true
	     *
	     * _.isError(Error);
	     * // => false
	     */
	    function isError(value) {
	      if (!isObjectLike(value)) {
	        return false;
	      }
	      return (objectToString.call(value) == errorTag) ||
	        (typeof value.message == 'string' && typeof value.name == 'string');
	    }

	    /**
	     * Checks if `value` is a finite primitive number.
	     *
	     * **Note:** This method is based on
	     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a finite number,
	     *  else `false`.
	     * @example
	     *
	     * _.isFinite(3);
	     * // => true
	     *
	     * _.isFinite(Number.MAX_VALUE);
	     * // => true
	     *
	     * _.isFinite(3.14);
	     * // => true
	     *
	     * _.isFinite(Infinity);
	     * // => false
	     */
	    function isFinite(value) {
	      return typeof value == 'number' && nativeIsFinite(value);
	    }

	    /**
	     * Checks if `value` is classified as a `Function` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified,
	     *  else `false`.
	     * @example
	     *
	     * _.isFunction(_);
	     * // => true
	     *
	     * _.isFunction(/abc/);
	     * // => false
	     */
	    function isFunction(value) {
	      // The use of `Object#toString` avoids issues with the `typeof` operator
	      // in Safari 8 which returns 'object' for typed array and weak map constructors,
	      // and PhantomJS 1.9 which returns 'function' for `NodeList` instances.
	      var tag = isObject(value) ? objectToString.call(value) : '';
	      return tag == funcTag || tag == genTag;
	    }

	    /**
	     * Checks if `value` is an integer.
	     *
	     * **Note:** This method is based on
	     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
	     * @example
	     *
	     * _.isInteger(3);
	     * // => true
	     *
	     * _.isInteger(Number.MIN_VALUE);
	     * // => false
	     *
	     * _.isInteger(Infinity);
	     * // => false
	     *
	     * _.isInteger('3');
	     * // => false
	     */
	    function isInteger(value) {
	      return typeof value == 'number' && value == toInteger(value);
	    }

	    /**
	     * Checks if `value` is a valid array-like length.
	     *
	     * **Note:** This function is loosely based on
	     * [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a valid length,
	     *  else `false`.
	     * @example
	     *
	     * _.isLength(3);
	     * // => true
	     *
	     * _.isLength(Number.MIN_VALUE);
	     * // => false
	     *
	     * _.isLength(Infinity);
	     * // => false
	     *
	     * _.isLength('3');
	     * // => false
	     */
	    function isLength(value) {
	      return typeof value == 'number' &&
	        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	    }

	    /**
	     * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
	     * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	     * @example
	     *
	     * _.isObject({});
	     * // => true
	     *
	     * _.isObject([1, 2, 3]);
	     * // => true
	     *
	     * _.isObject(_.noop);
	     * // => true
	     *
	     * _.isObject(null);
	     * // => false
	     */
	    function isObject(value) {
	      var type = typeof value;
	      return !!value && (type == 'object' || type == 'function');
	    }

	    /**
	     * Checks if `value` is object-like. A value is object-like if it's not `null`
	     * and has a `typeof` result of "object".
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	     * @example
	     *
	     * _.isObjectLike({});
	     * // => true
	     *
	     * _.isObjectLike([1, 2, 3]);
	     * // => true
	     *
	     * _.isObjectLike(_.noop);
	     * // => false
	     *
	     * _.isObjectLike(null);
	     * // => false
	     */
	    function isObjectLike(value) {
	      return !!value && typeof value == 'object';
	    }

	    /**
	     * Checks if `value` is classified as a `Map` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified,
	     *  else `false`.
	     * @example
	     *
	     * _.isMap(new Map);
	     * // => true
	     *
	     * _.isMap(new WeakMap);
	     * // => false
	     */
	    function isMap(value) {
	      return isObjectLike(value) && getTag(value) == mapTag;
	    }

	    /**
	     * Performs a partial deep comparison between `object` and `source` to
	     * determine if `object` contains equivalent property values. This method is
	     * equivalent to a `_.matches` function when `source` is partially applied.
	     *
	     * **Note:** This method supports comparing the same values as `_.isEqual`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property values to match.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     * @example
	     *
	     * var object = { 'user': 'fred', 'age': 40 };
	     *
	     * _.isMatch(object, { 'age': 40 });
	     * // => true
	     *
	     * _.isMatch(object, { 'age': 36 });
	     * // => false
	     */
	    function isMatch(object, source) {
	      return object === source || baseIsMatch(object, source, getMatchData(source));
	    }

	    /**
	     * This method is like `_.isMatch` except that it accepts `customizer` which
	     * is invoked to compare values. If `customizer` returns `undefined` comparisons
	     * are handled by the method instead. The `customizer` is invoked with five
	     * arguments: (objValue, srcValue, index|key, object, source).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property values to match.
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     * @example
	     *
	     * function isGreeting(value) {
	     *   return /^h(?:i|ello)$/.test(value);
	     * }
	     *
	     * function customizer(objValue, srcValue) {
	     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
	     *     return true;
	     *   }
	     * }
	     *
	     * var object = { 'greeting': 'hello' };
	     * var source = { 'greeting': 'hi' };
	     *
	     * _.isMatchWith(object, source, customizer);
	     * // => true
	     */
	    function isMatchWith(object, source, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined;
	      return baseIsMatch(object, source, getMatchData(source), customizer);
	    }

	    /**
	     * Checks if `value` is `NaN`.
	     *
	     * **Note:** This method is not the same as
	     * [`isNaN`](https://es5.github.io/#x15.1.2.4) which returns `true` for
	     * `undefined` and other non-numeric values.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
	     * @example
	     *
	     * _.isNaN(NaN);
	     * // => true
	     *
	     * _.isNaN(new Number(NaN));
	     * // => true
	     *
	     * isNaN(undefined);
	     * // => true
	     *
	     * _.isNaN(undefined);
	     * // => false
	     */
	    function isNaN(value) {
	      // An `NaN` primitive is the only value that is not equal to itself.
	      // Perform the `toStringTag` check first to avoid errors with some
	      // ActiveX objects in IE.
	      return isNumber(value) && value != +value;
	    }

	    /**
	     * Checks if `value` is a native function.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a native function,
	     *  else `false`.
	     * @example
	     *
	     * _.isNative(Array.prototype.push);
	     * // => true
	     *
	     * _.isNative(_);
	     * // => false
	     */
	    function isNative(value) {
	      if (value == null) {
	        return false;
	      }
	      if (isFunction(value)) {
	        return reIsNative.test(funcToString.call(value));
	      }
	      return isObjectLike(value) &&
	        (isHostObject(value) ? reIsNative : reIsHostCtor).test(value);
	    }

	    /**
	     * Checks if `value` is `null`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
	     * @example
	     *
	     * _.isNull(null);
	     * // => true
	     *
	     * _.isNull(void 0);
	     * // => false
	     */
	    function isNull(value) {
	      return value === null;
	    }

	    /**
	     * Checks if `value` is `null` or `undefined`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
	     * @example
	     *
	     * _.isNil(null);
	     * // => true
	     *
	     * _.isNil(void 0);
	     * // => true
	     *
	     * _.isNil(NaN);
	     * // => false
	     */
	    function isNil(value) {
	      return value == null;
	    }

	    /**
	     * Checks if `value` is classified as a `Number` primitive or object.
	     *
	     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
	     * classified as numbers, use the `_.isFinite` method.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified,
	     *  else `false`.
	     * @example
	     *
	     * _.isNumber(3);
	     * // => true
	     *
	     * _.isNumber(Number.MIN_VALUE);
	     * // => true
	     *
	     * _.isNumber(Infinity);
	     * // => true
	     *
	     * _.isNumber('3');
	     * // => false
	     */
	    function isNumber(value) {
	      return typeof value == 'number' ||
	        (isObjectLike(value) && objectToString.call(value) == numberTag);
	    }

	    /**
	     * Checks if `value` is a plain object, that is, an object created by the
	     * `Object` constructor or one with a `[[Prototype]]` of `null`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.8.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a plain object,
	     *  else `false`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     * }
	     *
	     * _.isPlainObject(new Foo);
	     * // => false
	     *
	     * _.isPlainObject([1, 2, 3]);
	     * // => false
	     *
	     * _.isPlainObject({ 'x': 0, 'y': 0 });
	     * // => true
	     *
	     * _.isPlainObject(Object.create(null));
	     * // => true
	     */
	    function isPlainObject(value) {
	      if (!isObjectLike(value) ||
	          objectToString.call(value) != objectTag || isHostObject(value)) {
	        return false;
	      }
	      var proto = getPrototype(value);
	      if (proto === null) {
	        return true;
	      }
	      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
	      return (typeof Ctor == 'function' &&
	        Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString);
	    }

	    /**
	     * Checks if `value` is classified as a `RegExp` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified,
	     *  else `false`.
	     * @example
	     *
	     * _.isRegExp(/abc/);
	     * // => true
	     *
	     * _.isRegExp('/abc/');
	     * // => false
	     */
	    function isRegExp(value) {
	      return isObject(value) && objectToString.call(value) == regexpTag;
	    }

	    /**
	     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
	     * double precision number which isn't the result of a rounded unsafe integer.
	     *
	     * **Note:** This method is based on
	     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a safe integer,
	     *  else `false`.
	     * @example
	     *
	     * _.isSafeInteger(3);
	     * // => true
	     *
	     * _.isSafeInteger(Number.MIN_VALUE);
	     * // => false
	     *
	     * _.isSafeInteger(Infinity);
	     * // => false
	     *
	     * _.isSafeInteger('3');
	     * // => false
	     */
	    function isSafeInteger(value) {
	      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
	    }

	    /**
	     * Checks if `value` is classified as a `Set` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified,
	     *  else `false`.
	     * @example
	     *
	     * _.isSet(new Set);
	     * // => true
	     *
	     * _.isSet(new WeakSet);
	     * // => false
	     */
	    function isSet(value) {
	      return isObjectLike(value) && getTag(value) == setTag;
	    }

	    /**
	     * Checks if `value` is classified as a `String` primitive or object.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified,
	     *  else `false`.
	     * @example
	     *
	     * _.isString('abc');
	     * // => true
	     *
	     * _.isString(1);
	     * // => false
	     */
	    function isString(value) {
	      return typeof value == 'string' ||
	        (!isArray(value) && isObjectLike(value) && objectToString.call(value) == stringTag);
	    }

	    /**
	     * Checks if `value` is classified as a `Symbol` primitive or object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified,
	     *  else `false`.
	     * @example
	     *
	     * _.isSymbol(Symbol.iterator);
	     * // => true
	     *
	     * _.isSymbol('abc');
	     * // => false
	     */
	    function isSymbol(value) {
	      return typeof value == 'symbol' ||
	        (isObjectLike(value) && objectToString.call(value) == symbolTag);
	    }

	    /**
	     * Checks if `value` is classified as a typed array.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified,
	     *  else `false`.
	     * @example
	     *
	     * _.isTypedArray(new Uint8Array);
	     * // => true
	     *
	     * _.isTypedArray([]);
	     * // => false
	     */
	    function isTypedArray(value) {
	      return isObjectLike(value) &&
	        isLength(value.length) && !!typedArrayTags[objectToString.call(value)];
	    }

	    /**
	     * Checks if `value` is `undefined`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
	     * @example
	     *
	     * _.isUndefined(void 0);
	     * // => true
	     *
	     * _.isUndefined(null);
	     * // => false
	     */
	    function isUndefined(value) {
	      return value === undefined;
	    }

	    /**
	     * Checks if `value` is classified as a `WeakMap` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified,
	     *  else `false`.
	     * @example
	     *
	     * _.isWeakMap(new WeakMap);
	     * // => true
	     *
	     * _.isWeakMap(new Map);
	     * // => false
	     */
	    function isWeakMap(value) {
	      return isObjectLike(value) && getTag(value) == weakMapTag;
	    }

	    /**
	     * Checks if `value` is classified as a `WeakSet` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified,
	     *  else `false`.
	     * @example
	     *
	     * _.isWeakSet(new WeakSet);
	     * // => true
	     *
	     * _.isWeakSet(new Set);
	     * // => false
	     */
	    function isWeakSet(value) {
	      return isObjectLike(value) && objectToString.call(value) == weakSetTag;
	    }

	    /**
	     * Checks if `value` is less than `other`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.9.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is less than `other`,
	     *  else `false`.
	     * @example
	     *
	     * _.lt(1, 3);
	     * // => true
	     *
	     * _.lt(3, 3);
	     * // => false
	     *
	     * _.lt(3, 1);
	     * // => false
	     */
	    function lt(value, other) {
	      return value < other;
	    }

	    /**
	     * Checks if `value` is less than or equal to `other`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.9.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is less than or equal to
	     *  `other`, else `false`.
	     * @example
	     *
	     * _.lte(1, 3);
	     * // => true
	     *
	     * _.lte(3, 3);
	     * // => true
	     *
	     * _.lte(3, 1);
	     * // => false
	     */
	    function lte(value, other) {
	      return value <= other;
	    }

	    /**
	     * Converts `value` to an array.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {Array} Returns the converted array.
	     * @example
	     *
	     * _.toArray({ 'a': 1, 'b': 2 });
	     * // => [1, 2]
	     *
	     * _.toArray('abc');
	     * // => ['a', 'b', 'c']
	     *
	     * _.toArray(1);
	     * // => []
	     *
	     * _.toArray(null);
	     * // => []
	     */
	    function toArray(value) {
	      if (!value) {
	        return [];
	      }
	      if (isArrayLike(value)) {
	        return isString(value) ? stringToArray(value) : copyArray(value);
	      }
	      if (iteratorSymbol && value[iteratorSymbol]) {
	        return iteratorToArray(value[iteratorSymbol]());
	      }
	      var tag = getTag(value),
	          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

	      return func(value);
	    }

	    /**
	     * Converts `value` to an integer.
	     *
	     * **Note:** This function is loosely based on
	     * [`ToInteger`](http://www.ecma-international.org/ecma-262/6.0/#sec-tointeger).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.toInteger(3);
	     * // => 3
	     *
	     * _.toInteger(Number.MIN_VALUE);
	     * // => 0
	     *
	     * _.toInteger(Infinity);
	     * // => 1.7976931348623157e+308
	     *
	     * _.toInteger('3');
	     * // => 3
	     */
	    function toInteger(value) {
	      if (!value) {
	        return value === 0 ? value : 0;
	      }
	      value = toNumber(value);
	      if (value === INFINITY || value === -INFINITY) {
	        var sign = (value < 0 ? -1 : 1);
	        return sign * MAX_INTEGER;
	      }
	      var remainder = value % 1;
	      return value === value ? (remainder ? value - remainder : value) : 0;
	    }

	    /**
	     * Converts `value` to an integer suitable for use as the length of an
	     * array-like object.
	     *
	     * **Note:** This method is based on
	     * [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.toLength(3);
	     * // => 3
	     *
	     * _.toLength(Number.MIN_VALUE);
	     * // => 0
	     *
	     * _.toLength(Infinity);
	     * // => 4294967295
	     *
	     * _.toLength('3');
	     * // => 3
	     */
	    function toLength(value) {
	      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
	    }

	    /**
	     * Converts `value` to a number.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to process.
	     * @returns {number} Returns the number.
	     * @example
	     *
	     * _.toNumber(3);
	     * // => 3
	     *
	     * _.toNumber(Number.MIN_VALUE);
	     * // => 5e-324
	     *
	     * _.toNumber(Infinity);
	     * // => Infinity
	     *
	     * _.toNumber('3');
	     * // => 3
	     */
	    function toNumber(value) {
	      if (typeof value == 'number') {
	        return value;
	      }
	      if (isSymbol(value)) {
	        return NAN;
	      }
	      if (isObject(value)) {
	        var other = isFunction(value.valueOf) ? value.valueOf() : value;
	        value = isObject(other) ? (other + '') : other;
	      }
	      if (typeof value != 'string') {
	        return value === 0 ?  value : +value;
	      }
	      value = value.replace(reTrim, '');
	      var isBinary = reIsBinary.test(value);
	      return (isBinary || reIsOctal.test(value))
	        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
	        : (reIsBadHex.test(value) ? NAN : +value);
	    }

	    /**
	     * Converts `value` to a plain object flattening inherited enumerable string
	     * keyed properties of `value` to own properties of the plain object.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {Object} Returns the converted plain object.
	     * @example
	     *
	     * function Foo() {
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.assign({ 'a': 1 }, new Foo);
	     * // => { 'a': 1, 'b': 2 }
	     *
	     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
	     * // => { 'a': 1, 'b': 2, 'c': 3 }
	     */
	    function toPlainObject(value) {
	      return copyObject(value, keysIn(value));
	    }

	    /**
	     * Converts `value` to a safe integer. A safe integer can be compared and
	     * represented correctly.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.toSafeInteger(3);
	     * // => 3
	     *
	     * _.toSafeInteger(Number.MIN_VALUE);
	     * // => 0
	     *
	     * _.toSafeInteger(Infinity);
	     * // => 9007199254740991
	     *
	     * _.toSafeInteger('3');
	     * // => 3
	     */
	    function toSafeInteger(value) {
	      return baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);
	    }

	    /**
	     * Converts `value` to a string if it's not one. An empty string is returned
	     * for `null` and `undefined` values. The sign of `-0` is preserved.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to process.
	     * @returns {string} Returns the string.
	     * @example
	     *
	     * _.toString(null);
	     * // => ''
	     *
	     * _.toString(-0);
	     * // => '-0'
	     *
	     * _.toString([1, 2, 3]);
	     * // => '1,2,3'
	     */
	    function toString(value) {
	      // Exit early for strings to avoid a performance hit in some environments.
	      if (typeof value == 'string') {
	        return value;
	      }
	      if (value == null) {
	        return '';
	      }
	      if (isSymbol(value)) {
	        return symbolToString ? symbolToString.call(value) : '';
	      }
	      var result = (value + '');
	      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Assigns own enumerable string keyed properties of source objects to the
	     * destination object. Source objects are applied from left to right.
	     * Subsequent sources overwrite property assignments of previous sources.
	     *
	     * **Note:** This method mutates `object` and is loosely based on
	     * [`Object.assign`](https://mdn.io/Object/assign).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.10.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function Foo() {
	     *   this.c = 3;
	     * }
	     *
	     * function Bar() {
	     *   this.e = 5;
	     * }
	     *
	     * Foo.prototype.d = 4;
	     * Bar.prototype.f = 6;
	     *
	     * _.assign({ 'a': 1 }, new Foo, new Bar);
	     * // => { 'a': 1, 'c': 3, 'e': 5 }
	     */
	    var assign = createAssigner(function(object, source) {
	      if (nonEnumShadows || isPrototype(source) || isArrayLike(source)) {
	        copyObject(source, keys(source), object);
	        return;
	      }
	      for (var key in source) {
	        if (hasOwnProperty.call(source, key)) {
	          assignValue(object, key, source[key]);
	        }
	      }
	    });

	    /**
	     * This method is like `_.assign` except that it iterates over own and
	     * inherited source properties.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @alias extend
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function Foo() {
	     *   this.b = 2;
	     * }
	     *
	     * function Bar() {
	     *   this.d = 4;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     * Bar.prototype.e = 5;
	     *
	     * _.assignIn({ 'a': 1 }, new Foo, new Bar);
	     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5 }
	     */
	    var assignIn = createAssigner(function(object, source) {
	      if (nonEnumShadows || isPrototype(source) || isArrayLike(source)) {
	        copyObject(source, keysIn(source), object);
	        return;
	      }
	      for (var key in source) {
	        assignValue(object, key, source[key]);
	      }
	    });

	    /**
	     * This method is like `_.assignIn` except that it accepts `customizer`
	     * which is invoked to produce the assigned values. If `customizer` returns
	     * `undefined` assignment is handled by the method instead. The `customizer`
	     * is invoked with five arguments: (objValue, srcValue, key, object, source).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @alias extendWith
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} sources The source objects.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function customizer(objValue, srcValue) {
	     *   return _.isUndefined(objValue) ? srcValue : objValue;
	     * }
	     *
	     * var defaults = _.partialRight(_.assignInWith, customizer);
	     *
	     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
	     * // => { 'a': 1, 'b': 2 }
	     */
	    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
	      copyObjectWith(source, keysIn(source), object, customizer);
	    });

	    /**
	     * This method is like `_.assign` except that it accepts `customizer`
	     * which is invoked to produce the assigned values. If `customizer` returns
	     * `undefined` assignment is handled by the method instead. The `customizer`
	     * is invoked with five arguments: (objValue, srcValue, key, object, source).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} sources The source objects.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function customizer(objValue, srcValue) {
	     *   return _.isUndefined(objValue) ? srcValue : objValue;
	     * }
	     *
	     * var defaults = _.partialRight(_.assignWith, customizer);
	     *
	     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
	     * // => { 'a': 1, 'b': 2 }
	     */
	    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
	      copyObjectWith(source, keys(source), object, customizer);
	    });

	    /**
	     * Creates an array of values corresponding to `paths` of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.0.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {...(string|string[])} [paths] The property paths of elements to pick,
	     *  specified individually or in arrays.
	     * @returns {Array} Returns the new array of picked elements.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
	     *
	     * _.at(object, ['a[0].b.c', 'a[1]']);
	     * // => [3, 4]
	     *
	     * _.at(['a', 'b', 'c'], 0, 2);
	     * // => ['a', 'c']
	     */
	    var at = rest(function(object, paths) {
	      return baseAt(object, baseFlatten(paths, 1));
	    });

	    /**
	     * Creates an object that inherits from the `prototype` object. If a
	     * `properties` object is given its own enumerable string keyed properties
	     * are assigned to the created object.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.3.0
	     * @category Object
	     * @param {Object} prototype The object to inherit from.
	     * @param {Object} [properties] The properties to assign to the object.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * function Shape() {
	     *   this.x = 0;
	     *   this.y = 0;
	     * }
	     *
	     * function Circle() {
	     *   Shape.call(this);
	     * }
	     *
	     * Circle.prototype = _.create(Shape.prototype, {
	     *   'constructor': Circle
	     * });
	     *
	     * var circle = new Circle;
	     * circle instanceof Circle;
	     * // => true
	     *
	     * circle instanceof Shape;
	     * // => true
	     */
	    function create(prototype, properties) {
	      var result = baseCreate(prototype);
	      return properties ? baseAssign(result, properties) : result;
	    }

	    /**
	     * Assigns own and inherited enumerable string keyed properties of source
	     * objects to the destination object for all destination properties that
	     * resolve to `undefined`. Source objects are applied from left to right.
	     * Once a property is set, additional values of the same property are ignored.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * _.defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
	     * // => { 'user': 'barney', 'age': 36 }
	     */
	    var defaults = rest(function(args) {
	      args.push(undefined, assignInDefaults);
	      return apply(assignInWith, undefined, args);
	    });

	    /**
	     * This method is like `_.defaults` except that it recursively assigns
	     * default properties.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.10.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * _.defaultsDeep({ 'user': { 'name': 'barney' } }, { 'user': { 'name': 'fred', 'age': 36 } });
	     * // => { 'user': { 'name': 'barney', 'age': 36 } }
	     *
	     */
	    var defaultsDeep = rest(function(args) {
	      args.push(undefined, mergeDefaults);
	      return apply(mergeWith, undefined, args);
	    });

	    /**
	     * This method is like `_.find` except that it returns the key of the first
	     * element `predicate` returns truthy for instead of the element itself.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.1.0
	     * @category Object
	     * @param {Object} object The object to search.
	     * @param {Array|Function|Object|string} [predicate=_.identity]
	     *  The function invoked per iteration.
	     * @returns {string|undefined} Returns the key of the matched element,
	     *  else `undefined`.
	     * @example
	     *
	     * var users = {
	     *   'barney':  { 'age': 36, 'active': true },
	     *   'fred':    { 'age': 40, 'active': false },
	     *   'pebbles': { 'age': 1,  'active': true }
	     * };
	     *
	     * _.findKey(users, function(o) { return o.age < 40; });
	     * // => 'barney' (iteration order is not guaranteed)
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.findKey(users, { 'age': 1, 'active': true });
	     * // => 'pebbles'
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.findKey(users, ['active', false]);
	     * // => 'fred'
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.findKey(users, 'active');
	     * // => 'barney'
	     */
	    function findKey(object, predicate) {
	      return baseFind(object, getIteratee(predicate, 3), baseForOwn, true);
	    }

	    /**
	     * This method is like `_.findKey` except that it iterates over elements of
	     * a collection in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Object
	     * @param {Object} object The object to search.
	     * @param {Array|Function|Object|string} [predicate=_.identity]
	     *  The function invoked per iteration.
	     * @returns {string|undefined} Returns the key of the matched element,
	     *  else `undefined`.
	     * @example
	     *
	     * var users = {
	     *   'barney':  { 'age': 36, 'active': true },
	     *   'fred':    { 'age': 40, 'active': false },
	     *   'pebbles': { 'age': 1,  'active': true }
	     * };
	     *
	     * _.findLastKey(users, function(o) { return o.age < 40; });
	     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.findLastKey(users, { 'age': 36, 'active': true });
	     * // => 'barney'
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.findLastKey(users, ['active', false]);
	     * // => 'fred'
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.findLastKey(users, 'active');
	     * // => 'pebbles'
	     */
	    function findLastKey(object, predicate) {
	      return baseFind(object, getIteratee(predicate, 3), baseForOwnRight, true);
	    }

	    /**
	     * Iterates over own and inherited enumerable string keyed properties of an
	     * object invoking `iteratee` for each property. The iteratee is invoked with
	     * three arguments: (value, key, object). Iteratee functions may exit iteration
	     * early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.3.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forIn(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
	     */
	    function forIn(object, iteratee) {
	      return object == null
	        ? object
	        : baseFor(object, getIteratee(iteratee), keysIn);
	    }

	    /**
	     * This method is like `_.forIn` except that it iterates over properties of
	     * `object` in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forInRight(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
	     */
	    function forInRight(object, iteratee) {
	      return object == null
	        ? object
	        : baseForRight(object, getIteratee(iteratee), keysIn);
	    }

	    /**
	     * Iterates over own enumerable string keyed properties of an object invoking
	     * `iteratee` for each property. The iteratee is invoked with three arguments:
	     * (value, key, object). Iteratee functions may exit iteration early by
	     * explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.3.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forOwn(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
	     */
	    function forOwn(object, iteratee) {
	      return object && baseForOwn(object, getIteratee(iteratee));
	    }

	    /**
	     * This method is like `_.forOwn` except that it iterates over properties of
	     * `object` in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forOwnRight(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
	     */
	    function forOwnRight(object, iteratee) {
	      return object && baseForOwnRight(object, getIteratee(iteratee));
	    }

	    /**
	     * Creates an array of function property names from own enumerable properties
	     * of `object`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @returns {Array} Returns the new array of property names.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = _.constant('a');
	     *   this.b = _.constant('b');
	     * }
	     *
	     * Foo.prototype.c = _.constant('c');
	     *
	     * _.functions(new Foo);
	     * // => ['a', 'b']
	     */
	    function functions(object) {
	      return object == null ? [] : baseFunctions(object, keys(object));
	    }

	    /**
	     * Creates an array of function property names from own and inherited
	     * enumerable properties of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @returns {Array} Returns the new array of property names.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = _.constant('a');
	     *   this.b = _.constant('b');
	     * }
	     *
	     * Foo.prototype.c = _.constant('c');
	     *
	     * _.functionsIn(new Foo);
	     * // => ['a', 'b', 'c']
	     */
	    function functionsIn(object) {
	      return object == null ? [] : baseFunctions(object, keysIn(object));
	    }

	    /**
	     * Gets the value at `path` of `object`. If the resolved value is
	     * `undefined` the `defaultValue` is used in its place.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.7.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to get.
	     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
	     * @returns {*} Returns the resolved value.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.get(object, 'a[0].b.c');
	     * // => 3
	     *
	     * _.get(object, ['a', '0', 'b', 'c']);
	     * // => 3
	     *
	     * _.get(object, 'a.b.c', 'default');
	     * // => 'default'
	     */
	    function get(object, path, defaultValue) {
	      var result = object == null ? undefined : baseGet(object, path);
	      return result === undefined ? defaultValue : result;
	    }

	    /**
	     * Checks if `path` is a direct property of `object`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path to check.
	     * @returns {boolean} Returns `true` if `path` exists, else `false`.
	     * @example
	     *
	     * var object = { 'a': { 'b': { 'c': 3 } } };
	     * var other = _.create({ 'a': _.create({ 'b': _.create({ 'c': 3 }) }) });
	     *
	     * _.has(object, 'a');
	     * // => true
	     *
	     * _.has(object, 'a.b.c');
	     * // => true
	     *
	     * _.has(object, ['a', 'b', 'c']);
	     * // => true
	     *
	     * _.has(other, 'a');
	     * // => false
	     */
	    function has(object, path) {
	      return hasPath(object, path, baseHas);
	    }

	    /**
	     * Checks if `path` is a direct or inherited property of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path to check.
	     * @returns {boolean} Returns `true` if `path` exists, else `false`.
	     * @example
	     *
	     * var object = _.create({ 'a': _.create({ 'b': _.create({ 'c': 3 }) }) });
	     *
	     * _.hasIn(object, 'a');
	     * // => true
	     *
	     * _.hasIn(object, 'a.b.c');
	     * // => true
	     *
	     * _.hasIn(object, ['a', 'b', 'c']);
	     * // => true
	     *
	     * _.hasIn(object, 'b');
	     * // => false
	     */
	    function hasIn(object, path) {
	      return hasPath(object, path, baseHasIn);
	    }

	    /**
	     * Creates an object composed of the inverted keys and values of `object`.
	     * If `object` contains duplicate values, subsequent values overwrite
	     * property assignments of previous values.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.7.0
	     * @category Object
	     * @param {Object} object The object to invert.
	     * @returns {Object} Returns the new inverted object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2, 'c': 1 };
	     *
	     * _.invert(object);
	     * // => { '1': 'c', '2': 'b' }
	     */
	    var invert = createInverter(function(result, value, key) {
	      result[value] = key;
	    }, constant(identity));

	    /**
	     * This method is like `_.invert` except that the inverted object is generated
	     * from the results of running each element of `object` through `iteratee`.
	     * The corresponding inverted value of each inverted key is an array of keys
	     * responsible for generating the inverted value. The iteratee is invoked
	     * with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.1.0
	     * @category Object
	     * @param {Object} object The object to invert.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The iteratee invoked per element.
	     * @returns {Object} Returns the new inverted object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2, 'c': 1 };
	     *
	     * _.invertBy(object);
	     * // => { '1': ['a', 'c'], '2': ['b'] }
	     *
	     * _.invertBy(object, function(value) {
	     *   return 'group' + value;
	     * });
	     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
	     */
	    var invertBy = createInverter(function(result, value, key) {
	      if (hasOwnProperty.call(result, value)) {
	        result[value].push(key);
	      } else {
	        result[value] = [key];
	      }
	    }, getIteratee);

	    /**
	     * Invokes the method at `path` of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the method to invoke.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {*} Returns the result of the invoked method.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
	     *
	     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
	     * // => [2, 3]
	     */
	    var invoke = rest(baseInvoke);

	    /**
	     * Creates an array of the own enumerable property names of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects. See the
	     * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)
	     * for more details.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.keys(new Foo);
	     * // => ['a', 'b'] (iteration order is not guaranteed)
	     *
	     * _.keys('hi');
	     * // => ['0', '1']
	     */
	    function keys(object) {
	      var isProto = isPrototype(object);
	      if (!(isProto || isArrayLike(object))) {
	        return baseKeys(object);
	      }
	      var indexes = indexKeys(object),
	          skipIndexes = !!indexes,
	          result = indexes || [],
	          length = result.length;

	      for (var key in object) {
	        if (baseHas(object, key) &&
	            !(skipIndexes && (key == 'length' || isIndex(key, length))) &&
	            !(isProto && key == 'constructor')) {
	          result.push(key);
	        }
	      }
	      return result;
	    }

	    /**
	     * Creates an array of the own and inherited enumerable property names of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.keysIn(new Foo);
	     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
	     */
	    function keysIn(object) {
	      var index = -1,
	          isProto = isPrototype(object),
	          props = baseKeysIn(object),
	          propsLength = props.length,
	          indexes = indexKeys(object),
	          skipIndexes = !!indexes,
	          result = indexes || [],
	          length = result.length;

	      while (++index < propsLength) {
	        var key = props[index];
	        if (!(skipIndexes && (key == 'length' || isIndex(key, length))) &&
	            !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
	          result.push(key);
	        }
	      }
	      return result;
	    }

	    /**
	     * The opposite of `_.mapValues`; this method creates an object with the
	     * same values as `object` and keys generated by running each own enumerable
	     * string keyed property of `object` through `iteratee`. The iteratee is
	     * invoked with three arguments: (value, key, object).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.8.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The function invoked per iteration.
	     * @returns {Object} Returns the new mapped object.
	     * @example
	     *
	     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
	     *   return key + value;
	     * });
	     * // => { 'a1': 1, 'b2': 2 }
	     */
	    function mapKeys(object, iteratee) {
	      var result = {};
	      iteratee = getIteratee(iteratee, 3);

	      baseForOwn(object, function(value, key, object) {
	        result[iteratee(value, key, object)] = value;
	      });
	      return result;
	    }

	    /**
	     * Creates an object with the same keys as `object` and values generated by
	     * running each own enumerable string keyed property of `object` through
	     * `iteratee`. The iteratee is invoked with three arguments:
	     * (value, key, object).
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The function invoked per iteration.
	     * @returns {Object} Returns the new mapped object.
	     * @example
	     *
	     * var users = {
	     *   'fred':    { 'user': 'fred',    'age': 40 },
	     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
	     * };
	     *
	     * _.mapValues(users, function(o) { return o.age; });
	     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.mapValues(users, 'age');
	     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
	     */
	    function mapValues(object, iteratee) {
	      var result = {};
	      iteratee = getIteratee(iteratee, 3);

	      baseForOwn(object, function(value, key, object) {
	        result[key] = iteratee(value, key, object);
	      });
	      return result;
	    }

	    /**
	     * This method is like `_.assign` except that it recursively merges own and
	     * inherited enumerable string keyed properties of source objects into the
	     * destination object. Source properties that resolve to `undefined` are
	     * skipped if a destination value exists. Array and plain object properties
	     * are merged recursively.Other objects and value types are overridden by
	     * assignment. Source objects are applied from left to right. Subsequent
	     * sources overwrite property assignments of previous sources.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.5.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var users = {
	     *   'data': [{ 'user': 'barney' }, { 'user': 'fred' }]
	     * };
	     *
	     * var ages = {
	     *   'data': [{ 'age': 36 }, { 'age': 40 }]
	     * };
	     *
	     * _.merge(users, ages);
	     * // => { 'data': [{ 'user': 'barney', 'age': 36 }, { 'user': 'fred', 'age': 40 }] }
	     */
	    var merge = createAssigner(function(object, source, srcIndex) {
	      baseMerge(object, source, srcIndex);
	    });

	    /**
	     * This method is like `_.merge` except that it accepts `customizer` which
	     * is invoked to produce the merged values of the destination and source
	     * properties. If `customizer` returns `undefined` merging is handled by the
	     * method instead. The `customizer` is invoked with seven arguments:
	     * (objValue, srcValue, key, object, source, stack).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} sources The source objects.
	     * @param {Function} customizer The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function customizer(objValue, srcValue) {
	     *   if (_.isArray(objValue)) {
	     *     return objValue.concat(srcValue);
	     *   }
	     * }
	     *
	     * var object = {
	     *   'fruits': ['apple'],
	     *   'vegetables': ['beet']
	     * };
	     *
	     * var other = {
	     *   'fruits': ['banana'],
	     *   'vegetables': ['carrot']
	     * };
	     *
	     * _.mergeWith(object, other, customizer);
	     * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot'] }
	     */
	    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
	      baseMerge(object, source, srcIndex, customizer);
	    });

	    /**
	     * The opposite of `_.pick`; this method creates an object composed of the
	     * own and inherited enumerable string keyed properties of `object` that are
	     * not omitted.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {...(string|string[])} [props] The property identifiers to omit,
	     *  specified individually or in arrays.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
	     *
	     * _.omit(object, ['a', 'c']);
	     * // => { 'b': '2' }
	     */
	    var omit = rest(function(object, props) {
	      if (object == null) {
	        return {};
	      }
	      props = arrayMap(baseFlatten(props, 1), baseCastKey);
	      return basePick(object, baseDifference(getAllKeysIn(object), props));
	    });

	    /**
	     * The opposite of `_.pickBy`; this method creates an object composed of
	     * the own and inherited enumerable string keyed properties of `object` that
	     * `predicate` doesn't return truthy for. The predicate is invoked with two
	     * arguments: (value, key).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {Array|Function|Object|string} [predicate=_.identity]
	     *  The function invoked per property.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
	     *
	     * _.omitBy(object, _.isNumber);
	     * // => { 'b': '2' }
	     */
	    function omitBy(object, predicate) {
	      predicate = getIteratee(predicate);
	      return basePickBy(object, function(value, key) {
	        return !predicate(value, key);
	      });
	    }

	    /**
	     * Creates an object composed of the picked `object` properties.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {...(string|string[])} [props] The property identifiers to pick,
	     *  specified individually or in arrays.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
	     *
	     * _.pick(object, ['a', 'c']);
	     * // => { 'a': 1, 'c': 3 }
	     */
	    var pick = rest(function(object, props) {
	      return object == null ? {} : basePick(object, baseFlatten(props, 1));
	    });

	    /**
	     * Creates an object composed of the `object` properties `predicate` returns
	     * truthy for. The predicate is invoked with two arguments: (value, key).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {Array|Function|Object|string} [predicate=_.identity]
	     *  The function invoked per property.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
	     *
	     * _.pickBy(object, _.isNumber);
	     * // => { 'a': 1, 'c': 3 }
	     */
	    function pickBy(object, predicate) {
	      return object == null ? {} : basePickBy(object, getIteratee(predicate));
	    }

	    /**
	     * This method is like `_.get` except that if the resolved value is a
	     * function it's invoked with the `this` binding of its parent object and
	     * its result is returned.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to resolve.
	     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
	     * @returns {*} Returns the resolved value.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
	     *
	     * _.result(object, 'a[0].b.c1');
	     * // => 3
	     *
	     * _.result(object, 'a[0].b.c2');
	     * // => 4
	     *
	     * _.result(object, 'a[0].b.c3', 'default');
	     * // => 'default'
	     *
	     * _.result(object, 'a[0].b.c3', _.constant('default'));
	     * // => 'default'
	     */
	    function result(object, path, defaultValue) {
	      path = isKey(path, object) ? [path] : baseCastPath(path);

	      var index = -1,
	          length = path.length;

	      // Ensure the loop is entered when path is empty.
	      if (!length) {
	        object = undefined;
	        length = 1;
	      }
	      while (++index < length) {
	        var value = object == null ? undefined : object[path[index]];
	        if (value === undefined) {
	          index = length;
	          value = defaultValue;
	        }
	        object = isFunction(value) ? value.call(object) : value;
	      }
	      return object;
	    }

	    /**
	     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist
	     * it's created. Arrays are created for missing index properties while objects
	     * are created for all other missing properties. Use `_.setWith` to customize
	     * `path` creation.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.7.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.set(object, 'a[0].b.c', 4);
	     * console.log(object.a[0].b.c);
	     * // => 4
	     *
	     * _.set(object, 'x[0].y.z', 5);
	     * console.log(object.x[0].y.z);
	     * // => 5
	     */
	    function set(object, path, value) {
	      return object == null ? object : baseSet(object, path, value);
	    }

	    /**
	     * This method is like `_.set` except that it accepts `customizer` which is
	     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
	     * path creation is handled by the method instead. The `customizer` is invoked
	     * with three arguments: (nsValue, key, nsObject).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {*} value The value to set.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = {};
	     *
	     * _.setWith(object, '[0][1]', 'a', Object);
	     * // => { '0': { '1': 'a' } }
	     */
	    function setWith(object, path, value, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined;
	      return object == null ? object : baseSet(object, path, value, customizer);
	    }

	    /**
	     * Creates an array of own enumerable string keyed-value pairs for `object`
	     * which can be consumed by `_.fromPairs`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @alias entries
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the new array of key-value pairs.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.toPairs(new Foo);
	     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
	     */
	    function toPairs(object) {
	      return baseToPairs(object, keys(object));
	    }

	    /**
	     * Creates an array of own and inherited enumerable string keyed-value pairs
	     * for `object` which can be consumed by `_.fromPairs`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @alias entriesIn
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the new array of key-value pairs.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.toPairsIn(new Foo);
	     * // => [['a', 1], ['b', 2], ['c', 1]] (iteration order is not guaranteed)
	     */
	    function toPairsIn(object) {
	      return baseToPairs(object, keysIn(object));
	    }

	    /**
	     * An alternative to `_.reduce`; this method transforms `object` to a new
	     * `accumulator` object which is the result of running each of its own enumerable
	     * string keyed properties through `iteratee`, with each invocation potentially
	     * mutating the `accumulator` object. The iteratee is invoked with four arguments:
	     * (accumulator, value, key, object). Iteratee functions may exit iteration
	     * early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.3.0
	     * @category Object
	     * @param {Array|Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The custom accumulator value.
	     * @returns {*} Returns the accumulated value.
	     * @example
	     *
	     * _.transform([2, 3, 4], function(result, n) {
	     *   result.push(n *= n);
	     *   return n % 2 == 0;
	     * }, []);
	     * // => [4, 9]
	     *
	     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
	     *   (result[value] || (result[value] = [])).push(key);
	     * }, {});
	     * // => { '1': ['a', 'c'], '2': ['b'] }
	     */
	    function transform(object, iteratee, accumulator) {
	      var isArr = isArray(object) || isTypedArray(object);
	      iteratee = getIteratee(iteratee, 4);

	      if (accumulator == null) {
	        if (isArr || isObject(object)) {
	          var Ctor = object.constructor;
	          if (isArr) {
	            accumulator = isArray(object) ? new Ctor : [];
	          } else {
	            accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
	          }
	        } else {
	          accumulator = {};
	        }
	      }
	      (isArr ? arrayEach : baseForOwn)(object, function(value, index, object) {
	        return iteratee(accumulator, value, index, object);
	      });
	      return accumulator;
	    }

	    /**
	     * Removes the property at `path` of `object`.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to unset.
	     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
	     * _.unset(object, 'a[0].b.c');
	     * // => true
	     *
	     * console.log(object);
	     * // => { 'a': [{ 'b': {} }] };
	     *
	     * _.unset(object, 'a[0].b.c');
	     * // => true
	     *
	     * console.log(object);
	     * // => { 'a': [{ 'b': {} }] };
	     */
	    function unset(object, path) {
	      return object == null ? true : baseUnset(object, path);
	    }

	    /**
	     * This method is like `_.set` except that accepts `updater` to produce the
	     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
	     * is invoked with one argument: (value).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.6.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {Function} updater The function to produce the updated value.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
	     * console.log(object.a[0].b.c);
	     * // => 9
	     *
	     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
	     * console.log(object.x[0].y.z);
	     * // => 0
	     */
	    function update(object, path, updater) {
	      return object == null ? object : baseUpdate(object, path, baseCastFunction(updater));
	    }

	    /**
	     * This method is like `_.update` except that it accepts `customizer` which is
	     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
	     * path creation is handled by the method instead. The `customizer` is invoked
	     * with three arguments: (nsValue, key, nsObject).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.6.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {Function} updater The function to produce the updated value.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = {};
	     *
	     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
	     * // => { '0': { '1': 'a' } }
	     */
	    function updateWith(object, path, updater, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined;
	      return object == null ? object : baseUpdate(object, path, baseCastFunction(updater), customizer);
	    }

	    /**
	     * Creates an array of the own enumerable string keyed property values of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property values.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.values(new Foo);
	     * // => [1, 2] (iteration order is not guaranteed)
	     *
	     * _.values('hi');
	     * // => ['h', 'i']
	     */
	    function values(object) {
	      return object ? baseValues(object, keys(object)) : [];
	    }

	    /**
	     * Creates an array of the own and inherited enumerable string keyed property
	     * values of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property values.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.valuesIn(new Foo);
	     * // => [1, 2, 3] (iteration order is not guaranteed)
	     */
	    function valuesIn(object) {
	      return object == null ? [] : baseValues(object, keysIn(object));
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Clamps `number` within the inclusive `lower` and `upper` bounds.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Number
	     * @param {number} number The number to clamp.
	     * @param {number} [lower] The lower bound.
	     * @param {number} upper The upper bound.
	     * @returns {number} Returns the clamped number.
	     * @example
	     *
	     * _.clamp(-10, -5, 5);
	     * // => -5
	     *
	     * _.clamp(10, -5, 5);
	     * // => 5
	     */
	    function clamp(number, lower, upper) {
	      if (upper === undefined) {
	        upper = lower;
	        lower = undefined;
	      }
	      if (upper !== undefined) {
	        upper = toNumber(upper);
	        upper = upper === upper ? upper : 0;
	      }
	      if (lower !== undefined) {
	        lower = toNumber(lower);
	        lower = lower === lower ? lower : 0;
	      }
	      return baseClamp(toNumber(number), lower, upper);
	    }

	    /**
	     * Checks if `n` is between `start` and up to but not including, `end`. If
	     * `end` is not specified it's set to `start` with `start` then set to `0`.
	     * If `start` is greater than `end` the params are swapped to support
	     * negative ranges.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.3.0
	     * @category Number
	     * @param {number} number The number to check.
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
	     * @example
	     *
	     * _.inRange(3, 2, 4);
	     * // => true
	     *
	     * _.inRange(4, 8);
	     * // => true
	     *
	     * _.inRange(4, 2);
	     * // => false
	     *
	     * _.inRange(2, 2);
	     * // => false
	     *
	     * _.inRange(1.2, 2);
	     * // => true
	     *
	     * _.inRange(5.2, 4);
	     * // => false
	     *
	     * _.inRange(-3, -2, -6);
	     * // => true
	     */
	    function inRange(number, start, end) {
	      start = toNumber(start) || 0;
	      if (end === undefined) {
	        end = start;
	        start = 0;
	      } else {
	        end = toNumber(end) || 0;
	      }
	      number = toNumber(number);
	      return baseInRange(number, start, end);
	    }

	    /**
	     * Produces a random number between the inclusive `lower` and `upper` bounds.
	     * If only one argument is provided a number between `0` and the given number
	     * is returned. If `floating` is `true`, or either `lower` or `upper` are
	     * floats, a floating-point number is returned instead of an integer.
	     *
	     * **Note:** JavaScript follows the IEEE-754 standard for resolving
	     * floating-point values which can produce unexpected results.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.7.0
	     * @category Number
	     * @param {number} [lower=0] The lower bound.
	     * @param {number} [upper=1] The upper bound.
	     * @param {boolean} [floating] Specify returning a floating-point number.
	     * @returns {number} Returns the random number.
	     * @example
	     *
	     * _.random(0, 5);
	     * // => an integer between 0 and 5
	     *
	     * _.random(5);
	     * // => also an integer between 0 and 5
	     *
	     * _.random(5, true);
	     * // => a floating-point number between 0 and 5
	     *
	     * _.random(1.2, 5.2);
	     * // => a floating-point number between 1.2 and 5.2
	     */
	    function random(lower, upper, floating) {
	      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
	        upper = floating = undefined;
	      }
	      if (floating === undefined) {
	        if (typeof upper == 'boolean') {
	          floating = upper;
	          upper = undefined;
	        }
	        else if (typeof lower == 'boolean') {
	          floating = lower;
	          lower = undefined;
	        }
	      }
	      if (lower === undefined && upper === undefined) {
	        lower = 0;
	        upper = 1;
	      }
	      else {
	        lower = toNumber(lower) || 0;
	        if (upper === undefined) {
	          upper = lower;
	          lower = 0;
	        } else {
	          upper = toNumber(upper) || 0;
	        }
	      }
	      if (lower > upper) {
	        var temp = lower;
	        lower = upper;
	        upper = temp;
	      }
	      if (floating || lower % 1 || upper % 1) {
	        var rand = nativeRandom();
	        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
	      }
	      return baseRandom(lower, upper);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the camel cased string.
	     * @example
	     *
	     * _.camelCase('Foo Bar');
	     * // => 'fooBar'
	     *
	     * _.camelCase('--foo-bar--');
	     * // => 'fooBar'
	     *
	     * _.camelCase('__FOO_BAR__');
	     * // => 'fooBar'
	     */
	    var camelCase = createCompounder(function(result, word, index) {
	      word = word.toLowerCase();
	      return result + (index ? capitalize(word) : word);
	    });

	    /**
	     * Converts the first character of `string` to upper case and the remaining
	     * to lower case.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to capitalize.
	     * @returns {string} Returns the capitalized string.
	     * @example
	     *
	     * _.capitalize('FRED');
	     * // => 'Fred'
	     */
	    function capitalize(string) {
	      return upperFirst(toString(string).toLowerCase());
	    }

	    /**
	     * Deburrs `string` by converting
	     * [latin-1 supplementary letters](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
	     * to basic latin letters and removing
	     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to deburr.
	     * @returns {string} Returns the deburred string.
	     * @example
	     *
	     * _.deburr('déjà vu');
	     * // => 'deja vu'
	     */
	    function deburr(string) {
	      string = toString(string);
	      return string && string.replace(reLatin1, deburrLetter).replace(reComboMark, '');
	    }

	    /**
	     * Checks if `string` ends with the given target string.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to search.
	     * @param {string} [target] The string to search for.
	     * @param {number} [position=string.length] The position to search from.
	     * @returns {boolean} Returns `true` if `string` ends with `target`,
	     *  else `false`.
	     * @example
	     *
	     * _.endsWith('abc', 'c');
	     * // => true
	     *
	     * _.endsWith('abc', 'b');
	     * // => false
	     *
	     * _.endsWith('abc', 'b', 2);
	     * // => true
	     */
	    function endsWith(string, target, position) {
	      string = toString(string);
	      target = typeof target == 'string' ? target : (target + '');

	      var length = string.length;
	      position = position === undefined
	        ? length
	        : baseClamp(toInteger(position), 0, length);

	      position -= target.length;
	      return position >= 0 && string.indexOf(target, position) == position;
	    }

	    /**
	     * Converts the characters "&", "<", ">", '"', "'", and "\`" in `string` to
	     * their corresponding HTML entities.
	     *
	     * **Note:** No other characters are escaped. To escape additional
	     * characters use a third-party library like [_he_](https://mths.be/he).
	     *
	     * Though the ">" character is escaped for symmetry, characters like
	     * ">" and "/" don't need escaping in HTML and have no special meaning
	     * unless they're part of a tag or unquoted attribute value. See
	     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
	     * (under "semi-related fun fact") for more details.
	     *
	     * Backticks are escaped because in IE < 9, they can break out of
	     * attribute values or HTML comments. See [#59](https://html5sec.org/#59),
	     * [#102](https://html5sec.org/#102), [#108](https://html5sec.org/#108), and
	     * [#133](https://html5sec.org/#133) of the
	     * [HTML5 Security Cheatsheet](https://html5sec.org/) for more details.
	     *
	     * When working with HTML you should always
	     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
	     * XSS vectors.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to escape.
	     * @returns {string} Returns the escaped string.
	     * @example
	     *
	     * _.escape('fred, barney, & pebbles');
	     * // => 'fred, barney, &amp; pebbles'
	     */
	    function escape(string) {
	      string = toString(string);
	      return (string && reHasUnescapedHtml.test(string))
	        ? string.replace(reUnescapedHtml, escapeHtmlChar)
	        : string;
	    }

	    /**
	     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
	     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to escape.
	     * @returns {string} Returns the escaped string.
	     * @example
	     *
	     * _.escapeRegExp('[lodash](https://lodash.com/)');
	     * // => '\[lodash\]\(https://lodash\.com/\)'
	     */
	    function escapeRegExp(string) {
	      string = toString(string);
	      return (string && reHasRegExpChar.test(string))
	        ? string.replace(reRegExpChar, '\\$&')
	        : string;
	    }

	    /**
	     * Converts `string` to
	     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the kebab cased string.
	     * @example
	     *
	     * _.kebabCase('Foo Bar');
	     * // => 'foo-bar'
	     *
	     * _.kebabCase('fooBar');
	     * // => 'foo-bar'
	     *
	     * _.kebabCase('__FOO_BAR__');
	     * // => 'foo-bar'
	     */
	    var kebabCase = createCompounder(function(result, word, index) {
	      return result + (index ? '-' : '') + word.toLowerCase();
	    });

	    /**
	     * Converts `string`, as space separated words, to lower case.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the lower cased string.
	     * @example
	     *
	     * _.lowerCase('--Foo-Bar--');
	     * // => 'foo bar'
	     *
	     * _.lowerCase('fooBar');
	     * // => 'foo bar'
	     *
	     * _.lowerCase('__FOO_BAR__');
	     * // => 'foo bar'
	     */
	    var lowerCase = createCompounder(function(result, word, index) {
	      return result + (index ? ' ' : '') + word.toLowerCase();
	    });

	    /**
	     * Converts the first character of `string` to lower case.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the converted string.
	     * @example
	     *
	     * _.lowerFirst('Fred');
	     * // => 'fred'
	     *
	     * _.lowerFirst('FRED');
	     * // => 'fRED'
	     */
	    var lowerFirst = createCaseFirst('toLowerCase');

	    /**
	     * Pads `string` on the left and right sides if it's shorter than `length`.
	     * Padding characters are truncated if they can't be evenly divided by `length`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.pad('abc', 8);
	     * // => '  abc   '
	     *
	     * _.pad('abc', 8, '_-');
	     * // => '_-abc_-_'
	     *
	     * _.pad('abc', 3);
	     * // => 'abc'
	     */
	    function pad(string, length, chars) {
	      string = toString(string);
	      length = toInteger(length);

	      var strLength = length ? stringSize(string) : 0;
	      if (!length || strLength >= length) {
	        return string;
	      }
	      var mid = (length - strLength) / 2;
	      return (
	        createPadding(nativeFloor(mid), chars) +
	        string +
	        createPadding(nativeCeil(mid), chars)
	      );
	    }

	    /**
	     * Pads `string` on the right side if it's shorter than `length`. Padding
	     * characters are truncated if they exceed `length`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.padEnd('abc', 6);
	     * // => 'abc   '
	     *
	     * _.padEnd('abc', 6, '_-');
	     * // => 'abc_-_'
	     *
	     * _.padEnd('abc', 3);
	     * // => 'abc'
	     */
	    function padEnd(string, length, chars) {
	      string = toString(string);
	      length = toInteger(length);

	      var strLength = length ? stringSize(string) : 0;
	      return (length && strLength < length)
	        ? (string + createPadding(length - strLength, chars))
	        : string;
	    }

	    /**
	     * Pads `string` on the left side if it's shorter than `length`. Padding
	     * characters are truncated if they exceed `length`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.padStart('abc', 6);
	     * // => '   abc'
	     *
	     * _.padStart('abc', 6, '_-');
	     * // => '_-_abc'
	     *
	     * _.padStart('abc', 3);
	     * // => 'abc'
	     */
	    function padStart(string, length, chars) {
	      string = toString(string);
	      length = toInteger(length);

	      var strLength = length ? stringSize(string) : 0;
	      return (length && strLength < length)
	        ? (createPadding(length - strLength, chars) + string)
	        : string;
	    }

	    /**
	     * Converts `string` to an integer of the specified radix. If `radix` is
	     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
	     * hexadecimal, in which case a `radix` of `16` is used.
	     *
	     * **Note:** This method aligns with the
	     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.1.0
	     * @category String
	     * @param {string} string The string to convert.
	     * @param {number} [radix=10] The radix to interpret `value` by.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.parseInt('08');
	     * // => 8
	     *
	     * _.map(['6', '08', '10'], _.parseInt);
	     * // => [6, 8, 10]
	     */
	    function parseInt(string, radix, guard) {
	      // Chrome fails to trim leading <BOM> whitespace characters.
	      // See https://bugs.chromium.org/p/v8/issues/detail?id=3109 for more details.
	      if (guard || radix == null) {
	        radix = 0;
	      } else if (radix) {
	        radix = +radix;
	      }
	      string = toString(string).replace(reTrim, '');
	      return nativeParseInt(string, radix || (reHasHexPrefix.test(string) ? 16 : 10));
	    }

	    /**
	     * Repeats the given string `n` times.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to repeat.
	     * @param {number} [n=0] The number of times to repeat the string.
	     * @returns {string} Returns the repeated string.
	     * @example
	     *
	     * _.repeat('*', 3);
	     * // => '***'
	     *
	     * _.repeat('abc', 2);
	     * // => 'abcabc'
	     *
	     * _.repeat('abc', 0);
	     * // => ''
	     */
	    function repeat(string, n) {
	      return baseRepeat(toString(string), toInteger(n));
	    }

	    /**
	     * Replaces matches for `pattern` in `string` with `replacement`.
	     *
	     * **Note:** This method is based on
	     * [`String#replace`](https://mdn.io/String/replace).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to modify.
	     * @param {RegExp|string} pattern The pattern to replace.
	     * @param {Function|string} replacement The match replacement.
	     * @returns {string} Returns the modified string.
	     * @example
	     *
	     * _.replace('Hi Fred', 'Fred', 'Barney');
	     * // => 'Hi Barney'
	     */
	    function replace() {
	      var args = arguments,
	          string = toString(args[0]);

	      return args.length < 3 ? string : string.replace(args[1], args[2]);
	    }

	    /**
	     * Converts `string` to
	     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the snake cased string.
	     * @example
	     *
	     * _.snakeCase('Foo Bar');
	     * // => 'foo_bar'
	     *
	     * _.snakeCase('fooBar');
	     * // => 'foo_bar'
	     *
	     * _.snakeCase('--FOO-BAR--');
	     * // => 'foo_bar'
	     */
	    var snakeCase = createCompounder(function(result, word, index) {
	      return result + (index ? '_' : '') + word.toLowerCase();
	    });

	    /**
	     * Splits `string` by `separator`.
	     *
	     * **Note:** This method is based on
	     * [`String#split`](https://mdn.io/String/split).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to split.
	     * @param {RegExp|string} separator The separator pattern to split by.
	     * @param {number} [limit] The length to truncate results to.
	     * @returns {Array} Returns the new array of string segments.
	     * @example
	     *
	     * _.split('a-b-c', '-', 2);
	     * // => ['a', 'b']
	     */
	    function split(string, separator, limit) {
	      return toString(string).split(separator, limit);
	    }

	    /**
	     * Converts `string` to
	     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.1.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the start cased string.
	     * @example
	     *
	     * _.startCase('--foo-bar--');
	     * // => 'Foo Bar'
	     *
	     * _.startCase('fooBar');
	     * // => 'Foo Bar'
	     *
	     * _.startCase('__FOO_BAR__');
	     * // => 'FOO BAR'
	     */
	    var startCase = createCompounder(function(result, word, index) {
	      return result + (index ? ' ' : '') + upperFirst(word);
	    });

	    /**
	     * Checks if `string` starts with the given target string.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to search.
	     * @param {string} [target] The string to search for.
	     * @param {number} [position=0] The position to search from.
	     * @returns {boolean} Returns `true` if `string` starts with `target`,
	     *  else `false`.
	     * @example
	     *
	     * _.startsWith('abc', 'a');
	     * // => true
	     *
	     * _.startsWith('abc', 'b');
	     * // => false
	     *
	     * _.startsWith('abc', 'b', 1);
	     * // => true
	     */
	    function startsWith(string, target, position) {
	      string = toString(string);
	      position = baseClamp(toInteger(position), 0, string.length);
	      return string.lastIndexOf(target, position) == position;
	    }

	    /**
	     * Creates a compiled template function that can interpolate data properties
	     * in "interpolate" delimiters, HTML-escape interpolated data properties in
	     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
	     * properties may be accessed as free variables in the template. If a setting
	     * object is given it takes precedence over `_.templateSettings` values.
	     *
	     * **Note:** In the development build `_.template` utilizes
	     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
	     * for easier debugging.
	     *
	     * For more information on precompiling templates see
	     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
	     *
	     * For more information on Chrome extension sandboxes see
	     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The template string.
	     * @param {Object} [options={}] The options object.
	     * @param {RegExp} [options.escape=_.templateSettings.escape]
	     *  The HTML "escape" delimiter.
	     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
	     *  The "evaluate" delimiter.
	     * @param {Object} [options.imports=_.templateSettings.imports]
	     *  An object to import into the template as free variables.
	     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
	     *  The "interpolate" delimiter.
	     * @param {string} [options.sourceURL='lodash.templateSources[n]']
	     *  The sourceURL of the compiled template.
	     * @param {string} [options.variable='obj']
	     *  The data object variable name.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Function} Returns the compiled template function.
	     * @example
	     *
	     * // Use the "interpolate" delimiter to create a compiled template.
	     * var compiled = _.template('hello <%= user %>!');
	     * compiled({ 'user': 'fred' });
	     * // => 'hello fred!'
	     *
	     * // Use the HTML "escape" delimiter to escape data property values.
	     * var compiled = _.template('<b><%- value %></b>');
	     * compiled({ 'value': '<script>' });
	     * // => '<b>&lt;script&gt;</b>'
	     *
	     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
	     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
	     * compiled({ 'users': ['fred', 'barney'] });
	     * // => '<li>fred</li><li>barney</li>'
	     *
	     * // Use the internal `print` function in "evaluate" delimiters.
	     * var compiled = _.template('<% print("hello " + user); %>!');
	     * compiled({ 'user': 'barney' });
	     * // => 'hello barney!'
	     *
	     * // Use the ES delimiter as an alternative to the default "interpolate" delimiter.
	     * var compiled = _.template('hello ${ user }!');
	     * compiled({ 'user': 'pebbles' });
	     * // => 'hello pebbles!'
	     *
	     * // Use custom template delimiters.
	     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
	     * var compiled = _.template('hello {{ user }}!');
	     * compiled({ 'user': 'mustache' });
	     * // => 'hello mustache!'
	     *
	     * // Use backslashes to treat delimiters as plain text.
	     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
	     * compiled({ 'value': 'ignored' });
	     * // => '<%- value %>'
	     *
	     * // Use the `imports` option to import `jQuery` as `jq`.
	     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
	     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
	     * compiled({ 'users': ['fred', 'barney'] });
	     * // => '<li>fred</li><li>barney</li>'
	     *
	     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
	     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
	     * compiled(data);
	     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
	     *
	     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
	     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
	     * compiled.source;
	     * // => function(data) {
	     * //   var __t, __p = '';
	     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
	     * //   return __p;
	     * // }
	     *
	     * // Use the `source` property to inline compiled templates for meaningful
	     * // line numbers in error messages and stack traces.
	     * fs.writeFileSync(path.join(cwd, 'jst.js'), '\
	     *   var JST = {\
	     *     "main": ' + _.template(mainText).source + '\
	     *   };\
	     * ');
	     */
	    function template(string, options, guard) {
	      // Based on John Resig's `tmpl` implementation
	      // (http://ejohn.org/blog/javascript-micro-templating/)
	      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
	      var settings = lodash.templateSettings;

	      if (guard && isIterateeCall(string, options, guard)) {
	        options = undefined;
	      }
	      string = toString(string);
	      options = assignInWith({}, options, settings, assignInDefaults);

	      var imports = assignInWith({}, options.imports, settings.imports, assignInDefaults),
	          importsKeys = keys(imports),
	          importsValues = baseValues(imports, importsKeys);

	      var isEscaping,
	          isEvaluating,
	          index = 0,
	          interpolate = options.interpolate || reNoMatch,
	          source = "__p += '";

	      // Compile the regexp to match each delimiter.
	      var reDelimiters = RegExp(
	        (options.escape || reNoMatch).source + '|' +
	        interpolate.source + '|' +
	        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
	        (options.evaluate || reNoMatch).source + '|$'
	      , 'g');

	      // Use a sourceURL for easier debugging.
	      var sourceURL = '//# sourceURL=' +
	        ('sourceURL' in options
	          ? options.sourceURL
	          : ('lodash.templateSources[' + (++templateCounter) + ']')
	        ) + '\n';

	      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
	        interpolateValue || (interpolateValue = esTemplateValue);

	        // Escape characters that can't be included in string literals.
	        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

	        // Replace delimiters with snippets.
	        if (escapeValue) {
	          isEscaping = true;
	          source += "' +\n__e(" + escapeValue + ") +\n'";
	        }
	        if (evaluateValue) {
	          isEvaluating = true;
	          source += "';\n" + evaluateValue + ";\n__p += '";
	        }
	        if (interpolateValue) {
	          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
	        }
	        index = offset + match.length;

	        // The JS engine embedded in Adobe products needs `match` returned in
	        // order to produce the correct `offset` value.
	        return match;
	      });

	      source += "';\n";

	      // If `variable` is not specified wrap a with-statement around the generated
	      // code to add the data object to the top of the scope chain.
	      var variable = options.variable;
	      if (!variable) {
	        source = 'with (obj) {\n' + source + '\n}\n';
	      }
	      // Cleanup code by stripping empty strings.
	      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
	        .replace(reEmptyStringMiddle, '$1')
	        .replace(reEmptyStringTrailing, '$1;');

	      // Frame code as the function body.
	      source = 'function(' + (variable || 'obj') + ') {\n' +
	        (variable
	          ? ''
	          : 'obj || (obj = {});\n'
	        ) +
	        "var __t, __p = ''" +
	        (isEscaping
	           ? ', __e = _.escape'
	           : ''
	        ) +
	        (isEvaluating
	          ? ', __j = Array.prototype.join;\n' +
	            "function print() { __p += __j.call(arguments, '') }\n"
	          : ';\n'
	        ) +
	        source +
	        'return __p\n}';

	      var result = attempt(function() {
	        return Function(importsKeys, sourceURL + 'return ' + source)
	          .apply(undefined, importsValues);
	      });

	      // Provide the compiled function's source by its `toString` method or
	      // the `source` property as a convenience for inlining compiled templates.
	      result.source = source;
	      if (isError(result)) {
	        throw result;
	      }
	      return result;
	    }

	    /**
	     * Converts `string`, as a whole, to lower case just like
	     * [String#toLowerCase](https://mdn.io/toLowerCase).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the lower cased string.
	     * @example
	     *
	     * _.toLower('--Foo-Bar--');
	     * // => '--foo-bar--'
	     *
	     * _.toLower('fooBar');
	     * // => 'foobar'
	     *
	     * _.toLower('__FOO_BAR__');
	     * // => '__foo_bar__'
	     */
	    function toLower(value) {
	      return toString(value).toLowerCase();
	    }

	    /**
	     * Converts `string`, as a whole, to upper case just like
	     * [String#toUpperCase](https://mdn.io/toUpperCase).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the upper cased string.
	     * @example
	     *
	     * _.toUpper('--foo-bar--');
	     * // => '--FOO-BAR--'
	     *
	     * _.toUpper('fooBar');
	     * // => 'FOOBAR'
	     *
	     * _.toUpper('__foo_bar__');
	     * // => '__FOO_BAR__'
	     */
	    function toUpper(value) {
	      return toString(value).toUpperCase();
	    }

	    /**
	     * Removes leading and trailing whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trim('  abc  ');
	     * // => 'abc'
	     *
	     * _.trim('-_-abc-_-', '_-');
	     * // => 'abc'
	     *
	     * _.map(['  foo  ', '  bar  '], _.trim);
	     * // => ['foo', 'bar']
	     */
	    function trim(string, chars, guard) {
	      string = toString(string);
	      if (!string) {
	        return string;
	      }
	      if (guard || chars === undefined) {
	        return string.replace(reTrim, '');
	      }
	      chars = (chars + '');
	      if (!chars) {
	        return string;
	      }
	      var strSymbols = stringToArray(string),
	          chrSymbols = stringToArray(chars);

	      return strSymbols
	        .slice(charsStartIndex(strSymbols, chrSymbols), charsEndIndex(strSymbols, chrSymbols) + 1)
	        .join('');
	    }

	    /**
	     * Removes trailing whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trimEnd('  abc  ');
	     * // => '  abc'
	     *
	     * _.trimEnd('-_-abc-_-', '_-');
	     * // => '-_-abc'
	     */
	    function trimEnd(string, chars, guard) {
	      string = toString(string);
	      if (!string) {
	        return string;
	      }
	      if (guard || chars === undefined) {
	        return string.replace(reTrimEnd, '');
	      }
	      chars = (chars + '');
	      if (!chars) {
	        return string;
	      }
	      var strSymbols = stringToArray(string);
	      return strSymbols
	        .slice(0, charsEndIndex(strSymbols, stringToArray(chars)) + 1)
	        .join('');
	    }

	    /**
	     * Removes leading whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trimStart('  abc  ');
	     * // => 'abc  '
	     *
	     * _.trimStart('-_-abc-_-', '_-');
	     * // => 'abc-_-'
	     */
	    function trimStart(string, chars, guard) {
	      string = toString(string);
	      if (!string) {
	        return string;
	      }
	      if (guard || chars === undefined) {
	        return string.replace(reTrimStart, '');
	      }
	      chars = (chars + '');
	      if (!chars) {
	        return string;
	      }
	      var strSymbols = stringToArray(string);
	      return strSymbols
	        .slice(charsStartIndex(strSymbols, stringToArray(chars)))
	        .join('');
	    }

	    /**
	     * Truncates `string` if it's longer than the given maximum string length.
	     * The last characters of the truncated string are replaced with the omission
	     * string which defaults to "...".
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to truncate.
	     * @param {Object} [options={}] The options object.
	     * @param {number} [options.length=30] The maximum string length.
	     * @param {string} [options.omission='...'] The string to indicate text is omitted.
	     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
	     * @returns {string} Returns the truncated string.
	     * @example
	     *
	     * _.truncate('hi-diddly-ho there, neighborino');
	     * // => 'hi-diddly-ho there, neighbo...'
	     *
	     * _.truncate('hi-diddly-ho there, neighborino', {
	     *   'length': 24,
	     *   'separator': ' '
	     * });
	     * // => 'hi-diddly-ho there,...'
	     *
	     * _.truncate('hi-diddly-ho there, neighborino', {
	     *   'length': 24,
	     *   'separator': /,? +/
	     * });
	     * // => 'hi-diddly-ho there...'
	     *
	     * _.truncate('hi-diddly-ho there, neighborino', {
	     *   'omission': ' [...]'
	     * });
	     * // => 'hi-diddly-ho there, neig [...]'
	     */
	    function truncate(string, options) {
	      var length = DEFAULT_TRUNC_LENGTH,
	          omission = DEFAULT_TRUNC_OMISSION;

	      if (isObject(options)) {
	        var separator = 'separator' in options ? options.separator : separator;
	        length = 'length' in options ? toInteger(options.length) : length;
	        omission = 'omission' in options ? toString(options.omission) : omission;
	      }
	      string = toString(string);

	      var strLength = string.length;
	      if (reHasComplexSymbol.test(string)) {
	        var strSymbols = stringToArray(string);
	        strLength = strSymbols.length;
	      }
	      if (length >= strLength) {
	        return string;
	      }
	      var end = length - stringSize(omission);
	      if (end < 1) {
	        return omission;
	      }
	      var result = strSymbols
	        ? strSymbols.slice(0, end).join('')
	        : string.slice(0, end);

	      if (separator === undefined) {
	        return result + omission;
	      }
	      if (strSymbols) {
	        end += (result.length - end);
	      }
	      if (isRegExp(separator)) {
	        if (string.slice(end).search(separator)) {
	          var match,
	              substring = result;

	          if (!separator.global) {
	            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
	          }
	          separator.lastIndex = 0;
	          while ((match = separator.exec(substring))) {
	            var newEnd = match.index;
	          }
	          result = result.slice(0, newEnd === undefined ? end : newEnd);
	        }
	      } else if (string.indexOf(separator, end) != end) {
	        var index = result.lastIndexOf(separator);
	        if (index > -1) {
	          result = result.slice(0, index);
	        }
	      }
	      return result + omission;
	    }

	    /**
	     * The inverse of `_.escape`; this method converts the HTML entities
	     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, `&#39;`, and `&#96;` in `string` to
	     * their corresponding characters.
	     *
	     * **Note:** No other HTML entities are unescaped. To unescape additional
	     * HTML entities use a third-party library like [_he_](https://mths.be/he).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.6.0
	     * @category String
	     * @param {string} [string=''] The string to unescape.
	     * @returns {string} Returns the unescaped string.
	     * @example
	     *
	     * _.unescape('fred, barney, &amp; pebbles');
	     * // => 'fred, barney, & pebbles'
	     */
	    function unescape(string) {
	      string = toString(string);
	      return (string && reHasEscapedHtml.test(string))
	        ? string.replace(reEscapedHtml, unescapeHtmlChar)
	        : string;
	    }

	    /**
	     * Converts `string`, as space separated words, to upper case.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the upper cased string.
	     * @example
	     *
	     * _.upperCase('--foo-bar');
	     * // => 'FOO BAR'
	     *
	     * _.upperCase('fooBar');
	     * // => 'FOO BAR'
	     *
	     * _.upperCase('__foo_bar__');
	     * // => 'FOO BAR'
	     */
	    var upperCase = createCompounder(function(result, word, index) {
	      return result + (index ? ' ' : '') + word.toUpperCase();
	    });

	    /**
	     * Converts the first character of `string` to upper case.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the converted string.
	     * @example
	     *
	     * _.upperFirst('fred');
	     * // => 'Fred'
	     *
	     * _.upperFirst('FRED');
	     * // => 'FRED'
	     */
	    var upperFirst = createCaseFirst('toUpperCase');

	    /**
	     * Splits `string` into an array of its words.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to inspect.
	     * @param {RegExp|string} [pattern] The pattern to match words.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the words of `string`.
	     * @example
	     *
	     * _.words('fred, barney, & pebbles');
	     * // => ['fred', 'barney', 'pebbles']
	     *
	     * _.words('fred, barney, & pebbles', /[^, ]+/g);
	     * // => ['fred', 'barney', '&', 'pebbles']
	     */
	    function words(string, pattern, guard) {
	      string = toString(string);
	      pattern = guard ? undefined : pattern;

	      if (pattern === undefined) {
	        pattern = reHasComplexWord.test(string) ? reComplexWord : reBasicWord;
	      }
	      return string.match(pattern) || [];
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Attempts to invoke `func`, returning either the result or the caught error
	     * object. Any additional arguments are provided to `func` when it's invoked.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Util
	     * @param {Function} func The function to attempt.
	     * @param {...*} [args] The arguments to invoke `func` with.
	     * @returns {*} Returns the `func` result or error object.
	     * @example
	     *
	     * // Avoid throwing errors for invalid selectors.
	     * var elements = _.attempt(function(selector) {
	     *   return document.querySelectorAll(selector);
	     * }, '>_>');
	     *
	     * if (_.isError(elements)) {
	     *   elements = [];
	     * }
	     */
	    var attempt = rest(function(func, args) {
	      try {
	        return apply(func, undefined, args);
	      } catch (e) {
	        return isError(e) ? e : new Error(e);
	      }
	    });

	    /**
	     * Binds methods of an object to the object itself, overwriting the existing
	     * method.
	     *
	     * **Note:** This method doesn't set the "length" property of bound functions.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {Object} object The object to bind and assign the bound methods to.
	     * @param {...(string|string[])} methodNames The object method names to bind,
	     *  specified individually or in arrays.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var view = {
	     *   'label': 'docs',
	     *   'onClick': function() {
	     *     console.log('clicked ' + this.label);
	     *   }
	     * };
	     *
	     * _.bindAll(view, 'onClick');
	     * jQuery(element).on('click', view.onClick);
	     * // => Logs 'clicked docs' when clicked.
	     */
	    var bindAll = rest(function(object, methodNames) {
	      arrayEach(baseFlatten(methodNames, 1), function(key) {
	        object[key] = bind(object[key], object);
	      });
	      return object;
	    });

	    /**
	     * Creates a function that iterates over `pairs` invoking the corresponding
	     * function of the first predicate to return truthy. The predicate-function
	     * pairs are invoked with the `this` binding and arguments of the created
	     * function.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {Array} pairs The predicate-function pairs.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var func = _.cond([
	     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
	     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
	     *   [_.constant(true),                _.constant('no match')]
	     * ]);
	     *
	     * func({ 'a': 1, 'b': 2 });
	     * // => 'matches A'
	     *
	     * func({ 'a': 0, 'b': 1 });
	     * // => 'matches B'
	     *
	     * func({ 'a': '1', 'b': '2' });
	     * // => 'no match'
	     */
	    function cond(pairs) {
	      var length = pairs ? pairs.length : 0,
	          toIteratee = getIteratee();

	      pairs = !length ? [] : arrayMap(pairs, function(pair) {
	        if (typeof pair[1] != 'function') {
	          throw new TypeError(FUNC_ERROR_TEXT);
	        }
	        return [toIteratee(pair[0]), pair[1]];
	      });

	      return rest(function(args) {
	        var index = -1;
	        while (++index < length) {
	          var pair = pairs[index];
	          if (apply(pair[0], this, args)) {
	            return apply(pair[1], this, args);
	          }
	        }
	      });
	    }

	    /**
	     * Creates a function that invokes the predicate properties of `source` with
	     * the corresponding property values of a given object, returning `true` if
	     * all predicates return truthy, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {Object} source The object of property predicates to conform to.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * _.filter(users, _.conforms({ 'age': _.partial(_.gt, _, 38) }));
	     * // => [{ 'user': 'fred', 'age': 40 }]
	     */
	    function conforms(source) {
	      return baseConforms(baseClone(source, true));
	    }

	    /**
	     * Creates a function that returns `value`.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Util
	     * @param {*} value The value to return from the new function.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     * var getter = _.constant(object);
	     *
	     * getter() === object;
	     * // => true
	     */
	    function constant(value) {
	      return function() {
	        return value;
	      };
	    }

	    /**
	     * Creates a function that returns the result of invoking the given functions
	     * with the `this` binding of the created function, where each successive
	     * invocation is supplied the return value of the previous.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Util
	     * @param {...(Function|Function[])} [funcs] Functions to invoke.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var addSquare = _.flow(_.add, square);
	     * addSquare(1, 2);
	     * // => 9
	     */
	    var flow = createFlow();

	    /**
	     * This method is like `_.flow` except that it creates a function that
	     * invokes the given functions from right to left.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {...(Function|Function[])} [funcs] Functions to invoke.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var addSquare = _.flowRight(square, _.add);
	     * addSquare(1, 2);
	     * // => 9
	     */
	    var flowRight = createFlow(true);

	    /**
	     * This method returns the first argument given to it.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {*} value Any value.
	     * @returns {*} Returns `value`.
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     *
	     * _.identity(object) === object;
	     * // => true
	     */
	    function identity(value) {
	      return value;
	    }

	    /**
	     * Creates a function that invokes `func` with the arguments of the created
	     * function. If `func` is a property name the created function returns the
	     * property value for a given element. If `func` is an array or object the
	     * created function returns `true` for elements that contain the equivalent
	     * source properties, otherwise it returns `false`.
	     *
	     * @static
	     * @since 4.0.0
	     * @memberOf _
	     * @category Util
	     * @param {*} [func=_.identity] The value to convert to a callback.
	     * @returns {Function} Returns the callback.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
	     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.filter(users, _.iteratee(['user', 'fred']));
	     * // => [{ 'user': 'fred', 'age': 40 }]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.map(users, _.iteratee('user'));
	     * // => ['barney', 'fred']
	     *
	     * // Create custom iteratee shorthands.
	     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
	     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
	     *     return func.test(string);
	     *   };
	     * });
	     *
	     * _.filter(['abc', 'def'], /ef/);
	     * // => ['def']
	     */
	    function iteratee(func) {
	      return baseIteratee(typeof func == 'function' ? func : baseClone(func, true));
	    }

	    /**
	     * Creates a function that performs a partial deep comparison between a given
	     * object and `source`, returning `true` if the given object has equivalent
	     * property values, else `false`. The created function is equivalent to
	     * `_.isMatch` with a `source` partially applied.
	     *
	     * **Note:** This method supports comparing the same values as `_.isEqual`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Util
	     * @param {Object} source The object of property values to match.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * _.filter(users, _.matches({ 'age': 40, 'active': false }));
	     * // => [{ 'user': 'fred', 'age': 40, 'active': false }]
	     */
	    function matches(source) {
	      return baseMatches(baseClone(source, true));
	    }

	    /**
	     * Creates a function that performs a partial deep comparison between the
	     * value at `path` of a given object to `srcValue`, returning `true` if the
	     * object value is equivalent, else `false`.
	     *
	     * **Note:** This method supports comparing the same values as `_.isEqual`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.2.0
	     * @category Util
	     * @param {Array|string} path The path of the property to get.
	     * @param {*} srcValue The value to match.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney' },
	     *   { 'user': 'fred' }
	     * ];
	     *
	     * _.find(users, _.matchesProperty('user', 'fred'));
	     * // => { 'user': 'fred' }
	     */
	    function matchesProperty(path, srcValue) {
	      return baseMatchesProperty(path, baseClone(srcValue, true));
	    }

	    /**
	     * Creates a function that invokes the method at `path` of a given object.
	     * Any additional arguments are provided to the invoked method.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.7.0
	     * @category Util
	     * @param {Array|string} path The path of the method to invoke.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': { 'b': { 'c': _.constant(2) } } },
	     *   { 'a': { 'b': { 'c': _.constant(1) } } }
	     * ];
	     *
	     * _.map(objects, _.method('a.b.c'));
	     * // => [2, 1]
	     *
	     * _.map(objects, _.method(['a', 'b', 'c']));
	     * // => [2, 1]
	     */
	    var method = rest(function(path, args) {
	      return function(object) {
	        return baseInvoke(object, path, args);
	      };
	    });

	    /**
	     * The opposite of `_.method`; this method creates a function that invokes
	     * the method at a given path of `object`. Any additional arguments are
	     * provided to the invoked method.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.7.0
	     * @category Util
	     * @param {Object} object The object to query.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var array = _.times(3, _.constant),
	     *     object = { 'a': array, 'b': array, 'c': array };
	     *
	     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
	     * // => [2, 0]
	     *
	     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
	     * // => [2, 0]
	     */
	    var methodOf = rest(function(object, args) {
	      return function(path) {
	        return baseInvoke(object, path, args);
	      };
	    });

	    /**
	     * Adds all own enumerable string keyed function properties of a source
	     * object to the destination object. If `object` is a function then methods
	     * are added to its prototype as well.
	     *
	     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
	     * avoid conflicts caused by modifying the original.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {Function|Object} [object=lodash] The destination object.
	     * @param {Object} source The object of functions to add.
	     * @param {Object} [options={}] The options object.
	     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
	     * @returns {Function|Object} Returns `object`.
	     * @example
	     *
	     * function vowels(string) {
	     *   return _.filter(string, function(v) {
	     *     return /[aeiou]/i.test(v);
	     *   });
	     * }
	     *
	     * _.mixin({ 'vowels': vowels });
	     * _.vowels('fred');
	     * // => ['e']
	     *
	     * _('fred').vowels().value();
	     * // => ['e']
	     *
	     * _.mixin({ 'vowels': vowels }, { 'chain': false });
	     * _('fred').vowels();
	     * // => ['e']
	     */
	    function mixin(object, source, options) {
	      var props = keys(source),
	          methodNames = baseFunctions(source, props);

	      if (options == null &&
	          !(isObject(source) && (methodNames.length || !props.length))) {
	        options = source;
	        source = object;
	        object = this;
	        methodNames = baseFunctions(source, keys(source));
	      }
	      var chain = (isObject(options) && 'chain' in options) ? options.chain : true,
	          isFunc = isFunction(object);

	      arrayEach(methodNames, function(methodName) {
	        var func = source[methodName];
	        object[methodName] = func;
	        if (isFunc) {
	          object.prototype[methodName] = function() {
	            var chainAll = this.__chain__;
	            if (chain || chainAll) {
	              var result = object(this.__wrapped__),
	                  actions = result.__actions__ = copyArray(this.__actions__);

	              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
	              result.__chain__ = chainAll;
	              return result;
	            }
	            return func.apply(object, arrayPush([this.value()], arguments));
	          };
	        }
	      });

	      return object;
	    }

	    /**
	     * Reverts the `_` variable to its previous value and returns a reference to
	     * the `lodash` function.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @returns {Function} Returns the `lodash` function.
	     * @example
	     *
	     * var lodash = _.noConflict();
	     */
	    function noConflict() {
	      if (root._ === this) {
	        root._ = oldDash;
	      }
	      return this;
	    }

	    /**
	     * A no-operation function that returns `undefined` regardless of the
	     * arguments it receives.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.3.0
	     * @category Util
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     *
	     * _.noop(object) === undefined;
	     * // => true
	     */
	    function noop() {
	      // No operation performed.
	    }

	    /**
	     * Creates a function that returns its nth argument.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {number} [n=0] The index of the argument to return.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var func = _.nthArg(1);
	     *
	     * func('a', 'b', 'c');
	     * // => 'b'
	     */
	    function nthArg(n) {
	      n = toInteger(n);
	      return function() {
	        return arguments[n];
	      };
	    }

	    /**
	     * Creates a function that invokes `iteratees` with the arguments provided
	     * to the created function and returns their results.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {...(Function|Function[])} iteratees The iteratees to invoke.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var func = _.over(Math.max, Math.min);
	     *
	     * func(1, 2, 3, 4);
	     * // => [4, 1]
	     */
	    var over = createOver(arrayMap);

	    /**
	     * Creates a function that checks if **all** of the `predicates` return
	     * truthy when invoked with the arguments provided to the created function.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {...(Function|Function[])} predicates The predicates to check.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var func = _.overEvery(Boolean, isFinite);
	     *
	     * func('1');
	     * // => true
	     *
	     * func(null);
	     * // => false
	     *
	     * func(NaN);
	     * // => false
	     */
	    var overEvery = createOver(arrayEvery);

	    /**
	     * Creates a function that checks if **any** of the `predicates` return
	     * truthy when invoked with the arguments provided to the created function.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {...(Function|Function[])} predicates The predicates to check.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var func = _.overSome(Boolean, isFinite);
	     *
	     * func('1');
	     * // => true
	     *
	     * func(null);
	     * // => true
	     *
	     * func(NaN);
	     * // => false
	     */
	    var overSome = createOver(arraySome);

	    /**
	     * Creates a function that returns the value at `path` of a given object.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Util
	     * @param {Array|string} path The path of the property to get.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': { 'b': { 'c': 2 } } },
	     *   { 'a': { 'b': { 'c': 1 } } }
	     * ];
	     *
	     * _.map(objects, _.property('a.b.c'));
	     * // => [2, 1]
	     *
	     * _.map(_.sortBy(objects, _.property(['a', 'b', 'c'])), 'a.b.c');
	     * // => [1, 2]
	     */
	    function property(path) {
	      return isKey(path) ? baseProperty(path) : basePropertyDeep(path);
	    }

	    /**
	     * The opposite of `_.property`; this method creates a function that returns
	     * the value at a given path of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Util
	     * @param {Object} object The object to query.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var array = [0, 1, 2],
	     *     object = { 'a': array, 'b': array, 'c': array };
	     *
	     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
	     * // => [2, 0]
	     *
	     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
	     * // => [2, 0]
	     */
	    function propertyOf(object) {
	      return function(path) {
	        return object == null ? undefined : baseGet(object, path);
	      };
	    }

	    /**
	     * Creates an array of numbers (positive and/or negative) progressing from
	     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
	     * `start` is specified without an `end` or `step`. If `end` is not specified
	     * it's set to `start` with `start` then set to `0`.
	     *
	     * **Note:** JavaScript follows the IEEE-754 standard for resolving
	     * floating-point values which can produce unexpected results.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @param {number} [step=1] The value to increment or decrement by.
	     * @returns {Array} Returns the new array of numbers.
	     * @example
	     *
	     * _.range(4);
	     * // => [0, 1, 2, 3]
	     *
	     * _.range(-4);
	     * // => [0, -1, -2, -3]
	     *
	     * _.range(1, 5);
	     * // => [1, 2, 3, 4]
	     *
	     * _.range(0, 20, 5);
	     * // => [0, 5, 10, 15]
	     *
	     * _.range(0, -4, -1);
	     * // => [0, -1, -2, -3]
	     *
	     * _.range(1, 4, 0);
	     * // => [1, 1, 1]
	     *
	     * _.range(0);
	     * // => []
	     */
	    var range = createRange();

	    /**
	     * This method is like `_.range` except that it populates values in
	     * descending order.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @param {number} [step=1] The value to increment or decrement by.
	     * @returns {Array} Returns the new array of numbers.
	     * @example
	     *
	     * _.rangeRight(4);
	     * // => [3, 2, 1, 0]
	     *
	     * _.rangeRight(-4);
	     * // => [-3, -2, -1, 0]
	     *
	     * _.rangeRight(1, 5);
	     * // => [4, 3, 2, 1]
	     *
	     * _.rangeRight(0, 20, 5);
	     * // => [15, 10, 5, 0]
	     *
	     * _.rangeRight(0, -4, -1);
	     * // => [-3, -2, -1, 0]
	     *
	     * _.rangeRight(1, 4, 0);
	     * // => [1, 1, 1]
	     *
	     * _.rangeRight(0);
	     * // => []
	     */
	    var rangeRight = createRange(true);

	    /**
	     * Invokes the iteratee `n` times, returning an array of the results of
	     * each invocation. The iteratee is invoked with one argument; (index).
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {number} n The number of times to invoke `iteratee`.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the array of results.
	     * @example
	     *
	     * _.times(3, String);
	     * // => ['0', '1', '2']
	     *
	     *  _.times(4, _.constant(true));
	     * // => [true, true, true, true]
	     */
	    function times(n, iteratee) {
	      n = toInteger(n);
	      if (n < 1 || n > MAX_SAFE_INTEGER) {
	        return [];
	      }
	      var index = MAX_ARRAY_LENGTH,
	          length = nativeMin(n, MAX_ARRAY_LENGTH);

	      iteratee = getIteratee(iteratee);
	      n -= MAX_ARRAY_LENGTH;

	      var result = baseTimes(length, iteratee);
	      while (++index < n) {
	        iteratee(index);
	      }
	      return result;
	    }

	    /**
	     * Converts `value` to a property path array.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {*} value The value to convert.
	     * @returns {Array} Returns the new property path array.
	     * @example
	     *
	     * _.toPath('a.b.c');
	     * // => ['a', 'b', 'c']
	     *
	     * _.toPath('a[0].b.c');
	     * // => ['a', '0', 'b', 'c']
	     *
	     * var path = ['a', 'b', 'c'],
	     *     newPath = _.toPath(path);
	     *
	     * console.log(newPath);
	     * // => ['a', 'b', 'c']
	     *
	     * console.log(path === newPath);
	     * // => false
	     */
	    function toPath(value) {
	      if (isArray(value)) {
	        return arrayMap(value, baseCastKey);
	      }
	      return isSymbol(value) ? [value] : copyArray(stringToPath(value));
	    }

	    /**
	     * Generates a unique ID. If `prefix` is given the ID is appended to it.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {string} [prefix=''] The value to prefix the ID with.
	     * @returns {string} Returns the unique ID.
	     * @example
	     *
	     * _.uniqueId('contact_');
	     * // => 'contact_104'
	     *
	     * _.uniqueId();
	     * // => '105'
	     */
	    function uniqueId(prefix) {
	      var id = ++idCounter;
	      return toString(prefix) + id;
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Adds two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.4.0
	     * @category Math
	     * @param {number} augend The first number in an addition.
	     * @param {number} addend The second number in an addition.
	     * @returns {number} Returns the total.
	     * @example
	     *
	     * _.add(6, 4);
	     * // => 10
	     */
	    var add = createMathOperation(function(augend, addend) {
	      return augend + addend;
	    });

	    /**
	     * Computes `number` rounded up to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.10.0
	     * @category Math
	     * @param {number} number The number to round up.
	     * @param {number} [precision=0] The precision to round up to.
	     * @returns {number} Returns the rounded up number.
	     * @example
	     *
	     * _.ceil(4.006);
	     * // => 5
	     *
	     * _.ceil(6.004, 2);
	     * // => 6.01
	     *
	     * _.ceil(6040, -2);
	     * // => 6100
	     */
	    var ceil = createRound('ceil');

	    /**
	     * Divide two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Math
	     * @param {number} dividend The first number in a division.
	     * @param {number} divisor The second number in a division.
	     * @returns {number} Returns the quotient.
	     * @example
	     *
	     * _.divide(6, 4);
	     * // => 1.5
	     */
	    var divide = createMathOperation(function(dividend, divisor) {
	      return dividend / divisor;
	    });

	    /**
	     * Computes `number` rounded down to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.10.0
	     * @category Math
	     * @param {number} number The number to round down.
	     * @param {number} [precision=0] The precision to round down to.
	     * @returns {number} Returns the rounded down number.
	     * @example
	     *
	     * _.floor(4.006);
	     * // => 4
	     *
	     * _.floor(0.046, 2);
	     * // => 0.04
	     *
	     * _.floor(4060, -2);
	     * // => 4000
	     */
	    var floor = createRound('floor');

	    /**
	     * Computes the maximum value of `array`. If `array` is empty or falsey
	     * `undefined` is returned.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @returns {*} Returns the maximum value.
	     * @example
	     *
	     * _.max([4, 2, 8, 6]);
	     * // => 8
	     *
	     * _.max([]);
	     * // => undefined
	     */
	    function max(array) {
	      return (array && array.length)
	        ? baseExtremum(array, identity, gt)
	        : undefined;
	    }

	    /**
	     * This method is like `_.max` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the criterion by which
	     * the value is ranked. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The iteratee invoked per element.
	     * @returns {*} Returns the maximum value.
	     * @example
	     *
	     * var objects = [{ 'n': 1 }, { 'n': 2 }];
	     *
	     * _.maxBy(objects, function(o) { return o.n; });
	     * // => { 'n': 2 }
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.maxBy(objects, 'n');
	     * // => { 'n': 2 }
	     */
	    function maxBy(array, iteratee) {
	      return (array && array.length)
	        ? baseExtremum(array, getIteratee(iteratee), gt)
	        : undefined;
	    }

	    /**
	     * Computes the mean of the values in `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @returns {number} Returns the mean.
	     * @example
	     *
	     * _.mean([4, 2, 8, 6]);
	     * // => 5
	     */
	    function mean(array) {
	      return baseMean(array, identity);
	    }

	    /**
	     * This method is like `_.mean` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the value to be averaged.
	     * The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The iteratee invoked per element.
	     * @returns {number} Returns the mean.
	     * @example
	     *
	     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
	     *
	     * _.meanBy(objects, function(o) { return o.n; });
	     * // => 5
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.meanBy(objects, 'n');
	     * // => 5
	     */
	    function meanBy(array, iteratee) {
	      return baseMean(array, getIteratee(iteratee));
	    }

	    /**
	     * Computes the minimum value of `array`. If `array` is empty or falsey
	     * `undefined` is returned.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @returns {*} Returns the minimum value.
	     * @example
	     *
	     * _.min([4, 2, 8, 6]);
	     * // => 2
	     *
	     * _.min([]);
	     * // => undefined
	     */
	    function min(array) {
	      return (array && array.length)
	        ? baseExtremum(array, identity, lt)
	        : undefined;
	    }

	    /**
	     * This method is like `_.min` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the criterion by which
	     * the value is ranked. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The iteratee invoked per element.
	     * @returns {*} Returns the minimum value.
	     * @example
	     *
	     * var objects = [{ 'n': 1 }, { 'n': 2 }];
	     *
	     * _.minBy(objects, function(o) { return o.n; });
	     * // => { 'n': 1 }
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.minBy(objects, 'n');
	     * // => { 'n': 1 }
	     */
	    function minBy(array, iteratee) {
	      return (array && array.length)
	        ? baseExtremum(array, getIteratee(iteratee), lt)
	        : undefined;
	    }

	    /**
	     * Multiply two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Math
	     * @param {number} multiplier The first number in a multiplication.
	     * @param {number} multiplicand The second number in a multiplication.
	     * @returns {number} Returns the product.
	     * @example
	     *
	     * _.multiply(6, 4);
	     * // => 24
	     */
	    var multiply = createMathOperation(function(multiplier, multiplicand) {
	      return multiplier * multiplicand;
	    });

	    /**
	     * Computes `number` rounded to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.10.0
	     * @category Math
	     * @param {number} number The number to round.
	     * @param {number} [precision=0] The precision to round to.
	     * @returns {number} Returns the rounded number.
	     * @example
	     *
	     * _.round(4.006);
	     * // => 4
	     *
	     * _.round(4.006, 2);
	     * // => 4.01
	     *
	     * _.round(4060, -2);
	     * // => 4100
	     */
	    var round = createRound('round');

	    /**
	     * Subtract two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {number} minuend The first number in a subtraction.
	     * @param {number} subtrahend The second number in a subtraction.
	     * @returns {number} Returns the difference.
	     * @example
	     *
	     * _.subtract(6, 4);
	     * // => 2
	     */
	    var subtract = createMathOperation(function(minuend, subtrahend) {
	      return minuend - subtrahend;
	    });

	    /**
	     * Computes the sum of the values in `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.4.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @returns {number} Returns the sum.
	     * @example
	     *
	     * _.sum([4, 2, 8, 6]);
	     * // => 20
	     */
	    function sum(array) {
	      return (array && array.length)
	        ? baseSum(array, identity)
	        : 0;
	    }

	    /**
	     * This method is like `_.sum` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the value to be summed.
	     * The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @param {Array|Function|Object|string} [iteratee=_.identity]
	     *  The iteratee invoked per element.
	     * @returns {number} Returns the sum.
	     * @example
	     *
	     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
	     *
	     * _.sumBy(objects, function(o) { return o.n; });
	     * // => 20
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.sumBy(objects, 'n');
	     * // => 20
	     */
	    function sumBy(array, iteratee) {
	      return (array && array.length)
	        ? baseSum(array, getIteratee(iteratee))
	        : 0;
	    }

	    /*------------------------------------------------------------------------*/

	    // Add methods that return wrapped values in chain sequences.
	    lodash.after = after;
	    lodash.ary = ary;
	    lodash.assign = assign;
	    lodash.assignIn = assignIn;
	    lodash.assignInWith = assignInWith;
	    lodash.assignWith = assignWith;
	    lodash.at = at;
	    lodash.before = before;
	    lodash.bind = bind;
	    lodash.bindAll = bindAll;
	    lodash.bindKey = bindKey;
	    lodash.castArray = castArray;
	    lodash.chain = chain;
	    lodash.chunk = chunk;
	    lodash.compact = compact;
	    lodash.concat = concat;
	    lodash.cond = cond;
	    lodash.conforms = conforms;
	    lodash.constant = constant;
	    lodash.countBy = countBy;
	    lodash.create = create;
	    lodash.curry = curry;
	    lodash.curryRight = curryRight;
	    lodash.debounce = debounce;
	    lodash.defaults = defaults;
	    lodash.defaultsDeep = defaultsDeep;
	    lodash.defer = defer;
	    lodash.delay = delay;
	    lodash.difference = difference;
	    lodash.differenceBy = differenceBy;
	    lodash.differenceWith = differenceWith;
	    lodash.drop = drop;
	    lodash.dropRight = dropRight;
	    lodash.dropRightWhile = dropRightWhile;
	    lodash.dropWhile = dropWhile;
	    lodash.fill = fill;
	    lodash.filter = filter;
	    lodash.flatMap = flatMap;
	    lodash.flatMapDeep = flatMapDeep;
	    lodash.flatMapDepth = flatMapDepth;
	    lodash.flatten = flatten;
	    lodash.flattenDeep = flattenDeep;
	    lodash.flattenDepth = flattenDepth;
	    lodash.flip = flip;
	    lodash.flow = flow;
	    lodash.flowRight = flowRight;
	    lodash.fromPairs = fromPairs;
	    lodash.functions = functions;
	    lodash.functionsIn = functionsIn;
	    lodash.groupBy = groupBy;
	    lodash.initial = initial;
	    lodash.intersection = intersection;
	    lodash.intersectionBy = intersectionBy;
	    lodash.intersectionWith = intersectionWith;
	    lodash.invert = invert;
	    lodash.invertBy = invertBy;
	    lodash.invokeMap = invokeMap;
	    lodash.iteratee = iteratee;
	    lodash.keyBy = keyBy;
	    lodash.keys = keys;
	    lodash.keysIn = keysIn;
	    lodash.map = map;
	    lodash.mapKeys = mapKeys;
	    lodash.mapValues = mapValues;
	    lodash.matches = matches;
	    lodash.matchesProperty = matchesProperty;
	    lodash.memoize = memoize;
	    lodash.merge = merge;
	    lodash.mergeWith = mergeWith;
	    lodash.method = method;
	    lodash.methodOf = methodOf;
	    lodash.mixin = mixin;
	    lodash.negate = negate;
	    lodash.nthArg = nthArg;
	    lodash.omit = omit;
	    lodash.omitBy = omitBy;
	    lodash.once = once;
	    lodash.orderBy = orderBy;
	    lodash.over = over;
	    lodash.overArgs = overArgs;
	    lodash.overEvery = overEvery;
	    lodash.overSome = overSome;
	    lodash.partial = partial;
	    lodash.partialRight = partialRight;
	    lodash.partition = partition;
	    lodash.pick = pick;
	    lodash.pickBy = pickBy;
	    lodash.property = property;
	    lodash.propertyOf = propertyOf;
	    lodash.pull = pull;
	    lodash.pullAll = pullAll;
	    lodash.pullAllBy = pullAllBy;
	    lodash.pullAllWith = pullAllWith;
	    lodash.pullAt = pullAt;
	    lodash.range = range;
	    lodash.rangeRight = rangeRight;
	    lodash.rearg = rearg;
	    lodash.reject = reject;
	    lodash.remove = remove;
	    lodash.rest = rest;
	    lodash.reverse = reverse;
	    lodash.sampleSize = sampleSize;
	    lodash.set = set;
	    lodash.setWith = setWith;
	    lodash.shuffle = shuffle;
	    lodash.slice = slice;
	    lodash.sortBy = sortBy;
	    lodash.sortedUniq = sortedUniq;
	    lodash.sortedUniqBy = sortedUniqBy;
	    lodash.split = split;
	    lodash.spread = spread;
	    lodash.tail = tail;
	    lodash.take = take;
	    lodash.takeRight = takeRight;
	    lodash.takeRightWhile = takeRightWhile;
	    lodash.takeWhile = takeWhile;
	    lodash.tap = tap;
	    lodash.throttle = throttle;
	    lodash.thru = thru;
	    lodash.toArray = toArray;
	    lodash.toPairs = toPairs;
	    lodash.toPairsIn = toPairsIn;
	    lodash.toPath = toPath;
	    lodash.toPlainObject = toPlainObject;
	    lodash.transform = transform;
	    lodash.unary = unary;
	    lodash.union = union;
	    lodash.unionBy = unionBy;
	    lodash.unionWith = unionWith;
	    lodash.uniq = uniq;
	    lodash.uniqBy = uniqBy;
	    lodash.uniqWith = uniqWith;
	    lodash.unset = unset;
	    lodash.unzip = unzip;
	    lodash.unzipWith = unzipWith;
	    lodash.update = update;
	    lodash.updateWith = updateWith;
	    lodash.values = values;
	    lodash.valuesIn = valuesIn;
	    lodash.without = without;
	    lodash.words = words;
	    lodash.wrap = wrap;
	    lodash.xor = xor;
	    lodash.xorBy = xorBy;
	    lodash.xorWith = xorWith;
	    lodash.zip = zip;
	    lodash.zipObject = zipObject;
	    lodash.zipObjectDeep = zipObjectDeep;
	    lodash.zipWith = zipWith;

	    // Add aliases.
	    lodash.entries = toPairs;
	    lodash.entriesIn = toPairsIn;
	    lodash.extend = assignIn;
	    lodash.extendWith = assignInWith;

	    // Add methods to `lodash.prototype`.
	    mixin(lodash, lodash);

	    /*------------------------------------------------------------------------*/

	    // Add methods that return unwrapped values in chain sequences.
	    lodash.add = add;
	    lodash.attempt = attempt;
	    lodash.camelCase = camelCase;
	    lodash.capitalize = capitalize;
	    lodash.ceil = ceil;
	    lodash.clamp = clamp;
	    lodash.clone = clone;
	    lodash.cloneDeep = cloneDeep;
	    lodash.cloneDeepWith = cloneDeepWith;
	    lodash.cloneWith = cloneWith;
	    lodash.deburr = deburr;
	    lodash.divide = divide;
	    lodash.endsWith = endsWith;
	    lodash.eq = eq;
	    lodash.escape = escape;
	    lodash.escapeRegExp = escapeRegExp;
	    lodash.every = every;
	    lodash.find = find;
	    lodash.findIndex = findIndex;
	    lodash.findKey = findKey;
	    lodash.findLast = findLast;
	    lodash.findLastIndex = findLastIndex;
	    lodash.findLastKey = findLastKey;
	    lodash.floor = floor;
	    lodash.forEach = forEach;
	    lodash.forEachRight = forEachRight;
	    lodash.forIn = forIn;
	    lodash.forInRight = forInRight;
	    lodash.forOwn = forOwn;
	    lodash.forOwnRight = forOwnRight;
	    lodash.get = get;
	    lodash.gt = gt;
	    lodash.gte = gte;
	    lodash.has = has;
	    lodash.hasIn = hasIn;
	    lodash.head = head;
	    lodash.identity = identity;
	    lodash.includes = includes;
	    lodash.indexOf = indexOf;
	    lodash.inRange = inRange;
	    lodash.invoke = invoke;
	    lodash.isArguments = isArguments;
	    lodash.isArray = isArray;
	    lodash.isArrayBuffer = isArrayBuffer;
	    lodash.isArrayLike = isArrayLike;
	    lodash.isArrayLikeObject = isArrayLikeObject;
	    lodash.isBoolean = isBoolean;
	    lodash.isBuffer = isBuffer;
	    lodash.isDate = isDate;
	    lodash.isElement = isElement;
	    lodash.isEmpty = isEmpty;
	    lodash.isEqual = isEqual;
	    lodash.isEqualWith = isEqualWith;
	    lodash.isError = isError;
	    lodash.isFinite = isFinite;
	    lodash.isFunction = isFunction;
	    lodash.isInteger = isInteger;
	    lodash.isLength = isLength;
	    lodash.isMap = isMap;
	    lodash.isMatch = isMatch;
	    lodash.isMatchWith = isMatchWith;
	    lodash.isNaN = isNaN;
	    lodash.isNative = isNative;
	    lodash.isNil = isNil;
	    lodash.isNull = isNull;
	    lodash.isNumber = isNumber;
	    lodash.isObject = isObject;
	    lodash.isObjectLike = isObjectLike;
	    lodash.isPlainObject = isPlainObject;
	    lodash.isRegExp = isRegExp;
	    lodash.isSafeInteger = isSafeInteger;
	    lodash.isSet = isSet;
	    lodash.isString = isString;
	    lodash.isSymbol = isSymbol;
	    lodash.isTypedArray = isTypedArray;
	    lodash.isUndefined = isUndefined;
	    lodash.isWeakMap = isWeakMap;
	    lodash.isWeakSet = isWeakSet;
	    lodash.join = join;
	    lodash.kebabCase = kebabCase;
	    lodash.last = last;
	    lodash.lastIndexOf = lastIndexOf;
	    lodash.lowerCase = lowerCase;
	    lodash.lowerFirst = lowerFirst;
	    lodash.lt = lt;
	    lodash.lte = lte;
	    lodash.max = max;
	    lodash.maxBy = maxBy;
	    lodash.mean = mean;
	    lodash.meanBy = meanBy;
	    lodash.min = min;
	    lodash.minBy = minBy;
	    lodash.multiply = multiply;
	    lodash.noConflict = noConflict;
	    lodash.noop = noop;
	    lodash.now = now;
	    lodash.pad = pad;
	    lodash.padEnd = padEnd;
	    lodash.padStart = padStart;
	    lodash.parseInt = parseInt;
	    lodash.random = random;
	    lodash.reduce = reduce;
	    lodash.reduceRight = reduceRight;
	    lodash.repeat = repeat;
	    lodash.replace = replace;
	    lodash.result = result;
	    lodash.round = round;
	    lodash.runInContext = runInContext;
	    lodash.sample = sample;
	    lodash.size = size;
	    lodash.snakeCase = snakeCase;
	    lodash.some = some;
	    lodash.sortedIndex = sortedIndex;
	    lodash.sortedIndexBy = sortedIndexBy;
	    lodash.sortedIndexOf = sortedIndexOf;
	    lodash.sortedLastIndex = sortedLastIndex;
	    lodash.sortedLastIndexBy = sortedLastIndexBy;
	    lodash.sortedLastIndexOf = sortedLastIndexOf;
	    lodash.startCase = startCase;
	    lodash.startsWith = startsWith;
	    lodash.subtract = subtract;
	    lodash.sum = sum;
	    lodash.sumBy = sumBy;
	    lodash.template = template;
	    lodash.times = times;
	    lodash.toInteger = toInteger;
	    lodash.toLength = toLength;
	    lodash.toLower = toLower;
	    lodash.toNumber = toNumber;
	    lodash.toSafeInteger = toSafeInteger;
	    lodash.toString = toString;
	    lodash.toUpper = toUpper;
	    lodash.trim = trim;
	    lodash.trimEnd = trimEnd;
	    lodash.trimStart = trimStart;
	    lodash.truncate = truncate;
	    lodash.unescape = unescape;
	    lodash.uniqueId = uniqueId;
	    lodash.upperCase = upperCase;
	    lodash.upperFirst = upperFirst;

	    // Add aliases.
	    lodash.each = forEach;
	    lodash.eachRight = forEachRight;
	    lodash.first = head;

	    mixin(lodash, (function() {
	      var source = {};
	      baseForOwn(lodash, function(func, methodName) {
	        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
	          source[methodName] = func;
	        }
	      });
	      return source;
	    }()), { 'chain': false });

	    /*------------------------------------------------------------------------*/

	    /**
	     * The semantic version number.
	     *
	     * @static
	     * @memberOf _
	     * @type {string}
	     */
	    lodash.VERSION = VERSION;

	    // Assign default placeholders.
	    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
	      lodash[methodName].placeholder = lodash;
	    });

	    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
	    arrayEach(['drop', 'take'], function(methodName, index) {
	      LazyWrapper.prototype[methodName] = function(n) {
	        var filtered = this.__filtered__;
	        if (filtered && !index) {
	          return new LazyWrapper(this);
	        }
	        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

	        var result = this.clone();
	        if (filtered) {
	          result.__takeCount__ = nativeMin(n, result.__takeCount__);
	        } else {
	          result.__views__.push({
	            'size': nativeMin(n, MAX_ARRAY_LENGTH),
	            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
	          });
	        }
	        return result;
	      };

	      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
	        return this.reverse()[methodName](n).reverse();
	      };
	    });

	    // Add `LazyWrapper` methods that accept an `iteratee` value.
	    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
	      var type = index + 1,
	          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

	      LazyWrapper.prototype[methodName] = function(iteratee) {
	        var result = this.clone();
	        result.__iteratees__.push({
	          'iteratee': getIteratee(iteratee, 3),
	          'type': type
	        });
	        result.__filtered__ = result.__filtered__ || isFilter;
	        return result;
	      };
	    });

	    // Add `LazyWrapper` methods for `_.head` and `_.last`.
	    arrayEach(['head', 'last'], function(methodName, index) {
	      var takeName = 'take' + (index ? 'Right' : '');

	      LazyWrapper.prototype[methodName] = function() {
	        return this[takeName](1).value()[0];
	      };
	    });

	    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
	    arrayEach(['initial', 'tail'], function(methodName, index) {
	      var dropName = 'drop' + (index ? '' : 'Right');

	      LazyWrapper.prototype[methodName] = function() {
	        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
	      };
	    });

	    LazyWrapper.prototype.compact = function() {
	      return this.filter(identity);
	    };

	    LazyWrapper.prototype.find = function(predicate) {
	      return this.filter(predicate).head();
	    };

	    LazyWrapper.prototype.findLast = function(predicate) {
	      return this.reverse().find(predicate);
	    };

	    LazyWrapper.prototype.invokeMap = rest(function(path, args) {
	      if (typeof path == 'function') {
	        return new LazyWrapper(this);
	      }
	      return this.map(function(value) {
	        return baseInvoke(value, path, args);
	      });
	    });

	    LazyWrapper.prototype.reject = function(predicate) {
	      predicate = getIteratee(predicate, 3);
	      return this.filter(function(value) {
	        return !predicate(value);
	      });
	    };

	    LazyWrapper.prototype.slice = function(start, end) {
	      start = toInteger(start);

	      var result = this;
	      if (result.__filtered__ && (start > 0 || end < 0)) {
	        return new LazyWrapper(result);
	      }
	      if (start < 0) {
	        result = result.takeRight(-start);
	      } else if (start) {
	        result = result.drop(start);
	      }
	      if (end !== undefined) {
	        end = toInteger(end);
	        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
	      }
	      return result;
	    };

	    LazyWrapper.prototype.takeRightWhile = function(predicate) {
	      return this.reverse().takeWhile(predicate).reverse();
	    };

	    LazyWrapper.prototype.toArray = function() {
	      return this.take(MAX_ARRAY_LENGTH);
	    };

	    // Add `LazyWrapper` methods to `lodash.prototype`.
	    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
	      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
	          isTaker = /^(?:head|last)$/.test(methodName),
	          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
	          retUnwrapped = isTaker || /^find/.test(methodName);

	      if (!lodashFunc) {
	        return;
	      }
	      lodash.prototype[methodName] = function() {
	        var value = this.__wrapped__,
	            args = isTaker ? [1] : arguments,
	            isLazy = value instanceof LazyWrapper,
	            iteratee = args[0],
	            useLazy = isLazy || isArray(value);

	        var interceptor = function(value) {
	          var result = lodashFunc.apply(lodash, arrayPush([value], args));
	          return (isTaker && chainAll) ? result[0] : result;
	        };

	        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
	          // Avoid lazy use if the iteratee has a "length" value other than `1`.
	          isLazy = useLazy = false;
	        }
	        var chainAll = this.__chain__,
	            isHybrid = !!this.__actions__.length,
	            isUnwrapped = retUnwrapped && !chainAll,
	            onlyLazy = isLazy && !isHybrid;

	        if (!retUnwrapped && useLazy) {
	          value = onlyLazy ? value : new LazyWrapper(this);
	          var result = func.apply(value, args);
	          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
	          return new LodashWrapper(result, chainAll);
	        }
	        if (isUnwrapped && onlyLazy) {
	          return func.apply(this, args);
	        }
	        result = this.thru(interceptor);
	        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
	      };
	    });

	    // Add `Array` methods to `lodash.prototype`.
	    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
	      var func = arrayProto[methodName],
	          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
	          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

	      lodash.prototype[methodName] = function() {
	        var args = arguments;
	        if (retUnwrapped && !this.__chain__) {
	          var value = this.value();
	          return func.apply(isArray(value) ? value : [], args);
	        }
	        return this[chainName](function(value) {
	          return func.apply(isArray(value) ? value : [], args);
	        });
	      };
	    });

	    // Map minified method names to their real names.
	    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
	      var lodashFunc = lodash[methodName];
	      if (lodashFunc) {
	        var key = (lodashFunc.name + ''),
	            names = realNames[key] || (realNames[key] = []);

	        names.push({ 'name': methodName, 'func': lodashFunc });
	      }
	    });

	    realNames[createHybridWrapper(undefined, BIND_KEY_FLAG).name] = [{
	      'name': 'wrapper',
	      'func': undefined
	    }];

	    // Add methods to `LazyWrapper`.
	    LazyWrapper.prototype.clone = lazyClone;
	    LazyWrapper.prototype.reverse = lazyReverse;
	    LazyWrapper.prototype.value = lazyValue;

	    // Add chain sequence methods to the `lodash` wrapper.
	    lodash.prototype.at = wrapperAt;
	    lodash.prototype.chain = wrapperChain;
	    lodash.prototype.commit = wrapperCommit;
	    lodash.prototype.next = wrapperNext;
	    lodash.prototype.plant = wrapperPlant;
	    lodash.prototype.reverse = wrapperReverse;
	    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

	    if (iteratorSymbol) {
	      lodash.prototype[iteratorSymbol] = wrapperToIterator;
	    }
	    return lodash;
	  }

	  /*--------------------------------------------------------------------------*/

	  // Export lodash.
	  var _ = runInContext();

	  // Expose lodash on the free variable `window` or `self` when available. This
	  // prevents errors in cases where lodash is loaded by a script tag in the presence
	  // of an AMD loader. See http://requirejs.org/docs/errors.html#mismatch for more details.
	  (freeWindow || freeSelf || {})._ = _;

	  // Some AMD build optimizers like r.js check for condition patterns like the following:
	  if (true) {
	    // Define as an anonymous module so, through path mapping, it can be
	    // referenced as the "underscore" module.
	    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
	      return _;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  }
	  // Check for `exports` after `define` in case a build optimizer adds an `exports` object.
	  else if (freeExports && freeModule) {
	    // Export for Node.js.
	    if (moduleExports) {
	      (freeModule.exports = _)._ = _;
	    }
	    // Export for CommonJS support.
	    freeExports._ = _;
	  }
	  else {
	    // Export to the global object.
	    root._ = _;
	  }
	}.call(this));

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)(module), (function() { return this; }())))

/***/ },
/* 6 */
/***/ function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ },
/* 7 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {module.exports = __webpack_amd_options__;

	/* WEBPACK VAR INJECTION */}.call(exports, {}))

/***/ },
/* 8 */
/***/ function(module, exports) {

	'use strict';

	(function () {
		'use strict';

		var controllerId = 'MainCtrl';
		angular.module('bds').controller(controllerId, function ($rootScope, $http, $scope, $state, HouseService, NewsService, NgMap, $window, $timeout, $location, $q) {
			var vm = this;
			//nhannc
			$scope.loaiTin = 0;
			$scope.loaiNhaDat;
			$scope.listCategory = [];
			$scope.placeSearchId = 'ChIJoRyG2ZurNTERqRfKcnt_iOc';
			init();
			initHotAds();
			//alert("placeSearchId: " + $scope.placeSearchId);

			$scope.$bus.subscribe({
				channel: 'user',
				topic: 'logged-in',
				callback: function callback(data, envelope) {
					//console.log('add new chat box', data, envelope);
					initHotAds();
				}
			});

			$scope.goToPageSearch = function (loaiTin, loaiBds) {
				if (loaiTin) $scope.loaiTin = loaiTin;
				if (loaiBds) $scope.loaiNhaDat = loaiBds;
				if ($scope.loaiNhaDat == '0') $scope.loaiNhaDat = null;

				console.log("$scope.loaiTin: " + $scope.loaiTin);
				console.log("$scope.loaiNhaDat: " + $scope.loaiNhaDat);
				console.log("$scope.placeId: " + $scope.placeSearchId);
				$state.go('search', { "place": $scope.placeSearchId, "loaiTin": $scope.loaiTin, "loaiNhaDat": $scope.loaiNhaDat }, { location: true });
			};
			$scope.goToPageNews = function (rootCatId) {
				console.log("--goToPageNews---rootCatId: " + rootCatId);
				$state.go('news', { "rootCatId": rootCatId });
			};
			vm.selectPlaceCallback = function (place) {
				$scope.searchPlaceSelected = place;
				$scope.placeSearchId = place.place_id;
			};
			$scope.setLoaiTin = function (loaiTin) {
				$scope.loaiTin = loaiTin;
			};

			//End nhannc
			vm.getAllAds = function () {
				HouseService.getAllAds().then(function (res) {
					vm.sellingHouses = res.data;
					$scope.markers = [];
					for (var i = 0; i < res.data.length; i++) {
						var ads = res.data[i];
						if (res.data[i].map) $scope.markers.push(res.data[i].map.marker);
					}
				});
			};
			vm.goDetail = function (cat, index) {
				$state.go('detail', { "adsID": cat.list[index].adsID }, { location: true });
			};

			$scope.$on('$viewContentLoaded', function () {
				//addCrudControls
				$timeout(function () {
					window.DesignCommon.adjustPage();
				}, 0);
				if ($state.current.data) $rootScope.bodyClass = $state.current.data.bodyClass;
				// window.onresize = function() {
				//     window.DesignCommon.resizePage();
				// }
			});

			vm.formatLabel = function (model) {
				if (model) return model.formatted_address;
			};

			vm.showMoreCat = function (cat) {
				$state.go('topview', { "tinhKhongDau": cat.query.diaChinh.tinhKhongDau, "huyenKhongDau": cat.query.diaChinh.huyenKhongDau, "ngayDaDang": cat.query.ngayDaDang }, { location: true });

				// cat.query.pageNo = cat.query.pageNo + 1;
				// HouseService.findAdsSpatial(cat.query).then(function(res){							
				// 	cat.list = res.data.list;	
				// 	if(cat.list.length ==0)
				// 		cat.hasMore = false;
				// });
			};

			function init() {
				//nhannc
				$scope.loaiNhaDatBan = window.RewayListValue.LoaiNhaDatBanWeb;
				$scope.loaiNhaDatThue = window.RewayListValue.LoaiNhaDatThueWeb;
				$scope.loaiNhaDatCanMua = window.RewayListValue.LoaiNhaDatCanMuaWeb;
				$scope.loaiNhaDatCanThue = window.RewayListValue.LoaiNhaDatCanThueWeb;
				/*
	   console.log("---------nhannc--------------listCategory");
	   NewsService.findRootCategory().then(function(res){
	   	var result = [];
	   	if(res.data.list){
	   		for (var i = 0; i < res.data.list.length; i++) {
	   			$scope.listCategory.push({value: res.data.list[i].cat_id, lable: res.data.list[i].cat_name});
	   		}
	   	}
	   	console.log("---------listCategory: " + $scope.listCategory.length);
	   	console.log($scope.listCategory);
	   });*/

				//NhanNc add menu Tin tuc
				console.log("---------nhannc--------------initHomeCtrl");
				if (!menuHasContainsNewsCategory()) {
					var danhMucCategory = {
						label: "Tin tức",
						value: {},
						visible: true,
						items: []
					};

					NewsService.findRootCategory().then(function (res) {
						if (res.data.list) {
							$scope.listCat = [];
							angular.forEach(res.data.list, function (myItem) {
								//var deferred = $q.defer();
								var cat = {};
								/*
	       setTimeout(function () {
	       	deferred.resolve(myItem);
	       	console.log('long-running operation inside forEach loop done');
	       }, 2000);*/
								cat.value = { menuType: 1, rootCatId: myItem.cat_id };
								cat.label = myItem.cat_name;
								var data = {
									catId: myItem.cat_id
								};
								NewsService.findCategoryByParentId(data).then(function (res) {
									if (res.data.list) {
										cat.items = [];
										for (var i = 0; i < res.data.list.length; i++) {
											cat.items.push({ value: { menuType: 1, rootCatId: res.data.list[i].cat_id }, label: res.data.list[i].cat_name });
										}
									}
								});
								$scope.listCat.push(cat);
							});
							if ($scope.listCat.length > 0) {
								for (var i = 0; i < $scope.listCat.length; i++) {
									danhMucCategory.items.push($scope.listCat[i]);
								}
							}
							$rootScope.menuitems.push(danhMucCategory);
							console.log($rootScope.menuitems);
						}
					});
				}
				//NhanNc add menu Tin tuc

				NgMap.getMap().then(function (map) {
					// $scope.map = {center: {latitude: 16.0439, longitude: 108.199 }, zoom: 10 , control: {},fit: true};
					window.RewayClientUtils.createPlaceAutoComplete(vm.selectPlaceCallback, "autoCompleteHome", map);
					$scope.PlacesService = new google.maps.places.PlacesService(map);
					$scope.PlacesService.getDetails({
						placeId: $scope.placeId
					}, function (place, status) {
						if (status === google.maps.places.PlacesServiceStatus.OK) {
							$scope.searchPlaceSelected = place;
							//var map = $scope.map.control.getGMap();
							var current_bounds = map.getBounds();
							//$scope.map.center = 
							vm.center = "[" + place.geometry.location.lat() + "," + place.geometry.location.lng() + "]";
							if (place.geometry.viewport) {
								//map.fitBounds(place.geometry.viewport);	
								//$scope.map
							} else if (!current_bounds.contains(place.geometry.location)) {
									//var new_bounds = current_bounds.extend(place.geometry.location);
									//map.fitBounds(new_bounds);
									//$digest();
								}
							$scope.$apply();
							//vm.search();
						}
					});
				});
				//end nhannc
				$scope.map = { center: { latitude: 16.0439, longitude: 108.199 }, zoom: 10, control: {} };
				$scope.options = { scrollwheel: false, labelContent: 'gia' };
				$scope.markerCount = 3;
				$scope.markers = [];
				$scope.initData = window.initData;
				//$scope.hot_ads_cat = window.hot_ads_cat;
				$scope.ads_list = window.testData;
				$scope.bodyClass = "page-home";
				for (var i = 0; i < $scope.ads_list.length; i++) {
					var ads = $scope.ads_list[i];
					if (ads.place) {
						if (ads.place.geo) {
							ads.map = {
								center: {
									latitude: ads.place.geo.lat,
									longitude: ads.place.geo.lon
								},
								marker: {
									id: i,
									coords: {
										latitude: ads.place.geo.lat,
										longitude: ads.place.geo.lon
									},
									options: {
										//labelContent : ads.gia,
										icon: 'http://chart.apis.google.com/chart?chst=d_map_pin_letter&chld=' + ads.gia + '|FF0000|000000'
									},
									data: 'test'
								},
								options: {
									scrollwheel: false
								},
								zoom: 14
							};
							$scope.map.center = { latitude: ads.map.center.latitude, longitude: ads.map.center.longitude };
							$scope.markers.push(ads.map.marker);
						}
					}
				}
			}

			function menuHasContainsNewsCategory() {
				for (var i = 0; i < $rootScope.menuitems.length; i++) {
					if ($rootScope.menuitems[i].label == "Tin tức") {
						return true;
					}
				}
				return false;
			}

			$scope.getClass = function (i) {
				var colArr = ["col col-40", "col col-35", "col col-25"];
				var reverse = false;
				var j = Math.floor(i / 3);
				if (j == 0) {
					return colArr[i % 3];
				} else if (j == 1) {
					return colArr[(i % 3 + 1) % 3];
				} else {
					return colArr[(i % 3 + 2) % 3];
				}
				/*var reverse = false;	
	   var j = Math.floor(i/2);
	   		if(i%2==0){
	   	if(j%2==0)					
	   		return "col col-40";
	   	else
	   		return "col col-60";
	   }else{
	   	if(j%2==0)					
	   		return "col col-60";
	   	else
	   		return "col col-40";	
	   }*/
			};

			function initHotAds() {
				console.log("---------------------initHotAds ---------------");
				$scope.hot_ads_cat = [];
				$timeout(function () {
					if ($rootScope.user && $rootScope.user.userID && $rootScope.user.lastSearch) {
						var lastSearch = $rootScope.user.lastSearch;
						if (lastSearch) {
							for (var i = 0; i < 3; i++) {
								$scope.hot_ads_cat.push({
									name: "",
									location: "",
									list: [{ type: "Ads" }, { type: "Ads" }, { type: "Ads" }, { type: "Ads" }, { type: "Ads" }, { type: "Ads" }]
								});
							}
							var searchDataCungLoai = {
								"loaiTin": lastSearch.loaiTin,
								"loaiNhaDat": lastSearch.loaiNhaDat,
								"limit": 9,
								"soPhongNguGREATER": 0,
								"soPhongTamGREATER": 0,
								"soTangGREATER": 0,
								"diaChinh": lastSearch.diaChinh,
								"geoBox": lastSearch.geoBox,
								"updateLastSearch": false,
								"orderBy": "ngayDangTinDESC",
								"pageNo": 1
							};
							HouseService.findAdsSpatial(searchDataCungLoai).then(function (res) {
								if (lastSearch.loaiNhaDat == 0) {
									$scope.hot_ads_cat[0].name = "Bất động sản mới đăng";
								} else {
									$scope.hot_ads_cat[0].name = window.RewayListValue.getLoaiNhaDatForDisplayNew(lastSearch.loaiTin, lastSearch.loaiNhaDat) + " mới đăng";
								}
								$scope.hot_ads_cat[0].list = res.data.list;
								$scope.hot_ads_cat[0].query = searchDataCungLoai;
								$scope.hot_ads_cat[0].hasMore = res.data.list.length > 0;
							});
							var giaBETWEEN = lastSearch.giaBETWEEN;
							var searchDataNgangGia = {
								"loaiTin": lastSearch.loaiTin,
								"loaiNhaDat": 0,
								"limit": 9,
								"soPhongNguGREATER": 0,
								"soPhongTamGREATER": 0,
								"soTangGREATER": 0,
								"giaBETWEEN": giaBETWEEN,
								"diaChinh": lastSearch.diaChinh,
								"geoBox": lastSearch.geoBox,
								"orderBy": "ngayDangTinDESC",

								"pageNo": 1
							};
							var searchDataDuoiGia = {
								"loaiTin": lastSearch.loaiTin,
								"loaiNhaDat": 0,
								"limit": 9,
								"soPhongNguGREATER": 0,
								"soPhongTamGREATER": 0,
								"soTangGREATER": 0,
								"giaBETWEEN": giaBETWEEN,
								"diaChinh": lastSearch.diaChinh,
								"geoBox": lastSearch.geoBox,
								"orderBy": "ngayDangTinDESC",

								"pageNo": 1
							};

							if (giaBETWEEN && !(giaBETWEEN[1] > 99999999999 && giaBETWEEN[0] == 0)) {
								var mean = (giaBETWEEN[0] + giaBETWEEN[1]) / 2;
								giaBETWEEN[0] = mean - mean * 0.1;
								giaBETWEEN[1] = mean + mean * 0.1;
								searchDataNgangGia.giaBETWEEN = giaBETWEEN;
								HouseService.findAdsSpatial(searchDataNgangGia).then(function (res) {
									if (searchDataNgangGia.loaiTin == 0) {
										$scope.hot_ads_cat[1].name = "Bất động sản giá từ " + giaBETWEEN[0] / 1000 + " đến " + giaBETWEEN[1] / 1000 + " tỷ";
									} else {
										$scope.hot_ads_cat[1].name = "Bất động sản giá từ " + giaBETWEEN + " đến " + giaBETWEEN[1] + " triệu/tháng";
									}

									$scope.hot_ads_cat[1].list = res.data.list;
									$scope.hot_ads_cat[1].query = searchDataNgangGia;
									$scope.hot_ads_cat[1].hasMore = res.data.list.length > 0;
								});
								searchDataDuoiGia.giaBETWEEN[0] = 0;
								searchDataDuoiGia.giaBETWEEN[1] = mean;
								HouseService.findAdsSpatial(searchDataDuoiGia).then(function (res) {
									if (searchDataDuoiGia.loaiTin == 0) {
										$scope.hot_ads_cat[2].name = "Bất động giá dưới " + mean / 1000 + " tỷ";
									} else {
										$scope.hot_ads_cat[2].name = "Bất động giá dưới " + mean + " triệu/tháng";
									}

									$scope.hot_ads_cat[2].list = res.data.list;
									$scope.hot_ads_cat[2].query = searchDataDuoiGia;
									$scope.hot_ads_cat[2].hasMore = res.data.list.length > 0;
								});
							} else {
								if ($rootScope.user.lastViewAds) {
									HouseService.detailAds({ adsID: $rootScope.user.lastViewAds }).then(function (res) {
										if (res.data.status == 0) {
											giaBETWEEN[0] = res.data.ads.gia - res.data.ads.gia * 0.1;
											giaBETWEEN[1] = res.data.ads.gia + res.data.ads.gia * 0.1;
											searchDataNgangGia.giaBETWEEN = giaBETWEEN;
											$scope.hot_ads_cat[1].name = "Bất động ngang giá " + res.data.ads.giaFmt;
											HouseService.findAdsSpatial(searchDataNgangGia).then(function (res) {
												$scope.hot_ads_cat[1].list = res.data.list;
												$scope.hot_ads_cat[1].query = searchDataNgangGia;
												$scope.hot_ads_cat[1].hasMore = res.data.list.length > 0;
											});
											searchDataDuoiGia.giaBETWEEN[0] = 0;
											searchDataDuoiGia.giaBETWEEN[1] = res.data.ads.gia;
											$scope.hot_ads_cat[2].name = "Bất động giá dưới " + res.data.ads.giaFmt;
											HouseService.findAdsSpatial(searchDataDuoiGia).then(function (res) {
												$scope.hot_ads_cat[2].list = res.data.list;
												$scope.hot_ads_cat[2].query = searchDataDuoiGia;
												$scope.hot_ads_cat[2].hasMore = res.data.list.length > 0;
											});
										}
									});
								}
								// giaBETWEEN = [1000000000, 2000000000]
							}
						}
					} else {
							for (var i = 0; i < 4; i++) {
								$scope.hot_ads_cat.push({
									name: "",
									location: "",
									list: [{ type: "Ads" }, { type: "Ads" }, { type: "Ads" }, { type: "Ads" }, { type: "Ads" }, { type: "Ads" }]
								});
							}

							HouseService.findAdsAndDuanForHomePage({ limit: 9 }).then(function (res) {
								$scope.hot_ads_cat[0].name = res.data.list[0].name;
								$scope.hot_ads_cat[0].type = res.data.list[0].type;
								$scope.hot_ads_cat[0].location = res.data.list[0].location;
								$scope.hot_ads_cat[0].list = res.data.list[0].list;
								$scope.hot_ads_cat[1].name = res.data.list[1].name;
								$scope.hot_ads_cat[1].type = res.data.list[1].type;
								$scope.hot_ads_cat[1].location = res.data.list[1].location;
								$scope.hot_ads_cat[1].list = res.data.list[1].list;
								//Array.prototype.push.apply($scope.hot_ads_cat, res.data.list);
								//console.log(res);
							});
							//var ngayDaDang = Date.today().add(-700).days();
							var searchNhaXemNhieuNhatTaiHanoi = {
								"loaiTin": 0,
								"loaiNhaDat": 0,
								"limit": 6,
								"soPhongNguGREATER": 0,
								"soPhongTamGREATER": 0,
								"soTangGREATER": 0,
								"ngayDaDang": 300,
								"diaChinh": {
									tinh: "ha-noi"
								},
								"orderBy": "luotXemDESC",
								"pageNo": 1
							};
							HouseService.findAdsSpatial(searchNhaXemNhieuNhatTaiHanoi).then(function (res) {
								$scope.hot_ads_cat[2].name = "Bất động sản xem nhiều nhất tại Hà Nội";
								$scope.hot_ads_cat[2].list = res.data.list;
								$scope.hot_ads_cat[2].query = searchNhaXemNhieuNhatTaiHanoi;
								$scope.hot_ads_cat[2].hasMore = res.data.list.length > 0;
							});
							var searchNhaXemNhieuNhatTaiHcm = {
								"loaiTin": 0,
								"loaiNhaDat": 0,
								"limit": 6,
								"soPhongNguGREATER": 0,
								"soPhongTamGREATER": 0,
								"soTangGREATER": 0,
								"ngayDaDang": 300,
								"diaChinh": {
									tinh: "ho-chi-minh"
								},
								"orderBy": "luotXemDESC",
								"pageNo": 1
							};
							HouseService.findAdsSpatial(searchNhaXemNhieuNhatTaiHcm).then(function (res) {
								$scope.hot_ads_cat[3].name = "Bất động sản xem nhiều nhất tại thành phố Hồ Chí Minh";
								$scope.hot_ads_cat[3].list = res.data.list;
								$scope.hot_ads_cat[3].query = searchNhaXemNhieuNhatTaiHcm;
								$scope.hot_ads_cat[3].hasMore = res.data.list.length > 0;
							});
						}

					/*var searchDiaChinh = {
	    	tinh: "ha-noi",
	    	huyen: "hoan-kiem"
	    }
	    if(lastSearch && lastSearch.diaChinh){
	    	searchDiaChinh = lastSearch.diaChinh;
	    }
	    var searchLogoGiamGia = {
	    	"loaiTin": lastSearch.loaiTin,
	    	"loaiNhaDat": lastSearch.loaiNhaDat, 
	    	"limit": 10,
	    	"soPhongNguGREATER": 0,
	    			"soPhongTamGREATER": 0,
	    			"soTangGREATER": 0,
	    	"diaChinh": lastSearch.diaChinh,
	    	"geoBox": lastSearch.geoBox,
	    	"updateLastSearch": false,
	      	"orderBy": "ngayDangTinDESC",
	      	"pageNo": 1
	    }	*/
					// data = {
					// 	"gia": 800,
					// 	"limit": 4
					// };

					// $scope.hot_ads_cat = [];

					// HouseService.findBelowPriceAds(data).then(function(res){
					// 	var resultBelow = [];
					// 	if(res.data.list){
					// 		for (var i = 0; i < res.data.list.length; i++) {
					// 			resultBelow.push(res.data.list[i].default);
					// 		}
					// 		$scope.hot_ads_cat.push({
					// 			name: "Nhà dưới mức giá 800 triệu",
					// 			location: "Hà Nội",
					// 			list: resultBelow
					// 		})
					// 	}
					// 	console.log("HouseService.findBelowPriceAds: " + resultBelow.length);
					// 	console.log(resultBelow);
					// });

					// var data = {
					// 	"ngayDangTin": '25-04-2016',
					// 	"limit": 4
					// };
					// console.log("getRecentBds + data: " + data);
					// HouseService.findRencentAds(data).then(function(res){
					// 	var result = [];
					// 	if(res.data.list){
					// 		for (var i = 0; i < res.data.list.length; i++) {
					// 			result.push(res.data.list[i].default);
					// 		}
					// 		$scope.hot_ads_cat.push({
					// 			name: "Bất động sản mới đăng",
					// 			location: "Hà Nội",
					// 			list: result
					// 		})
					// 	}
					// 	console.log("HouseService.findRencentAds: " + result.length);
					// 	console.log(result);
					// });
				}, 0);
			}
			vm.getLocation = function () {
				if (navigator.geolocation) {
					navigator.geolocation.getCurrentPosition(vm.showPosition);
				} else {
					alert("Geolocation is not supported by this browser.");
				}
			};
			vm.showPosition = function (position) {
				var lat = position.coords.latitude;
				var lng = position.coords.longitude;
				//$scope.map.center.latitude = lat;
				//$scope.map.center.longitude = lng;
				var marker = {
					id: $scope.markerCount,
					coords: {
						latitude: lat,
						longitude: lng
					},
					options: {
						labelContent: 'You are here'
					},
					data: 'restaurant'
				};
				$scope.markers.push(marker);
				$scope.markerCount = $scope.markerCount + 1;
				$scope.$digest();
			};

			if ($state.current.name == "resetPassword") {
				var token = $location.search().token;
				$scope.$bus.publish({
					channel: 'login',
					topic: 'show login',
					data: { label: "Đăng nhập để chat", token: token }
				});
			}
		});

		// /* @ngInject */
		// function MainCtrl() {

		// }
	})();

/***/ },
/* 9 */
/***/ function(module, exports) {

	'use strict';

	(function () {
		'use strict';

		var controllerId = 'SearchCtrl';
		angular.module('bds').controller(controllerId, function ($rootScope, $http, $scope, $state, HouseService, NgMap, $window, $timeout) {
			var vm = this;
			$scope.center = "Hanoi Vietnam";
			$scope.placeId = $state.params.place;
			$scope.loaiTin = $state.params.loaiTin;
			$scope.loaiNhaDat = $state.params.loaiNhaDat;

			vm.soPhongNguList = window.RewayListValue.getNameValueArray(window.RewayListValue.SoPhongNgu);
			vm.soPhongTamList = window.RewayListValue.getNameValueArray(window.RewayListValue.SoPhongTam);
			vm.soTangList = window.RewayListValue.getNameValueArray(window.RewayListValue.SoTang);
			vm.huongNhaList = window.RewayListValue.getNameValueArray(window.RewayListValue.HuongNha);
			vm.radiusInKmList = window.RewayListValue.getNameValueArray(window.RewayListValue.RadiusInKm);

			vm.khoangGiaList = window.RewayListValue.khoangGia;
			if ($scope.loaiTin == 1) {
				vm.khoangGiaList = window.RewayListValue.khoangGiaThue;
			}
			vm.khoangGia = vm.khoangGiaList[vm.khoangGiaList.length - 1];

			vm.khoangDienTichList = window.RewayListValue.khoangDienTich;
			vm.khoangDienTich = vm.khoangDienTichList[vm.khoangDienTichList.length - 1];
			//vm.khoangGiaSelected = {};

			//use for menu
			vm.loaiNhaDatBanMenu = window.RewayListValue.LoaiNhaDatBanWeb;
			vm.loaiNhaDatThueMenu = window.RewayListValue.LoaiNhaDatThueWeb;
			vm.loaiNhaDatCanMuaMenu = window.RewayListValue.LoaiNhaDatCanMuaWeb;
			vm.loaiNhaDatCanThueMenu = window.RewayListValue.LoaiNhaDatCanThueWeb;
			vm.loaiTinTuc = window.RewayListValue.LoaiTinTuc;
			vm.onePoint = false;

			vm.diaChinh = {
				tinh: $state.params.tinh,
				tinhKhongDau: $state.params.tinh,
				huyen: $state.params.huyen,
				huyenKhongDau: $state.params.huyen,
				xa: $state.params.xa,
				xaKhongDau: $state.params.xa
			};
			vm.packageID = $state.params.packageID;
			vm.viewMode = $state.params.viewMode;
			if (!vm.viewMode) vm.viewMode = "map";

			if (!$scope.placeId) $scope.placeId = 'ChIJoRyG2ZurNTERqRfKcnt_iOc';
			if (!$scope.loaiTin) $scope.loaiTin = 0;
			if (!$scope.loaiNhaDat) $scope.loaiNhaDat = 0;
			vm.loaiTin = $scope.loaiTin;

			vm.stateName = $state.current.name;

			console.log("placeId: " + $scope.placeId);
			console.log("loaiTin: " + $scope.loaiTin);
			console.log("loaiNhaDat: " + $scope.loaiNhaDat);
			console.log("placeId: " + $scope.placeId);

			vm.viewTemplateUrl = "search.tpl.html"; //1=map 2= list

			if ($state.params.viewMode == "list") {
				vm.viewTemplateUrl = "list.tpl.html";
			} else if ($state.params.viewMode == "map") {
				vm.viewTemplateUrl = "search.tpl.html";
			}

			vm.showList = function () {
				vm.viewTemplateUrl = "list.tpl.html";
				vm.viewMode = "list";
				$scope.bodyClass = "page-list";
			};

			vm.goPackage = function (packageID) {
				$state.go('package', { "packageID": packageID, "viewMode": vm.viewMode }, { location: true });
			};

			// vm.likeAds = function(index){
			//      if(!$rootScope.user.userID){
			//        alert("Đăng nhập để like");
			//        return;
			//      }
			//      HouseService.likeAds({adsID: vm.ads_list[index].adsID,userID: $rootScope.user.userID}).then(function(res){
			//        alert(res.data.msg);
			//        console.log(res);
			//      });
			//    };
			vm.likeAdsClass = "like";
			vm.likeAds = function (index, adsID) {
				if (!$rootScope.user.userID) {
					$scope.$bus.publish({
						channel: 'login',
						topic: 'show login',
						data: { label: "Đăng nhập để lưu BĐS" }
					});
					return;
				}
				HouseService.likeAds({ adsID: vm.ads_list[index].adsID, userID: $rootScope.user.userID }).then(function (res) {
					//alert(res.data.msg);
					//console.log(res);
					if (res.data.success == true || res.data.status == 1) {
						vm.ads_list[index].liked = true;
					}
				});
			};
			vm.gotoDiachinh = function (diachinh, type) {
				/*if(type==1){
	   	vm.diaChinh.huyen = null;
	   	vm.diaChinh.xa = null;
	   }else if(type==2){
	   	vm.diaChinh.xa = null;
	   }
	   //alert(diachinh +" " + type);
	   		
	   vm.searchData = {
	   	"loaiTin": $scope.loaiTin,
	   	"loaiNhaDat": $scope.loaiNhaDat, 
	   	"loaiNhaDats": [],
	     	"giaBETWEEN": [vm.price_min,vm.price_max],
	     	"soPhongNguGREATER": vm.soPhongNguList[0].value,
	     	"soPhongTamGREATER": vm.soPhongTamList[0].value,
	     	"soTangGREATER": vm.soTangList[0].value,
	     	"dienTichBETWEEN": [0,vm.dien_tich_max],
	     	"huongNha": vm.huongNhaList[0].value,
	     	"huongNhas": [],
	     	//"geoBox": [  vm.map.getBounds().H.j,  vm.map.getBounds().j.j ,vm.map.getBounds().H.H, vm.map.getBounds().j.H],
	     	"limit": vm.pageSize,
	     	"orderBy": vm.sortOptions[0].value,
	     	diaChinh: vm.diaChinh,
	     	"pageNo": 1
	   };
	   
	   //vm.searchData.geoBox = undefined;
	   vm.search();*/
				if (type == 1) {
					vm.diaChinh.huyen = null;
					vm.diaChinh.xa = null;
				} else if (type == 2) {
					vm.diaChinh.xa = null;
				}

				$state.go('searchdc', { "tinh": vm.diaChinh.tinh, "huyen": vm.diaChinh.huyen, "xa": vm.diaChinh.xa, "loaiTin": $scope.loaiTin, "loaiNhaDat": $scope.loaiNhaDat, "viewMode": vm.viewMode }, { location: true });
			};
			vm.showMap = function () {
				vm.viewTemplateUrl = "search.tpl.html";
				vm.viewMode = "map";
				$scope.bodyClass = "page-search";
			};
			vm.blankName = false;
			vm.saveSearch = function () {

				if (!vm.saveSearchName) {
					vm.blankName = true;
					return;
				}

				if (!$rootScope.user.userID) {
					$scope.$bus.publish({
						channel: 'login',
						topic: 'show login',
						data: { label: "Đăng nhập để lưu tìm kiếm" }
					});
					return;
				}
				var data = {
					query: vm.searchData,
					userID: $rootScope.user.userID,
					saveSearchName: vm.saveSearchName
				};

				HouseService.saveSearch(data).then(function (res) {
					//alert(res.data.msg);
					if (res.data.success) {
						vm.blankName = false;
						vm.saveSearchName = '';
						vm.nameSaveSearch = false;
					}
				});
			};

			//vm.sell_price_list_from = window.RewayListValue.sell_steps;
			/*vm.sell_price_list_from = [
	  	{
	          value: 0,
	          lable: "Giá từ 0",
	          position: 0
	      },
	  ];
	  Array.prototype.push.apply(vm.sell_price_list_from, window.RewayListValue.sell_steps);*/
			vm.sell_price_list_from = window.RewayListValue.khoangGia;

			vm.radius_steps = [{
				value: 2,
				lable: "Bán kính 2km",
				position: 0
			}];
			Array.prototype.push.apply(vm.radius_steps, vm.radiusInKmList);

			vm.sell_price_list_to = [];
			Array.prototype.push.apply(vm.sell_price_list_to, window.RewayListValue.sell_steps);
			vm.sell_price_list_to.push({
				value: window.RewayListValue.filter_max_value.value,
				lable: window.RewayListValue.filter_max_value.lable,
				position: vm.sell_price_list_to.length
			});
			vm.sell_dien_tich_list_from = [{
				value: 0,
				lable: "Diện tích từ 0",
				position: 0
			}];
			Array.prototype.push.apply(vm.sell_dien_tich_list_from, window.RewayListValue.dientich_steps);
			vm.sell_dien_tich_list_to = [];
			Array.prototype.push.apply(vm.sell_dien_tich_list_to, window.RewayListValue.dientich_steps);
			vm.sell_dien_tich_list_to.push({
				value: window.RewayListValue.filter_max_value.value,
				lable: window.RewayListValue.filter_max_value.lable,
				position: vm.sell_price_list_to.length
			});

			vm.sortOptions = window.RewayListValue.sortHouseOptions;
			vm.sortBy = vm.sortOptions[0].value;
			vm.price_min = 0;
			vm.price_max = window.RewayListValue.filter_max_value.value;
			vm.dien_tich_min = 0;
			vm.dien_tich_max = window.RewayListValue.filter_max_value.value;
			vm.zoomMode = "auto";

			vm.totalResultCounts = 0;
			vm.currentPage = 0;
			vm.lastPageNo = 0;
			vm.startPageNo = 0;
			vm.pageSize = 30;

			vm.searchData = {
				"loaiTin": $scope.loaiTin,
				"loaiNhaDat": $scope.loaiNhaDat,
				"loaiNhaDats": [],
				"giaBETWEEN": [vm.price_min, vm.price_max],
				"khoangGia": vm.khoangGia,
				"khoangDienTich": vm.khoangDienTich,
				"soPhongNguGREATER": vm.soPhongNguList[0].value,
				"soPhongTamGREATER": vm.soPhongTamList[0].value,
				"soTangGREATER": vm.soTangList[0].value,
				"dienTichBETWEEN": [0, vm.dien_tich_max],
				"huongNha": vm.huongNhaList[0].value,
				"huongNhas": [],
				"radiusInKm": 2,
				"userID": $rootScope.user.userID,
				//"geoBox": [  vm.map.getBounds().H.j,  vm.map.getBounds().j.j ,vm.map.getBounds().H.H, vm.map.getBounds().j.H],
				"limit": vm.pageSize,
				"orderBy": vm.sortOptions[0].value,
				"pageNo": 1
			};

			vm.mouseover = function (e, i) {
				vm.showDetail(i);
			};
			vm.goDetail = function (event, i) {
				$state.go('detail', { "adsID": vm.ads_list[i].adsID }, { location: true });
			};
			vm.goDetailHighlight = function () {
				$state.go('detail', { "adsID": vm.highlightAds.adsID }, { location: true });
			};
			vm.mouseout = function () {
				//vm.hideDetail();
			};
			vm.click = function (e, i) {
				console.log('click');
			};

			vm.showDetail = function (i) {
				vm.highlightAds = vm.ads_list[i];
				if (vm.ads_list[i].place) {
					if (vm.ads_list[i].place.geo) {
						vm.map.showInfoWindow("iw", "m_" + i);
					}
				}
			};

			vm.hideDetail = function () {
				vm.map.hideInfoWindow('iw');
			};
			// window.DesignCommon.adjustPage();
			$scope.$on('$viewContentLoaded', function () {
				$timeout(function () {
					window.DesignCommon.adjustPage();
				}, 0);
				if ($state.params) {
					//$scope.bodyClass = $state.current.data.bodyClass;
					$rootScope.bodyClass = "page-search";
					if ($state.params.viewMode == "list") {
						$rootScope.bodyClass = "page-list";
					}
				}
			});
			vm.selectPlaceCallback = function (place) {
				$scope.searchPlaceSelected = place;
				$scope.placeSearchId = place.place_id;
				vm.diaChinh = window.RewayPlaceUtil.getDiaChinhFromGooglePlace(place);
				//$scope.markers = [];
				/*vm.marker = {
	   		id: -1,
	   		coords: {latitude: place.geometry.location.lat(), longitude: place.geometry.location.lng()},
	   		content: 'you are here'
	   };*/
				//$scope.markers.push(marker);
				//$scope.markers.push

				/*$scope.markers = [];
	   var marker = {
	   		id: -1,
	   		coords: {latitude: place.geometry.location.lat(), longitude: place.geometry.location.lng()},
	   		content: 'you are here'
	   }
	   if(place.geometry.viewport){
	   	vm.searchData.geoBox = [  place.geometry.viewport.H.j,  place.geometry.viewport.j.j ,place.geometry.viewport.H.H, vm.map.getBounds().j.H];
	   	vm.searchData.geoBox = [place.geometry.viewport.getSouthWest().lat(),place.geometry.viewport.getSouthWest().lng(),place.geometry.viewport.getNorthEast().lat(),place.geometry.viewport.getNorthEast().lng()]
	   vm.searchData.radiusInKm = undefined;
	   }else{
	   var placeData = {
	    			placeId: place.place_id,
	      		relandTypeName : window.RewayPlaceUtil.getTypeName(place),
	       			radiusInKm :  1,
	   		currentLocation: undefined
	   }
	   vm.searchData.place = placeData;
	    vm.searchData.geoBox = undefined;
	   }*/
				$scope.center = "[" + place.geometry.location.lat() + ", " + place.geometry.location.lng() + "]";

				/*$scope.markers.push(marker);
	   $scope.$apply();
	   		if(place.geometry.viewport){
	   vm.map.fitBounds(place.geometry.viewport);	
	   //$scope.map
	   }
	   		//$scope.map.fit = false;
	   
	   vm.map.setCenter(place.geometry.location);*/
				//$scope.$apply();
				//$scope.map.refresh();
				vm.goToPageSearch();
				//vm.search();
			};

			vm.showStreetView = function (event) {
				vm.map.getStreetView().setPosition(vm.highlightAds.streetviewLatLng);
				vm.map.getStreetView().setVisible(true);
				event.stopPropagation();
				//return false;
			};

			$scope.goToPageNews = function (loaiTinTuc) {
				console.log("--goToPageNews---loaiTinTuc: " + loaiTinTuc);
				$state.go('news');
			};

			vm.goToPageSearch = function () {
				$state.go('search', { "place": $scope.placeSearchId, "loaiTin": $scope.loaiTin, "loaiNhaDat": $scope.loaiNhaDat, "viewMode": vm.viewMode }, { location: true });
				//vm.search();
			};

			vm.goToPageSearchMenu = function (loaiTin, loaiNhaDat) {
				vm.searchData.loaiTin = loaiTin;
				vm.searchData.loaiNhaDat = loaiNhaDat;
				vm.search();
			};

			vm.firstPage = function (callback) {
				vm.searchPage(1);
			};
			vm.nextPage = function (callback) {
				vm.searchPage(vm.currentPage + 1);
			};
			vm.lastPage = function (callback) {
				vm.searchPage(vm.lastPageNo);
			};
			vm.previousPage = function (callback) {
				vm.searchPage(vm.currentPage - 1);
			};
			vm.updateStreetview = function (ads, fn) {
				var STREETVIEW_MAX_DISTANCE = 100;
				var latLng = new google.maps.LatLng(ads.place.geo.lat, ads.place.geo.lon);
				var streetViewService = new google.maps.StreetViewService();
				streetViewService.getPanoramaByLocation(latLng, STREETVIEW_MAX_DISTANCE, function (streetViewPanoramaData, status, res) {
					if (status === google.maps.StreetViewStatus.OK) {
						ads.streetviewLatLng = streetViewPanoramaData.location.latLng;
					}
				});
			};
			vm.searchPage = function (i, callback) {
				vm.searchData.pageNo = i;
				if (vm.searchData.place) vm.searchData.place.radiusInKm = vm.searchData.radiusInKm;
				vm.searchData.userID = $rootScope.user.userID;
				vm.searchData.giaBETWEEN[0] = vm.searchData.khoangGia.value.min;
				vm.searchData.giaBETWEEN[1] = vm.searchData.khoangGia.value.max;
				vm.searchData.dienTichBETWEEN[0] = vm.searchData.khoangDienTich.value.min;
				vm.searchData.dienTichBETWEEN[1] = vm.searchData.khoangDienTich.value.max;

				// vm.khoangGiaList[]
				// vm.searchData.khoangGia
				HouseService.findAdsSpatial(vm.searchData).then(function (res) {
					var result = res.data.list;
					//vm.totalResultCounts = res.data.list.length;

					for (var i = 0; i < result.length; i++) {
						var ads = result[i];
						ads.giaFmt = ads.giaFmtForWeb;

						if ($rootScope.alreadyLike(ads.adsID) == true) ads.liked = true;
						var length = result.length;
						var fn = function fn() {
							if (i < length) {
								vm.updateStreetview(result[i], fn);
							}
						};
						fn();

						result[i].index = i;
						if (ads.huongNha) {
							ads.huongNha = window.RewayListValue.getHuongNhaDisplay(ads.huongNha);
						} else {
							ads.huongNha = "";
						}
						if (result[i].place) {
							if (result[i].place.geo) {
								result[i].map = {
									center: {
										latitude: result[i].place.geo.lat,
										longitude: result[i].place.geo.lon
									},
									marker: {
										id: i,
										coords: {
											latitude: result[i].place.geo.lat,
											longitude: result[i].place.geo.lon
										},
										content: result[i].giaFmt,
										data: 'test'
									},
									options: {
										scrollwheel: false
									},
									zoom: 14
								};
							}
						}
					}
					vm.ads_list = res.data.list;
					$scope.markers = [];
					for (var i = 0; i < res.data.list.length; i++) {
						var ads = res.data.list[i];
						if (res.data.list[i].map) $scope.markers.push(res.data.list[i].map.marker);
					}
					/*if(vm.ads_list.length==0){
	    	vm.zoomMode = "false";
	    }else{
	    	vm.zoomMode = "auto";
	    }*/

					vm.currentPageStart = vm.pageSize * (vm.searchData.pageNo - 1) + 1;
					vm.currentPageEnd = vm.currentPageStart + res.data.list.length - 1;
					vm.currentPage = vm.searchData.pageNo;

					$timeout(function () {
						$('body').scrollTop(0);
					}, 0);

					if ($rootScope.isLoggedIn()) {
						$rootScope.user.lastSearch = vm.searchData;
					}

					if (vm.ads_list && vm.ads_list.length > 0) {
						if (vm.diaChinh) HouseService.findDuAnHotByDiaChinhForSearchPage({ diaChinh: vm.diaChinh }).then(function (res) {
							if (res.data.success == true) vm.duAnNoiBat = res.data.duAnNoiBat;
						});
					}

					if (callback) callback();
				});
			};

			vm.search = function (callback) {
				if (vm.searchData.place) vm.searchData.place.radiusInKm = vm.searchData.radiusInKm;
				vm.searchData.userID = $rootScope.user.userID;
				vm.searchData.giaBETWEEN[0] = vm.searchData.khoangGia.value.min;
				vm.searchData.giaBETWEEN[1] = vm.searchData.khoangGia.value.max;
				vm.searchData.dienTichBETWEEN[0] = vm.searchData.khoangDienTich.value.min;
				vm.searchData.dienTichBETWEEN[1] = vm.searchData.khoangDienTich.value.max;
				HouseService.countAds(vm.searchData).then(function (res) {
					vm.totalResultCounts = res.data.countResult;
					$scope.markers = [];
					vm.ads_list = [];
					if (vm.totalResultCounts > 0) {
						vm.currentPage = 1;
						vm.lastPageNo = Math.ceil(vm.totalResultCounts / vm.pageSize);
						vm.currentPageStart = 1;
						vm.currentPageEnd = vm.totalResultCounts >= vm.pageSize ? vm.pageSize - 1 : vm.totalResultCounts - 1;
					} else {
						vm.currentPage = 0;
						vm.lastPageNo = 0;
						vm.startPageNo = 0;
					}
					vm.searchPage(1, callback);
				});
			};
			vm.formatLabel = function (model) {
				if (model) return model.formatted_address;
			};

			var events = {
				places_changed: function places_changed(searchBox) {}
			};
			$scope.searchbox = { template: 'searchbox.tpl.html', events: events };

			NgMap.getMap().then(function (map) {
				// $scope.map = {center: {latitude: 16.0439, longitude: 108.199 }, zoom: 10 , control: {},fit: true};
				vm.map = map;
				google.maps.event.addListener(map, "dragend", function () {
					vm.searchData.geoBox = [vm.map.getBounds().getSouthWest().lat(), vm.map.getBounds().getSouthWest().lng(), vm.map.getBounds().getNorthEast().lat(), vm.map.getBounds().getNorthEast().lng()];
					$scope.center = "[" + vm.map.getCenter().lat() + "," + vm.map.getCenter().lng() + "]";
					vm.marker = {
						id: -1,
						coords: { latitude: vm.map.getCenter().lat(), longitude: vm.map.getCenter().lng() },
						content: 'you are here'
					};
					vm.search();
				});

				window.RewayClientUtils.createPlaceAutoComplete(vm.selectPlaceCallback, "autocomplete", map);
				$scope.PlacesService = new google.maps.places.PlacesService(map);
				if (vm.stateName == "package") {
					//TODO implement later wih packageID in Ads
					vm.searchData = {
						"loaiTin": $scope.loaiTin,
						"loaiNhaDat": $scope.loaiNhaDat,
						"loaiNhaDats": [],
						"giaBETWEEN": [vm.price_min, vm.price_max],
						"soPhongNguGREATER": vm.soPhongNguList[0].value,
						"soPhongTamGREATER": vm.soPhongTamList[0].value,
						"khoangGia": vm.khoangGia,
						"khoangDienTich": vm.khoangDienTich,
						"soTangGREATER": vm.soTangList[0].value,
						"dienTichBETWEEN": [0, vm.dien_tich_max],
						"huongNha": vm.huongNhaList[0].value,
						"huongNhas": [],
						"userID": $rootScope.user.userID,
						//"geoBox": [  vm.map.getBounds().H.j,  vm.map.getBounds().j.j ,vm.map.getBounds().H.H, vm.map.getBounds().j.H],
						"limit": vm.pageSize,
						"orderBy": vm.sortOptions[0].value,
						diaChinh: vm.diaChinh,
						"pageNo": 1
					};
					vm.searchData.diaChinh = vm.diaChinh;
					vm.search();
				} else if (vm.stateName == "searchdc") {
					vm.searchData = {
						"loaiTin": $scope.loaiTin,
						"loaiNhaDat": $scope.loaiNhaDat,
						"loaiNhaDats": [],
						"giaBETWEEN": [vm.price_min, vm.price_max],
						"soPhongNguGREATER": vm.soPhongNguList[0].value,
						"soPhongTamGREATER": vm.soPhongTamList[0].value,
						"khoangGia": vm.khoangGia,
						"khoangDienTich": vm.khoangDienTich,
						"soTangGREATER": vm.soTangList[0].value,
						"dienTichBETWEEN": [0, vm.dien_tich_max],
						"huongNha": vm.huongNhaList[0].value,
						"huongNhas": [],
						"userID": $rootScope.user.userID,
						//"geoBox": [  vm.map.getBounds().H.j,  vm.map.getBounds().j.j ,vm.map.getBounds().H.H, vm.map.getBounds().j.H],
						"limit": vm.pageSize,
						"orderBy": vm.sortOptions[0].value,
						diaChinh: vm.diaChinh,
						"pageNo": 1
					};
					vm.searchData.diaChinh = vm.diaChinh;
					vm.search();
				} else if (vm.stateName == "search") {
					$scope.PlacesService.getDetails({
						placeId: $scope.placeId
					}, function (place, status) {
						if (status === google.maps.places.PlacesServiceStatus.OK) {
							$scope.searchPlaceSelected = place;
							//var map = $scope.map.control.getGMap();

							/*$scope.markers = [
	      {
	      id: 0,
	      coords: {
	      	latitude: 	place.geometry.location.lat(),
	      	longitude: 	place.geometry.location.lng()
	      },
	      content: 'you are here'
	      }
	      ];*/
							var googlePlace = $scope.searchPlaceSelected;
							vm.diaChinh = window.RewayPlaceUtil.getDiaChinhFromGooglePlace(googlePlace);
							vm.diaChinh.tinhKhongDau = vm.diaChinh.tinh;
							vm.diaChinh.huyenKhongDau = vm.diaChinh.huyen;
							vm.diaChinh.xaKhongDau = vm.diaChinh.xa;

							vm.placeSearchText = googlePlace.formatted_address;

							vm.marker = {
								id: -1,
								coords: { latitude: place.geometry.location.lat(), longitude: place.geometry.location.lng() },
								content: 'you are here'
							};

							vm.onePoint = window.RewayPlaceUtil.isOnePoint(googlePlace);

							// if($scope.searchPlaceSelected.geometry.viewport){
							if (vm.onePoint == false) {
								console.log("Tim ads for Tinh Huyen Xa: " + googlePlace.formatted_address);
								vm.searchData.geoBox = [googlePlace.geometry.viewport.getSouthWest().lat(), googlePlace.geometry.viewport.getSouthWest().lng(), googlePlace.geometry.viewport.getNorthEast().lat(), googlePlace.geometry.viewport.getNorthEast().lng()];
								//vm.searchData.radiusInKm = undefined;
							} else {
									console.log("Tim ads for dia diem: " + googlePlace.formatted_address);
									//data.radiusInKm = "10";
									var placeData = {
										placeId: googlePlace.place_id,
										relandTypeName: window.RewayPlaceUtil.getTypeName(googlePlace),
										radiusInKm: vm.searchData.radiusInKm,
										currentLocation: undefined
									};
									vm.searchData.place = placeData;
									vm.searchData.geoBox = undefined;
								}

							vm.search(function () {
								vm.zoomMode = "auto";
								var current_bounds = map.getBounds();
								//$scope.map.center = 
								vm.map.setCenter(place.geometry.location);
								//$scope.center = "["+place.geometry.location.lat() +"," +place.geometry.location.lng() +"]";
								if (place.geometry.viewport) {
									map.fitBounds(place.geometry.viewport);
									//$scope.map
								} else if (!current_bounds.contains(place.geometry.location)) {
										//var new_bounds = current_bounds.extend(place.geometry.location);
										//map.fitBounds(new_bounds);
										//$digest();
									}
							});

							//vm.map.refresh();
							//$scope.$apply();	
						}
					});
				}
			});
			init();

			function init() {

				vm.dimension = {
					height: $(window).height(),
					width: $(window).width()
				};

				// $scope.map = {center: {latitude: 16.0439, longitude: 108.199 }, zoom: 10 , control: {},fit: true};
				//$rootScope.center = "Hanoi Vietnam";
				vm.provinces = [{
					value: "Hanoi",
					lable: "Hà Nội"
				}, {
					value: "Da nang",
					lable: "Đà Nãng"

				}];

				vm.districts = [{
					value: "Cau Giay",
					lable: "Cầu Giấy"
				}, {
					value: "Dong Da",
					lable: "Đống Đa"

				}];

				vm.findDuAnHot = function () {
					HouseService.findDuAnHotByDiaChinhForSearchPage(vm.searchData).then(function (res) {
						if (res.data.success == true) {
							vm.duAnHot = res.data.duAn;
						}
					});
				};
				vm.findDuAnHot();

				vm.loaiNhaDatList = [];
				if (vm.loaiTin == 0) {
					vm.loaiNhaDatList = window.RewayListValue.getNameValueArray(window.RewayListValue.LoaiNhaDatBan);
				} else {
					vm.loaiNhaDatList = window.RewayListValue.getNameValueArray(window.RewayListValue.LoaiNhaDatThue);
				}

				vm.moreFilter = {
					loaiNhaDat: vm.loaiNhaDatList.slice(),
					huongNha: vm.huongNhaList.slice(),
					soPhongNgu: vm.soPhongNguList[0].value,
					soPhongTam: vm.soPhongTamList[0].value,
					soTang: vm.soTangList[0].value
				};
				vm.moreFilter.loaiNhaDat[0].selected = true;
				vm.moreFilter.huongNha[0].selected = true;
				vm.changeFilterLoaiNhaDat = function (k) {
					var newvalue = vm.moreFilter.loaiNhaDat[k].selected;
					if (k == 0) {
						if (newvalue == true) {
							for (var i = 1; i < vm.moreFilter.loaiNhaDat.length; i++) {
								vm.moreFilter.loaiNhaDat[i].selected = false;
							}
						}
					} else {
						if (newvalue == true) vm.moreFilter.loaiNhaDat[0].selected = false;
					}
				};
				vm.changeFilterHuongNha = function (k) {
					var newvalue = vm.moreFilter.huongNha[k].selected;
					if (k == 0) {
						if (newvalue == true) {
							for (var i = 1; i < vm.moreFilter.huongNha.length; i++) {
								vm.moreFilter.huongNha[i].selected = false;
							}
						}
					} else {
						if (newvalue == true) vm.moreFilter.huongNha[0].selected = false;
					}
				};

				vm.filter = function () {
					// vm.searchData.giaBETWEEN[vm.moreFilter.priceFrom, vm.moreFilter.priceTo];
					vm.searchData.soPhongNguGREATER = vm.moreFilter.soPhongNgu;
					vm.searchData.soTangGREATER = vm.moreFilter.soTang;
					vm.searchData.soPhongTamGREATER = vm.moreFilter.soPhongTam;
					vm.searchData.loaiNhaDat = [];
					vm.searchData.huongNha = [];
					for (var i = 0; i < vm.moreFilter.loaiNhaDat.length; i++) {
						if (vm.moreFilter.loaiNhaDat[i].selected == true) {
							vm.searchData.loaiNhaDat.push(vm.moreFilter.loaiNhaDat[i].value);
						}
					}
					for (var i = 0; i < vm.moreFilter.huongNha.length; i++) {
						if (vm.moreFilter.huongNha[i].selected == true) {
							vm.searchData.huongNha.push(vm.moreFilter.huongNha[i].value);
						}
					}
					// vm.searchData.loaiNhaDat=vm.moreFilter.loaiNhaDat;
					$("a[data-action='more']").click();
					//$('filter').trigger("click");
					vm.search(function () {
						vm.searchData.soPhongNguGREATER = undefined;
						vm.searchData.soTangGREATER = undefined;
						vm.searchData.soPhongNguGREATER = undefined;
						vm.searchData.soPhongTamGREATER = undefined;
						vm.searchData.huongNha = undefined;
						vm.searchData.loaiNhaDat = vm.loaiNhaDatList[0].value;
					});
				};

				$scope.options = { scrollwheel: false, labelContent: 'gia' };
				$scope.markerCount = 3;
				/*$scope.markers = [
	   	{
	   						id: 0,
	   						coords: {
	   							latitude: 	16.0439,
	   							longitude: 	108.199
	   						},
	   						content: 'you are here'
	   					}
	   ];*/
				//$scope.initData = window.initData;
				//$scope.hot_ads_cat = window.hot_ads_cat;
				//vm.ads_list = window.testData;
				$scope.bodyClass = "page-home";

				if (vm.viewMode == "list") {}
			}
		});
	})();

/***/ },
/* 10 */
/***/ function(module, exports) {

	'use strict';

	(function () {
	    'use strict';

	    var controllerId = 'NewsCtrl';
	    angular.module('bds').controller(controllerId, function ($rootScope, $http, $scope, $state, $sce, NewsService, $window) {
	        var vm = this;
	        $scope.rootCatId = $state.params.rootCatId;
	        $scope.listArticle = [];
	        vm.totalResultCounts = 0;
	        vm.currentPage = 0;
	        vm.lastPageNo = 0;
	        vm.startPageNo = 0;
	        vm.pageSize = 8;
	        vm.searchData = {
	            "catId": $scope.rootCatId,
	            "pageNo": 1,
	            "pageSize": vm.pageSize
	        };
	        initNews();
	        vm.formatHtml = function (doc) {
	            if (doc) return $sce.trustAsHtml(doc);
	        };

	        //$scope.trustAsHtml1 = $sce.trustAsHtml("<span style='background-color: rgb(255, 255, 255)'>6 điều cần cân nhắc trước khi mua nhà</span>");
	        //$scope.trustAsHtml = $sce.trustAsHtml("&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;6 điều cần cân nhắc trước khi mua nhà&lt;/span&gt;");

	        vm.goDetail = function (articleId) {
	            $state.go('newsDetail', { "rootCatId": $scope.rootCatId, "articleId": articleId }, { location: true });
	        };

	        function initNews() {
	            console.log("---------------------initNews1 ---------------catId: " + $scope.rootCatId);
	            var data = {
	                catId: $scope.rootCatId
	            };
	            NewsService.countNews(data).then(function (res) {
	                console.log(res.data.countArticle);
	                vm.totalResultCounts = res.data.countArticle;
	                if (vm.totalResultCounts > 0) {
	                    vm.currentPage = 1;
	                    vm.lastPageNo = Math.ceil(vm.totalResultCounts / vm.pageSize);
	                    vm.currentPageStart = 1;
	                    vm.currentPageEnd = vm.totalResultCounts >= vm.pageSize ? vm.pageSize - 1 : vm.totalResultCounts - 1;
	                } else {
	                    vm.currentPage = 0;
	                    vm.lastPageNo = 0;
	                    vm.startPageNo = 0;
	                }
	                vm.searchPage(1);
	            });
	            NewsService.findHightestArticle(data).then(function (res) {
	                console.log("------NewsService.findHightestArticle-----");
	                if (res.data.list) {
	                    if (res.data.length > 0) {
	                        $scope.hightestArticles = [];
	                        for (var i = 1; i < res.data.length; i++) {
	                            $scope.hightestArticles.push(res.data.list[i]);
	                        }
	                    }
	                }
	                console.log($scope.article);
	                console.log("----NewsService.findHightestArticle finished ");
	            });
	            NewsService.findHotArticle(data).then(function (res) {
	                console.log("------NewsService.findHotArticle-----");
	                if (res.data.list) {
	                    if (res.data.length > 0) {
	                        $scope.defaultHotArticle = res.data.list[0];
	                        if (res.data.length > 1) {
	                            $scope.hotArticles = [];
	                            for (var i = 1; i < res.data.length; i++) {
	                                $scope.hotArticles.push(res.data.list[i]);
	                            }
	                        }
	                    }
	                }
	                console.log($scope.article);
	                console.log("----NewsService.findHotArticle finished ");
	            });
	        }

	        vm.firstPage = function (callback) {
	            vm.searchPage(1);
	        };
	        vm.nextPage = function (callback) {
	            vm.searchPage(vm.currentPage + 1);
	        };
	        vm.lastPage = function (callback) {
	            vm.searchPage(vm.lastPageNo);
	        };
	        vm.previousPage = function (callback) {
	            vm.searchPage(vm.currentPage - 1);
	        };

	        vm.searchPage = function (i) {
	            vm.searchData.pageNo = i;
	            NewsService.findNews(vm.searchData).then(function (res) {
	                console.log(res.data.list);
	                if (res.data.list) {
	                    if (res.data.length > 0) {
	                        $scope.firstArticle = res.data.list[0];
	                        if (res.data.length > 1) {
	                            $scope.listArticle = [];
	                            for (var i = 1; i < res.data.length; i++) {
	                                $scope.listArticle.push(res.data.list[i]);
	                            }
	                        }
	                    }
	                }
	                for (var i = 0; i < res.data.length; i++) {
	                    console.log($scope.listArticle[i]);
	                }
	                console.log("---------listArticle: " + $scope.listArticle.length);

	                vm.currentPageStart = vm.pageSize * (vm.searchData.pageNo - 1) + 1;
	                vm.currentPageEnd = vm.currentPageStart + res.data.list.length - 1;
	                vm.currentPage = vm.searchData.pageNo;
	                console.log("NewsService.findNews finished ");
	            });
	        };
	    });
	})();

/***/ },
/* 11 */
/***/ function(module, exports) {

	'use strict';

	(function () {
	    'use strict';

	    var controllerId = 'NewsDetailCtrl';
	    angular.module('bds').controller(controllerId, function ($rootScope, $http, $scope, $state, $sce, NewsService, $window) {
	        var vm = this;
	        $scope.rootCatId = $state.params.rootCatId;
	        $scope.articleId = $state.params.articleId;
	        $scope.article = null;
	        console.log("----------newsDetail: " + $scope.rootCatId + "----" + $scope.articleId);
	        initNewsDetail();

	        vm.goDetail = function (articleId) {
	            $state.go('newsDetail', { "rootCatId": $scope.rootCatId, "articleId": articleId }, { location: true });
	        };

	        vm.formatHtml = function (doc) {
	            if (doc) return $sce.trustAsHtml(doc);
	        };

	        function initNewsDetail() {
	            console.log("---------------------initNews ---------------catId: " + $scope.articleId);
	            var data = {
	                catId: $scope.rootCatId,
	                articleId: $scope.articleId
	            };

	            NewsService.increaseRating(data).then(function (res) {
	                console.log("------NewsService.increaseRating-----");
	            });

	            vm.searchData = {
	                "catId": $scope.rootCatId,
	                "pageNo": 1,
	                "pageSize": 4
	            };

	            NewsService.findNews(vm.searchData).then(function (res) {
	                console.log(res.data.list);
	                if (res.data.list) {
	                    if (res.data.length > 0) {
	                        $scope.listArticle = [];
	                        for (var i = 0; i < res.data.length; i++) {
	                            $scope.listArticle.push(res.data.list[i]);
	                        }
	                    }
	                }
	                console.log("NewsService.findNews finished ");
	            });

	            NewsService.findNewsDetail(data).then(function (res) {
	                console.log("------newsDetailCtrl.findNewsDetail-----");
	                if (res.data.article) {
	                    $scope.article = res.data.article;
	                }
	                //console.log($scope.article);
	                console.log("----newsDetailCtrl.findNewsDetail finished ");
	            });
	            NewsService.findHightestArticle(data).then(function (res) {
	                console.log("------newsDetailCtrl.findHightestArticle-----");
	                if (res.data.list) {
	                    if (res.data.length > 0) {
	                        $scope.hightestArticles = [];
	                        for (var i = 1; i < res.data.length; i++) {
	                            $scope.hightestArticles.push(res.data.list[i]);
	                        }
	                    }
	                }
	                console.log($scope.article);
	                console.log("----newsDetailCtrl.findHightestArticle finished ");
	            });
	            NewsService.findHotArticle(data).then(function (res) {
	                console.log("------newsDetailCtrl.findHotArticle-----");
	                if (res.data.list) {
	                    if (res.data.length > 0) {
	                        $scope.defaultHotArticle = res.data.list[0];
	                        if (res.data.length > 1) {
	                            $scope.hotArticles = [];
	                            for (var i = 1; i < res.data.length; i++) {
	                                $scope.hotArticles.push(res.data.list[i]);
	                            }
	                        }
	                    }
	                }
	                console.log($scope.article);
	                console.log("----newsDetailCtrl.findHotArticle finished ");
	            });
	        }
	    });
	})();

/***/ },
/* 12 */
/***/ function(module, exports) {

	'use strict';

	(function () {
		'use strict';

		var controllerId = 'DetailCtrl';
		angular.module('bds').controller(controllerId, function ($rootScope, $http, $scope, $state, HouseService, NgMap, $window, $timeout) {
			var vm = this;
			vm.viewMap = false;
			$scope.chat_visible = true;
			vm.likeAdsClass = "fa-heart-o";
			$scope.$on('$viewContentLoaded', function () {
				$timeout(function () {
					window.DesignCommon.adjustPage();
				}, 0);
				if ($state.current.data) {
					$rootScope.bodyClass = "page-detail";
				}
			});

			vm.marker = {
				id: 1,
				coords: {
					latitude: 16.0439,
					longitude: 108.199
				},
				content: undefined,
				data: 'test'
			};
			vm.center = [21.0363818591319, 105.80105538518103];

			vm.diaChinh = {};

			vm.goToPageSearch = function () {
				if (vm.placeSearchId) {
					$state.go('search', { "place": vm.placeSearchId, "loaiTin": vm.ads.loaiTin, "loaiNhaDat": vm.ads.loaiNhaDat }, { location: true });
				} else {
					$state.go('searchdc', { "tinh": vm.ads.place.diaChinh.tinhKhongDau, "huyen": vm.ads.place.diaChinh.huyenKhongDau, "loaiTin": vm.ads.loaiTin, "loaiNhaDat": vm.ads.loaiNhaDat, "viewMode": "map" }, { location: true });
				}
			};

			vm.showChat = function (user) {
				if (!$rootScope.user.userID) {
					$scope.$bus.publish({
						channel: 'login',
						topic: 'show login',
						data: { label: "Đăng nhập để chat" }
					});
					return;
				}
				$scope.$bus.publish({
					channel: 'chat',
					topic: 'new user',
					data: { userID: user.userID, avatar: user.avatar, name: user.name, ads: { adsID: vm.ads.adsID, title: vm.ads.title, cover: vm.ads.image.cover } }
				});
			};
			vm.likeAds = function (adsID) {
				if (!$rootScope.user.userID) {
					$scope.$bus.publish({
						channel: 'login',
						topic: 'show login',
						data: { label: "Đăng nhập để lưu BĐS" }
					});
					return;
				}
				HouseService.likeAds({ adsID: vm.adsID, userID: $rootScope.user.userID }).then(function (res) {
					//alert(res.data.msg);
					//console.log(res);
					if (res.data.success == true || res.data.status == 1) {
						vm.likeAdsClass = "fa-heart";
					}
				});
			};
			$timeout(function () {
				$('body').scrollTop(0);
			}, 0);
			vm.adsID = $state.params.adsID;
			HouseService.detailAds({ adsID: vm.adsID, userID: $rootScope.user.userID }).then(function (res) {
				//console.log("res.data " + res.data.ads);
				$rootScope.user.lastViewAds = vm.adsID;
				vm.ads = res.data.ads;
				vm.marker.coords.latitude = vm.ads.place.geo.lat;
				vm.marker.coords.longitude = vm.ads.place.geo.lon;
				vm.center = [vm.ads.place.geo.lat, vm.ads.place.geo.lon];
				vm.marker.content = vm.ads.giaFmt;
				// vm.diaChinh = vm.ads.place.diaChinh;
				$scope.email = vm.ads.dangBoi.email;
				vm.ads.place.diaChinh.tinhKhongDau = window.RewayUtil.locDau(vm.ads.place.diaChinh.tinh);
				vm.ads.place.diaChinh.huyenKhongDau = window.RewayUtil.locDau(vm.ads.place.diaChinh.huyen);
				vm.placeSearchText = vm.ads.place.diaChinh.huyen + "," + vm.ads.place.diaChinh.tinh;
				// vm.diaChinh = {
				// 	tinh:vm.ads.place.diaChinh.tinh,
				// 	tinhKhongDau: vm.ads.place.diaChinh.tinhKhongDau,
				// 	huyen: vm.ads.place.diaChinh.huyen,
				// 	huyenKhongDau: vm.ads.place.diaChinh.huyenKhongDau,
				// 	xa: vm.ads.place.diaChinh.xa,
				// 	xaKhongDau: vm.ads.place.diaChinh.xaKhongDau
				// }				
				if ($rootScope.alreadyLike(vm.ads.adsID) == true) vm.likeAdsClass = "fa-heart";
				var price_min = 0;
				var price_max = window.RewayListValue.filter_max_value.value;
				var dien_tich_min = 0;
				var dien_tich_max = window.RewayListValue.filter_max_value.value;

				var pageSize = 8;

				vm.name = "";
				vm.phone = "";
				vm.email = "";
				vm.content = "Tôi muốn tìm hiểu thêm thông tin về bất động sản tại " + window.location.href + ", xin vui lòng liên hệ lại sớm.";
				vm.requestInfoClass = "btn-submit";
				vm.clearInfoRequest = function () {
					vm.name = "";
					vm.phone = "";
					vm.email = "";
					vm.content = "Tôi muốn tìm hiểu thêm thông tin về bất động sản tại " + window.location.href + ", xin vui lòng liên hệ lại sớm.";
				};
				if (vm.ads.place.diaChinh) {
					HouseService.findDuAnHotByDiaChinhForDetailPage({ diaChinh: vm.ads.place.diaChinh }).then(function (res) {
						if (res.data.success == true) vm.listDuAnNoiBat = res.data.listDuAnNoiBat;
					});
				}

				vm.userLoggedIn = function () {
					vm.name = $rootScope.user.userName;
					if ($rootScope.user.phone) vm.phone = parseInt($rootScope.user.phone);
					vm.email = $rootScope.user.userEmail;
					if (vm.ads.dangBoi.userID == $rootScope.user.userID) vm.showLuotXem = true;
					if (vm.ads.dangBoi.email == $rootScope.user.userEmail) vm.showLuotXem = true;
				};

				$scope.$bus.subscribe({
					channel: 'user',
					topic: 'logged-in',
					callback: function callback(data, envelope) {
						//console.log('add new chat box', data, envelope);
						vm.userLoggedIn();
					}
				});
				if ($rootScope.isLoggedIn()) {
					vm.userLoggedIn();
				}

				vm.requestInfo = function () {
					if ($('#form-info-request').valid()) {
						vm.requestInfoClass = 'btn-submit-disabled';
						HouseService.requestInfo({
							name: vm.name,
							phone: vm.phone,
							email: vm.email,
							content: vm.content,
							adsUrl: window.location.href
						}).then(function (res) {
							console.log(JSON.stringify(res.data));
							vm.requestInfoClass = 'btn-submit';
							vm.clearInfoRequest();
						});
					}
				};
				vm.requestInfoPopup = function () {
					if ($('#form-info-request-popup').valid()) {
						vm.requestInfoClass = 'btn-submit-disabled';
						HouseService.requestInfo({
							name: vm.name,
							phone: vm.phone,
							email: vm.email,
							content: vm.content,
							adsUrl: window.location.href
						}).then(function (res) {
							console.log(JSON.stringify(res.data));
							vm.requestInfoClass = 'btn-submit';
							vm.clearInfoRequest();
						});
					}
				};

				vm.goDetail = function (adsID) {
					$state.go('detail', { "adsID": adsID }, { location: true });
				};
				//find bds cung loai moi dang
				var searchDataCungLoai = {
					"loaiTin": vm.ads.loaiTin,
					"loaiNhaDat": vm.ads.loaiNhaDat,
					"diaChinh": {
						tinh: vm.ads.place.diaChinh.tinhKhongDau,
						huyen: vm.ads.place.diaChinh.huyenKhongDau
					},
					"limit": pageSize,
					"orderBy": "ngayDangTinDESC",
					"pageNo": 1
				};

				HouseService.findAdsSpatial(searchDataCungLoai).then(function (res) {
					vm.bdsCungLoaiMoiDang = [];
					for (var i = 0; i < res.data.length; i++) {
						if (res.data.list[i].adsID == vm.ads.adsID) {} else if (vm.bdsCungLoaiMoiDang.length < 7) {
							vm.bdsCungLoaiMoiDang.push(res.data.list[i]);
						}
					}
				});
				//find bds ngang gia
				var searchDataNgangGia = {
					"loaiTin": vm.ads.loaiTin,
					"diaChinh": {
						tinh: vm.ads.place.diaChinh.tinhKhongDau,
						huyen: vm.ads.place.diaChinh.huyenKhongDau
					},
					"limit": pageSize,
					"orderBy": "ngayDangTinDESC",
					"giaBETWEEN": [vm.ads.gia - 0.1 * vm.ads.gia, vm.ads.gia + 0.1 * vm.ads.gia],
					"pageNo": 1
				};

				HouseService.findAdsSpatial(searchDataNgangGia).then(function (res) {
					vm.bdsNgangGia = [];
					for (var i = 0; i < res.data.length; i++) {
						if (res.data.list[i].adsID == vm.ads.adsID) {} else if (vm.bdsNgangGia.length < 7) {
							vm.bdsNgangGia.push(res.data.list[i]);
						}
					}
				});
				//find bds gia nho hon
				var searchDataGiaNhoHon = {
					"loaiTin": vm.ads.loaiTin,
					"diaChinh": {
						tinh: vm.ads.place.diaChinh.tinhKhongDau,
						huyen: vm.ads.place.diaChinh.huyenKhongDau
					},
					"limit": pageSize,
					"orderBy": "ngayDangTinDESC",
					"giaBETWEEN": [0, vm.ads.gia],
					"pageNo": 1
				};
				HouseService.findAdsSpatial(searchDataGiaNhoHon).then(function (res) {
					vm.bdsNgangNhoHon = [];
					for (var i = 0; i < res.data.length; i++) {
						if (res.data.list[i].adsID == vm.ads.adsID) {} else if (vm.bdsNgangNhoHon.length < 7) {
							vm.bdsNgangNhoHon.push(res.data.list[i]);
						}
					}
				});
			});
			vm.selectPlaceCallback = function (place) {
				vm.searchPlaceSelected = place;
				vm.placeSearchId = place.place_id;
				vm.goToPageSearch();
			};

			vm.init = function () {
				NgMap.getMap().then(function (map) {
					// $scope.map = {center: {latitude: 16.0439, longitude: 108.199 }, zoom: 10 , control: {},fit: true};
					window.RewayClientUtils.createPlaceAutoComplete(vm.selectPlaceCallback, "autoComplete", map);
					$scope.PlacesService = new google.maps.places.PlacesService(map);
					/*$scope.PlacesService.getDetails({
	    	placeId: $scope.placeId
	    }, function(place, status) {
	    	if (status === google.maps.places.PlacesServiceStatus.OK) {
	    		$scope.searchPlaceSelected = place;
	     		//var map = $scope.map.control.getGMap();
	     		var current_bounds = map.getBounds();
	     		//$scope.map.center =  
	     		vm.center = "["+place.geometry.location.lat() +"," +place.geometry.location.lng() +"]";
	     		if(place.geometry.viewport){
	     			//map.fitBounds(place.geometry.viewport);	
	     			//$scope.map
	     		} else if( !current_bounds.contains( place.geometry.location ) ){
	     			//var new_bounds = current_bounds.extend(place.geometry.location);
	     			//map.fitBounds(new_bounds);
	     			//$digest();
	     		}
	     		$scope.$apply();
	     		//vm.search();
	    	}
	    });*/
				});
				/*vm.findDuAnHot = function(){
	   HouseService.findDuAnHotByDiaChinhForDetailPage(vm.searchData).then(function(res){
	   if(res.data.success==true){
	   vm.listDuAnHot =  res.data.listDuAnHot;
	   }			
	   });
	   }
	   vm.findDuAnHot();*/

				var infoRequestRules = {
					email: {
						email: true,
						required: function required(element) {
							return $("#form-info-request [name = 'phone']").val() == '';
						}
					},
					name: {
						required: true
					},
					phone: {
						number: true,
						minlength: 9,
						required: function required(element) {
							return $("#form-info-request [name = 'email']").val() == '';
						}
					}
				};
				var infoRequestMessages = {
					email: {
						required: "Nhập số điện thoại hoặc email",
						email: 'Email không hợp lệ'
					},
					phone: {
						number: 'Số điện thoại không hợp lệ',
						minlength: 'Số điện thoại ít nhất 9 ký tự',
						required: "Nhập số điện thoại hoặc email"
					},
					name: {
						required: 'Xin nhập họ tên'
					}
				};

				var formRequest = $('#form-info-request');
				formRequest.validate({
					rules: infoRequestRules,
					messages: infoRequestMessages
				});
				formRequest = $('#form-info-request-popup');
				formRequest.validate({
					rules: infoRequestRules,
					messages: infoRequestMessages
				});
			};

			vm.init();

			vm.showPopupImage = function (e) {
				e.preventDefault();
				$('#box-popup').fadeIn(500, function () {
					$('#total').html(vm.getSlider().getSlideCount());
					vm.getSlider().reloadSlider();
					vm.getSlider().goToSlide(0);
				});
			};
			vm.hidePopup = function (e) {
				e.preventDefault();
				$('#box-popup').fadeOut(500, function () {
					vm.getSlider().destroySlider();
				});
			};
			vm.showPopupRequestForm = true;
			vm.toggleContactPopup = function (e) {
				e.preventDefault();
				var target = $(e.target).attr('href'),
				    text = $(e.target).text(),
				    change = $(e.target).data('toggle-text');
				$('#box-popup').toggleClass('open');
				vm.showPopupRequestForm = !vm.showPopupRequestForm;
				//$(this).data('toggle-text', text).html('<i class="fa fa-angle-right"></i> ' + change).attr('title', change);
				vm.getSlider().reloadSlider();
			};

			vm.getSlider = function () {
				if (vm.slider) return vm.slider;
				var slider_popup = $('#slider-popup');
				vm.slider = slider_popup.bxSlider({
					//mode: 'fade',
					preloadImages: 'visible',
					auto: false,
					speed: 1000,
					autoHover: true,
					pause: 5000,
					pager: false,
					minSlides: 1,
					maxSlides: 1,
					controls: true,
					onSliderLoad: function onSliderLoad(currentIndex) {
						$('#count').html(currentIndex + 1);
					},
					onSlideAfter: function onSlideAfter($slideElement, oldIndex, newIndex) {
						$('#count').html(newIndex + 1);
					}
				});
				return vm.slider;
			};
		});
	})();

/***/ },
/* 13 */
/***/ function(module, exports) {

	'use strict';

	(function () {
		'use strict';

		var controllerId = 'ChatPanelCtrl';
		angular.module('bds').controller(controllerId, function (socket, $compile, $rootScope, $http, $scope, $state, HouseService, NgMap, $window) {
			var vm = this;
			vm.boxPositions = [];
			vm.chatBoxes = [];

			vm.isSameDate;

			/**
	  Handle in comming message
	  */
			socket.on("new message", function (data) {
				if (vm.chatBoxes.hasOwnProperty(data.fromUserID) == false) {
					//someone just start chat with you need to popup the chat box for that user
					vm.addNewChat({ userID: data.fromUserID, name: data.fromFullName, avatar: data.fromUserAvatar });
					vm.chatBoxes[data.fromUserID].hidden == true;
				}

				// vm.chatBoxes[data.fromUserID].messages.push(data);
				data.date = new Date(data.date);
				window.RewayClientUtils.addChatMessage(vm.chatBoxes[data.fromUserID], data);

				/*socket.emit("confirm read",msg, function(data){
	   	console.log("mark message as read");				
	   });*/

				$scope.$apply();
				//$('#' + data.emailFrom + ' ' + '.chat-history').scrollTop($('.chat-history')[0].scrollHeight);
				$('#' + vm.chatBoxes[data.fromUserID].position + '_chat-history').scrollTop($('#' + vm.chatBoxes[data.fromUserID].position + '_chat-history')[0].scrollHeight);
			});

			socket.on("user-start-typing", function (data) {
				if (vm.chatBoxes.hasOwnProperty(data.fromUserID) == true) {
					vm.chatBoxes[data.fromUserID].status = vm.chatBoxes[data.fromUserID].user.name + " is typing...";
					$scope.$apply();
				}
			});

			socket.on("user-stop-typing", function (data) {
				if (vm.chatBoxes.hasOwnProperty(data.fromUserID) == true) {
					vm.chatBoxes[data.fromUserID].status = "";
					$scope.$apply();
				}
			});

			socket.on("unread-messages", function (data) {
				for (var i = 0, len = data.length; i < len; i++) {
					var msg = data[i].default;
					msg.date = new Date(msg.date);
					vm.addNewChat({ userID: msg.fromUserID, name: msg.fromFullName, avatar: msg.fromUserAvatar });
					vm.chatBoxes[msg.fromUserID].hidden = true;
					window.RewayClientUtils.addChatMessage(vm.chatBoxes[msg.fromUserID], msg);
					console.log("msg[" + i + "] " + msg);
				}
				socket.emit("read-messages", data, function (res) {
					console.log("mark messages as read " + res);
				});
			});

			vm.addNewChat = function (user) {
				if (vm.chatBoxes.hasOwnProperty(user.userID)) {} else {
					var count = Object.keys(vm.chatBoxes).length;
					var rightPos = 24 + Math.min(2, count) * 300;
					vm.chatBoxes[user.userID] = {
						user: user,
						onlineClass: "online",
						hidden: false,
						ads: user.ads,
						status: "",
						position: rightPos,
						messages: []
					};
					var count = Object.keys(vm.chatBoxes).length - 1;
					var rightPos = 24 + Math.min(2, count) * 300;
					var divElement = angular.element(document.querySelector('#chat-container'));
					var appendHtml = $compile('<bds-chat chatbox="cp.chatBoxes[\'' + user.userID + '\']" visible="$root.chat_visible" right="' + rightPos + '" useremail="\'' + user.email + '\'"></bds-chat>')($scope);
					divElement.append(appendHtml);
				}
			};
			vm.reOrderChat = function () {
				var id = 0;
				for (var userID in vm.chatBoxes) {
					var rightPos = 24 + Math.min(2, id) * 300;
					vm.chatBoxes[userID].position = rightPos;
					id = id + 1;
				}
			};

			$scope.$bus.subscribe({
				channel: 'chat',
				topic: 'new user',
				callback: function callback(data, envelope) {
					console.log('add new chat box', data, envelope);
					vm.addNewChat(data);
				}
			});
			$scope.$bus.subscribe({
				channel: 'chat',
				topic: 'close chat',
				callback: function callback(data, envelope) {
					console.log('close chat', data, envelope);
					delete vm.chatBoxes[data];
					vm.reOrderChat();
				}
			});

			$scope.$bus.subscribe({
				channel: 'chat',
				topic: 'new message',
				callback: function callback(data, envelope) {
					console.log('new message arrive', data, envelope);
					//vm.addNewChat(data);
				}
			});
		});
	})();

/***/ },
/* 14 */
/***/ function(module, exports) {

	'use strict';

	(function () {
		'use strict';

		var controllerId = 'ProfileCtrl';
		angular.module('bds').controller(controllerId, function ($rootScope, $http, $scope, $state, HouseService, Upload, NgMap, $window, $timeout) {
			var vm = this;
			vm.viewMap = false;
			$scope.chat_visible = true;
			$scope.$on('$viewContentLoaded', function () {
				$timeout(function () {
					window.DesignCommon.adjustPage();
				}, 0);
				if ($state.current.data) {
					$rootScope.bodyClass = "page-home";
				}
			});
			vm.init = function () {
				vm.userID = $state.params.userID;
				HouseService.profile({ userID: vm.userID }).then(function (res) {
					if (res.data.success == true) {
						vm.user = res.data.user;
						vm.original = angular.copy(vm.user);
					}
				});
			};

			vm.init();

			vm.prepareUpdateProfileData = function () {
				return {
					newPass: vm.newPass,
					userID: vm.user.id,
					email: vm.user.email,
					phone: "'" + vm.user.phone + "'",
					fullName: vm.user.fullName,
					diaChi: vm.user.diaChi,
					avatar: vm.user.avatar
				};
			};

			vm.updateProfile = function (callback) {
				var data = vm.prepareUpdateProfileData();
				HouseService.updateProfile(data).then(function (res) {
					console.log(JSON.stringify(res));
					vm.edit = false;
					if (callback) callback(res);
				});
			};
			vm.reset = function () {
				//$('#form-register').reset();
				vm.user = angular.copy(vm.original);
				vm.edit = false;
			};
			vm.uploadFile = function (file) {
				var data = vm.prepareUpdateProfileData();
				// var ft = vm.catchFile(files[i]);
				//  		var isImageFile = (ft == "image");

				Upload.upload({
					url: '/api/upload',
					data: { files: file }
				}).then(function (resp) {
					console.log('Success ' + resp.config.data.files.name + 'uploaded. Response: ' + resp.data);
					//here we need to emit message
					// if(ft == "image")
					// 	vm.sendImage(resp.data.image_file);
					// else
					vm.user.avatar = resp.data.file.url;
					vm.updateProfile(function (res) {
						$('[data-close="avatar"]').click();
					});
				}, function (resp) {
					console.log('Error status: ' + resp.status);
				}, function (evt) {
					var progressPercentage = parseInt(100.0 * evt.loaded / evt.total);
					//console.log('progress: ' + progressPercentage + '% ' + evt.config.data.file.name);
				});
			};
		});
	})();

/***/ },
/* 15 */
/***/ function(module, exports) {

	'use strict';

	(function () {
		'use strict';

		var controllerId = 'DangTinCtrl';
		angular.module('bds').controller(controllerId, function ($rootScope, $http, $scope, $state, HouseService, NgMap, $window, $timeout, Upload) {
			var vm = this;
			vm.loaiNhaDatBan = window.RewayListValue.LoaiNhaDatBanWeb;
			vm.soPhongNguList = window.RewayListValue.getNameValueArray(window.RewayListValue.SoPhongNgu);
			vm.soPhongTamList = window.RewayListValue.getNameValueArray(window.RewayListValue.SoPhongTam);
			vm.soTangList = window.RewayListValue.getNameValueArray(window.RewayListValue.SoTang);
			vm.huongNhaList = window.RewayListValue.getNameValueArray(window.RewayListValue.HuongNha);
			//vm.soTang = vm.soTangList[0];
			vm.ads = {
				soPhongNgu: vm.soPhongNguList[0],
				soPhongTam: vm.soPhongTamList[0],
				soTang: vm.soTangList[0],
				huongNha: vm.huongNhaList[0],
				status: 1,
				place: {
					diaChi: undefined
				},
				images: [{
					url: "/web/asset/img/reland_house_large.jpg",
					name: "Ảnh đại diện"
				}]
			};
			vm.center = "Hanoi Vietnam";
			vm.markers = [];
			NgMap.getMap().then(function (map) {
				window.RewayClientUtils.createPlaceAutoComplete(vm.selectPlaceCallback, "autocomplete", map);
				$scope.PlacesService = new google.maps.places.PlacesService(map);
				$scope.map = map;
			});

			vm.getMapPos = function (event) {
				var marker = {
					id: -1,
					coords: { latitude: event.latLng.lat(), longitude: event.latLng.lng() },
					content: 'you are here'
				};
				vm.markers = [];
				vm.markers.push(marker);
			};
			vm.selectPlaceCallback = function (place) {
				$scope.searchPlaceSelected = place;
				$scope.placeSearchId = place.place_id;
				vm.diaChinh = window.RewayPlaceUtil.getDiaChinhFromGooglePlace(place);
				vm.center = "[" + place.geometry.location.lat() + ", " + place.geometry.location.lng() + "]";
				vm.ads.place.diaChi = place.formatted_address;
				$scope.$apply();
			};

			vm.dangTin = function () {};
			vm.catchImageFile = function (file) {
				if (!file) return false;
				var filetype = file.type.substring(0, file.type.indexOf('/'));
				if (filetype == "image") {
					return true;
				} else {
					return false;
				}
			};
			vm.addImage = function (file) {
				if (vm.ads.images.length == 1 && vm.ads.images[0].url == "/web/asset/img/reland_house_large.jpg") {
					vm.ads.images[0].url = file.url;
					vm.ads.images[0].name = file.name;
				} else {
					vm.ads.images.push(file);
				}
			};
			vm.removeImage = function (index) {
				vm.ads.images.splice(index, 1);
			};

			vm.uploadFiles = function (files) {
				vm.files = files;
				//var msg = $scope.getMessage();
				if (files && files.length) {
					for (var i = 0; i < files.length; i++) {
						var isImageFile = vm.catchImageFile(files[i]);
						Upload.upload({
							url: '/api/upload',
							data: { file: files[i], filename: files[i].name }
						}).then(function (resp) {
							console.log('Success ' + resp.config.data.file.name + 'uploaded. Response: ' + resp.data);
							vm.addImage(resp.data.file);
						}, function (resp) {
							console.log('Error status: ' + resp.status);
						}, function (evt) {
							var progressPercentage = parseInt(100.0 * evt.loaded / evt.total);
							console.log('progress: ' + progressPercentage + '% ' + evt.config.data.file.name);
						});
					}
				}
			};
		});
	})();

/***/ },
/* 16 */
/***/ function(module, exports) {

	'use strict';

	(function () {
	    'use strict';

	    angular.module('bds').factory('NewsService', function ($http, $q, $rootScope) {
	        return {
	            countNews: function countNews(data) {
	                var url = "/api/countNews";
	                return $http.post(url, data);
	            },
	            findNews: function findNews(data) {
	                var url = '/api/findNews';
	                return $http.post(url, data);
	            },
	            findHotArticle: function findHotArticle(data) {
	                var url = '/api/findHotArticle';
	                return $http.post(url, data);
	            },
	            findHightestArticle: function findHightestArticle(data) {
	                var url = '/api/findHightestArticle';
	                return $http.post(url, data);
	            },
	            findNewsDetail: function findNewsDetail(data) {
	                var url = '/api/findNewsDetail';
	                return $http.post(url, data);
	            },
	            increaseRating: function increaseRating(data) {
	                var url = '/api/increaseRating';
	                return $http.post(url, data);
	            },
	            findRootCategory: function findRootCategory(data) {
	                var url = '/api/findRootCategory';
	                return $http.post(url, data);
	            },
	            findCategoryByParentId: function findCategoryByParentId(data) {
	                var url = '/api/findCategoryByParentId';
	                return $http.post(url, data);
	            }
	        };
	    });
	})();

/***/ },
/* 17 */
/***/ function(module, exports) {

	'use strict';

	(function () {
	  'use strict';

	  angular.module('bds').factory('HouseService', function ($http, $q, $rootScope) {
	    var urlPath = '/api/ads/getAllAds';
	    return {
	      getAllAds: function getAllAds() {
	        console.log("Get all Ads");
	        //return $http.get(urlPath);
	        var deferred = $q.defer();
	        deferred.resolve({ data: window.testData });
	        return deferred.promise;
	      },
	      createHouse: function createHouse(desc, email, seller) {
	        return $http.post(urlPath + 'create');
	      },
	      findAdsSpatial: function findAdsSpatial(data) {
	        // var url = "/api/find";
	        // var url = "/api/findAds";
	        // var url = "/api/search";
	        var url = "/api/v2/find";
	        var sendData = {};Object.assign(sendData, data);
	        sendData.placeId = undefined;
	        return $http.post(url, sendData);
	      },
	      countAds: function countAds(data) {
	        //var url = "/api/find";
	        // var url = "/api/count";
	        // var url = "/api/countAds";
	        var url = "/api/v2/count";
	        return $http.post(url, data);
	      },
	      //Nhannc
	      findRencentAds: function findRencentAds(data) {
	        var url = "/api/findRecent";
	        return $http.post(url, data);
	      },
	      findBelowPriceAds: function findBelowPriceAds(data) {
	        var url = "/api/findBelowPrice";
	        return $http.post(url, data);
	      },
	      saveSearch: function saveSearch(data) {
	        var url = "/api/saveSearch";
	        return $http.post(url, data);
	      },
	      //End Nhannc
	      checkUserExist: function checkUserExist(data) {
	        var url = "/api/checkUserExist";
	        return $http.post(url, data);
	      },
	      detailAds: function detailAds(data) {
	        var url = "/api/detail";
	        return $http.post(url, data);
	      },
	      likeAds: function likeAds(data) {
	        var url = "/api/likeAds";
	        return $http.post(url, data);
	      },
	      unlikeAds: function unlikeAds(data) {
	        var url = "/api/unlikeAds";
	        return $http.post(url, data);
	      },
	      findGooglePlaceById: function findGooglePlaceById(googlePlaceId) {
	        return $http.post("/api/findGooglePlaceById", { 'googlePlaceId': googlePlaceId });
	      },
	      login: function login(data) {
	        var url = "/api/login";
	        return $http.post(url, data);
	      },
	      signup: function signup(data) {
	        var url = "/api/signup";
	        return $http.post(url, data);
	      },
	      requestInfo: function requestInfo(data) {
	        return $http.post("/api/requestInfo", data);
	      },
	      forgotPassword: function forgotPassword(data) {
	        return $http.post("/api/forgotPassword", data);
	      },
	      resetPassword: function resetPassword(data) {
	        return $http.post("/api/resetPassword", data);
	      },
	      profile: function profile(data) {
	        return $http.post("/api/profile", data);
	      },
	      updateProfile: function updateProfile(data) {
	        return $http.post("/api/updateProfile", data);
	      },
	      findAdsAndDuanForHomePage: function findAdsAndDuanForHomePage(data) {
	        return $http.post("/api/findAdsAndDuanForHomePage", data);
	      },
	      findDuAnHotByDiaChinhForSearchPage: function findDuAnHotByDiaChinhForSearchPage(data) {
	        return $http.post("/api/findDuAnHotByDiaChinhForSearchPage", data);
	      },
	      findDuAnHotByDiaChinhForDetailPage: function findDuAnHotByDiaChinhForDetailPage(data) {
	        return $http.post("/api/findDuAnHotByDiaChinhForDetailPage", data);
	      },
	      homeDataForApp: function homeDataForApp(data) {
	        // return $http.post("/api/homeData4App",data); 
	        return $http.post("/api/v2/homeData4App", data);
	      },
	      reportReland: function reportReland(data) {
	        return $http.post("/api/reportReland", data);
	      },
	      placeAutoComplete: function placeAutoComplete(data) {
	        return $http.get("/api/place/autocomplete", data);
	      },
	      getPlaceByID: function getPlaceByID(data) {
	        return $http.post("/api/place/getPlaceByID", data);
	      },
	      getPlaceByDiaChinhKhongDau: function getPlaceByDiaChinhKhongDau(data) {
	        return $http.post("/api/place/getPlaceByDiaChinhKhongDau", data);
	      },
	      postAds: function postAds(data) {
	        return $http.post("/api/postAds", data);
	      },
	      getAdsLikes: function getAdsLikes(data) {
	        return $http.post("/api/user/getAdsLikes", data);
	      },
	      getMyAds: function getMyAds(data) {
	        return $http.post("/api/user/getMyAds", data);
	      },
	      deleteAds: function deleteAds(data) {
	        return $http.post("/api/user/deleteAds", data);
	      },
	      getUpdateAds: function getUpdateAds(data) {
	        return $http.post("/api/user/getUpdateAds", data);
	      },
	      deleteFile: function deleteFile(data) {
	        return $http.post("/api/deleteFile", data);
	      },
	      getUserInfo: function getUserInfo(data) {
	        return $http.post("/api/user/getUserInfo", data);
	      },
	      getInboxMsg: function getInboxMsg(data) {
	        return $http.post("/api/getInboxMsg", data);
	      },
	      getAllChatMsg: function getAllChatMsg(data) {
	        return $http.post("/api/getAllChatMsg", data);
	      }

	    };
	  });
	})();

/***/ },
/* 18 */
/***/ function(module, exports) {

	'use strict';

	(function () {
	  'use strict';

	  angular.module('bds').factory('RewayCommonUtil', function ($http, $q, $rootScope) {
	    return {
	      placeAutoComplete: function placeAutoComplete(callback, inputTagId, source) {
	        // $http.post("api/place/autocomplete",data);
	        var sourceP = function sourceP(request, response) {
	          var results = [];
	          $http.get("/api/place/autocomplete?input=" + request.term).then(function (res) {
	            var predictions = res.data.predictions;
	            if (res.status == '200') {
	              for (var i = 0, prediction; prediction = predictions[i]; i++) {
	                results.push({
	                  description: prediction.fullName,
	                  types: prediction.placeType,
	                  viewPort: prediction.viewPort,
	                  placeId: prediction.placeId,
	                  tinh: prediction.tinh,
	                  huyen: prediction.huyen,
	                  xa: prediction.xa,
	                  class: "iconLocation gray"

	                });
	              }
	            }
	            response(results);
	          });
	        };
	        if (source) sourceP = source;

	        // $.widget( "custom.catcomplete", $.ui.autocomplete, {
	        //   _create: function() {
	        //   this._super();
	        //   this.widget().menu( "option", "items", "> :not(.ui-autocomplete-category)" );
	        //   },
	        //   _renderMenu: function( ul, items ) {
	        //   var that = this,
	        //     currentCategory = "";
	        //   ul.addClass('relandAuto');
	        //   $.each( items, function( index, item ) {
	        //     var li;
	        //     if ( item.category != currentCategory ) {
	        //     ul.append( "<li class='ui-autocomplete-category'>" + item.category + "</li>" );
	        //     currentCategory = item.category;
	        //     }
	        //     li = that._renderItemData( ul, item );
	        //     if ( item.category ) {
	        //     li.html("<i class='" + item.labelicon + "'></i>" + item.label + "<span>" + item.labeldes + "</span>");
	        //     }
	        //   });
	        //   }
	        // });

	        // $( "#" + inputTagId).catcomplete({
	        //   delay:0 ,
	        //   source: sourceP
	        // });
	        $("#" + inputTagId).autocomplete({
	          minLength: 0,
	          source: sourceP,
	          focus: function focus(event, ui) {
	            if (ui.item.lastSearchSeparator == true) {
	              event.preventDefault();
	            } else {
	              $("#" + inputTagId).val(ui.item.description);
	              return false;
	            }
	          },
	          _create: function _create() {
	            this._super();
	            this.widget().menu("option", "items", "> :not(.ui-autocomplete-category)");
	          },
	          select: function select(event, ui) {
	            if (ui.item.lastSearchSeparator == true) {
	              event.preventDefault();
	            } else {
	              $("#" + inputTagId).val(ui.item.description);
	              callback(ui.item);
	              return false;
	            }
	          }
	        }).autocomplete("instance")._renderItem = function (ul, item) {
	          ul.addClass('relandAuto');
	          if (item.location == true || item.lastSearchSeparator == true) {
	            return $('<li disabled class="ui-autocomplete-category">' + item.description + '</li>').appendTo(ul);
	          } else {
	            return $("<li class='ui-menu-item'>").append('<i class="' + item.class + '"></i>' + item.description + '<span class="ui-menu-item-wrapper">' + item.subDescription + '</span></li>').appendTo(ul);
	          }
	        };
	        // .autocomplete( "instance" )._renderMenu = function( ul, items ) {
	        //   var that = this,
	        //   currentCategory = "";
	        //   ul.addClass('relandAuto');
	        //   $.each( items, function( index, item ) {
	        //     var li;
	        //     if ( item.location == true || item.lastSearchSeparator == true ) {
	        //       ul.append( "<li class='ui-autocomplete-category'>" + item.description + "</li>" );             
	        //       // li = that._renderItemData( ul, item );
	        //     }else{
	        //       li = that._renderItemData( ul, item );
	        //       li.html("<i class='" + item.class + "'></i>" + item.description + "<span>" + item.subDescription + "</span>");
	        //     }

	        //   });
	        // };
	      },
	      getGeoCodePostGet: function getGeoCodePostGet(lat, lng, callback) {
	        var latlng = new google.maps.LatLng(lat, lng);
	        // This is making the Geocode request
	        var geocoder = new google.maps.Geocoder();
	        geocoder.geocode({ 'latLng': latlng }, function (results, status) {
	          if (status !== google.maps.GeocoderStatus.OK) {
	            alert(status);
	          }
	          // This is checking to see if the Geoeode Status is OK before proceeding
	          if (status == google.maps.GeocoderStatus.OK) {
	            callback(results);
	          }
	        });
	      },
	      placeAutoCompletePost: function placeAutoCompletePost(callback, inputTagId, source) {
	        console.log("-------------placeAutoComplete----------");
	        var sourceP;
	        $("#" + inputTagId).autocomplete({
	          minLength: 0,
	          source: sourceP,
	          focus: function focus(event, ui) {
	            console.log("-------------placeAutoComplete------2----");
	            if (ui.item.lastSearchSeparator == true) {
	              event.preventDefault();
	            } else {
	              $("#" + inputTagId).val(ui.item.description);
	              return false;
	            }
	          },
	          _create: function _create() {
	            console.log("-------------placeAutoComplete------3----");
	            this._super();
	            this.widget().menu("option", "items", "> :not(.ui-autocomplete-category)");
	          },
	          select: function select(event, ui) {
	            console.log("-------------placeAutoComplete------4----");
	            if (ui.item.lastSearchSeparator == true) {
	              event.preventDefault();
	            } else {
	              $("#" + inputTagId).val(ui.item.description);
	              callback(ui.item);
	              return false;
	            }
	          }
	        }).autocomplete("instance")._renderItem = function (ul, item) {
	          console.log("-------------placeAutoComplete------5----");
	          ul.addClass('relandAutoOne relandMaps');
	          return $("<li>").append("<p><i class='iconLocation gray'></i>" + item.description + "</span></p></li>").appendTo(ul);
	        };
	      },
	      getPaymentPerMonth: function getPaymentPerMonth(totalPrincipal, numOfMonth, interestRatePerYear) {
	        var pricipalPerMonth = totalPrincipal / numOfMonth;
	        var totalInterest = interestRatePerYear * totalPrincipal;
	        var interestPerMonth = totalInterest / 12;

	        return {
	          payment: pricipalPerMonth,
	          interest: interestPerMonth,
	          sumOfPayment: pricipalPerMonth + interestPerMonth
	        };
	      }

	    };
	  });
	})();

/***/ },
/* 19 */
/***/ function(module, exports) {

	'use strict';

	angular.module('bds').directive("loginForm", [function () {
	  return {
	    restrict: 'E',
	    scope: { loginbox: "=loginbox" },
	    // template: '<div class="box-login" id="box-login"><div class="inner"><form action="index.html" method="post" id="form-login" novalidate><div ng-if="$root.token" class="head">Đăng nhập/Đăng ký để lưu thông tin tìm kiếm</div><div ng-if="!$root.token" class="head">Chào mừng bạn quay lại với Reland. Xin nhập mật khẩu</div><a href="#box-login" class="btn-close" data-login="close"><i class="fa fa-times"></i></a><div ng-if="$root.token" class="control"><input type="email" ng-model="lc.email" placeholder="Enter email address" class="form-control" name="email" required/></div><div ng-if="!$root.token" class="control"><input type="password" ng-model="lc.password" class="form-control" required> </input></div><div class="handle"><button type="button" ng-click="lc.signin();" class="btn-login">Đăng nhập</button></div><div class="rule">Tôi đồng ý với các điều khoản <a href="/terms/" target="_blank">sử dụng</a> và <a href="/privacy/" target="_blank">bản quyền của Reland</a>.</div><div class="register">Bạn có phải là môi giới BĐS? <a href="/agent_signup/?redirect_url=http://www.trulia.com/"> Đăng ký tại đây.</a></div></form></div></div>',
	    templateUrl: "/web/common/directives/loginTemplate.html",
	    replace: 'true',
	    controller: ['socket', '$scope', '$rootScope', '$http', '$window', '$localStorage', 'HouseService', 'jwtHelper', function (socket, $scope, $rootScope, $http, $window, $localStorage, HouseService, jwtHelper) {
	      $scope.loginError = false;
	      var vm = this;
	      vm.login = true;
	      vm.reset = false;
	      vm.ENTER_EMAIL = 1;
	      vm.ENTER_PASSWORD = 2;
	      vm.LOGGED_IN = 3;
	      vm.FORGOT_PASSWORD = 4;
	      vm.SENT_PASSWORD = 5;
	      vm.RESET_PASSWORD = 6;
	      vm.state = vm.ENTER_EMAIL;
	      vm.head = "Đăng nhập/Đăng ký để lưu thông tin tìm kiếm";
	      vm.subHead = "";
	      $scope.$bus.subscribe({
	        channel: 'login',
	        topic: 'logged out',
	        callback: function callback(data, envelope) {
	          vm.userExist = false;
	          vm.password = "";
	          $localStorage.relandToken = undefined;
	          $rootScope.user.userID = undefined;
	          vm.changeState(vm.ENTER_EMAIL, vm.userExist);
	        }
	      });

	      $scope.$bus.subscribe({
	        channel: 'login',
	        topic: 'show login',
	        callback: function callback(data, envelope) {
	          var token = data.token;
	          if (token) {
	            var mydecode = jwtHelper.decodeToken(token);
	            vm.resetPasswordToken = token;
	            vm.resetUserID = mydecode.userID;
	            vm.resetHead = "Xin nhập mật khẩu mới";
	            vm.reset = true;
	            vm.login = false;
	            vm.state = vm.RESET_PASSWORD;
	          } else {
	            vm.state = vm.ENTER_EMAIL;
	            vm.userExist = false;
	            vm.password = "";
	            $localStorage.relandToken = undefined;
	            vm.head = data.label;
	            vm.subHead = "";
	          }
	          $('#box-login').fadeIn(500);
	        }
	      });

	      vm.exitLoginBox = function ($event) {
	        if (!$event || $event.target.id == "box-login") {
	          vm.userExist = false;
	          vm.changeState(vm.ENTER_EMAIL, false);
	        }
	      };
	      vm.forgotPassword = function () {
	        vm.changeState(vm.FORGOT_PASSWORD);
	      };

	      vm.changeState = function (state, userExist) {
	        vm.state = state;
	        if (state == vm.FORGOT_PASSWORD) {
	          vm.head = "Quên mật khẩu?";
	          vm.subHead = "Hãy nhập email, Reland sẽ gửi mật khẩu tới email";
	        }
	        if (vm.state == vm.SENT_PASSWORD) {
	          vm.subHead = "Reland đã gửi mật khẩu tới email của bạn. Hãy kiểm tra và nhập mật khẩu mới để đăng nhập";
	        }
	        if (vm.state == vm.ENTER_EMAIL) {
	          vm.head = "Đăng nhập/Đăng ký để lưu thông tin tìm kiếm";
	          vm.subHead = "";
	        }
	        if (vm.state == vm.ENTER_PASSWORD) {
	          vm.head = "Đăng nhập/Đăng ký để lưu thông tin tìm kiếm";
	          if (userExist == true) vm.head = "Chào mừng bạn quay lại với Reland. Xin nhập mật khẩu";else if (userExist == false) vm.head = "Tạo mật khẩu";
	        }
	      };

	      vm.signin = function () {
	        var loginForm = $('#form-login');
	        var data = {
	          email: vm.email,
	          matKhau: vm.password
	        };
	        if (vm.email && vm.email.indexOf("@") == -1) {
	          data.email = undefined;
	          data.phone = vm.email;
	        }
	        if (loginForm.valid()) {
	          if (vm.state == vm.RESET_PASSWORD) {
	            HouseService.resetPassword({ token: vm.resetPasswordToken, pass: vm.resetPassword }).then(function (resp) {
	              if (resp.data.success == true) {
	                //need to auto login here
	                HouseService.login({ userID: vm.resetUserID, matKhau: vm.resetPassword }).then(function (res) {
	                  if (res.data.login == true) {
	                    //alert("signin with email " + $scope.email + " password " + this.password + " and token: " + res.data.token); 
	                    //$window.token = res.data.token;
	                    $localStorage.relandToken = res.data.token;
	                    $rootScope.user.userName = res.data.userName;
	                    $rootScope.user.userID = res.data.userID;
	                    $rootScope.user.userAvatar = res.data.avatar;
	                    //hung dummy here to set userID to email so we can test chat
	                    //$rootScope.user.userID = res.data.email;
	                    $rootScope.user.userID = res.data.userID;
	                    $rootScope.user.adsLikes = res.data.adsLikes;
	                    $rootScope.user.userEmail = res.data.email;
	                    $rootScope.user.phone = res.data.phone;
	                    $rootScope.user.lastSearch = res.data.lastSearch;
	                    $rootScope.user.lastViewAds = res.data.lastViewAds;

	                    vm.class = "has-sub";
	                    vm.state = vm.LOGGED_IN;
	                    vm.userExist = false;
	                    vm.password = "";
	                    socket.emit('new user', { email: $rootScope.user.userEmail, userID: $rootScope.user.userID, username: $rootScope.user.userName, avatar: res.data.avatar }, function (data) {
	                      console.log("register socket user " + $rootScope.user.userName);
	                    });
	                    $scope.$bus.publish({
	                      channel: 'user',
	                      topic: 'logged-in',
	                      data: null
	                    });
	                    $('#box-login').hide();
	                  } else {
	                    //alert(res.data.message);
	                    vm.head = res.data.message;
	                  }
	                });
	              } else {
	                alert(resp.data.msg);
	              }
	            });
	          } else if (vm.state == vm.FORGOT_PASSWORD) {
	            HouseService.forgotPassword({
	              email: vm.email,
	              newPass: vm.password
	            }).then(function (res) {
	              if (res.data.success == true) vm.changeState(vm.SENT_PASSWORD);else vm.subHead = res.data.msg;
	            });
	          } else if (vm.state == vm.ENTER_EMAIL) {
	            HouseService.checkUserExist(data).then(function (res) {
	              vm.userExist = res.data.exist;
	              vm.changeState(vm.ENTER_PASSWORD, vm.userExist);
	            });
	          } else if (vm.state == vm.ENTER_PASSWORD || vm.state == vm.SENT_PASSWORD) {
	            if (vm.userExist == true) {
	              //sign in
	              HouseService.login(data).then(function (res) {
	                if (res.data.login == true) {
	                  //alert("signin with email " + $scope.email + " password " + this.password + " and token: " + res.data.token); 
	                  //$window.token = res.data.token;
	                  $localStorage.relandToken = res.data.token;
	                  $rootScope.user.userName = res.data.userName;
	                  $rootScope.user.userID = res.data.userID;
	                  $rootScope.user.userAvatar = res.data.avatar;
	                  //hung dummy here to set userID to email so we can test chat
	                  //$rootScope.user.userID = res.data.email;
	                  $rootScope.user.userID = res.data.userID;
	                  $rootScope.user.adsLikes = res.data.adsLikes;
	                  $rootScope.user.userEmail = res.data.email;
	                  $rootScope.user.phone = res.data.phone;
	                  $rootScope.user.lastSearch = res.data.lastSearch;
	                  $rootScope.user.lastViewAds = res.data.lastViewAds;
	                  vm.class = "has-sub";
	                  vm.state = vm.LOGGED_IN;
	                  vm.userExist = false;
	                  vm.password = "";
	                  socket.emit('new user', { email: $rootScope.user.userEmail, userID: $rootScope.user.userID, username: $rootScope.user.userName, avatar: res.data.avatar }, function (data) {
	                    console.log("register socket user " + $rootScope.user.userName);
	                  });
	                  $scope.$bus.publish({
	                    channel: 'user',
	                    topic: 'logged-in',
	                    data: null
	                  });
	                  $('#box-login').hide();
	                } else {
	                  //alert(res.data.message);
	                  vm.head = res.data.message;
	                }
	              });
	            } else {
	              //register
	              HouseService.signup(data).then(function (res) {
	                $localStorage.relandToken = res.data.token;
	                $rootScope.user.userName = res.data.userName;

	                vm.class = "has-sub";
	                vm.state = vm.LOGGED_IN;
	                socket.emit('new user', { email: $rootScope.user.userEmail, userID: $rootScope.user.userID, name: $rootScope.user.userName, userAvatar: undefined }, function (data) {
	                  console.log("register socket user " + $rootScope.user.userName);
	                });
	                $('#box-login').hide();
	              });
	            }
	          }
	        }
	      };

	      var formLogin = $("#form-login");
	      // $("#form-login").validate();
	      // if(formLogin.validate){
	      $.validator.addMethod("mailorphone", function (value, element) {
	        var mail = jQuery.validator.methods.email.call(this, value, element);
	        var digits = jQuery.validator.methods.digits.call(this, value, element);
	        var minlength = jQuery.validator.methods.minlength.call(this, value, element, 8);
	        return mail || digits && minlength;
	      });
	      formLogin.validate({
	        rules: {
	          mailorphone: {
	            required: true,
	            mailorphone: true
	          },
	          password: {
	            required: true
	          },
	          passwordConfirm: {
	            required: function required(element) {
	              var pass = $("#form-login [name = 'password']").val();
	              var passConfirm = element.value;
	              if (pass) {
	                return !(pass == passConfirm);
	              } else return false;
	            }
	          }
	        },
	        messages: {
	          mailorphone: {
	            mailorphone: 'Xin nhập email hoặc số điện thoại',
	            required: 'Xin nhập email hoặc số điện thoại'
	          },
	          password: {
	            required: 'Xin nhập mật khẩu'
	          },
	          passwordConfirm: {
	            required: 'Mật khẩu không khớp'
	          }
	        }
	      });
	      // }
	    }],
	    controllerAs: 'lc'
	  };
	}]);

/***/ },
/* 20 */
/***/ function(module, exports) {

	'use strict';

	angular.module('bds').directive("userInfoMenu", [function () {
	  return {
	    restrict: 'E',
	    scope: {},
	    templateUrl: "/web/common/directives/userInfoMenuTemplate.html",
	    replace: 'true',
	    controller: ['socket', '$scope', '$state', '$rootScope', '$http', '$window', '$localStorage', 'HouseService', function (socket, $scope, $state, $rootScope, $http, $window, $localStorage, HouseService) {
	      $scope.loginError = false;
	      var vm = this;
	      vm.profile = function () {
	        $state.go('profile', { userID: $rootScope.user.userID }, { location: true });
	      };
	      vm.showLogin = function () {
	        //var target = $(this).attr('href');
	        $('#box-login').fadeIn(500);
	      };

	      vm.signout = function () {
	        $localStorage.relandToken = undefined;
	        $rootScope.user.userName = undefined;
	        $scope.$bus.publish({
	          channel: 'login',
	          topic: 'logged out',
	          data: {}
	        });
	        socket.emit('user leave', { email: $rootScope.user.userEmail, userID: $rootScope.user.userID, username: $rootScope.user.userName, userAvatar: undefined }, function (data) {
	          console.log("disconect socket user " + $rootScope.user.userName);
	        });
	      };
	    }],
	    controllerAs: 'uim'
	  };
	}]);

/***/ },
/* 21 */
/***/ function(module, exports) {

	'use strict';

	angular.module('bds').directive('afterRender', ['$timeout', function ($timeout) {
	    var def = {
	        restrict: 'A',
	        terminal: true,
	        transclude: false,
	        link: function link(scope, element, attrs) {
	            $timeout(scope.$eval(attrs.afterRender), 0); //Calling a scoped method
	            //alert('ssss');
	        }
	    };
	    return def;
	}]);

/***/ },
/* 22 */
/***/ function(module, exports) {

	'use strict';

	angular.module('bds').directive('bdsChat', ['$timeout', function ($timeout) {
	    var def = {
	        restrict: 'E',
	        scope: { visible: "=visible", useremail: "=useremail", right: "=right", chatbox: "=chatbox" },
	        terminal: true,
	        templateUrl: "/web/common/directives/chatTemplate.html",
	        replace: 'true',
	        controller: 'ChatCtrl',
	        controllerAs: "chat",
	        link: function link(scope, elm, attrs) {
	            console.log("after render");
	            /*$timeout(function() {
	                //alert(scope.chatbox.hidden);
	                if(scope.chatbox.hidden){
	                    angular.element("#"+scope.chatbox.position+"-chat-header").closest("div").find('.chat').slideToggle(300, 'swing');
	                    angular.element("#"+scope.chatbox.position+"-chat-header").closest("div").find('.chat-message-counter').slideToggle(300, 'swing');    
	                }
	            }, 0);*/
	            //alert('ssss');
	        }
	    };
	    return def;
	}]);

/***/ },
/* 23 */
/***/ function(module, exports) {

	'use strict';

	angular.module('bds').controller('ChatCtrl', function ($scope, $rootScope, socket, $location, $http, Upload, $timeout) {
		// Chat Page Controller
		// Varialbles Initialization.
		var vm = this;
		vm.isMsgBoxEmpty = false;
		vm.isFileSelected = false;
		vm.isMsg = false;
		vm.setFocus = true;
		vm.chatMsg = "";
		vm.users = [];
		vm.messeges = [];
		vm.menu = {};

		var count = Object.keys($rootScope.chatBoxes).length - 1;
		vm.rightPos = 24 + Math.min(2, count) * 300 + "px";
		//vm.user = chatBoxes[$scope.useremail];

		console.log("chat visible is " + $scope.visible);
		vm.typing = false;

		$scope.chatKeypress = function (event) {
			var keyCode = event.keyCode;
			if (vm.typing == false) {
				socket.emit('user-start-typing', { fromUserID: $rootScope.user.userID, toUserID: $scope.chatbox.user.userID }, function (data) {
					console.log("emit start typing to " + $scope.chatbox.user.userID);
				});
			}
		};
		$scope.chatBlur = function (event) {
			socket.emit('user-stop-typing', { fromUserID: $rootScope.user.userID, toUserID: $scope.chatbox.user.userID }, function (data) {
				console.log("emit stop typing to " + $scope.chatbox.user.userID);
			});
		};

		$scope.getMessage = function () {
			return {
				fromUserID: $rootScope.user.userID,
				fromUserAvatar: $rootScope.user.userAvatar,
				toUserID: $scope.chatbox.user.userID,
				toFullName: $scope.chatbox.user.name,
				fromFullName: $rootScope.user.userName,
				relatedToAds: $scope.chatbox.ads,
				content: vm.chatMsg,
				msgType: window.RewayConst.CHAT_MESSAGE_TYPE.TEXT,
				timeStamp: formatAMPM(new Date()),
				date: new Date(),
				type: "Chat",
				file: undefined
			};
		};

		vm.sendFile = function (file, isImageFile) {
			vm.isFileSelected = true;
			// var file = files[0];
			var dateString = formatAMPM(new Date());
			var DWid = $rootScope.user.userName + "dwid" + Date.now();

			var msg = $scope.getMessage();
			if (isImageFile == true) msg.msgType = window.RewayConst.CHAT_MESSAGE_TYPE.IMAGE;else msg.msgType = window.RewayConst.CHAT_MESSAGE_TYPE.FILE;
			msg.content = undefined;
			msg.file = file;
			socket.emit('send-message', msg, function (data) {
				console.log("sent image to " + $scope.chatbox.user.userID);
				if (data.success == true) {
					if (data.offline == true) {
						$scope.chatbox.status = window.RewayConst.MSG.USER_OFFLINE;
						$scope.chatbox.onlineClass = "offline";
						//console.log("TODO: this person is offline he will receive the message next time he online");
					}
					vm.chatMsg = "";
					vm.setFocus = true;

					msg.timeStamp = dateString;
					// $scope.chatbox.messages.push(msg);
					window.RewayClientUtils.addChatMessage($scope.chatbox, msg);
					$scope.$apply();
					$('#' + $scope.chatbox.position + '_chat-history').scrollTop($('#' + $scope.chatbox.position + '_chat-history')[0].scrollHeight);
				}
			});
		};

		$scope.uploadFiles = function (files) {
			$scope.files = files;
			var msg = $scope.getMessage();
			if (files && files.length) {
				for (var i = 0; i < files.length; i++) {

					var ft = vm.catchFile(files[i]);
					var isImageFile = ft == "image";

					Upload.upload({
						url: '/api/upload',
						data: { files: files[i] }
					}).then(function (resp) {
						console.log('Success ' + resp.config.data.files.name + 'uploaded. Response: ' + resp.data);
						//here we need to emit message
						// if(ft == "image")
						// 	vm.sendImage(resp.data.image_file);
						// else
						vm.sendFile(resp.data.file, isImageFile);
					}, function (resp) {
						console.log('Error status: ' + resp.status);
					}, function (evt) {
						var progressPercentage = parseInt(100.0 * evt.loaded / evt.total);
						console.log('progress: ' + progressPercentage + '% ' + evt.config.data.files.name);
					});
				}
			}
		};

		// message time formatting into string   
		function formatAMPM(date) {
			var hours = date.getHours();
			var minutes = date.getMinutes();
			var ampm = hours >= 12 ? 'pm' : 'am';
			hours = hours % 12;
			hours = hours ? hours : 12; // the hour '0' should be '12'
			minutes = minutes < 10 ? '0' + minutes : minutes;
			var strTime = hours + ':' + minutes + ' ' + ampm;
			return strTime;
		}

		// ====================================== Messege Sending Code ============================
		// sending text message function
		vm.sendMsg = function () {
			if (vm.chatMsg) {
				vm.isFileSelected = false;
				vm.isMsg = true;
				var dateString = formatAMPM(new Date());
				var msg = $scope.getMessage();
				socket.emit("send-message", msg, function (data) {
					//delivery report code goes here
					if (data.success == true) {
						if (data.offline == true) {
							$scope.chatbox.status = window.RewayConst.MSG.USER_OFFLINE;
							$scope.chatbox.onlineClass = "offline";
							//console.log("TODO: this person is offline he will receive the message next time he online");
						}
						vm.chatMsg = "";
						vm.setFocus = true;
						msg.timeStamp = dateString;
						// $scope.chatbox.messages.push(msg);
						window.RewayClientUtils.addChatMessage($scope.chatbox, msg);
						$scope.$apply();
						$('#' + $scope.chatbox.position + '_chat-history').scrollTop($('#' + $scope.chatbox.position + '_chat-history')[0].scrollHeight);
					}
				});
			} else {
				vm.isMsgBoxEmpty = true;
			}
		};

		vm.toggleChat = function (event) {
			angular.element(event.target).closest("div").find('.chat').slideToggle(300, 'swing');
			angular.element(event.target).closest("div").find('.chat-message-counter').slideToggle(300, 'swing');
			//$scope.chatbox.hidden = !$scope.chatbox.hidden;
		};
		vm.closeChat = function (event) {
			$(event.target).parent().parent().parent().remove();
			$scope.$bus.publish({
				channel: 'chat',
				topic: 'close chat',
				data: $scope.chatbox.user.userID
			});
		};

		// function for checking file type
		vm.catchFile = function (file) {
			if (!file) return "invalid format";
			if (file.type == "application/pdf" || file.type == "application/msword" || file.type == "application/vnd.openxmlformats-officedocument.wordprocessingml.document" || file.type == "text/plain" || file.type == "application/vnd.ms-excel") {
				return "document";
			} else if (file.type == "audio/mp3" || file.type == "audio/mpeg") {
				return "music";
			} else {
				var filetype = file.type.substring(0, file.type.indexOf('/'));
				if (filetype == "image") {
					return "image";
				} else {
					return "invalid format";
				}
			}
		};
	});

/***/ },
/* 24 */
/***/ function(module, exports) {

	'use strict';

	angular.module('bds').directive('bdsDiaChinhLink', ['$timeout', function ($timeout) {
	    var def = {
	        restrict: 'E',
	        scope: { diachinh: "=diachinh", loaitin: "=loaitin", loainhadat: "=loainhadat", viewmode: "=viewmode" },
	        terminal: true,
	        templateUrl: "/web/common/directives/diaChinhLinkTemplate.html",
	        replace: 'true',
	        controller: ['$state', 'socket', '$scope', '$rootScope', '$http', '$window', '$localStorage', 'HouseService', function ($state, socket, $scope, $rootScope, $http, $window, $localStorage, HouseService) {
	            var vm = this;

	            vm.gotoDiachinh = function (diachinh, type) {
	                if (type == 1) {
	                    $scope.diachinh.huyenKhongDau = null;
	                    $scope.diachinh.xaKhongDau = null;
	                } else if (type == 2) {
	                    $scope.diachinh.xaKhongDau = null;
	                }
	                $state.go('searchdc', { "tinh": $scope.diachinh.tinhKhongDau, "huyen": $scope.diachinh.huyenKhongDau, "xa": $scope.diachinh.xaKhongDau, "loaiTin": $scope.loaitin, "loaiNhaDat": $scope.loainhadat, "viewMode": vm.viewMode }, { location: true });
	            };
	        }],
	        controllerAs: "dl"
	    };
	    return def;
	}]);

/***/ },
/* 25 */
/***/ function(module, exports) {

	'use strict';

	angular.module('bds').directive('bdsHeader', ['$timeout', function ($timeout) {
	    var def = {
	        restrict: 'E',
	        scope: { menuitems: "=menuitems", placesearchid: "=placesearchid" },
	        terminal: true,
	        templateUrl: "/web/common/directives/bdsHeaderTemplate.html",
	        replace: 'true',
	        controller: ['$state', 'socket', '$scope', '$rootScope', '$http', '$window', '$localStorage', 'HouseService', function ($state, socket, $scope, $rootScope, $http, $window, $localStorage, HouseService) {
	            var vm = this;
	            vm.gotoMenu = function (data) {
	                //$state.go('searchdc', { "tinh" : $scope.diachinh.tinhKhongDau, "huyen" : $scope.diachinh.huyenKhongDau,"xa" : $scope.diachinh.xaKhongDau,"loaiTin" : $scope.loaiTin, "loaiNhaDat" : $scope.loaiNhaDat, "viewMode": vm.viewMode}, {location: true});
	                if (!data.menuType) $state.go('search', { "place": $scope.placesearchid, "loaiTin": data.loaiTin, "loaiNhaDat": data.loaiNhaDat }, { location: true });else if (data.menuType == 1) {
	                    console.log("--goToPageNews---rootCatId: " + data.rootCatId);
	                    $state.go('news', { "rootCatId": data.rootCatId });
	                }
	            };
	            vm.onMobileMenu = function (data) {
	                /*$(this).toggleClass('active');*/
	                var body = $("body");
	                var height_menu = $("#menu-left").find('.inner').height(),
	                    height_device = $(window).height();
	                if (height_menu <= height_device) height_menu = height_device;
	                if (body.hasClass("show-menu")) {
	                    body.removeClass("show-menu").addClass('hide-menu');
	                    $("#wrapper").removeAttr("style");
	                } else {
	                    body.removeClass('hide-menu').addClass("show-menu");
	                    $("#wrapper").css({ height: height_menu });
	                }
	            };
	        }],
	        controllerAs: "hdr"
	    };
	    return def;
	}]);

/***/ },
/* 26 */
/***/ function(module, exports) {

	'use strict';

	angular.module('bds').directive('bdsMobileMenu', ['$timeout', function ($timeout) {
	    var def = {
	        restrict: 'E',
	        scope: {},
	        terminal: true,
	        templateUrl: "/web/common/directives/bdsMobileMenuTemplate.html",
	        replace: 'true',
	        controller: ['$state', 'socket', '$scope', '$rootScope', '$http', '$window', '$localStorage', 'HouseService', function ($state, socket, $scope, $rootScope, $http, $window, $localStorage, HouseService) {
	            var vm = this;
	            vm.gotoSearchPage = function (event) {
	                $state.go('search', { "place": "ChIJoRyG2ZurNTERqRfKcnt_iOc", "loaiTin": 0, "loaiNhaDat": 1, "viewMode": "list" }, { location: true });
	            };
	            vm.showLogin = function (event) {
	                $('#box-login').fadeIn(500);
	                window.loca;
	            };
	            vm.gotoHomePage = function (event) {
	                $state.go('home', {}, { location: true });
	            };
	            vm.gotoRelandApp = function (event) {};
	            vm.profile = function () {
	                $state.go('profile', { userID: $rootScope.user.userID }, { location: true });
	            };
	        }],
	        controllerAs: "mmn"
	    };
	    return def;
	}]);

/***/ },
/* 27 */
/***/ function(module, exports) {

	'use strict';

	angular.module('bds').directive('bdsProfileLeft', ['$timeout', function ($timeout) {
	    var def = {
	        restrict: 'E',
	        scope: {},
	        terminal: true,
	        templateUrl: "/web/common/directives/bds-profile-left.tpl.html",
	        replace: 'true',
	        controller: ['$state', 'socket', '$scope', '$rootScope', '$http', '$window', '$localStorage', 'HouseService', function ($state, socket, $scope, $rootScope, $http, $window, $localStorage, HouseService) {
	            var vm = this;
	        }],
	        controllerAs: "pl"
	    };
	    return def;
	}]);

/***/ },
/* 28 */
/***/ function(module, exports) {

	'use strict';

	angular.module('bds').directive('bdsAdsBoxList', ['$timeout', function ($timeout) {
	    var def = {
	        restrict: 'E',
	        scope: { cat: "=cat", view_mode: "=view_mode", more: "=more", header: "=header" },
	        terminal: true,
	        templateUrl: "/web/common/directives/ads-box-list.tpl.html",
	        replace: 'true',
	        controller: ['$state', 'socket', '$scope', '$rootScope', '$http', '$window', '$localStorage', 'HouseService', function ($state, socket, $scope, $rootScope, $http, $window, $localStorage, HouseService) {
	            var vm = this;
	            vm.cat = $scope.cat;
	            vm.more = $scope.more;
	            vm.header = $scope.header;
	            vm.goDetail = function (index) {
	                var item = vm.cat.list[index];
	                if (item.type == "Ads") {
	                    $state.go('detail', { "adsID": item.adsID }, { location: true });
	                } else if (item.type == "DuAn") {}
	            };
	            vm.getClass = function (i) {
	                // alert('aaaa');
	                var colArr = ["col col-40", "col col-35", "col col-25"];
	                var reverse = false;
	                var j = Math.floor(i / 3);
	                if (j == 0) {
	                    return colArr[i % 3];
	                } else if (j == 1) {
	                    return colArr[(i % 3 + 1) % 3];
	                } else {
	                    return colArr[(i % 3 + 2) % 3];
	                }
	                /*var reverse = false;  
	                var j = Math.floor(i/2);
	                  if(i%2==0){
	                    if(j%2==0)                  
	                        return "col col-40";
	                    else
	                        return "col col-60";
	                }else{
	                    if(j%2==0)                  
	                        return "col col-60";
	                    else
	                        return "col col-40";    
	                }*/
	            };
	            $scope.$on("$destroy", function () {
	                // alert("OMG! You are killing me");
	            });
	        }],
	        controllerAs: "abl"
	    };
	    return def;
	}]);

/***/ },
/* 29 */
/***/ function(module, exports) {

	'use strict';

	(function () {
		'use strict';

		var controllerId = 'MobileHomeCtrl';
		angular.module('bds').controller(controllerId, function ($rootScope, $http, $scope, $state, HouseService, NewsService, NgMap, $window, $timeout, $location, $localStorage) {
			var vm = this;
			var query = {
				loaiTin: 0,
				//giaBETWEEN: [ 0, 9999999 ],
				soPhongNguGREATER: '0',
				soTangGREATER: '0',
				soPhongTamGREATER: '0',
				dienTichBETWEEN: [0, 9999999],
				limit: 200
				// polygon: []
			};
			// vm.showAskCurrentLocation = false;
			var homeDataSearch = {
				timeModified: undefined,
				query: query,
				currentLocation: undefined
			};
			if ($rootScope.getLastSearch($localStorage)) homeDataSearch.query = $rootScope.getLastSearch($localStorage).query;
			//    $rootScope.currentLocation.lat = 20.9898098;
			// $rootScope.currentLocation.lon = 105.7098334;
			homeDataSearch.currentLocation = $rootScope.currentLocation;
			homeDataSearch.query.updateLastSearch = false;

			vm.getLocation = function () {
				/*function fetchHomeData(){
	   	var async = require("async");
	   vm.boSuuTap = [];
	   var fl = window.RewayUtil.generateHomeSearchSeries(homeDataSearch.query,homeDataSearch.currentLocation,HouseService.findAdsSpatial,function(res){
	   	if(res.data.list && res.data.list.data.length>=5)
	   		vm.boSuuTap.push(res.data.list);
	   	//alert(res.data.length);
	   });
	    async.series(fl,
	      function(err, results){
	        // alert(results.length);
	        vm.doneSearch = true;
	      }
	   );
	   }
	   if (navigator.geolocation) {
	    navigator.geolocation.getCurrentPosition(function(position){
	    	$rootScope.currentLocation.lat = position.coords.latitude;
	    	$rootScope.currentLocation.lon = position.coords.longitude;
	    	homeDataSearch.currentLocation = $rootScope.currentLocation;
	   //      	HouseService.homeDataForApp(homeDataSearch).then(function(res){
	   // 	//alert(JSON.stringify(res));
	   // 	vm.boSuuTap = res.data.data; 
	   // });
	   fetchHomeData();
	    }, function(error){
	    	console.log(error);		        	
	    	// vm.showAskCurrentLocation  = true;
	    	fetchHomeData();
	    });
	   } else {
	    //x.innerHTML = "Geolocation is not supported by this browser.";		        
	   //       HouseService.homeDataForApp(homeDataSearch).then(function(res){
	   // 	//alert(JSON.stringify(res));
	   // 	vm.boSuuTap = res.data.data; 
	   // });
	   // vm.showAskCurrentLocation  = true;
	   fetchHomeData();
	   }
	   */

				homeDataSearch.currentLocation = $rootScope.currentLocation;
				HouseService.homeDataForApp(homeDataSearch).then(function (res) {
					//alert(JSON.stringify(res));
					vm.boSuuTap = [];
					res.data.data.forEach(function (item, index) {
						if (item.data.length > 0) vm.boSuuTap.push(item);
					});
					vm.doneSearch = true;
				});
			};
			vm.goDetail = function (ads) {
				$state.go('mdetail', { "adsID": ads.adsID }, { location: true });
			};
			vm.likeAds = function (event, adsID) {
				event.stopPropagation();
				if (!$rootScope.user.userID) {
					$scope.$bus.publish({
						channel: 'login',
						topic: 'show login',
						data: { label: "Đăng nhập để lưu BĐS" }
					});

					return;
				}
				if (!$rootScope.user.adsLikes) {
					$rootScope.user.adsLikes = [];
				}
				var ind = $rootScope.user.adsLikes.indexOf(adsID);
				if (ind >= 0) {
					HouseService.unlikeAds({ userID: $rootScope.user.userID, adsID: adsID }).then(function (res) {
						if (res.status == 200) {
							var index = $rootScope.user.adsLikes.indexOf(adsID);
							$rootScope.user.adsLikes.splice(index, 1);
						}
					});
				} else {
					HouseService.likeAds({ adsID: adsID, userID: $rootScope.user.userID }).then(function (res) {
						//alert(res.data.msg);
						//console.log(res);
						if (res.data.success == true || res.data.status == 1) {
							$rootScope.user.adsLikes.push(adsID);
						}
					});
				}
			};
			vm.showMore = function (index) {
				var query = {};
				//Object.assign( query,vm.boSuuTap[index].query);
				_.assign(query, vm.boSuuTap[index].query);
				query.limit = 20;
				query.duAnID = vm.boSuuTap[index].query.duAnID;
				var pid = query.place ? query.place.placeId || query.place.place_id : undefined;
				// $state.go('msearch',{place: pid,loaiTin: query.loaiTin, loaiNhaDat:query.loaiNhaDat,viewMode: "list", query: query})			

				$state.go('mlistMore', { place: pid, loaiTin: query.loaiTin, loaiNhaDat: query.loaiNhaDat, viewMode: "list", query: query });

				//$state.go('msearch', { "place" : $scope.placeSearchId, "loaiTin" : $scope.loaiTin, "loaiNhaDat" : $scope.loaiNhaDat, "viewMode": vm.viewMode}, {location: true});
				//alert('showmore');
			};

			vm.init = function () {
				vm.getLocation();
				if ($rootScope.currentLocation) {
					if ($rootScope.lastSearch) {
						var queryNearBy = {};
						Object.assign(queryNearBy, vm.query);
						// window.RewayServiceUtil.getDiaChinhKhongDauByGeocode($rootScope.currentLocation.lat
						// 	, $rootScope.currentLocation.lon).then(function(diaChinh){
						// 				alert(diaChinh);
						// 			});
						// queryNearBy.place
					} else {}
				} else {
					if ($rootScope.lastSearch) {}
				}
			};
			vm.init();
		});
	})();

/***/ },
/* 30 */
/***/ function(module, exports) {

	'use strict';

	(function () {
	    'use strict';

	    var controllerId = 'MobileSearchCtrl';
	    angular.module('bds').controller(controllerId, function ($rootScope, $http, $scope, $state, HouseService, NewsService, NgMap, $window, $timeout, $location, $localStorage) {
	        var vm = this;
	        // vm.soPhongNguList = window.RewayListValue.getNameValueArray(window.RewayListValue.SoPhongNgu);
	        // vm.soPhongTamList = window.RewayListValue.getNameValueArray(window.RewayListValue.SoPhongTam);
	        // vm.soTangList = window.RewayListValue.getNameValueArray(window.RewayListValue.SoTang);
	        // vm.huongNhaList = window.RewayListValue.getNameValueArray(window.RewayListValue.HuongNha);
	        // vm.radiusInKmList = window.RewayListValue.getNameValueArray(window.RewayListValue.RadiusInKm);
	        // vm.sortOptions = window.RewayListValue.sortHouseOptions;
	        // vm.sortBy = vm.sortOptions[0].value;
	        // vm.price_min = 0;
	        // vm.price_max = window.RewayListValue.filter_max_value.value;
	        // vm.dien_tich_min = 0;
	        // vm.dien_tich_max = window.RewayListValue.filter_max_value.value;
	        // vm.zoomMode = "auto";
	        vm.pageSize = 25;
	        vm.resetResultList = function () {
	            vm.currentPage = 0;
	            vm.lastPageNo = 0;
	            vm.startPageNo = 0;
	            vm.ads_list = [];
	            vm.viewport = undefined;
	            $scope.markers = [];
	            //$scope.$apply();
	        };

	        vm.getLocation = function () {
	            if (vm.poly) vm.poly.setMap(null);
	            if (navigator.geolocation) {
	                navigator.geolocation.getCurrentPosition(function (position) {
	                    $rootScope.searchData.circle = {
	                        center: {
	                            lat: position.coords.latitude,
	                            lon: position.coords.longitude
	                        },
	                        radius: 2
	                    };
	                    vm.initialized = false;

	                    vm.disableIdleHandler();
	                    $rootScope.searchData.viewport = undefined;
	                    $rootScope.searchData.diaChinh = undefined;
	                    $rootScope.searchData.polygon = undefined;
	                    $rootScope.currentLocation.lat = position.coords.latitude;
	                    $rootScope.currentLocation.lon = position.coords.longitude;
	                    $scope.center = "[" + position.coords.latitude + "," + position.coords.longitude + "]";
	                    vm.marker = position;
	                    // homeDataSearch.currentLocation = $rootScope.currentLocation;
	                    //       HouseService.homeDataForApp(homeDataSearch).then(function(res){
	                    //  //alert(JSON.stringify(res));
	                    //  vm.boSuuTap = res.data.data;
	                    // });
	                    // fetchHomeData();                   
	                    vm.resetResultList();
	                    //vm.map.setCenter($scope.center);
	                    vm.search(function () {
	                        //vm.initialized = true;

	                        $timeout(function () {
	                            vm.initialized = true;
	                            //vm.map.fitBounds(bounds);
	                            vm.humanZoom = false;
	                            vm.enableMapIdleHandler();
	                        }, 0);
	                    });
	                }, function (error) {
	                    console.log(error);
	                    // vm.showAskCurrentLocation  = true;
	                    // fetchHomeData();
	                });
	            } else {
	                    // fetchHomeData();
	                }
	        };

	        vm.init = function () {
	            vm.ads_list = [];
	            $scope.center = "Danang";
	            vm.zoomMode = "false";
	            vm.loaiTin = $state.params.loaiTin;
	            vm.loaiNhaDat = $state.params.loaiNhaDat;
	            vm.viewMode = $state.params.viewMode;
	            // vm.diaChinh ={};
	            // vm.diaChinh.tinhKhongDau = $state.params.tinh;
	            // vm.diaChinh.huyenKhongDau = $state.params.huyen;
	            // vm.diaChinh.xaDau = $state.params.xa;
	            vm.placeId = $state.params.placeId;

	            if ($state.params.query) $rootScope.searchData = $state.params.query;
	            vm.viewTemplateUrl = "/web/mobile/list.tpl.html"; //1=map 2= list

	            if ($state.params.viewMode == "list") {
	                vm.viewTemplateUrl = "/web/mobile/list.tpl.html";
	            } else if ($state.params.viewMode == "map") {
	                vm.viewTemplateUrl = "/web/mobile/map.tpl.html";
	            }
	            vm.initMap = true;
	            vm.page = 1;
	            vm.initialized = false;

	            if (vm.placeId) {
	                HouseService.getPlaceByID({ placeId: vm.placeId }).then(function (res) {
	                    if ($state.params.keepViewport && $state.params.keepViewport == true) {} else {
	                        vm.viewport = res.data.place.geometry.viewport;
	                    }
	                    $scope.center = "[" + res.data.place.geometry.location.lat + "," + res.data.place.geometry.location.lon + "]";
	                    if (!$rootScope.searchData.diaChinh) $rootScope.searchData.diaChinh = {};
	                    $rootScope.searchData.diaChinh.tinhKhongDau = res.data.place.codeTinh;
	                    $rootScope.searchData.diaChinh.huyenKhongDau = res.data.place.codeHuyen;
	                    $rootScope.searchData.diaChinh.xaKhongDau = res.data.place.codeXa;
	                    $rootScope.searchData.viewport = vm.viewport;
	                    $rootScope.searchData.placeId = vm.placeId;
	                    vm.search(function () {
	                        if (vm.viewMode == "list") {
	                            vm.initMap = false;
	                        }
	                    });
	                });
	            } else {
	                vm.viewport = $rootScope.searchData.viewport;
	                $rootScope.searchData.viewport = undefined;
	                $rootScope.searchData.diaChinh = undefined;
	                $scope.center = "[14.058324,108.277199]";
	                vm.search(function () {
	                    if (vm.viewMode == "list") {
	                        vm.initMap = false;
	                    }
	                });
	            }
	        };

	        vm.changeBrowserHistory = function () {
	            var url = window.location.href;
	            var index = url.lastIndexOf("/");
	            url = url.substring(0, index + 1) + vm.viewMode;
	            //history.replaceState(null, null, url);          
	        };

	        vm.showList = function () {
	            vm.viewTemplateUrl = "/web/mobile/list.tpl.html";
	            vm.viewMode = "list";
	            // vm.disableIdleHandler();
	            vm.changeBrowserHistory();
	            //vm.map = undefined;			
	        };
	        vm.showMap = function () {
	            vm.viewMode = "map";
	            vm.viewTemplateUrl = "/web/mobile/map.tpl.html";
	            $timeout(function () {
	                vm.mapInitialized();
	            }, 0);
	            vm.changeBrowserHistory();
	        };
	        vm.sort = function (sortByName, sortByType) {
	            $rootScope.searchData.orderBy.name = sortByName;
	            $rootScope.searchData.orderBy.type = sortByType;
	            vm.search();
	        };

	        vm.likeAdsClass = "";

	        vm.likeAds = function (event, adsID) {
	            //event.stopPropagation();
	            if ($rootScope.isLoggedIn() == false) {
	                $scope.$bus.publish({
	                    channel: 'login',
	                    topic: 'show login',
	                    data: { label: "Đăng nhập để lưu BĐS" }
	                });
	                return;
	            }
	            if (!$rootScope.user.adsLikes) {
	                $rootScope.user.adsLikes = [];
	            }
	            var ind = $rootScope.user.adsLikes.indexOf(adsID);
	            if (ind >= 0) {
	                HouseService.unlikeAds({ userID: $rootScope.user.userID, adsID: adsID }).then(function (res) {
	                    if (res.status == 200) {
	                        var index = $rootScope.user.adsLikes.indexOf(adsID);
	                        $rootScope.user.adsLikes.splice(index, 1);
	                    }
	                });
	            } else {
	                HouseService.likeAds({ adsID: adsID, userID: $rootScope.user.userID }).then(function (res) {
	                    //alert(res.data.msg);
	                    //console.log(res);
	                    if (res.data.success == true || res.data.status == 1) {
	                        $rootScope.user.adsLikes.push(adsID);
	                    }
	                });
	            }
	        };

	        vm.searchWithoutViewport = function () {
	            $rootScope.searchData.viewport = undefined;
	            $rootScope.searchData.polygon = undefined;
	            if (vm.poly) {
	                vm.poly.setMap(null);
	            }
	            vm.search();
	        };

	        vm.disableIdleHandler = function () {
	            if (vm.zoomChangeHanlder) google.maps.event.removeListener(vm.zoomChangeHanlder);
	        };
	        vm.enableMapIdleHandler = function () {

	            if (!vm.map) return;
	            vm.disableIdleHandler();
	            vm.zoomChangeHanlder = google.maps.event.addListener(vm.map, "idle", function () {
	                if (vm.initialized == true) {
	                    vm.initialized = false;
	                    vm.humanZoom = true;
	                    // $rootScope.searchData.viewport = [vm.map.getBounds().getSouthWest().lat(),vm.map.getBounds().getSouthWest().lng(), vm.map.getBounds().getNorthEast().lat(),vm.map.getBounds().getNorthEast().lng()];
	                    $rootScope.searchData.viewport = {
	                        southwest: {
	                            lat: vm.map.getBounds().getSouthWest().lat(),
	                            lon: vm.map.getBounds().getSouthWest().lng()
	                        },
	                        northeast: {
	                            lat: vm.map.getBounds().getNorthEast().lat(),
	                            lon: vm.map.getBounds().getNorthEast().lng()
	                        }
	                    };
	                    // $scope.center = "["+vm.map.getCenter().lat() +"," +vm.map.getCenter().lng() +"]";
	                    // //var bounds = vm.map.getBounds();
	                    // //alert($rootScope.searchData.geoBox);
	                    // vm.marker = {
	                    //  id: -1,
	                    //  coords: {latitude: vm.map.getCenter().lat(), longitude: vm.map.getCenter().lng()},
	                    //  content: 'you are here'
	                    // };
	                    vm.viewport = $rootScope.searchData.viewport;
	                    if ($rootScope.user.autoSearch == false) {
	                        vm.initialized = true;
	                        vm.humanZoom = false;
	                        return;
	                    }
	                    vm.search(function () {
	                        $timeout(function () {
	                            vm.initialized = true;
	                            //vm.map.fitBounds(bounds);
	                            vm.humanZoom = false;
	                        }, 0);
	                    });
	                    // alert('human zoom');
	                } else {
	                        console.log("not human zoom and turn to human zoom");
	                        $timeout(function () {
	                            vm.initialized = true;
	                            //vm.map.fitBounds(bounds);
	                            vm.humanZoom = false;
	                        }, 200);
	                    }
	            });
	        };
	        $scope.$on("$destroy", function () {
	            // google.maps.event.removeListener(vm.zoomChangeHanlder);
	            // google.maps.event.removeListener(vm.dragendHanlder);
	            vm.disableIdleHandler();
	        });

	        vm.mapInitialized = function () {
	            //vm.initialized = true;
	            // alert('aa');

	            if (!vm.map && vm.viewMode == 'map') {
	                vm.map = NgMap.initMap('searchmap');
	                vm.initialized = false;
	                var southWest = new google.maps.LatLng(vm.viewport.southwest.lat, vm.viewport.southwest.lon);
	                var northEast = new google.maps.LatLng(vm.viewport.northeast.lat, vm.viewport.northeast.lon);
	                var bounds = new google.maps.LatLngBounds(southWest, northEast);
	                if (vm.humanZoom != true && vm.viewport.northeast.lat && vm.viewport.southwest.lat && vm.map) {
	                    var zoom = vm.map.zoom;
	                    // vm.map.setZoom(20);
	                    vm.map.fitBounds(bounds);
	                    // vm.map.setCenter(bounds.getCenter()); 
	                    // vm.map.setZoom(zoom);
	                    //vm.map.setCenter(vm.map.getBounds().getCenter());                        
	                    //$scope.center = 'Hanoi';
	                }
	                $timeout(function () {
	                    vm.showCC = true;
	                    // google.maps.event.removeListener(zoomChangeHanlder);
	                    // if(google.maps.event.hasListeners(map,'zoom_changed')!=true){
	                    // google.maps.event.clearInstanceListeners(map);
	                    vm.enableMapIdleHandler();
	                    vm.humanZoom = false;
	                    vm.initialized = true;
	                }, 500);
	            }

	            // vm.dragendHanlder = google.maps.event.addListener(vm.map, "dragend", function() {
	            //          	//alert(vm.map.getBounds());
	            // 	//$rootScope.searchData.geoBox = [vm.map.getBounds().getSouthWest().lat(),vm.map.getBounds().getSouthWest().lng(),vm.map.getBounds().getNorthEast().lat(),vm.map.getBounds().getNorthEast().lng()];

	            //              $rootScope.searchData.viewport = {
	            //                  southwest: {
	            //                      lat: vm.map.getBounds().getSouthWest().lat(),
	            //                      lon: vm.map.getBounds().getSouthWest().lng()
	            //                  },
	            //                  northeast: {
	            //                      lat: vm.map.getBounds().getNorthEast().lat(),
	            //                      lon: vm.map.getBounds().getNorthEast().lng()
	            //                  }
	            //              };
	            // 	//alert($rootScope.searchData.geoBox);
	            // 	$scope.center = "["+vm.map.getCenter().lat() +"," +vm.map.getCenter().lng() +"]";
	            // 	vm.marker = {
	            // 		id: -1,
	            // 		coords: {latitude: vm.map.getCenter().lat(), longitude: vm.map.getCenter().lng()},
	            // 		content: 'you are here'
	            // 	};
	            //              vm.viewport = $rootScope.searchData.viewport;
	            // 	// $scope.$apply();
	            //         	vm.search();
	            //  			//alert('dragend');
	            //  			//alert($rootScope.searchData.geoBox);
	            //       });

	            // }
	        };

	        /*vm.searchData = {
	        	"loaiTin": vm.loaiTin,
	        	"loaiNhaDat": vm.loaiNhaDat, 
	        	"loaiNhaDats": [],
	          	"giaBETWEEN": [vm.price_min,vm.price_max],
	          	"khoangGia": vm.khoangGia, 
	          	"khoangDienTich": vm.khoangDienTich,
	          	"soPhongNguGREATER": vm.soPhongNguList[0].value,
	          	"soPhongTamGREATER": vm.soPhongTamList[0].value,
	          	"soTangGREATER": vm.soTangList[0].value,
	          	"dienTichBETWEEN": [0,vm.dien_tich_max],
	          	"huongNha": vm.huongNhaList[0].value,
	          	"huongNhas": [],
	          	"radiusInKm": 2,
	          	"userID": $rootScope.user.userID,
	          	//"geoBox": [  vm.map.getBounds().H.j,  vm.map.getBounds().j.j ,vm.map.getBounds().H.H, vm.map.getBounds().j.H],
	          	"limit": vm.pageSize,
	          	"orderBy": vm.sortOptions[0].value,
	          	"pageNo": 1
	        }*/
	        vm.goDetail = function (event, i) {
	            $state.go('mdetail', { "adsID": vm.ads_list[i].adsID }, { location: true });
	        };
	        vm.showSaveSearch = function () {
	            if ($rootScope.isLoggedIn()) {
	                $('#saveBox').modal("show");
	            } else {
	                $scope.$bus.publish({
	                    channel: 'login',
	                    topic: 'show login',
	                    data: { label: "Đăng nhập để lưu tìm kiếm" }
	                });
	            }
	        };
	        vm.saveSearch = function () {
	            if (!vm.saveSearchName) {
	                vm.blankName = true;
	                return;
	            }
	            var data = {
	                query: $rootScope.searchData,
	                userID: $rootScope.user.userID,
	                saveSearchName: vm.saveSearchName
	            };

	            HouseService.saveSearch(data).then(function (res) {
	                //alert(res.data.msg);
	                if (res.data.success) {
	                    vm.blankName = false;
	                    vm.saveSearchName = '';
	                    vm.nameSaveSearch = false;
	                    $('#saveBox').modal("hide");
	                    $rootScope.user.saveSearch.push(data);
	                }
	            });
	        };
	        /*start draw freehand*/
	        vm.drawText = "Draw";

	        vm.drawFreeHand = function () {

	            //the polygon
	            vm.poly = new google.maps.Polyline({ map: vm.map, clickable: false });

	            //move-listener
	            if (vm.drawMove) google.maps.event.removeListener(vm.drawMove);

	            vm.drawMove = google.maps.event.addListener(vm.map, 'mousemove', function (e) {
	                //e.preventDefault();
	                vm.poly.getPath().push(e.latLng);
	            });

	            //mouseup-listener
	            google.maps.event.addListenerOnce(vm.map, 'mouseup', function (e) {
	                //google.maps.event.removeListener(vm.drawMove);
	                var path = vm.poly.getPath();
	                vm.poly.setMap(null);
	                vm.poly = new google.maps.Polygon({ map: vm.map, path: path });

	                //search here
	                if (vm.poly) {
	                    $rootScope.searchData.polygon = [];
	                    var polyData = vm.poly.latLngs.b[0].b;
	                    for (var i = polyData.length - 1; i >= 0; i--) {
	                        $rootScope.searchData.polygon.push({
	                            lat: polyData[i].lat(),
	                            lon: polyData[i].lng()
	                        });
	                    }
	                }

	                vm.search(function () {
	                    if (vm.viewMode == "list") {
	                        vm.initMap = false;
	                    }
	                });

	                //google.maps.event.clearListeners(vm.map.getDiv(), 'mousedown');

	                //vm.enable()
	            });
	        };
	        vm.disable = function () {
	            vm.map.setOptions({
	                draggable: false,
	                zoomControl: false,
	                scrollwheel: false,
	                disableDoubleClickZoom: false
	            });
	        };

	        vm.enable = function () {
	            vm.map.setOptions({
	                draggable: true,
	                zoomControl: true,
	                scrollwheel: true,
	                disableDoubleClickZoom: true
	            });
	            if (vm.drawMove) {
	                google.maps.event.removeListener(vm.drawMove);
	                vm.drawMove = undefined;
	            }
	        };
	        vm.freeHand = false;
	        vm.toggleDrawMode = function (e) {
	            if (vm.freeHand == false) {
	                e.preventDefault();
	                console.log("enable draws");
	                vm.freeHand = true;

	                vm.disable();
	                google.maps.event.addDomListener(vm.map.getDiv(), 'mousedown', function (e) {
	                    if (vm.poly) {
	                        vm.poly.setMap(null);
	                    }
	                    vm.drawFreeHand();
	                });
	            } else {
	                if (vm.poly) {
	                    vm.poly.setMap(null);
	                }
	                // google.maps.event.clearListeners(vm.map.getDiv(), 'mousemove');                  
	                google.maps.event.clearListeners(vm.map.getDiv(), 'mousedown');
	                vm.enable();
	                vm.freeHand = false;
	                $rootScope.searchData.polygon = undefined;
	            }
	        };
	        /*end draw freehand*/
	        vm.updateStreetview = function (ads, fn) {
	            var STREETVIEW_MAX_DISTANCE = 100;
	            var latLng = new google.maps.LatLng(ads.place.geo.lat, ads.place.geo.lon);
	            var streetViewService = new google.maps.StreetViewService();
	            streetViewService.getPanoramaByLocation(latLng, STREETVIEW_MAX_DISTANCE, function (streetViewPanoramaData, status, res) {
	                if (status === google.maps.StreetViewStatus.OK) {
	                    ads.streetviewLatLng = streetViewPanoramaData.location.latLng;
	                }
	            });
	        };
	        vm.disableScrolling = true;

	        //vm.page =1;
	        vm.nextPage = function () {
	            vm.disableScrolling = true;
	            //vm.initialized = false;  
	            $('#searchmap').hide();
	            //alert('aaaa');
	            vm.currentPage = vm.currentPage + 1;
	            $rootScope.searchData.pageNo = vm.currentPage;
	            if ($rootScope.searchData.place) $rootScope.searchData.place.radiusInKm = $rootScope.searchData.radiusInKm;
	            $rootScope.searchData.userID = $rootScope.user.userID || undefined;
	            HouseService.findAdsSpatial($rootScope.searchData).then(function (res) {
	                var result = res.data.list;
	                for (var i = 0; i < result.length; i++) {
	                    var ads = result[i];
	                    ads.giaFmt = ads.giaFmtForWeb;

	                    if ($rootScope.alreadyLike(ads.adsID) == true) ads.liked = true;
	                    var length = result.length;
	                    var fn = function fn() {
	                        if (i < length) {
	                            vm.updateStreetview(result[i], fn);
	                        }
	                    };
	                    fn();

	                    result[i].index = i;
	                    if (ads.huongNha) {
	                        ads.huongNha = window.RewayListValue.getHuongNhaDisplay(ads.huongNha);
	                    } else {
	                        ads.huongNha = "";
	                    }
	                    if (result[i].place) {
	                        if (result[i].place.geo) {
	                            result[i].map = {
	                                center: {
	                                    latitude: result[i].place.geo.lat,
	                                    longitude: result[i].place.geo.lon
	                                },
	                                marker: {
	                                    id: i,
	                                    coords: {
	                                        latitude: result[i].place.geo.lat,
	                                        longitude: result[i].place.geo.lon
	                                    },
	                                    content: result[i].giaFmt,
	                                    data: 'test'
	                                },
	                                options: {
	                                    scrollwheel: false
	                                },
	                                zoom: 14
	                            };
	                        }
	                    }
	                }
	                vm.ads_list = vm.ads_list.concat(res.data.list);
	                // $scope.markers = [];
	                for (var i = 0; i < res.data.list.length; i++) {
	                    var ads = res.data.list[i];
	                    if (res.data.list[i].map) $scope.markers.push(res.data.list[i].map.marker);
	                }
	                vm.disableScrolling = false;
	                // vm.initialized = false;  
	                $('#searchmap').show();
	            });
	        };
	        // vm.initMap = function(){
	        //     if(!vm.map){
	        //         vm.map = NgMap.initMap('searchmap');
	        //         vm.mapInitialized(vm.map);
	        //     }
	        // }

	        vm.searchPage = function (i, callback) {
	            $rootScope.searchData.pageNo = i;
	            $rootScope.searchData.userID = $rootScope.user.userID || undefined;
	            //$rootScope.searchData.dienTichBETWEEN[0] = $rootScope.searchData.khoangDienTich.value.min;
	            //$rootScope.searchData.dienTichBETWEEN[1] = $rootScope.searchData.khoangDienTich.value.max;
	            vm.initialized = false;

	            // vm.khoangGiaList[]
	            // $rootScope.searchData.khoangGia
	            HouseService.findAdsSpatial($rootScope.searchData).then(function (res) {
	                var result = res.data.list;
	                //vm.totalResultCounts = res.data.list.length;
	                if (!result || result.length == 0) {
	                    //$rootScope.showNotify("Không thấy bất động sản thỏa mãn điều kiện tìm kiếm", ".heartNotify");
	                    vm.noResult = true;
	                } else {
	                    vm.noResult = false;
	                }

	                for (var i = 0; i < result.length; i++) {
	                    var ads = result[i];
	                    ads.giaFmt = ads.giaFmtForWeb;

	                    if ($rootScope.alreadyLike(ads.adsID) == true) ads.liked = true;
	                    var length = result.length;
	                    var fn = function fn() {
	                        if (i < length) {
	                            vm.updateStreetview(result[i], fn);
	                        }
	                    };
	                    fn();

	                    result[i].index = i;
	                    if (ads.huongNha) {
	                        ads.huongNha = window.RewayListValue.getHuongNhaDisplay(ads.huongNha);
	                    } else {
	                        ads.huongNha = "";
	                    }
	                    if (result[i].place) {
	                        if (result[i].place.geo) {
	                            result[i].map = {
	                                center: {
	                                    latitude: result[i].place.geo.lat,
	                                    longitude: result[i].place.geo.lon
	                                },
	                                marker: {
	                                    id: i,
	                                    coords: {
	                                        latitude: result[i].place.geo.lat,
	                                        longitude: result[i].place.geo.lon
	                                    },
	                                    content: result[i].giaFmt,
	                                    data: 'test',
	                                    count: 1
	                                },
	                                options: {
	                                    scrollwheel: false
	                                },
	                                zoom: 14
	                            };
	                        }
	                    }
	                }
	                vm.ads_list = res.data.list;

	                $scope.markers = [];
	                if (vm.viewport) {
	                    //$scope.center = [vm.viewport.center.lat,vm.viewport.center.lon]; 
	                    var southWest = new google.maps.LatLng(vm.viewport.southwest.lat, vm.viewport.southwest.lon);
	                    var northEast = new google.maps.LatLng(vm.viewport.northeast.lat, vm.viewport.northeast.lon);
	                    var bounds = new google.maps.LatLngBounds(southWest, northEast);

	                    if (vm.humanZoom != true && vm.viewport.northeast.lat && vm.viewport.southwest.lat && vm.map) {
	                        var zoom = vm.map.zoom;
	                        // vm.map.setZoom(20);
	                        vm.map.fitBounds(bounds);
	                        // vm.map.setCenter(bounds.getCenter()); 
	                        vm.map.setZoom(zoom);
	                        //vm.map.setCenter(vm.map.getBounds().getCenter());                        
	                        //$scope.center = 'Hanoi';
	                    }
	                }

	                for (var i = 0; i < res.data.list.length; i++) {
	                    var ads = res.data.list[i];
	                    if (res.data.list[i].map) {
	                        var dup = false;
	                        for (var j = 0; j < $scope.markers.length; j++) {
	                            var marker = $scope.markers[j];
	                            if (marker.coords.latitude == res.data.list[i].map.marker.latitude && marker.coords.longitude == res.data.list[i].map.marker.longitude) {
	                                marker.count = marker.count + 1;
	                                dup = true;
	                                break;
	                            }
	                        }
	                        if (dup == false) {
	                            $scope.markers.push(res.data.list[i].map.marker);
	                        }
	                    }
	                }
	                /*if(vm.ads_list.length==0){
	                    vm.zoomMode = "false";
	                }else{
	                    vm.zoomMode = "auto";
	                }*/

	                vm.currentPageStart = vm.pageSize * ($rootScope.searchData.pageNo - 1) + 1;
	                vm.currentPageEnd = vm.currentPageStart + res.data.list.length - 1;
	                vm.currentPage = $rootScope.searchData.pageNo;

	                vm.mapInitialized();
	                // if(vm.map){
	                //     vm.disableIdleHandler();
	                //     google.maps.event.addListenerOnce(vm.map, 'idle', function() {
	                //         vm.enableMapIdleHandler();
	                //         vm.initialized = true;
	                //         vm.doneSearch = true;  
	                //     });   
	                // }           

	                $timeout(function () {
	                    $('body').scrollTop(0);
	                    // vm.initialized = true; 
	                    vm.doneSearch = true;
	                }, 0);

	                // if($rootScope.isLoggedIn()){
	                //     $rootScope.user.lastSearch = $rootScope.searchData;
	                // }

	                if (vm.ads_list && vm.ads_list.length > 0) {
	                    $rootScope.addLastSearch($localStorage, $rootScope.searchData);
	                    if (vm.diaChinh) HouseService.findDuAnHotByDiaChinhForSearchPage({ diaChinh: vm.diaChinh }).then(function (res) {
	                        if (res.data.success == true) vm.duAnNoiBat = res.data.duAnNoiBat;
	                    });
	                }
	                vm.disableScrolling = false;
	                if ($rootScope.searchData.pageNo > 1 && result && result.length > 0) {
	                    $timeout(function () {
	                        $rootScope.showNotify("Đang hiển thị từ " + vm.currentPageStart + "-" + vm.currentPageEnd + " / " + vm.totalResultCounts + " kết quả phù hợp", ".mapsnotify");
	                    }, 100);
	                }
	                if (callback) callback(res);
	            });
	        };

	        vm.prev = function () {
	            if (vm.currentPage >= 2) {
	                vm.currentPage = vm.currentPage - 1;
	                vm.searchPage(vm.currentPage);
	            }
	        };
	        vm.next = function () {
	            if (vm.totalResultCounts > 0 && vm.totalResultCounts > (vm.currentPage + 1) * vm.pageSize) {
	                vm.currentPage = vm.currentPage + 1;
	                vm.searchPage(vm.currentPage);
	            }
	        };
	        vm.refreshPage = function () {
	            if ($rootScope.user.autoSearch == true) {} else {
	                //vm.searchPage(vm.currentPage);
	                // vm.searchPage(1);
	                google.maps.event.clearListeners(vm.map.getDiv(), 'mousedown');
	                vm.enable();
	                vm.freeHand = false;
	                $rootScope.searchData.polygon = undefined;
	                vm.search();
	            }
	        };
	        vm.search = function (callback) {
	            // if($scope.searchPlaceSelected.geometry.viewport){
	            /*if($rootScope.searchData.viewport){
	            	console.log("Tim ads for viewport: " + JSON.stringify($rootScope.searchData.viewport));
	            }else if(vm.onePoint == false){
	                console.log("Tim ads for Tinh Huyen Xa: " + googlePlace.formatted_address);
	                $rootScope.searchData.geoBox = [googlePlace.geometry.viewport.getSouthWest().lat(),googlePlace.geometry.viewport.getSouthWest().lng(),googlePlace.geometry.viewport.getNorthEast().lat(),googlePlace.geometry.viewport.getNorthEast().lng()]
	                //$rootScope.searchData.radiusInKm = undefined;
	            } else{
	                console.log("Tim ads for dia diem: " + googlePlace.formatted_address);
	                //data.radiusInKm = "10";
	                var placeData = {
	                    placeId: googlePlace.place_id || googlePlace.placeId,
	                    relandTypeName : window.RewayPlaceUtil.getTypeName(googlePlace),
	                    radiusInKm :  $rootScope.searchData.radiusInKm,
	                    currentLocation: undefined
	                }
	                $rootScope.searchData.place = placeData;
	                $rootScope.searchData.geoBox = undefined;
	            }*/
	            $rootScope.searchData.userID = $rootScope.user.userID;
	            $rootScope.lastSearch = $rootScope.searchData;

	            /*HouseService.countAds($rootScope.searchData).then(function(res){
	                vm.totalResultCounts = res.data.countResult;
	                $scope.markers =[];
	                vm.ads_list = [];
	                if(vm.totalResultCounts>0){
	                    vm.currentPage = 1;
	                    vm.lastPageNo = Math.ceil(vm.totalResultCounts/vm.pageSize);
	                    vm.currentPageStart = 1;
	                    vm.currentPageEnd = (vm.totalResultCounts >= vm.pageSize?vm.pageSize-1: vm.totalResultCounts-1);
	                  } else{
	                    vm.currentPage = 0;
	                    vm.lastPageNo = 0;
	                    vm.startPageNo = 0;
	                }
	                vm.searchPage(1,callback);
	            });*/
	            $rootScope.searchData.isIncludeCountInResponse = true;
	            vm.searchPage(1, function (res) {
	                $rootScope.searchData.isIncludeCountInResponse = false;
	                vm.totalResultCounts = res.data.totalCount;
	                if (vm.totalResultCounts > 0) {
	                    vm.currentPage = 1;
	                    vm.lastPageNo = Math.ceil(vm.totalResultCounts / vm.pageSize);
	                    vm.currentPageStart = 1;
	                    vm.currentPageEnd = vm.totalResultCounts >= vm.pageSize ? vm.pageSize - 1 : vm.totalResultCounts - 1;
	                } else {
	                    vm.currentPage = 0;
	                    vm.lastPageNo = 0;
	                    vm.startPageNo = 0;
	                }
	                $timeout(function () {
	                    if (vm.totalResultCounts > 0) $rootScope.showNotify("Tìm thấy " + vm.totalResultCounts + " kết quả phù hợp", ".mapsnotify");
	                }, 100);

	                if (callback) callback(res);
	            });
	            // vm.searchPage(1,null);
	        };

	        //vm.search();

	        /*NgMap.getMap('searchmap').then(function(map){
	        	vm.map = map; 
	            // window.RewayClientUtils.createPlaceAutoComplete(vm.selectPlaceCallback,"searchadd",map);
	            vm.PlacesService =  new google.maps.places.PlacesService(map);
	            if(vm.placeId){
	                vm.PlacesService.getDetails({
	                    placeId: vm.placeId
	                }, function(place, status) {
	                    if (status === google.maps.places.PlacesServiceStatus.OK) {
	                    	vm.place = place;
	                        $rootScope.searchData.place = place;
	                        $rootScope.searchData.geoBox = undefined;
	                        //var map = $scope.map.control.getGMap();
	                        var current_bounds = map.getBounds();
	                        //$scope.map.center =  
	                        $scope.center = "["+place.geometry.location.lat() +"," +place.geometry.location.lng() +"]";
	                        if(place.geometry.viewport){
	                            //map.fitBounds(place.geometry.viewport);   
	                            //$scope.map
	                        } else if( !current_bounds.contains( place.geometry.location ) ){
	                            var new_bounds = current_bounds.extend(place.geometry.location);
	                            //map.fitBounds(new_bounds);
	                            //$digest();
	                        }
	                        vm.marker = {
	        id: -1,
	        coords: {latitude: place.geometry.location.lat(), longitude: place.geometry.location.lng()},
	        content: 'you are here'
	        };
	                        $scope.$apply();
	                        vm.search(function(){
	                        	if(vm.viewMode=="list"){
	                        		vm.initMap = false;
	                        	}
	                        });
	                    }
	                });
	            }            
	        });*/

	        vm.init();
	    });
	})();

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	(function () {
		'use strict';

		var controllerId = 'MobileDetailCtrl';
		angular.module('bds').controller(controllerId, function ($rootScope, $http, $scope, $state, HouseService, RewayCommonUtil, NewsService, NgMap, $window, $timeout, $location) {
			var vm = this;
			vm.adsID = $state.params.adsID;
			vm.marker = {
				id: 1,
				coords: {
					latitude: 16.0439,
					longitude: 108.199
				},
				content: undefined,
				data: 'test'
			};
			var _ = __webpack_require__(5);
			vm.center = [21.0363818591319, 105.80105538518103];
			vm.reportCode = 1;
			vm.showStreetView = false;
			vm.searchDataXungQuanh = {
				// "loaiTin": vm.ads.loaiTin,
				// "loaiNhaDat": [0],
				"loaiTin": 0,
				"giaBETWEEN": [0, 99999999999999],
				"dienTichBETWEEN": [0, 99999999999999],
				"soPhongNguGREATER": 0,
				"soPhongTamGREATER": 0,
				"soTangGREATER": 0,
				"ngayDangTinGREATER": "20150601",
				"orderBy": { "name": "ngayDangTin", "type": "ASC" },
				"limit": 5,
				"pageNo": 1,
				"isIncludeCountInResponse": false,
				"updateLastSearch": false
			};
			vm.searchDataTuongTu = {
				// "loaiTin": vm.ads.loaiTin,
				// "loaiNhaDat": vm.ads.loaiNhaDat,
				"limit": 9,
				"soPhongNguGREATER": 0,
				"soPhongTamGREATER": 0,
				"soTangGREATER": 0,
				"dienTichBETWEEN": [0, 99999999999999],
				"giaBETWEEN": [0, 99999999999999],
				"updateLastSearch": false,
				"orderBy": { name: "ngayDangTin", type: "DESC" },
				"pageNo": 1
			};

			$scope.showAlert = function (ev) {
				// Appending dialog to document.body to cover sidenav in docs app
				// Modal dialogs should fully cover application
				// to prevent interaction outside of dialog
				console.log("--------------showAlert----------");
				$mdDialog.show($mdDialog.alert().parent(angular.element(document.querySelector('#popupContainer'))).clickOutsideToClose(true).title('This is an alert title').textContent('You can specify some description text in here.').ariaLabel('Alert Dialog Demo').ok('Got it!').targetEvent(ev));
			};

			vm.openChat = function (event) {
				vm.userPostAdsExist = false;
				if (!vm.userPostAdsExist) {
					if (vm.ads && vm.ads.dangBoi.userID) {
						HouseService.getUserInfo({ userID: vm.ads.dangBoi.userID }).then(function (res) {
							if (res.status == 200 && res.data.status == 0) {
								vm.userPostAdsExist = true;
							}
							if (vm.userPostAdsExist) {
								if ($rootScope.isLoggedIn() == false) {
									$scope.$bus.publish({
										channel: 'login',
										topic: 'show login',
										data: { label: "Đăng nhập để trao đổi" }
									});
									return true;
								}
								$state.go('mchatDetail', { "adsID": vm.adsID });
								$(".overlay").click();
							} else {
								if (vm.ads.dangBoi.phone) {
									console.log("--------------tellTo----1---------------");
									var href = $('#tellTo').attr('href');
									window.location.href = href;
									console.log("--------------tellTo--------1-2----------");
								} else if (vm.ads.dangBoi.email) {
									console.log("--------------mailTo----1---------------");
									var href = $('#mailTo').attr('href');
									window.location.href = href;
									console.log("--------------mailTo--------1-2----------");
								}
							}
						});
					} else {
						if (vm.ads.dangBoi.phone) {
							console.log("--------------tellTo----1---------------");
							var href = $('#tellTo').attr('href');
							window.location.href = href;
							console.log("--------------tellTo--------1-2----------");
						} else if (vm.ads.dangBoi.email) {
							console.log("--------------mailTo----1---------------");
							var href = $('#mailTo').attr('href');
							window.location.href = href;
							console.log("--------------mailTo--------1-2----------");
						}
					}
				} else {
					if ($rootScope.isLoggedIn() == false) {
						$scope.$bus.publish({
							channel: 'login',
							topic: 'show login',
							data: { label: "Đăng nhập để trao đổi" }
						});
						return true;
					}
					//ngDialog.open({ template: 'templateId' });
					$state.go('mchatDetail', { "adsID": vm.adsID });
					$(".overlay").click();
				}
			};

			if (navigator.geolocation) {
				navigator.geolocation.getCurrentPosition(function (position) {
					$rootScope.currentLocation.lat = position.coords.latitude;
					$rootScope.currentLocation.lon = position.coords.longitude;
				}, function (error) {
					console.log(error);
				});
			} else {}
			HouseService.detailAds({ adsID: vm.adsID, userID: $rootScope.user.userID }).then(function (res) {
				//console.log("res.data " + res.data.ads);
				$rootScope.user.lastViewAds = vm.adsID;
				vm.ads = res.data.ads;
				vm.ads.chiTietThuGon = vm.ads.chiTiet;
				if (vm.ads.chiTiet.length > 30) {
					vm.ads.chiTietThuGon = vm.ads.chiTiet.substring(0, 300);
				}
				vm.ads.place.diaChinh.tinhKhongDau = window.RewayUtil.locDau(vm.ads.place.diaChinh.tinh);
				vm.ads.place.diaChinh.huyenKhongDau = window.RewayUtil.locDau(vm.ads.place.diaChinh.huyen);
				vm.placeSearchText = vm.ads.place.diaChinh.huyen + "," + vm.ads.place.diaChinh.tinh;
				// if($rootScope.alreadyLike(vm.ads.adsID) ==  true)
				// 	vm.likeAdsClass ="fa-heart";
				var price_min = 0;
				var price_max = window.RewayListValue.filter_max_value.value;
				var dien_tich_min = 0;
				var dien_tich_max = window.RewayListValue.filter_max_value.value;
				vm.center = [vm.ads.place.geo.lat, vm.ads.place.geo.lon];
				vm.marker.content = vm.ads.giaFmt;
				vm.marker.coords.latitude = vm.ads.place.geo.lat;
				vm.marker.coords.longitude = vm.ads.place.geo.lon;
				vm.likeAdsClass = "";

				vm.likeAds = function (event, adsID) {
					//event.stopPropagation();
					if ($rootScope.isLoggedIn() == false) {
						$scope.$bus.publish({
							channel: 'login',
							topic: 'show login',
							data: { label: "Đăng nhập để lưu BĐS" }
						});
						return;
					}
					HouseService.likeAds({ adsID: adsID, userID: $rootScope.user.userID }).then(function (res) {
						//alert(res.data.msg);
						//console.log(res);
						if (res.data.success == true || res.data.status == 1) {
							$rootScope.user.adsLikes.push(adsID);
						}
					});
				};

				var pageSize = 8;

				vm.name = "";
				vm.phone = "";
				vm.email = "";
				vm.content = "Tôi muốn tìm hiểu thêm thông tin về bất động sản tại " + window.location.href + ", xin vui lòng liên hệ lại sớm.";
				vm.requestInfoClass = "btn-submit";
				vm.clearInfoRequest = function () {
					vm.name = "";
					vm.phone = "";
					vm.email = "";
					vm.content = "Tôi muốn tìm hiểu thêm thông tin về bất động sản tại " + window.location.href + ", xin vui lòng liên hệ lại sớm.";
				};

				if (vm.ads.place.diaChinh) {
					HouseService.findDuAnHotByDiaChinhForDetailPage({ diaChinh: vm.ads.place.diaChinh }).then(function (res) {
						if (res.data.success == true) vm.listDuAnNoiBat = res.data.listDuAnNoiBat;
					});
				}

				vm.goBack = function () {
					// if($rootScope.lastState.abstract == true){
					// 	var webIdx = window.location.href.indexOf("/web/");
					//         		var homeUrl = window.location.href.substring(0,webIdx) + "/web/index.html";
					//         		window.location.href = homeUrl;
					// }else{
					// 	$state.go($rootScope.lastState, $rootScope.lastStateParams);
					// }
					//$window.history.back();
					$state.go($rootScope.lastState, $rootScope.lastStateParams);
				};

				vm.setReportCode = function (reportCode) {
					vm.reportCode = reportCode;
				};
				vm.sendReport = function () {

					var data = {
						reportCode: vm.reportCode,
						reportContent: vm.reportContent,
						reportObjID: vm.ads.adsID
					};

					if ($rootScope.isLoggedIn()) {
						data.reportUserID = $rootScope.user.userID;
					}
					HouseService.reportReland(data).then(function (res) {
						if (res.data.success == true) {
							// alert('ok');
							$('#detailAlertBox').modal("hide");
						} else {
							vm.reportRelandErrMsg = res.data.errMsg;
						}
					});
				};

				var showMore = function showMore(searchData) {
					// var url = "https://maps.googleapis.com/maps/api/geocode/json?" +
					//      "key=AIzaSyAnioOM0qiWwUoCz8hNS8B2YuzKiYYaDdU" +
					//      "&latlng=" + vm.ads.place.geo.lat + ',' + vm.ads.place.geo.lon;
					//    console.log(url);
					//    $http.get(url,{}).then(function(res){
					//    	var place = res.data.results[0];
					//    	var query =  {};
					// 	//Object.assign( query,vm.boSuuTap[index].query);
					// 	_.assign(query,searchData);
					// 	query.limit = 20;				
					// 	//$state.go('msearch',{place: place.place_id, loaiTin: query.loaiTin, loaiNhaDat:query.loaiNhaDat,viewMode: "list", query: query})							

					//    });
					var query = {};
					var clone = _.cloneDeep(searchData);

					$state.go('mlistMore', { query: clone });
				};
				vm.showMoreTuongTu = function () {
					showMore(vm.searchDataTuongTu);
				};
				vm.showMoreXungQuanh = function () {
					showMore(vm.searchDataXungQuanh);
				};
				$('#mapsBox').on('show.bs.modal', function (e) {
					$timeout(function () {
						if (!vm.fullMap) {
							vm.fullMap = NgMap.initMap('fullMap');
						}
						vm.fullMap.getStreetView().setVisible(vm.showStreetView);
						if (vm.showStreetView == true) {
							vm.fullMap.getStreetView().setPosition(vm.ads.streetviewLatLng);
							// vm.showStreetView = false;
						}
					}, 300);
				});

				vm.updateStreetview = function (ads, fn) {
					var STREETVIEW_MAX_DISTANCE = 500;
					var latLng = new google.maps.LatLng(ads.place.geo.lat, ads.place.geo.lon);
					var streetViewService = new google.maps.StreetViewService();
					streetViewService.getPanoramaByLocation(latLng, STREETVIEW_MAX_DISTANCE, function (streetViewPanoramaData, status, res) {
						if (status === google.maps.StreetViewStatus.OK) {
							ads.streetviewLatLng = streetViewPanoramaData.location.latLng;
						}
					});
				};

				vm.updateStreetview(vm.ads);

				vm.showFullMap = function () {
					vm.showStreetView = false;
					$('#mapsBox').modal("show");
				};
				vm.showFullMapWithStreetView = function () {
					vm.showStreetView = true;
					$('#mapsBox').modal("show");
				};

				vm.userLoggedIn = function () {
					if ($rootScope.user.userName) {
						vm.name = $rootScope.user.userName;
					}
					if ($rootScope.user.phone) vm.phone = parseInt($rootScope.user.phone);
					vm.email = $rootScope.user.userEmail;
					if (vm.ads.dangBoi.userID == $rootScope.user.userID) vm.showLuotXem = true;
					if (vm.ads.dangBoi.email == $rootScope.user.userEmail) vm.showLuotXem = true;
				};

				$scope.$bus.subscribe({
					channel: 'user',
					topic: 'logged-in',
					callback: function callback(data, envelope) {
						//console.log('add new chat box', data, envelope);
						vm.userLoggedIn();
					}
				});
				if ($rootScope.isLoggedIn()) {
					vm.userLoggedIn();
				}

				vm.requestInfo = function () {
					if ($('#form-info-request').valid()) {
						vm.requestInfoClass = 'btn-submit-disabled';
						HouseService.requestInfo({
							name: vm.name,
							phone: vm.phone,
							email: vm.email,
							content: vm.content,
							adsUrl: window.location.href
						}).then(function (res) {
							console.log(JSON.stringify(res.data));
							vm.requestInfoClass = 'btn-submit';
							vm.clearInfoRequest();
						});
					}
				};
				vm.requestInfoPopup = function () {
					if ($('#form-info-request-popup').valid()) {
						vm.requestInfoClass = 'btn-submit-disabled';
						HouseService.requestInfo({
							name: vm.name,
							phone: vm.phone,
							email: vm.email,
							content: vm.content,
							adsUrl: window.location.href
						}).then(function (res) {
							console.log(JSON.stringify(res.data));
							vm.requestInfoClass = 'btn-submit';
							vm.clearInfoRequest();
						});
					}
				};

				vm.goDetail = function (adsID) {
					$state.go('mdetail', { "adsID": adsID }, { location: true });
				};
				vm.goChats = function () {
					$state.go('mchats', { "adsID": vm.ads.adsID }, { location: true });
				};
				vm.showMinimapHome = function () {
					//vm.map.setCenter(chicago);
					// vm.center = [vm.ads.place.geo.lat,vm.ads.place.geo.lon];
					vm.home = new google.maps.LatLng(vm.ads.place.geo.lat, vm.ads.place.geo.lon);
					vm.map.setCenter(vm.home);
					//alert('aaaa');
					//$scope.$apply();
				};
				NgMap.getMap().then(function (map) {
					vm.map = map;
				});

				$timeout(function () {
					var price = vm.ads.gia; /* don vi trieu*/
					var percentOfPrice = 0.7;/ duoc vay 70% /;
					var numOfMonth = 12 * 15;/ vay 15 nam /;
					var interestRatePerYear = 0.12;/ lai suat nam /;
					vm.patc = RewayCommonUtil.getPaymentPerMonth(price * percentOfPrice, numOfMonth, interestRatePerYear);
					vm.patc.payment = Math.round(vm.patc.payment * 100) / 100;
					vm.patc.interest = Math.round(vm.patc.interest * 100) / 100;

					$("#phgantaichinh").drawDoughnutChart([{ title: "Gốc", value: vm.patc.payment, color: "#20c063" }, { title: "Lãi", value: vm.patc.interest, color: "#f0a401" }]);
					$('.fancybox').fancybox({
						openEffect: 'none',
						closeEffect: 'none',

						prevEffect: 'none',
						nextEffect: 'none',

						helpers: {
							title: {
								type: 'inside'
							},
							buttons: {}
						},

						afterLoad: function afterLoad() {
							this.title = this.index + 1 + '/' + this.group.length;
						}
					});
					$('body').scrollTop(0);
				}, 0);

				vm.searchDataXungQuanh.circle = {
					radius: 0.5,
					center: {
						lat: vm.ads.place.geo.lat,
						lon: vm.ads.place.geo.lon
					}
				};

				vm.searchDataXungQuanh.loaiTin = vm.ads.loaiTin;
				vm.searchDataXungQuanh.diaChinh = {
					tinhKhongDau: vm.ads.place.diaChinh.tinhKhongDau,
					huyenKhongDau: vm.ads.place.diaChinh.huyenKhongDau
				};

				HouseService.findAdsSpatial(vm.searchDataXungQuanh).then(function (res) {
					vm.nhaXungQuanh = res.data.list;
				});

				vm.searchDataTuongTu.loaiTin = vm.ads.loaiTin;
				vm.searchDataTuongTu.loaiNhaDat = [vm.ads.loaiNhaDat];
				vm.searchDataTuongTu.diaChinh = {
					tinhKhongDau: vm.ads.place.diaChinh.tinhKhongDau,
					huyenKhongDau: vm.ads.place.diaChinh.huyenKhongDau
				};
				if (vm.ads.dienTich) {
					vm.searchDataTuongTu.dienTichBETWEEN[0] = vm.ads.dienTich * 0.8;
					vm.searchDataTuongTu.dienTichBETWEEN[1] = vm.ads.dienTich * 1.2;
				}
				if (vm.ads.gia) {
					vm.searchDataTuongTu.giaBETWEEN[0] = vm.ads.gia * 0.8;
					vm.searchDataTuongTu.giaBETWEEN[1] = vm.ads.gia * 1.2;
				}
				if (vm.ads.loaiNhaDat == 1 && vm.ads.soPhongNgu) {
					vm.searchDataTuongTu.soPhongNgu = vm.ads.soPhongNgu;
				} else if (vm.ads.soTang) {
					vm.searchDataTuongTu.soTang = vm.ads.soTang;
				}
				// HouseService.findAdsSpatial(vm.searchDataTuongTu).then(function(res){
				// 	vm.nhaTuongTu = res.data.list;					
				// });
			});
		});
	})();

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	(function () {
		'use strict';

		var controllerId = 'MobileChatCtrl';
		angular.module('bds').controller(controllerId, function ($rootScope, $http, $scope, $state, HouseService, socket, $compile, NewsService, NgMap, $window, $timeout, $location) {
			var vm = this;
			vm.allInbox = [];
			vm.allSaleInbox = [];
			vm.allRentInbox = [];

			vm.init = function () {
				socket.emit('alert user online', { email: $rootScope.user.userEmail, fromUserID: $rootScope.user.userID, fromUserName: $rootScope.user.userName }, function (data) {
					console.log("alert user online " + $rootScope.user.userID);
				});
			};

			$timeout(function () {
				vm.init();
			}, 100);

			vm.getChatTime = function (date) {
				var mm = date.getMonth() + 1; // getMonth() is zero-based
				mm = mm >= 10 ? mm : '0' + mm;
				var dd = date.getDate();
				dd = dd >= 10 ? dd : '0' + dd;
				var hour = date.getHours();
				hour = hour >= 10 ? hour : '0' + hour;
				var minute = date.getMinutes();
				minute = minute >= 10 ? minute : '0' + minute;

				return dd + ' tháng ' + mm + ' ' + hour + ':' + minute;
			};
			HouseService.getInboxMsg({ userID: $rootScope.user.userID }).then(function (res) {
				if (res.status == 200 && res.data.status == 0) {
					vm.allInbox = res.data.data;
					if (vm.allInbox.length > 0) {
						var async = __webpack_require__(33);
						async.forEach(vm.allInbox, function (inbox) {
							HouseService.getAllChatMsg({ userID: $rootScope.user.userID, partnerUserID: inbox.partner.userID, adsID: inbox.relatedToAds.adsID }).then(function (res) {
								if (res.status == 200 && res.data.status == 0) {
									if (res.data.data.length > 0) {
										inbox.lastMsg = res.data.data[0].default.content;
										inbox.lastDate = vm.getChatTime(new Date(res.data.data[0].default.date));
									}
								}
							});
						}, function (err) {
							if (err) {
								throw err;
							}
							console.log("processing all elements completed");
						});

						var inbox;
						//check co nen dua doan tach nay vao each tren do ko

						for (var i = 0; i < vm.allInbox.length; i++) {
							inbox = vm.allInbox[i];

							if (inbox.relatedToAds.loaiTin == 0) {
								vm.allSaleInbox.push(inbox);
							} else {
								vm.allRentInbox.push(inbox);
							}
						}
					}
					socket.emit('get-unread-message', { userID: $rootScope.user.userID }, function (data) {
						console.log("-----------------emit get-unread-message " + $rootScope.user.userID);
						console.log(data);
					});
				}
			});

			vm.openChatDetail = function (inbox) {
				$state.go('mchatDetail', { "adsID": inbox.relatedToAds.adsID, "toUserID": inbox.partner.userID });
				$(".overlay").click();
			};

			socket.on("new message", function (data) {
				console.log("-------------chat------new message---------------");
				console.log(data);
				data.date = new Date(data.date);

				if (vm.allInbox.length > 0) {
					var async = __webpack_require__(33);
					async.forEach(vm.allInbox, function (inbox) {
						var count = 0;
						if (inbox.unreadCount) {
							count = inbox.unreadCount;
						}
						if ($rootScope.user.userID.trim() == data.toUserID && inbox.partner.userID.trim() == data.fromUserID.trim() && inbox.relatedToAds.adsID.trim() == data.relatedToAds.adsID.trim()) {
							count++;
							inbox.unreadCount = count;
							inbox.lastMsg = data.content;
							inbox.lastDate = vm.getChatTime(new Date(data.date));
						}
						console.log(inbox.unreadCount);
					}, function (err) {
						if (err) {
							throw err;
						}
						console.log("processing all elements completed");
					});
				} else {
					var inbox = {};
					inbox.partner = {};
					inbox.partner.userID = data.fromUserID.trim();
					inbox.partner.fullName = data.fullName;
					inbox.partner.avatar = data.avatar;
					inbox.relatedToAds = data.relatedToAds;
					inbox.unreadCount = 1;
					inbox.lastMsg = data.content;
					inbox.lastDate = vm.getChatTime(new Date(data.date));
					vm.allInbox.push(inbox);
				}
				$scope.$apply();
			});

			socket.on("unread-messages", function (data) {
				console.log("------------------chat-unreadMessage-----------------");
				console.log(data);
				if (data.length > 0) {
					var inbox;
					var count = 0;
					if (vm.allInbox.length > 0) {
						for (var i = 0; i < vm.allInbox.length; i++) {
							inbox = vm.allInbox[i];
							count = 0;
							for (var i = 0; i < data.length; i++) {
								var msg = data[i].default;
								msg.date = new Date(msg.date);
								if (inbox.relatedToAds.adsID == msg.relatedToAds.adsID.trim() && $rootScope.user.userID.trim() == msg.toUserID.trim() && inbox.partner.userID.trim() == msg.fromUserID.trim()) {
									count++;
								}
							}
							if (count > 0) {
								inbox.unreadCount = count;
							}
						}
					}
					if (vm.allSaleInbox.length > 0) {
						for (var i = 0; i < vm.allSaleInbox.length; i++) {
							inbox = vm.allSaleInbox[i];
							count = 0;
							for (var i = 0; i < data.length; i++) {
								var msg = data[i].default;
								msg.date = new Date(msg.date);
								if (inbox.relatedToAds.adsID == msg.relatedToAds.adsID.trim() && $rootScope.user.userID.trim() == msg.toUserID.trim() && inbox.partner.userID.trim() == msg.fromUserID.trim()) {
									count++;
								}
							}
							if (count > 0) {
								inbox.unreadCount = count;
							}
						}
					}
					if (vm.allRentInbox.length > 0) {
						for (var i = 0; i < vm.allRentInbox.length; i++) {
							inbox = vm.allRentInbox[i];
							count = 0;
							for (var i = 0; i < data.length; i++) {
								var msg = data[i].default;
								msg.date = new Date(msg.date);
								if (inbox.relatedToAds.adsID == msg.relatedToAds.adsID.trim() && $rootScope.user.userID.trim() == msg.toUserID.trim() && inbox.partner.userID.trim() == msg.fromUserID.trim()) {
									count++;
								}
							}
							if (count > 0) {
								inbox.unreadCount = count;
							}
						}
					}
				}
				console.log("-------------------unreadMessage--------1---------");
				console.log(vm.allInbox);
			});
		});
	})();

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, setImmediate, process) {(function (global, factory) {
	   true ? factory(exports) :
	  typeof define === 'function' && define.amd ? define(['exports'], factory) :
	  (factory((global.async = global.async || {})));
	}(this, function (exports) { 'use strict';

	  /**
	   * A faster alternative to `Function#apply`, this function invokes `func`
	   * with the `this` binding of `thisArg` and the arguments of `args`.
	   *
	   * @private
	   * @param {Function} func The function to invoke.
	   * @param {*} thisArg The `this` binding of `func`.
	   * @param {Array} args The arguments to invoke `func` with.
	   * @returns {*} Returns the result of `func`.
	   */
	  function apply(func, thisArg, args) {
	    var length = args.length;
	    switch (length) {
	      case 0: return func.call(thisArg);
	      case 1: return func.call(thisArg, args[0]);
	      case 2: return func.call(thisArg, args[0], args[1]);
	      case 3: return func.call(thisArg, args[0], args[1], args[2]);
	    }
	    return func.apply(thisArg, args);
	  }

	  /**
	   * Checks if `value` is the
	   * [language type](http://www.ecma-international.org/ecma-262/6.0/#sec-ecmascript-language-types)
	   * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	   *
	   * @static
	   * @memberOf _
	   * @since 0.1.0
	   * @category Lang
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	   * @example
	   *
	   * _.isObject({});
	   * // => true
	   *
	   * _.isObject([1, 2, 3]);
	   * // => true
	   *
	   * _.isObject(_.noop);
	   * // => true
	   *
	   * _.isObject(null);
	   * // => false
	   */
	  function isObject(value) {
	    var type = typeof value;
	    return !!value && (type == 'object' || type == 'function');
	  }

	  var funcTag = '[object Function]';
	  var genTag = '[object GeneratorFunction]';
	  /** Used for built-in method references. */
	  var objectProto = Object.prototype;

	  /**
	   * Used to resolve the
	   * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	   * of values.
	   */
	  var objectToString = objectProto.toString;

	  /**
	   * Checks if `value` is classified as a `Function` object.
	   *
	   * @static
	   * @memberOf _
	   * @since 0.1.0
	   * @category Lang
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if `value` is correctly classified,
	   *  else `false`.
	   * @example
	   *
	   * _.isFunction(_);
	   * // => true
	   *
	   * _.isFunction(/abc/);
	   * // => false
	   */
	  function isFunction(value) {
	    // The use of `Object#toString` avoids issues with the `typeof` operator
	    // in Safari 8 which returns 'object' for typed array and weak map constructors,
	    // and PhantomJS 1.9 which returns 'function' for `NodeList` instances.
	    var tag = isObject(value) ? objectToString.call(value) : '';
	    return tag == funcTag || tag == genTag;
	  }

	  /**
	   * Checks if `value` is object-like. A value is object-like if it's not `null`
	   * and has a `typeof` result of "object".
	   *
	   * @static
	   * @memberOf _
	   * @since 4.0.0
	   * @category Lang
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	   * @example
	   *
	   * _.isObjectLike({});
	   * // => true
	   *
	   * _.isObjectLike([1, 2, 3]);
	   * // => true
	   *
	   * _.isObjectLike(_.noop);
	   * // => false
	   *
	   * _.isObjectLike(null);
	   * // => false
	   */
	  function isObjectLike(value) {
	    return !!value && typeof value == 'object';
	  }

	  /** `Object#toString` result references. */
	  var symbolTag = '[object Symbol]';

	  /** Used for built-in method references. */
	  var objectProto$1 = Object.prototype;

	  /**
	   * Used to resolve the
	   * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	   * of values.
	   */
	  var objectToString$1 = objectProto$1.toString;

	  /**
	   * Checks if `value` is classified as a `Symbol` primitive or object.
	   *
	   * @static
	   * @memberOf _
	   * @since 4.0.0
	   * @category Lang
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if `value` is correctly classified,
	   *  else `false`.
	   * @example
	   *
	   * _.isSymbol(Symbol.iterator);
	   * // => true
	   *
	   * _.isSymbol('abc');
	   * // => false
	   */
	  function isSymbol(value) {
	    return typeof value == 'symbol' ||
	      (isObjectLike(value) && objectToString$1.call(value) == symbolTag);
	  }

	  /** Used as references for various `Number` constants. */
	  var NAN = 0 / 0;

	  /** Used to match leading and trailing whitespace. */
	  var reTrim = /^\s+|\s+$/g;

	  /** Used to detect bad signed hexadecimal string values. */
	  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

	  /** Used to detect binary string values. */
	  var reIsBinary = /^0b[01]+$/i;

	  /** Used to detect octal string values. */
	  var reIsOctal = /^0o[0-7]+$/i;

	  /** Built-in method references without a dependency on `root`. */
	  var freeParseInt = parseInt;

	  /**
	   * Converts `value` to a number.
	   *
	   * @static
	   * @memberOf _
	   * @since 4.0.0
	   * @category Lang
	   * @param {*} value The value to process.
	   * @returns {number} Returns the number.
	   * @example
	   *
	   * _.toNumber(3.2);
	   * // => 3.2
	   *
	   * _.toNumber(Number.MIN_VALUE);
	   * // => 5e-324
	   *
	   * _.toNumber(Infinity);
	   * // => Infinity
	   *
	   * _.toNumber('3.2');
	   * // => 3.2
	   */
	  function toNumber(value) {
	    if (typeof value == 'number') {
	      return value;
	    }
	    if (isSymbol(value)) {
	      return NAN;
	    }
	    if (isObject(value)) {
	      var other = isFunction(value.valueOf) ? value.valueOf() : value;
	      value = isObject(other) ? (other + '') : other;
	    }
	    if (typeof value != 'string') {
	      return value === 0 ? value : +value;
	    }
	    value = value.replace(reTrim, '');
	    var isBinary = reIsBinary.test(value);
	    return (isBinary || reIsOctal.test(value))
	      ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
	      : (reIsBadHex.test(value) ? NAN : +value);
	  }

	  var INFINITY = 1 / 0;
	  var MAX_INTEGER = 1.7976931348623157e+308;
	  /**
	   * Converts `value` to a finite number.
	   *
	   * @static
	   * @memberOf _
	   * @since 4.12.0
	   * @category Lang
	   * @param {*} value The value to convert.
	   * @returns {number} Returns the converted number.
	   * @example
	   *
	   * _.toFinite(3.2);
	   * // => 3.2
	   *
	   * _.toFinite(Number.MIN_VALUE);
	   * // => 5e-324
	   *
	   * _.toFinite(Infinity);
	   * // => 1.7976931348623157e+308
	   *
	   * _.toFinite('3.2');
	   * // => 3.2
	   */
	  function toFinite(value) {
	    if (!value) {
	      return value === 0 ? value : 0;
	    }
	    value = toNumber(value);
	    if (value === INFINITY || value === -INFINITY) {
	      var sign = (value < 0 ? -1 : 1);
	      return sign * MAX_INTEGER;
	    }
	    return value === value ? value : 0;
	  }

	  /**
	   * Converts `value` to an integer.
	   *
	   * **Note:** This method is loosely based on
	   * [`ToInteger`](http://www.ecma-international.org/ecma-262/6.0/#sec-tointeger).
	   *
	   * @static
	   * @memberOf _
	   * @since 4.0.0
	   * @category Lang
	   * @param {*} value The value to convert.
	   * @returns {number} Returns the converted integer.
	   * @example
	   *
	   * _.toInteger(3.2);
	   * // => 3
	   *
	   * _.toInteger(Number.MIN_VALUE);
	   * // => 0
	   *
	   * _.toInteger(Infinity);
	   * // => 1.7976931348623157e+308
	   *
	   * _.toInteger('3.2');
	   * // => 3
	   */
	  function toInteger(value) {
	    var result = toFinite(value),
	        remainder = result % 1;

	    return result === result ? (remainder ? result - remainder : result) : 0;
	  }

	  /** Used as the `TypeError` message for "Functions" methods. */
	  var FUNC_ERROR_TEXT = 'Expected a function';

	  /* Built-in method references for those with the same name as other `lodash` methods. */
	  var nativeMax = Math.max;

	  /**
	   * Creates a function that invokes `func` with the `this` binding of the
	   * created function and arguments from `start` and beyond provided as
	   * an array.
	   *
	   * **Note:** This method is based on the
	   * [rest parameter](https://mdn.io/rest_parameters).
	   *
	   * @static
	   * @memberOf _
	   * @since 4.0.0
	   * @category Function
	   * @param {Function} func The function to apply a rest parameter to.
	   * @param {number} [start=func.length-1] The start position of the rest parameter.
	   * @returns {Function} Returns the new function.
	   * @example
	   *
	   * var say = _.rest(function(what, names) {
	   *   return what + ' ' + _.initial(names).join(', ') +
	   *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
	   * });
	   *
	   * say('hello', 'fred', 'barney', 'pebbles');
	   * // => 'hello fred, barney, & pebbles'
	   */
	  function rest(func, start) {
	    if (typeof func != 'function') {
	      throw new TypeError(FUNC_ERROR_TEXT);
	    }
	    start = nativeMax(start === undefined ? (func.length - 1) : toInteger(start), 0);
	    return function() {
	      var args = arguments,
	          index = -1,
	          length = nativeMax(args.length - start, 0),
	          array = Array(length);

	      while (++index < length) {
	        array[index] = args[start + index];
	      }
	      switch (start) {
	        case 0: return func.call(this, array);
	        case 1: return func.call(this, args[0], array);
	        case 2: return func.call(this, args[0], args[1], array);
	      }
	      var otherArgs = Array(start + 1);
	      index = -1;
	      while (++index < start) {
	        otherArgs[index] = args[index];
	      }
	      otherArgs[start] = array;
	      return apply(func, this, otherArgs);
	    };
	  }

	  function initialParams (fn) {
	      return rest(function (args /*..., callback*/) {
	          var callback = args.pop();
	          fn.call(this, args, callback);
	      });
	  }

	  function applyEach$1(eachfn) {
	      return rest(function (fns, args) {
	          var go = initialParams(function (args, callback) {
	              var that = this;
	              return eachfn(fns, function (fn, cb) {
	                  fn.apply(that, args.concat([cb]));
	              }, callback);
	          });
	          if (args.length) {
	              return go.apply(this, args);
	          } else {
	              return go;
	          }
	      });
	  }

	  /**
	   * A method that returns `undefined`.
	   *
	   * @static
	   * @memberOf _
	   * @since 2.3.0
	   * @category Util
	   * @example
	   *
	   * _.times(2, _.noop);
	   * // => [undefined, undefined]
	   */
	  function noop() {
	    // No operation performed.
	  }

	  function once(fn) {
	      return function () {
	          if (fn === null) return;
	          var callFn = fn;
	          fn = null;
	          callFn.apply(this, arguments);
	      };
	  }

	  /**
	   * The base implementation of `_.property` without support for deep paths.
	   *
	   * @private
	   * @param {string} key The key of the property to get.
	   * @returns {Function} Returns the new accessor function.
	   */
	  function baseProperty(key) {
	    return function(object) {
	      return object == null ? undefined : object[key];
	    };
	  }

	  /**
	   * Gets the "length" property value of `object`.
	   *
	   * **Note:** This function is used to avoid a
	   * [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792) that affects
	   * Safari on at least iOS 8.1-8.3 ARM64.
	   *
	   * @private
	   * @param {Object} object The object to query.
	   * @returns {*} Returns the "length" value.
	   */
	  var getLength = baseProperty('length');

	  /** Used as references for various `Number` constants. */
	  var MAX_SAFE_INTEGER = 9007199254740991;

	  /**
	   * Checks if `value` is a valid array-like length.
	   *
	   * **Note:** This function is loosely based on
	   * [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
	   *
	   * @static
	   * @memberOf _
	   * @since 4.0.0
	   * @category Lang
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if `value` is a valid length,
	   *  else `false`.
	   * @example
	   *
	   * _.isLength(3);
	   * // => true
	   *
	   * _.isLength(Number.MIN_VALUE);
	   * // => false
	   *
	   * _.isLength(Infinity);
	   * // => false
	   *
	   * _.isLength('3');
	   * // => false
	   */
	  function isLength(value) {
	    return typeof value == 'number' &&
	      value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	  }

	  /**
	   * Checks if `value` is array-like. A value is considered array-like if it's
	   * not a function and has a `value.length` that's an integer greater than or
	   * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
	   *
	   * @static
	   * @memberOf _
	   * @since 4.0.0
	   * @category Lang
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	   * @example
	   *
	   * _.isArrayLike([1, 2, 3]);
	   * // => true
	   *
	   * _.isArrayLike(document.body.children);
	   * // => true
	   *
	   * _.isArrayLike('abc');
	   * // => true
	   *
	   * _.isArrayLike(_.noop);
	   * // => false
	   */
	  function isArrayLike(value) {
	    return value != null && isLength(getLength(value)) && !isFunction(value);
	  }

	  var iteratorSymbol = typeof Symbol === 'function' && Symbol.iterator;

	  function getIterator (coll) {
	      return iteratorSymbol && coll[iteratorSymbol] && coll[iteratorSymbol]();
	  }

	  /* Built-in method references for those with the same name as other `lodash` methods. */
	  var nativeGetPrototype = Object.getPrototypeOf;

	  /**
	   * Gets the `[[Prototype]]` of `value`.
	   *
	   * @private
	   * @param {*} value The value to query.
	   * @returns {null|Object} Returns the `[[Prototype]]`.
	   */
	  function getPrototype(value) {
	    return nativeGetPrototype(Object(value));
	  }

	  /** Used for built-in method references. */
	  var objectProto$2 = Object.prototype;

	  /** Used to check objects for own properties. */
	  var hasOwnProperty = objectProto$2.hasOwnProperty;

	  /**
	   * The base implementation of `_.has` without support for deep paths.
	   *
	   * @private
	   * @param {Object} [object] The object to query.
	   * @param {Array|string} key The key to check.
	   * @returns {boolean} Returns `true` if `key` exists, else `false`.
	   */
	  function baseHas(object, key) {
	    // Avoid a bug in IE 10-11 where objects with a [[Prototype]] of `null`,
	    // that are composed entirely of index properties, return `false` for
	    // `hasOwnProperty` checks of them.
	    return object != null &&
	      (hasOwnProperty.call(object, key) ||
	        (typeof object == 'object' && key in object && getPrototype(object) === null));
	  }

	  /* Built-in method references for those with the same name as other `lodash` methods. */
	  var nativeKeys = Object.keys;

	  /**
	   * The base implementation of `_.keys` which doesn't skip the constructor
	   * property of prototypes or treat sparse arrays as dense.
	   *
	   * @private
	   * @param {Object} object The object to query.
	   * @returns {Array} Returns the array of property names.
	   */
	  function baseKeys(object) {
	    return nativeKeys(Object(object));
	  }

	  /**
	   * The base implementation of `_.times` without support for iteratee shorthands
	   * or max array length checks.
	   *
	   * @private
	   * @param {number} n The number of times to invoke `iteratee`.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns the array of results.
	   */
	  function baseTimes(n, iteratee) {
	    var index = -1,
	        result = Array(n);

	    while (++index < n) {
	      result[index] = iteratee(index);
	    }
	    return result;
	  }

	  /**
	   * This method is like `_.isArrayLike` except that it also checks if `value`
	   * is an object.
	   *
	   * @static
	   * @memberOf _
	   * @since 4.0.0
	   * @category Lang
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if `value` is an array-like object,
	   *  else `false`.
	   * @example
	   *
	   * _.isArrayLikeObject([1, 2, 3]);
	   * // => true
	   *
	   * _.isArrayLikeObject(document.body.children);
	   * // => true
	   *
	   * _.isArrayLikeObject('abc');
	   * // => false
	   *
	   * _.isArrayLikeObject(_.noop);
	   * // => false
	   */
	  function isArrayLikeObject(value) {
	    return isObjectLike(value) && isArrayLike(value);
	  }

	  /** `Object#toString` result references. */
	  var argsTag = '[object Arguments]';

	  /** Used for built-in method references. */
	  var objectProto$3 = Object.prototype;

	  /** Used to check objects for own properties. */
	  var hasOwnProperty$1 = objectProto$3.hasOwnProperty;

	  /**
	   * Used to resolve the
	   * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	   * of values.
	   */
	  var objectToString$2 = objectProto$3.toString;

	  /** Built-in value references. */
	  var propertyIsEnumerable = objectProto$3.propertyIsEnumerable;

	  /**
	   * Checks if `value` is likely an `arguments` object.
	   *
	   * @static
	   * @memberOf _
	   * @since 0.1.0
	   * @category Lang
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if `value` is correctly classified,
	   *  else `false`.
	   * @example
	   *
	   * _.isArguments(function() { return arguments; }());
	   * // => true
	   *
	   * _.isArguments([1, 2, 3]);
	   * // => false
	   */
	  function isArguments(value) {
	    // Safari 8.1 incorrectly makes `arguments.callee` enumerable in strict mode.
	    return isArrayLikeObject(value) && hasOwnProperty$1.call(value, 'callee') &&
	      (!propertyIsEnumerable.call(value, 'callee') || objectToString$2.call(value) == argsTag);
	  }

	  /**
	   * Checks if `value` is classified as an `Array` object.
	   *
	   * @static
	   * @memberOf _
	   * @since 0.1.0
	   * @type {Function}
	   * @category Lang
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if `value` is correctly classified,
	   *  else `false`.
	   * @example
	   *
	   * _.isArray([1, 2, 3]);
	   * // => true
	   *
	   * _.isArray(document.body.children);
	   * // => false
	   *
	   * _.isArray('abc');
	   * // => false
	   *
	   * _.isArray(_.noop);
	   * // => false
	   */
	  var isArray = Array.isArray;

	  /** `Object#toString` result references. */
	  var stringTag = '[object String]';

	  /** Used for built-in method references. */
	  var objectProto$4 = Object.prototype;

	  /**
	   * Used to resolve the
	   * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	   * of values.
	   */
	  var objectToString$3 = objectProto$4.toString;

	  /**
	   * Checks if `value` is classified as a `String` primitive or object.
	   *
	   * @static
	   * @since 0.1.0
	   * @memberOf _
	   * @category Lang
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if `value` is correctly classified,
	   *  else `false`.
	   * @example
	   *
	   * _.isString('abc');
	   * // => true
	   *
	   * _.isString(1);
	   * // => false
	   */
	  function isString(value) {
	    return typeof value == 'string' ||
	      (!isArray(value) && isObjectLike(value) && objectToString$3.call(value) == stringTag);
	  }

	  /**
	   * Creates an array of index keys for `object` values of arrays,
	   * `arguments` objects, and strings, otherwise `null` is returned.
	   *
	   * @private
	   * @param {Object} object The object to query.
	   * @returns {Array|null} Returns index keys, else `null`.
	   */
	  function indexKeys(object) {
	    var length = object ? object.length : undefined;
	    if (isLength(length) &&
	        (isArray(object) || isString(object) || isArguments(object))) {
	      return baseTimes(length, String);
	    }
	    return null;
	  }

	  /** Used as references for various `Number` constants. */
	  var MAX_SAFE_INTEGER$1 = 9007199254740991;

	  /** Used to detect unsigned integer values. */
	  var reIsUint = /^(?:0|[1-9]\d*)$/;

	  /**
	   * Checks if `value` is a valid array-like index.
	   *
	   * @private
	   * @param {*} value The value to check.
	   * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	   * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	   */
	  function isIndex(value, length) {
	    length = length == null ? MAX_SAFE_INTEGER$1 : length;
	    return !!length &&
	      (typeof value == 'number' || reIsUint.test(value)) &&
	      (value > -1 && value % 1 == 0 && value < length);
	  }

	  /** Used for built-in method references. */
	  var objectProto$5 = Object.prototype;

	  /**
	   * Checks if `value` is likely a prototype object.
	   *
	   * @private
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
	   */
	  function isPrototype(value) {
	    var Ctor = value && value.constructor,
	        proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto$5;

	    return value === proto;
	  }

	  /**
	   * Creates an array of the own enumerable property names of `object`.
	   *
	   * **Note:** Non-object values are coerced to objects. See the
	   * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)
	   * for more details.
	   *
	   * @static
	   * @since 0.1.0
	   * @memberOf _
	   * @category Object
	   * @param {Object} object The object to query.
	   * @returns {Array} Returns the array of property names.
	   * @example
	   *
	   * function Foo() {
	   *   this.a = 1;
	   *   this.b = 2;
	   * }
	   *
	   * Foo.prototype.c = 3;
	   *
	   * _.keys(new Foo);
	   * // => ['a', 'b'] (iteration order is not guaranteed)
	   *
	   * _.keys('hi');
	   * // => ['0', '1']
	   */
	  function keys(object) {
	    var isProto = isPrototype(object);
	    if (!(isProto || isArrayLike(object))) {
	      return baseKeys(object);
	    }
	    var indexes = indexKeys(object),
	        skipIndexes = !!indexes,
	        result = indexes || [],
	        length = result.length;

	    for (var key in object) {
	      if (baseHas(object, key) &&
	          !(skipIndexes && (key == 'length' || isIndex(key, length))) &&
	          !(isProto && key == 'constructor')) {
	        result.push(key);
	      }
	    }
	    return result;
	  }

	  function iterator(coll) {
	      var i = -1;
	      var len;
	      if (isArrayLike(coll)) {
	          len = coll.length;
	          return function next() {
	              i++;
	              return i < len ? { value: coll[i], key: i } : null;
	          };
	      }

	      var iterate = getIterator(coll);
	      if (iterate) {
	          return function next() {
	              var item = iterate.next();
	              if (item.done) return null;
	              i++;
	              return { value: item.value, key: i };
	          };
	      }

	      var okeys = keys(coll);
	      len = okeys.length;
	      return function next() {
	          i++;
	          var key = okeys[i];
	          return i < len ? { value: coll[key], key: key } : null;
	      };
	  }

	  function onlyOnce(fn) {
	      return function () {
	          if (fn === null) throw new Error("Callback was already called.");
	          var callFn = fn;
	          fn = null;
	          callFn.apply(this, arguments);
	      };
	  }

	  function _eachOfLimit(limit) {
	      return function (obj, iteratee, callback) {
	          callback = once(callback || noop);
	          obj = obj || [];
	          var nextElem = iterator(obj);
	          if (limit <= 0) {
	              return callback(null);
	          }
	          var done = false;
	          var running = 0;
	          var errored = false;

	          (function replenish() {
	              if (done && running <= 0) {
	                  return callback(null);
	              }

	              while (running < limit && !errored) {
	                  var elem = nextElem();
	                  if (elem === null) {
	                      done = true;
	                      if (running <= 0) {
	                          callback(null);
	                      }
	                      return;
	                  }
	                  running += 1;
	                  /* eslint {no-loop-func: 0} */
	                  iteratee(elem.value, elem.key, onlyOnce(function (err) {
	                      running -= 1;
	                      if (err) {
	                          callback(err);
	                          errored = true;
	                      } else {
	                          replenish();
	                      }
	                  }));
	              }
	          })();
	      };
	  }

	  function doParallelLimit(fn) {
	      return function (obj, limit, iteratee, callback) {
	          return fn(_eachOfLimit(limit), obj, iteratee, callback);
	      };
	  }

	  function _asyncMap(eachfn, arr, iteratee, callback) {
	      callback = once(callback || noop);
	      arr = arr || [];
	      var results = [];
	      var counter = 0;

	      eachfn(arr, function (value, _, callback) {
	          var index = counter++;
	          iteratee(value, function (err, v) {
	              results[index] = v;
	              callback(err);
	          });
	      }, function (err) {
	          callback(err, results);
	      });
	  }

	  /**
	   * The same as [`map`]{@link module:Collections.map} but runs a maximum of `limit` async operations at a time.
	   *
	   * @name mapLimit
	   * @static
	   * @memberOf module:Collections
	   * @method
	   * @see [async.map]{@link module:Collections.map}
	   * @category Collection
	   * @param {Array|Iterable|Object} coll - A collection to iterate over.
	   * @param {number} limit - The maximum number of async operations at a time.
	   * @param {Function} iteratee - A function to apply to each item in `coll`.
	   * The iteratee is passed a `callback(err, transformed)` which must be called
	   * once it has completed with an error (which can be `null`) and a transformed
	   * item. Invoked with (item, callback).
	   * @param {Function} [callback] - A callback which is called when all `iteratee`
	   * functions have finished, or an error occurs. Results is an array of the
	   * transformed items from the `coll`. Invoked with (err, results).
	   */
	  var mapLimit = doParallelLimit(_asyncMap);

	  function doLimit(fn, limit) {
	      return function (iterable, iteratee, callback) {
	          return fn(iterable, limit, iteratee, callback);
	      };
	  }

	  /**
	   * Produces a new collection of values by mapping each value in `coll` through
	   * the `iteratee` function. The `iteratee` is called with an item from `coll`
	   * and a callback for when it has finished processing. Each of these callback
	   * takes 2 arguments: an `error`, and the transformed item from `coll`. If
	   * `iteratee` passes an error to its callback, the main `callback` (for the
	   * `map` function) is immediately called with the error.
	   *
	   * Note, that since this function applies the `iteratee` to each item in
	   * parallel, there is no guarantee that the `iteratee` functions will complete
	   * in order. However, the results array will be in the same order as the
	   * original `coll`.
	   *
	   * If `map` is passed an Object, the results will be an Array.  The results
	   * will roughly be in the order of the original Objects' keys (but this can
	   * vary across JavaScript engines)
	   *
	   * @name map
	   * @static
	   * @memberOf module:Collections
	   * @method
	   * @category Collection
	   * @param {Array|Iterable|Object} coll - A collection to iterate over.
	   * @param {Function} iteratee - A function to apply to each item in `coll`.
	   * The iteratee is passed a `callback(err, transformed)` which must be called
	   * once it has completed with an error (which can be `null`) and a
	   * transformed item. Invoked with (item, callback).
	   * @param {Function} [callback] - A callback which is called when all `iteratee`
	   * functions have finished, or an error occurs. Results is an Array of the
	   * transformed items from the `coll`. Invoked with (err, results).
	   * @example
	   *
	   * async.map(['file1','file2','file3'], fs.stat, function(err, results) {
	   *     // results is now an array of stats for each file
	   * });
	   */
	  var map = doLimit(mapLimit, Infinity);

	  /**
	   * Applies the provided arguments to each function in the array, calling
	   * `callback` after all functions have completed. If you only provide the first
	   * argument, then it will return a function which lets you pass in the
	   * arguments as if it were a single function call.
	   *
	   * @name applyEach
	   * @static
	   * @memberOf module:ControlFlow
	   * @method
	   * @category Control Flow
	   * @param {Array|Iterable|Object} fns - A collection of asynchronous functions to all
	   * call with the same arguments
	   * @param {...*} [args] - any number of separate arguments to pass to the
	   * function.
	   * @param {Function} [callback] - the final argument should be the callback,
	   * called when all functions have completed processing.
	   * @returns {Function} - If only the first argument is provided, it will return
	   * a function which lets you pass in the arguments as if it were a single
	   * function call.
	   * @example
	   *
	   * async.applyEach([enableSearch, updateSchema], 'bucket', callback);
	   *
	   * // partial application example:
	   * async.each(
	   *     buckets,
	   *     async.applyEach([enableSearch, updateSchema]),
	   *     callback
	   * );
	   */
	  var applyEach = applyEach$1(map);

	  /**
	   * The same as [`map`]{@link module:Collections.map} but runs only a single async operation at a time.
	   *
	   * @name mapSeries
	   * @static
	   * @memberOf module:Collections
	   * @method
	   * @see [async.map]{@link module:Collections.map}
	   * @category Collection
	   * @param {Array|Iterable|Object} coll - A collection to iterate over.
	   * @param {Function} iteratee - A function to apply to each item in `coll`.
	   * The iteratee is passed a `callback(err, transformed)` which must be called
	   * once it has completed with an error (which can be `null`) and a
	   * transformed item. Invoked with (item, callback).
	   * @param {Function} [callback] - A callback which is called when all `iteratee`
	   * functions have finished, or an error occurs. Results is an array of the
	   * transformed items from the `coll`. Invoked with (err, results).
	   */
	  var mapSeries = doLimit(mapLimit, 1);

	  /**
	   * The same as [`applyEach`]{@link module:ControlFlow.applyEach} but runs only a single async operation at a time.
	   *
	   * @name applyEachSeries
	   * @static
	   * @memberOf module:ControlFlow
	   * @method
	   * @see [async.applyEach]{@link module:ControlFlow.applyEach}
	   * @category Control Flow
	   * @param {Array|Iterable|Object} fns - A collection of asynchronous functions to all
	   * call with the same arguments
	   * @param {...*} [args] - any number of separate arguments to pass to the
	   * function.
	   * @param {Function} [callback] - the final argument should be the callback,
	   * called when all functions have completed processing.
	   * @returns {Function} - If only the first argument is provided, it will return
	   * a function which lets you pass in the arguments as if it were a single
	   * function call.
	   */
	  var applyEachSeries = applyEach$1(mapSeries);

	  /**
	   * Creates a continuation function with some arguments already applied.
	   *
	   * Useful as a shorthand when combined with other control flow functions. Any
	   * arguments passed to the returned function are added to the arguments
	   * originally passed to apply.
	   *
	   * @name apply
	   * @static
	   * @memberOf module:Utils
	   * @method
	   * @category Util
	   * @param {Function} function - The function you want to eventually apply all
	   * arguments to. Invokes with (arguments...).
	   * @param {...*} arguments... - Any number of arguments to automatically apply
	   * when the continuation is called.
	   * @example
	   *
	   * // using apply
	   * async.parallel([
	   *     async.apply(fs.writeFile, 'testfile1', 'test1'),
	   *     async.apply(fs.writeFile, 'testfile2', 'test2')
	   * ]);
	   *
	   *
	   * // the same process without using apply
	   * async.parallel([
	   *     function(callback) {
	   *         fs.writeFile('testfile1', 'test1', callback);
	   *     },
	   *     function(callback) {
	   *         fs.writeFile('testfile2', 'test2', callback);
	   *     }
	   * ]);
	   *
	   * // It's possible to pass any number of additional arguments when calling the
	   * // continuation:
	   *
	   * node> var fn = async.apply(sys.puts, 'one');
	   * node> fn('two', 'three');
	   * one
	   * two
	   * three
	   */
	  var apply$1 = rest(function (fn, args) {
	      return rest(function (callArgs) {
	          return fn.apply(null, args.concat(callArgs));
	      });
	  });

	  /**
	   * Take a sync function and make it async, passing its return value to a
	   * callback. This is useful for plugging sync functions into a waterfall,
	   * series, or other async functions. Any arguments passed to the generated
	   * function will be passed to the wrapped function (except for the final
	   * callback argument). Errors thrown will be passed to the callback.
	   *
	   * If the function passed to `asyncify` returns a Promise, that promises's
	   * resolved/rejected state will be used to call the callback, rather than simply
	   * the synchronous return value.
	   *
	   * This also means you can asyncify ES2016 `async` functions.
	   *
	   * @name asyncify
	   * @static
	   * @memberOf module:Utils
	   * @method
	   * @alias wrapSync
	   * @category Util
	   * @param {Function} func - The synchronous function to convert to an
	   * asynchronous function.
	   * @returns {Function} An asynchronous wrapper of the `func`. To be invoked with
	   * (callback).
	   * @example
	   *
	   * // passing a regular synchronous function
	   * async.waterfall([
	   *     async.apply(fs.readFile, filename, "utf8"),
	   *     async.asyncify(JSON.parse),
	   *     function (data, next) {
	   *         // data is the result of parsing the text.
	   *         // If there was a parsing error, it would have been caught.
	   *     }
	   * ], callback);
	   *
	   * // passing a function returning a promise
	   * async.waterfall([
	   *     async.apply(fs.readFile, filename, "utf8"),
	   *     async.asyncify(function (contents) {
	   *         return db.model.create(contents);
	   *     }),
	   *     function (model, next) {
	   *         // `model` is the instantiated model object.
	   *         // If there was an error, this function would be skipped.
	   *     }
	   * ], callback);
	   *
	   * // es6 example
	   * var q = async.queue(async.asyncify(async function(file) {
	   *     var intermediateStep = await processFile(file);
	   *     return await somePromise(intermediateStep)
	   * }));
	   *
	   * q.push(files);
	   */
	  function asyncify(func) {
	      return initialParams(function (args, callback) {
	          var result;
	          try {
	              result = func.apply(this, args);
	          } catch (e) {
	              return callback(e);
	          }
	          // if result is Promise object
	          if (isObject(result) && typeof result.then === 'function') {
	              result.then(function (value) {
	                  callback(null, value);
	              }, function (err) {
	                  callback(err.message ? err : new Error(err));
	              });
	          } else {
	              callback(null, result);
	          }
	      });
	  }

	  /**
	   * A specialized version of `_.forEach` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns `array`.
	   */
	  function arrayEach(array, iteratee) {
	    var index = -1,
	        length = array ? array.length : 0;

	    while (++index < length) {
	      if (iteratee(array[index], index, array) === false) {
	        break;
	      }
	    }
	    return array;
	  }

	  /**
	   * Creates a base function for methods like `_.forIn` and `_.forOwn`.
	   *
	   * @private
	   * @param {boolean} [fromRight] Specify iterating from right to left.
	   * @returns {Function} Returns the new base function.
	   */
	  function createBaseFor(fromRight) {
	    return function(object, iteratee, keysFunc) {
	      var index = -1,
	          iterable = Object(object),
	          props = keysFunc(object),
	          length = props.length;

	      while (length--) {
	        var key = props[fromRight ? length : ++index];
	        if (iteratee(iterable[key], key, iterable) === false) {
	          break;
	        }
	      }
	      return object;
	    };
	  }

	  /**
	   * The base implementation of `baseForOwn` which iterates over `object`
	   * properties returned by `keysFunc` and invokes `iteratee` for each property.
	   * Iteratee functions may exit iteration early by explicitly returning `false`.
	   *
	   * @private
	   * @param {Object} object The object to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @param {Function} keysFunc The function to get the keys of `object`.
	   * @returns {Object} Returns `object`.
	   */
	  var baseFor = createBaseFor();

	  /**
	   * The base implementation of `_.forOwn` without support for iteratee shorthands.
	   *
	   * @private
	   * @param {Object} object The object to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Object} Returns `object`.
	   */
	  function baseForOwn(object, iteratee) {
	    return object && baseFor(object, iteratee, keys);
	  }

	  /**
	   * Gets the index at which the first occurrence of `NaN` is found in `array`.
	   *
	   * @private
	   * @param {Array} array The array to search.
	   * @param {number} fromIndex The index to search from.
	   * @param {boolean} [fromRight] Specify iterating from right to left.
	   * @returns {number} Returns the index of the matched `NaN`, else `-1`.
	   */
	  function indexOfNaN(array, fromIndex, fromRight) {
	    var length = array.length,
	        index = fromIndex + (fromRight ? 1 : -1);

	    while ((fromRight ? index-- : ++index < length)) {
	      var other = array[index];
	      if (other !== other) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
	   *
	   * @private
	   * @param {Array} array The array to search.
	   * @param {*} value The value to search for.
	   * @param {number} fromIndex The index to search from.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function baseIndexOf(array, value, fromIndex) {
	    if (value !== value) {
	      return indexOfNaN(array, fromIndex);
	    }
	    var index = fromIndex - 1,
	        length = array.length;

	    while (++index < length) {
	      if (array[index] === value) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * Determines the best order for running the functions in `tasks`, based on
	   * their requirements. Each function can optionally depend on other functions
	   * being completed first, and each function is run as soon as its requirements
	   * are satisfied.
	   *
	   * If any of the functions pass an error to their callback, the `auto` sequence
	   * will stop. Further tasks will not execute (so any other functions depending
	   * on it will not run), and the main `callback` is immediately called with the
	   * error.
	   *
	   * Functions also receive an object containing the results of functions which
	   * have completed so far as the first argument, if they have dependencies. If a
	   * task function has no dependencies, it will only be passed a callback.
	   *
	   * @name auto
	   * @static
	   * @memberOf module:ControlFlow
	   * @method
	   * @category Control Flow
	   * @param {Object} tasks - An object. Each of its properties is either a
	   * function or an array of requirements, with the function itself the last item
	   * in the array. The object's key of a property serves as the name of the task
	   * defined by that property, i.e. can be used when specifying requirements for
	   * other tasks. The function receives one or two arguments:
	   * * a `results` object, containing the results of the previously executed
	   *   functions, only passed if the task has any dependencies,
	   * * a `callback(err, result)` function, which must be called when finished,
	   *   passing an `error` (which can be `null`) and the result of the function's
	   *   execution.
	   * @param {number} [concurrency=Infinity] - An optional `integer` for
	   * determining the maximum number of tasks that can be run in parallel. By
	   * default, as many as possible.
	   * @param {Function} [callback] - An optional callback which is called when all
	   * the tasks have been completed. It receives the `err` argument if any `tasks`
	   * pass an error to their callback. Results are always returned; however, if an
	   * error occurs, no further `tasks` will be performed, and the results object
	   * will only contain partial results. Invoked with (err, results).
	   * @returns undefined
	   * @example
	   *
	   * async.auto({
	   *     // this function will just be passed a callback
	   *     readData: async.apply(fs.readFile, 'data.txt', 'utf-8'),
	   *     showData: ['readData', function(results, cb) {
	   *         // results.readData is the file's contents
	   *         // ...
	   *     }]
	   * }, callback);
	   *
	   * async.auto({
	   *     get_data: function(callback) {
	   *         console.log('in get_data');
	   *         // async code to get some data
	   *         callback(null, 'data', 'converted to array');
	   *     },
	   *     make_folder: function(callback) {
	   *         console.log('in make_folder');
	   *         // async code to create a directory to store a file in
	   *         // this is run at the same time as getting the data
	   *         callback(null, 'folder');
	   *     },
	   *     write_file: ['get_data', 'make_folder', function(results, callback) {
	   *         console.log('in write_file', JSON.stringify(results));
	   *         // once there is some data and the directory exists,
	   *         // write the data to a file in the directory
	   *         callback(null, 'filename');
	   *     }],
	   *     email_link: ['write_file', function(results, callback) {
	   *         console.log('in email_link', JSON.stringify(results));
	   *         // once the file is written let's email a link to it...
	   *         // results.write_file contains the filename returned by write_file.
	   *         callback(null, {'file':results.write_file, 'email':'user@example.com'});
	   *     }]
	   * }, function(err, results) {
	   *     console.log('err = ', err);
	   *     console.log('results = ', results);
	   * });
	   */
	  function auto (tasks, concurrency, callback) {
	      if (typeof concurrency === 'function') {
	          // concurrency is optional, shift the args.
	          callback = concurrency;
	          concurrency = null;
	      }
	      callback = once(callback || noop);
	      var keys$$ = keys(tasks);
	      var numTasks = keys$$.length;
	      if (!numTasks) {
	          return callback(null);
	      }
	      if (!concurrency) {
	          concurrency = numTasks;
	      }

	      var results = {};
	      var runningTasks = 0;
	      var hasError = false;

	      var listeners = {};

	      var readyTasks = [];

	      // for cycle detection:
	      var readyToCheck = []; // tasks that have been identified as reachable
	      // without the possibility of returning to an ancestor task
	      var uncheckedDependencies = {};

	      baseForOwn(tasks, function (task, key) {
	          if (!isArray(task)) {
	              // no dependencies
	              enqueueTask(key, [task]);
	              readyToCheck.push(key);
	              return;
	          }

	          var dependencies = task.slice(0, task.length - 1);
	          var remainingDependencies = dependencies.length;
	          if (remainingDependencies === 0) {
	              enqueueTask(key, task);
	              readyToCheck.push(key);
	              return;
	          }
	          uncheckedDependencies[key] = remainingDependencies;

	          arrayEach(dependencies, function (dependencyName) {
	              if (!tasks[dependencyName]) {
	                  throw new Error('async.auto task `' + key + '` has a non-existent dependency in ' + dependencies.join(', '));
	              }
	              addListener(dependencyName, function () {
	                  remainingDependencies--;
	                  if (remainingDependencies === 0) {
	                      enqueueTask(key, task);
	                  }
	              });
	          });
	      });

	      checkForDeadlocks();
	      processQueue();

	      function enqueueTask(key, task) {
	          readyTasks.push(function () {
	              runTask(key, task);
	          });
	      }

	      function processQueue() {
	          if (readyTasks.length === 0 && runningTasks === 0) {
	              return callback(null, results);
	          }
	          while (readyTasks.length && runningTasks < concurrency) {
	              var run = readyTasks.shift();
	              run();
	          }
	      }

	      function addListener(taskName, fn) {
	          var taskListeners = listeners[taskName];
	          if (!taskListeners) {
	              taskListeners = listeners[taskName] = [];
	          }

	          taskListeners.push(fn);
	      }

	      function taskComplete(taskName) {
	          var taskListeners = listeners[taskName] || [];
	          arrayEach(taskListeners, function (fn) {
	              fn();
	          });
	          processQueue();
	      }

	      function runTask(key, task) {
	          if (hasError) return;

	          var taskCallback = onlyOnce(rest(function (err, args) {
	              runningTasks--;
	              if (args.length <= 1) {
	                  args = args[0];
	              }
	              if (err) {
	                  var safeResults = {};
	                  baseForOwn(results, function (val, rkey) {
	                      safeResults[rkey] = val;
	                  });
	                  safeResults[key] = args;
	                  hasError = true;
	                  listeners = [];

	                  callback(err, safeResults);
	              } else {
	                  results[key] = args;
	                  taskComplete(key);
	              }
	          }));

	          runningTasks++;
	          var taskFn = task[task.length - 1];
	          if (task.length > 1) {
	              taskFn(results, taskCallback);
	          } else {
	              taskFn(taskCallback);
	          }
	      }

	      function checkForDeadlocks() {
	          // Kahn's algorithm
	          // https://en.wikipedia.org/wiki/Topological_sorting#Kahn.27s_algorithm
	          // http://connalle.blogspot.com/2013/10/topological-sortingkahn-algorithm.html
	          var currentTask;
	          var counter = 0;
	          while (readyToCheck.length) {
	              currentTask = readyToCheck.pop();
	              counter++;
	              arrayEach(getDependents(currentTask), function (dependent) {
	                  if (! --uncheckedDependencies[dependent]) {
	                      readyToCheck.push(dependent);
	                  }
	              });
	          }

	          if (counter !== numTasks) {
	              throw new Error('async.auto cannot execute tasks due to a recursive dependency');
	          }
	      }

	      function getDependents(taskName) {
	          var result = [];
	          baseForOwn(tasks, function (task, key) {
	              if (isArray(task) && baseIndexOf(task, taskName, 0) >= 0) {
	                  result.push(key);
	              }
	          });
	          return result;
	      }
	  }

	  /**
	   * A specialized version of `_.map` for arrays without support for iteratee
	   * shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns the new mapped array.
	   */
	  function arrayMap(array, iteratee) {
	    var index = -1,
	        length = array ? array.length : 0,
	        result = Array(length);

	    while (++index < length) {
	      result[index] = iteratee(array[index], index, array);
	    }
	    return result;
	  }

	  /**
	   * Copies the values of `source` to `array`.
	   *
	   * @private
	   * @param {Array} source The array to copy values from.
	   * @param {Array} [array=[]] The array to copy values to.
	   * @returns {Array} Returns `array`.
	   */
	  function copyArray(source, array) {
	    var index = -1,
	        length = source.length;

	    array || (array = Array(length));
	    while (++index < length) {
	      array[index] = source[index];
	    }
	    return array;
	  }

	  /**
	   * Checks if `value` is a global object.
	   *
	   * @private
	   * @param {*} value The value to check.
	   * @returns {null|Object} Returns `value` if it's a global object, else `null`.
	   */
	  function checkGlobal(value) {
	    return (value && value.Object === Object) ? value : null;
	  }

	  /** Detect free variable `global` from Node.js. */
	  var freeGlobal = checkGlobal(typeof global == 'object' && global);

	  /** Detect free variable `self`. */
	  var freeSelf = checkGlobal(typeof self == 'object' && self);

	  /** Detect `this` as the global object. */
	  var thisGlobal = checkGlobal(typeof this == 'object' && this);

	  /** Used as a reference to the global object. */
	  var root = freeGlobal || freeSelf || thisGlobal || Function('return this')();

	  /** Built-in value references. */
	  var Symbol$1 = root.Symbol;

	  /** Used as references for various `Number` constants. */
	  var INFINITY$1 = 1 / 0;

	  /** Used to convert symbols to primitives and strings. */
	  var symbolProto = Symbol$1 ? Symbol$1.prototype : undefined;
	  var symbolToString = symbolProto ? symbolProto.toString : undefined;
	  /**
	   * The base implementation of `_.toString` which doesn't convert nullish
	   * values to empty strings.
	   *
	   * @private
	   * @param {*} value The value to process.
	   * @returns {string} Returns the string.
	   */
	  function baseToString(value) {
	    // Exit early for strings to avoid a performance hit in some environments.
	    if (typeof value == 'string') {
	      return value;
	    }
	    if (isSymbol(value)) {
	      return symbolToString ? symbolToString.call(value) : '';
	    }
	    var result = (value + '');
	    return (result == '0' && (1 / value) == -INFINITY$1) ? '-0' : result;
	  }

	  /**
	   * The base implementation of `_.slice` without an iteratee call guard.
	   *
	   * @private
	   * @param {Array} array The array to slice.
	   * @param {number} [start=0] The start position.
	   * @param {number} [end=array.length] The end position.
	   * @returns {Array} Returns the slice of `array`.
	   */
	  function baseSlice(array, start, end) {
	    var index = -1,
	        length = array.length;

	    if (start < 0) {
	      start = -start > length ? 0 : (length + start);
	    }
	    end = end > length ? length : end;
	    if (end < 0) {
	      end += length;
	    }
	    length = start > end ? 0 : ((end - start) >>> 0);
	    start >>>= 0;

	    var result = Array(length);
	    while (++index < length) {
	      result[index] = array[index + start];
	    }
	    return result;
	  }

	  /**
	   * Casts `array` to a slice if it's needed.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {number} start The start position.
	   * @param {number} [end=array.length] The end position.
	   * @returns {Array} Returns the cast slice.
	   */
	  function castSlice(array, start, end) {
	    var length = array.length;
	    end = end === undefined ? length : end;
	    return (!start && end >= length) ? array : baseSlice(array, start, end);
	  }

	  /**
	   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
	   * that is not found in the character symbols.
	   *
	   * @private
	   * @param {Array} strSymbols The string symbols to inspect.
	   * @param {Array} chrSymbols The character symbols to find.
	   * @returns {number} Returns the index of the last unmatched string symbol.
	   */
	  function charsEndIndex(strSymbols, chrSymbols) {
	    var index = strSymbols.length;

	    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
	    return index;
	  }

	  /**
	   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
	   * that is not found in the character symbols.
	   *
	   * @private
	   * @param {Array} strSymbols The string symbols to inspect.
	   * @param {Array} chrSymbols The character symbols to find.
	   * @returns {number} Returns the index of the first unmatched string symbol.
	   */
	  function charsStartIndex(strSymbols, chrSymbols) {
	    var index = -1,
	        length = strSymbols.length;

	    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
	    return index;
	  }

	  /** Used to compose unicode character classes. */
	  var rsAstralRange = '\\ud800-\\udfff';
	  var rsComboMarksRange = '\\u0300-\\u036f\\ufe20-\\ufe23';
	  var rsComboSymbolsRange = '\\u20d0-\\u20f0';
	  var rsVarRange = '\\ufe0e\\ufe0f';
	  var rsAstral = '[' + rsAstralRange + ']';
	  var rsCombo = '[' + rsComboMarksRange + rsComboSymbolsRange + ']';
	  var rsFitz = '\\ud83c[\\udffb-\\udfff]';
	  var rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')';
	  var rsNonAstral = '[^' + rsAstralRange + ']';
	  var rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}';
	  var rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]';
	  var rsZWJ = '\\u200d';
	  var reOptMod = rsModifier + '?';
	  var rsOptVar = '[' + rsVarRange + ']?';
	  var rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*';
	  var rsSeq = rsOptVar + reOptMod + rsOptJoin;
	  var rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';
	  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
	  var reComplexSymbol = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

	  /**
	   * Converts `string` to an array.
	   *
	   * @private
	   * @param {string} string The string to convert.
	   * @returns {Array} Returns the converted array.
	   */
	  function stringToArray(string) {
	    return string.match(reComplexSymbol);
	  }

	  /**
	   * Converts `value` to a string. An empty string is returned for `null`
	   * and `undefined` values. The sign of `-0` is preserved.
	   *
	   * @static
	   * @memberOf _
	   * @since 4.0.0
	   * @category Lang
	   * @param {*} value The value to process.
	   * @returns {string} Returns the string.
	   * @example
	   *
	   * _.toString(null);
	   * // => ''
	   *
	   * _.toString(-0);
	   * // => '-0'
	   *
	   * _.toString([1, 2, 3]);
	   * // => '1,2,3'
	   */
	  function toString(value) {
	    return value == null ? '' : baseToString(value);
	  }

	  /** Used to match leading and trailing whitespace. */
	  var reTrim$1 = /^\s+|\s+$/g;

	  /**
	   * Removes leading and trailing whitespace or specified characters from `string`.
	   *
	   * @static
	   * @memberOf _
	   * @since 3.0.0
	   * @category String
	   * @param {string} [string=''] The string to trim.
	   * @param {string} [chars=whitespace] The characters to trim.
	   * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	   * @returns {string} Returns the trimmed string.
	   * @example
	   *
	   * _.trim('  abc  ');
	   * // => 'abc'
	   *
	   * _.trim('-_-abc-_-', '_-');
	   * // => 'abc'
	   *
	   * _.map(['  foo  ', '  bar  '], _.trim);
	   * // => ['foo', 'bar']
	   */
	  function trim(string, chars, guard) {
	    string = toString(string);
	    if (string && (guard || chars === undefined)) {
	      return string.replace(reTrim$1, '');
	    }
	    if (!string || !(chars = baseToString(chars))) {
	      return string;
	    }
	    var strSymbols = stringToArray(string),
	        chrSymbols = stringToArray(chars),
	        start = charsStartIndex(strSymbols, chrSymbols),
	        end = charsEndIndex(strSymbols, chrSymbols) + 1;

	    return castSlice(strSymbols, start, end).join('');
	  }

	  var FN_ARGS = /^(function)?\s*[^\(]*\(\s*([^\)]*)\)/m;
	  var FN_ARG_SPLIT = /,/;
	  var FN_ARG = /(=.+)?(\s*)$/;
	  var STRIP_COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg;

	  function parseParams(func) {
	      func = func.toString().replace(STRIP_COMMENTS, '');
	      func = func.match(FN_ARGS)[2].replace(' ', '');
	      func = func ? func.split(FN_ARG_SPLIT) : [];
	      func = func.map(function (arg) {
	          return trim(arg.replace(FN_ARG, ''));
	      });
	      return func;
	  }

	  /**
	   * A dependency-injected version of the [async.auto]{@link module:ControlFlow.auto} function. Dependent
	   * tasks are specified as parameters to the function, after the usual callback
	   * parameter, with the parameter names matching the names of the tasks it
	   * depends on. This can provide even more readable task graphs which can be
	   * easier to maintain.
	   *
	   * If a final callback is specified, the task results are similarly injected,
	   * specified as named parameters after the initial error parameter.
	   *
	   * The autoInject function is purely syntactic sugar and its semantics are
	   * otherwise equivalent to [async.auto]{@link module:ControlFlow.auto}.
	   *
	   * @name autoInject
	   * @static
	   * @memberOf module:ControlFlow
	   * @method
	   * @see [async.auto]{@link module:ControlFlow.auto}
	   * @category Control Flow
	   * @param {Object} tasks - An object, each of whose properties is a function of
	   * the form 'func([dependencies...], callback). The object's key of a property
	   * serves as the name of the task defined by that property, i.e. can be used
	   * when specifying requirements for other tasks.
	   * * The `callback` parameter is a `callback(err, result)` which must be called
	   *   when finished, passing an `error` (which can be `null`) and the result of
	   *   the function's execution. The remaining parameters name other tasks on
	   *   which the task is dependent, and the results from those tasks are the
	   *   arguments of those parameters.
	   * @param {Function} [callback] - An optional callback which is called when all
	   * the tasks have been completed. It receives the `err` argument if any `tasks`
	   * pass an error to their callback, and a `results` object with any completed
	   * task results, similar to `auto`.
	   * @example
	   *
	   * //  The example from `auto` can be rewritten as follows:
	   * async.autoInject({
	   *     get_data: function(callback) {
	   *         // async code to get some data
	   *         callback(null, 'data', 'converted to array');
	   *     },
	   *     make_folder: function(callback) {
	   *         // async code to create a directory to store a file in
	   *         // this is run at the same time as getting the data
	   *         callback(null, 'folder');
	   *     },
	   *     write_file: function(get_data, make_folder, callback) {
	   *         // once there is some data and the directory exists,
	   *         // write the data to a file in the directory
	   *         callback(null, 'filename');
	   *     },
	   *     email_link: function(write_file, callback) {
	   *         // once the file is written let's email a link to it...
	   *         // write_file contains the filename returned by write_file.
	   *         callback(null, {'file':write_file, 'email':'user@example.com'});
	   *     }
	   * }, function(err, results) {
	   *     console.log('err = ', err);
	   *     console.log('email_link = ', results.email_link);
	   * });
	   *
	   * // If you are using a JS minifier that mangles parameter names, `autoInject`
	   * // will not work with plain functions, since the parameter names will be
	   * // collapsed to a single letter identifier.  To work around this, you can
	   * // explicitly specify the names of the parameters your task function needs
	   * // in an array, similar to Angular.js dependency injection.
	   *
	   * // This still has an advantage over plain `auto`, since the results a task
	   * // depends on are still spread into arguments.
	   * async.autoInject({
	   *     //...
	   *     write_file: ['get_data', 'make_folder', function(get_data, make_folder, callback) {
	   *         callback(null, 'filename');
	   *     }],
	   *     email_link: ['write_file', function(write_file, callback) {
	   *         callback(null, {'file':write_file, 'email':'user@example.com'});
	   *     }]
	   *     //...
	   * }, function(err, results) {
	   *     console.log('err = ', err);
	   *     console.log('email_link = ', results.email_link);
	   * });
	   */
	  function autoInject(tasks, callback) {
	      var newTasks = {};

	      baseForOwn(tasks, function (taskFn, key) {
	          var params;

	          if (isArray(taskFn)) {
	              params = copyArray(taskFn);
	              taskFn = params.pop();

	              newTasks[key] = params.concat(params.length > 0 ? newTask : taskFn);
	          } else if (taskFn.length === 1) {
	              // no dependencies, use the function as-is
	              newTasks[key] = taskFn;
	          } else {
	              params = parseParams(taskFn);
	              if (taskFn.length === 0 && params.length === 0) {
	                  throw new Error("autoInject task functions require explicit parameters.");
	              }

	              params.pop();

	              newTasks[key] = params.concat(newTask);
	          }

	          function newTask(results, taskCb) {
	              var newArgs = arrayMap(params, function (name) {
	                  return results[name];
	              });
	              newArgs.push(taskCb);
	              taskFn.apply(null, newArgs);
	          }
	      });

	      auto(newTasks, callback);
	  }

	  var hasSetImmediate = typeof setImmediate === 'function' && setImmediate;
	  var hasNextTick = typeof process === 'object' && typeof process.nextTick === 'function';

	  function fallback(fn) {
	      setTimeout(fn, 0);
	  }

	  function wrap(defer) {
	      return rest(function (fn, args) {
	          defer(function () {
	              fn.apply(null, args);
	          });
	      });
	  }

	  var _defer;

	  if (hasSetImmediate) {
	      _defer = setImmediate;
	  } else if (hasNextTick) {
	      _defer = process.nextTick;
	  } else {
	      _defer = fallback;
	  }

	  var setImmediate$1 = wrap(_defer);

	  // Simple doubly linked list (https://en.wikipedia.org/wiki/Doubly_linked_list) implementation
	  // used for queues. This implementation assumes that the node provided by the user can be modified
	  // to adjust the next and last properties. We implement only the minimal functionality
	  // for queue support.
	  function DLL() {
	      this.head = this.tail = null;
	      this.length = 0;
	  }

	  function setInitial(dll, node) {
	      dll.length = 1;
	      dll.head = dll.tail = node;
	  }

	  DLL.prototype.removeLink = function (node) {
	      if (node.prev) node.prev.next = node.next;else this.head = node.next;
	      if (node.next) node.next.prev = node.prev;else this.tail = node.prev;

	      node.prev = node.next = null;
	      this.length -= 1;
	      return node;
	  };

	  DLL.prototype.empty = DLL;

	  DLL.prototype.insertAfter = function (node, newNode) {
	      newNode.prev = node;
	      newNode.next = node.next;
	      if (node.next) node.next.prev = newNode;else this.tail = newNode;
	      node.next = newNode;
	      this.length += 1;
	  };

	  DLL.prototype.insertBefore = function (node, newNode) {
	      newNode.prev = node.prev;
	      newNode.next = node;
	      if (node.prev) node.prev.next = newNode;else this.head = newNode;
	      node.prev = newNode;
	      this.length += 1;
	  };

	  DLL.prototype.unshift = function (node) {
	      if (this.head) this.insertBefore(this.head, node);else setInitial(this, node);
	  };

	  DLL.prototype.push = function (node) {
	      if (this.tail) this.insertAfter(this.tail, node);else setInitial(this, node);
	  };

	  DLL.prototype.shift = function () {
	      return this.head && this.removeLink(this.head);
	  };

	  DLL.prototype.pop = function () {
	      return this.tail && this.removeLink(this.tail);
	  };

	  function queue(worker, concurrency, payload) {
	      if (concurrency == null) {
	          concurrency = 1;
	      } else if (concurrency === 0) {
	          throw new Error('Concurrency must not be zero');
	      }

	      function _insert(data, pos, callback) {
	          if (callback != null && typeof callback !== 'function') {
	              throw new Error('task callback must be a function');
	          }
	          q.started = true;
	          if (!isArray(data)) {
	              data = [data];
	          }
	          if (data.length === 0 && q.idle()) {
	              // call drain immediately if there are no tasks
	              return setImmediate$1(function () {
	                  q.drain();
	              });
	          }
	          arrayEach(data, function (task) {
	              var item = {
	                  data: task,
	                  callback: callback || noop
	              };

	              if (pos) {
	                  q._tasks.unshift(item);
	              } else {
	                  q._tasks.push(item);
	              }
	          });
	          setImmediate$1(q.process);
	      }

	      function _next(tasks) {
	          return rest(function (args) {
	              workers -= 1;

	              arrayEach(tasks, function (task) {
	                  arrayEach(workersList, function (worker, index) {
	                      if (worker === task) {
	                          workersList.splice(index, 1);
	                          return false;
	                      }
	                  });

	                  task.callback.apply(task, args);

	                  if (args[0] != null) {
	                      q.error(args[0], task.data);
	                  }
	              });

	              if (workers <= q.concurrency - q.buffer) {
	                  q.unsaturated();
	              }

	              if (q.idle()) {
	                  q.drain();
	              }
	              q.process();
	          });
	      }

	      var workers = 0;
	      var workersList = [];
	      var q = {
	          _tasks: new DLL(),
	          concurrency: concurrency,
	          payload: payload,
	          saturated: noop,
	          unsaturated: noop,
	          buffer: concurrency / 4,
	          empty: noop,
	          drain: noop,
	          error: noop,
	          started: false,
	          paused: false,
	          push: function (data, callback) {
	              _insert(data, false, callback);
	          },
	          kill: function () {
	              q.drain = noop;
	              q._tasks.empty();
	          },
	          unshift: function (data, callback) {
	              _insert(data, true, callback);
	          },
	          process: function () {
	              while (!q.paused && workers < q.concurrency && q._tasks.length) {
	                  var tasks = [],
	                      data = [];
	                  var l = q._tasks.length;
	                  if (q.payload) l = Math.min(l, q.payload);
	                  for (var i = 0; i < l; i++) {
	                      var node = q._tasks.shift();
	                      tasks.push(node);
	                      data.push(node.data);
	                  }

	                  if (q._tasks.length === 0) {
	                      q.empty();
	                  }
	                  workers += 1;
	                  workersList.push(tasks[0]);

	                  if (workers === q.concurrency) {
	                      q.saturated();
	                  }

	                  var cb = onlyOnce(_next(tasks));
	                  worker(data, cb);
	              }
	          },
	          length: function () {
	              return q._tasks.length;
	          },
	          running: function () {
	              return workers;
	          },
	          workersList: function () {
	              return workersList;
	          },
	          idle: function () {
	              return q._tasks.length + workers === 0;
	          },
	          pause: function () {
	              q.paused = true;
	          },
	          resume: function () {
	              if (q.paused === false) {
	                  return;
	              }
	              q.paused = false;
	              var resumeCount = Math.min(q.concurrency, q._tasks.length);
	              // Need to call q.process once per concurrent
	              // worker to preserve full concurrency after pause
	              for (var w = 1; w <= resumeCount; w++) {
	                  setImmediate$1(q.process);
	              }
	          }
	      };
	      return q;
	  }

	  /**
	   * A cargo of tasks for the worker function to complete. Cargo inherits all of
	   * the same methods and event callbacks as [`queue`]{@link module:ControlFlow.queue}.
	   * @typedef {Object} CargoObject
	   * @memberOf module:ControlFlow
	   * @property {Function} length - A function returning the number of items
	   * waiting to be processed. Invoke like `cargo.length()`.
	   * @property {number} payload - An `integer` for determining how many tasks
	   * should be process per round. This property can be changed after a `cargo` is
	   * created to alter the payload on-the-fly.
	   * @property {Function} push - Adds `task` to the `queue`. The callback is
	   * called once the `worker` has finished processing the task. Instead of a
	   * single task, an array of `tasks` can be submitted. The respective callback is
	   * used for every task in the list. Invoke like `cargo.push(task, [callback])`.
	   * @property {Function} saturated - A callback that is called when the
	   * `queue.length()` hits the concurrency and further tasks will be queued.
	   * @property {Function} empty - A callback that is called when the last item
	   * from the `queue` is given to a `worker`.
	   * @property {Function} drain - A callback that is called when the last item
	   * from the `queue` has returned from the `worker`.
	   * @property {Function} idle - a function returning false if there are items
	   * waiting or being processed, or true if not. Invoke like `cargo.idle()`.
	   * @property {Function} pause - a function that pauses the processing of tasks
	   * until `resume()` is called. Invoke like `cargo.pause()`.
	   * @property {Function} resume - a function that resumes the processing of
	   * queued tasks when the queue is paused. Invoke like `cargo.resume()`.
	   * @property {Function} kill - a function that removes the `drain` callback and
	   * empties remaining tasks from the queue forcing it to go idle. Invoke like `cargo.kill()`.
	   */

	  /**
	   * Creates a `cargo` object with the specified payload. Tasks added to the
	   * cargo will be processed altogether (up to the `payload` limit). If the
	   * `worker` is in progress, the task is queued until it becomes available. Once
	   * the `worker` has completed some tasks, each callback of those tasks is
	   * called. Check out [these](https://camo.githubusercontent.com/6bbd36f4cf5b35a0f11a96dcd2e97711ffc2fb37/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130382f62626330636662302d356632392d313165322d393734662d3333393763363464633835382e676966) [animations](https://camo.githubusercontent.com/f4810e00e1c5f5f8addbe3e9f49064fd5d102699/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130312f38346339323036362d356632392d313165322d383134662d3964336430323431336266642e676966)
	   * for how `cargo` and `queue` work.
	   *
	   * While [`queue`]{@link module:ControlFlow.queue} passes only one task to one of a group of workers
	   * at a time, cargo passes an array of tasks to a single worker, repeating
	   * when the worker is finished.
	   *
	   * @name cargo
	   * @static
	   * @memberOf module:ControlFlow
	   * @method
	   * @see [async.queue]{@link module:ControlFlow.queue}
	   * @category Control Flow
	   * @param {Function} worker - An asynchronous function for processing an array
	   * of queued tasks, which must call its `callback(err)` argument when finished,
	   * with an optional `err` argument. Invoked with `(tasks, callback)`.
	   * @param {number} [payload=Infinity] - An optional `integer` for determining
	   * how many tasks should be processed per round; if omitted, the default is
	   * unlimited.
	   * @returns {module:ControlFlow.CargoObject} A cargo object to manage the tasks. Callbacks can
	   * attached as certain properties to listen for specific events during the
	   * lifecycle of the cargo and inner queue.
	   * @example
	   *
	   * // create a cargo object with payload 2
	   * var cargo = async.cargo(function(tasks, callback) {
	   *     for (var i=0; i<tasks.length; i++) {
	   *         console.log('hello ' + tasks[i].name);
	   *     }
	   *     callback();
	   * }, 2);
	   *
	   * // add some items
	   * cargo.push({name: 'foo'}, function(err) {
	   *     console.log('finished processing foo');
	   * });
	   * cargo.push({name: 'bar'}, function(err) {
	   *     console.log('finished processing bar');
	   * });
	   * cargo.push({name: 'baz'}, function(err) {
	   *     console.log('finished processing baz');
	   * });
	   */
	  function cargo(worker, payload) {
	    return queue(worker, 1, payload);
	  }

	  /**
	   * The same as [`eachOf`]{@link module:Collections.eachOf} but runs a maximum of `limit` async operations at a
	   * time.
	   *
	   * @name eachOfLimit
	   * @static
	   * @memberOf module:Collections
	   * @method
	   * @see [async.eachOf]{@link module:Collections.eachOf}
	   * @alias forEachOfLimit
	   * @category Collection
	   * @param {Array|Iterable|Object} coll - A collection to iterate over.
	   * @param {number} limit - The maximum number of async operations at a time.
	   * @param {Function} iteratee - A function to apply to each
	   * item in `coll`. The `key` is the item's key, or index in the case of an
	   * array. The iteratee is passed a `callback(err)` which must be called once it
	   * has completed. If no error has occurred, the callback should be run without
	   * arguments or with an explicit `null` argument. Invoked with
	   * (item, key, callback).
	   * @param {Function} [callback] - A callback which is called when all
	   * `iteratee` functions have finished, or an error occurs. Invoked with (err).
	   */
	  function eachOfLimit(coll, limit, iteratee, callback) {
	    _eachOfLimit(limit)(coll, iteratee, callback);
	  }

	  /**
	   * The same as [`eachOf`]{@link module:Collections.eachOf} but runs only a single async operation at a time.
	   *
	   * @name eachOfSeries
	   * @static
	   * @memberOf module:Collections
	   * @method
	   * @see [async.eachOf]{@link module:Collections.eachOf}
	   * @alias forEachOfSeries
	   * @category Collection
	   * @param {Array|Iterable|Object} coll - A collection to iterate over.
	   * @param {Function} iteratee - A function to apply to each item in `coll`. The
	   * `key` is the item's key, or index in the case of an array. The iteratee is
	   * passed a `callback(err)` which must be called once it has completed. If no
	   * error has occurred, the callback should be run without arguments or with an
	   * explicit `null` argument. Invoked with (item, key, callback).
	   * @param {Function} [callback] - A callback which is called when all `iteratee`
	   * functions have finished, or an error occurs. Invoked with (err).
	   */
	  var eachOfSeries = doLimit(eachOfLimit, 1);

	  /**
	   * Reduces `coll` into a single value using an async `iteratee` to return each
	   * successive step. `memo` is the initial state of the reduction. This function
	   * only operates in series.
	   *
	   * For performance reasons, it may make sense to split a call to this function
	   * into a parallel map, and then use the normal `Array.prototype.reduce` on the
	   * results. This function is for situations where each step in the reduction
	   * needs to be async; if you can get the data before reducing it, then it's
	   * probably a good idea to do so.
	   *
	   * @name reduce
	   * @static
	   * @memberOf module:Collections
	   * @method
	   * @alias inject
	   * @alias foldl
	   * @category Collection
	   * @param {Array|Iterable|Object} coll - A collection to iterate over.
	   * @param {*} memo - The initial state of the reduction.
	   * @param {Function} iteratee - A function applied to each item in the
	   * array to produce the next step in the reduction. The `iteratee` is passed a
	   * `callback(err, reduction)` which accepts an optional error as its first
	   * argument, and the state of the reduction as the second. If an error is
	   * passed to the callback, the reduction is stopped and the main `callback` is
	   * immediately called with the error. Invoked with (memo, item, callback).
	   * @param {Function} [callback] - A callback which is called after all the
	   * `iteratee` functions have finished. Result is the reduced value. Invoked with
	   * (err, result).
	   * @example
	   *
	   * async.reduce([1,2,3], 0, function(memo, item, callback) {
	   *     // pointless async:
	   *     process.nextTick(function() {
	   *         callback(null, memo + item)
	   *     });
	   * }, function(err, result) {
	   *     // result is now equal to the last value of memo, which is 6
	   * });
	   */
	  function reduce(coll, memo, iteratee, callback) {
	      callback = once(callback || noop);
	      eachOfSeries(coll, function (x, i, callback) {
	          iteratee(memo, x, function (err, v) {
	              memo = v;
	              callback(err);
	          });
	      }, function (err) {
	          callback(err, memo);
	      });
	  }

	  /**
	   * Version of the compose function that is more natural to read. Each function
	   * consumes the return value of the previous function. It is the equivalent of
	   * [compose]{@link module:ControlFlow.compose} with the arguments reversed.
	   *
	   * Each function is executed with the `this` binding of the composed function.
	   *
	   * @name seq
	   * @static
	   * @memberOf module:ControlFlow
	   * @method
	   * @see [async.compose]{@link module:ControlFlow.compose}
	   * @category Control Flow
	   * @param {...Function} functions - the asynchronous functions to compose
	   * @returns {Function} a function that composes the `functions` in order
	   * @example
	   *
	   * // Requires lodash (or underscore), express3 and dresende's orm2.
	   * // Part of an app, that fetches cats of the logged user.
	   * // This example uses `seq` function to avoid overnesting and error
	   * // handling clutter.
	   * app.get('/cats', function(request, response) {
	   *     var User = request.models.User;
	   *     async.seq(
	   *         _.bind(User.get, User),  // 'User.get' has signature (id, callback(err, data))
	   *         function(user, fn) {
	   *             user.getCats(fn);      // 'getCats' has signature (callback(err, data))
	   *         }
	   *     )(req.session.user_id, function (err, cats) {
	   *         if (err) {
	   *             console.error(err);
	   *             response.json({ status: 'error', message: err.message });
	   *         } else {
	   *             response.json({ status: 'ok', message: 'Cats found', data: cats });
	   *         }
	   *     });
	   * });
	   */
	  var seq = rest(function seq(functions) {
	      return rest(function (args) {
	          var that = this;

	          var cb = args[args.length - 1];
	          if (typeof cb == 'function') {
	              args.pop();
	          } else {
	              cb = noop;
	          }

	          reduce(functions, args, function (newargs, fn, cb) {
	              fn.apply(that, newargs.concat([rest(function (err, nextargs) {
	                  cb(err, nextargs);
	              })]));
	          }, function (err, results) {
	              cb.apply(that, [err].concat(results));
	          });
	      });
	  });

	  /**
	   * Creates a function which is a composition of the passed asynchronous
	   * functions. Each function consumes the return value of the function that
	   * follows. Composing functions `f()`, `g()`, and `h()` would produce the result
	   * of `f(g(h()))`, only this version uses callbacks to obtain the return values.
	   *
	   * Each function is executed with the `this` binding of the composed function.
	   *
	   * @name compose
	   * @static
	   * @memberOf module:ControlFlow
	   * @method
	   * @category Control Flow
	   * @param {...Function} functions - the asynchronous functions to compose
	   * @returns {Function} an asynchronous function that is the composed
	   * asynchronous `functions`
	   * @example
	   *
	   * function add1(n, callback) {
	   *     setTimeout(function () {
	   *         callback(null, n + 1);
	   *     }, 10);
	   * }
	   *
	   * function mul3(n, callback) {
	   *     setTimeout(function () {
	   *         callback(null, n * 3);
	   *     }, 10);
	   * }
	   *
	   * var add1mul3 = async.compose(mul3, add1);
	   * add1mul3(4, function (err, result) {
	   *     // result now equals 15
	   * });
	   */
	  var compose = rest(function (args) {
	    return seq.apply(null, args.reverse());
	  });

	  function concat$1(eachfn, arr, fn, callback) {
	      var result = [];
	      eachfn(arr, function (x, index, cb) {
	          fn(x, function (err, y) {
	              result = result.concat(y || []);
	              cb(err);
	          });
	      }, function (err) {
	          callback(err, result);
	      });
	  }

	  /**
	   * Like [`each`]{@link module:Collections.each}, except that it passes the key (or index) as the second argument
	   * to the iteratee.
	   *
	   * @name eachOf
	   * @static
	   * @memberOf module:Collections
	   * @method
	   * @alias forEachOf
	   * @category Collection
	   * @see [async.each]{@link module:Collections.each}
	   * @param {Array|Iterable|Object} coll - A collection to iterate over.
	   * @param {Function} iteratee - A function to apply to each
	   * item in `coll`. The `key` is the item's key, or index in the case of an
	   * array. The iteratee is passed a `callback(err)` which must be called once it
	   * has completed. If no error has occurred, the callback should be run without
	   * arguments or with an explicit `null` argument. Invoked with
	   * (item, key, callback).
	   * @param {Function} [callback] - A callback which is called when all
	   * `iteratee` functions have finished, or an error occurs. Invoked with (err).
	   * @example
	   *
	   * var obj = {dev: "/dev.json", test: "/test.json", prod: "/prod.json"};
	   * var configs = {};
	   *
	   * async.forEachOf(obj, function (value, key, callback) {
	   *     fs.readFile(__dirname + value, "utf8", function (err, data) {
	   *         if (err) return callback(err);
	   *         try {
	   *             configs[key] = JSON.parse(data);
	   *         } catch (e) {
	   *             return callback(e);
	   *         }
	   *         callback();
	   *     });
	   * }, function (err) {
	   *     if (err) console.error(err.message);
	   *     // configs is now a map of JSON data
	   *     doSomethingWith(configs);
	   * });
	   */
	  var eachOf = doLimit(eachOfLimit, Infinity);

	  function doParallel(fn) {
	      return function (obj, iteratee, callback) {
	          return fn(eachOf, obj, iteratee, callback);
	      };
	  }

	  /**
	   * Applies `iteratee` to each item in `coll`, concatenating the results. Returns
	   * the concatenated list. The `iteratee`s are called in parallel, and the
	   * results are concatenated as they return. There is no guarantee that the
	   * results array will be returned in the original order of `coll` passed to the
	   * `iteratee` function.
	   *
	   * @name concat
	   * @static
	   * @memberOf module:Collections
	   * @method
	   * @category Collection
	   * @param {Array|Iterable|Object} coll - A collection to iterate over.
	   * @param {Function} iteratee - A function to apply to each item in `coll`.
	   * The iteratee is passed a `callback(err, results)` which must be called once
	   * it has completed with an error (which can be `null`) and an array of results.
	   * Invoked with (item, callback).
	   * @param {Function} [callback(err)] - A callback which is called after all the
	   * `iteratee` functions have finished, or an error occurs. Results is an array
	   * containing the concatenated results of the `iteratee` function. Invoked with
	   * (err, results).
	   * @example
	   *
	   * async.concat(['dir1','dir2','dir3'], fs.readdir, function(err, files) {
	   *     // files is now a list of filenames that exist in the 3 directories
	   * });
	   */
	  var concat = doParallel(concat$1);

	  function doSeries(fn) {
	      return function (obj, iteratee, callback) {
	          return fn(eachOfSeries, obj, iteratee, callback);
	      };
	  }

	  /**
	   * The same as [`concat`]{@link module:Collections.concat} but runs only a single async operation at a time.
	   *
	   * @name concatSeries
	   * @static
	   * @memberOf module:Collections
	   * @method
	   * @see [async.concat]{@link module:Collections.concat}
	   * @category Collection
	   * @param {Array|Iterable|Object} coll - A collection to iterate over.
	   * @param {Function} iteratee - A function to apply to each item in `coll`.
	   * The iteratee is passed a `callback(err, results)` which must be called once
	   * it has completed with an error (which can be `null`) and an array of results.
	   * Invoked with (item, callback).
	   * @param {Function} [callback(err)] - A callback which is called after all the
	   * `iteratee` functions have finished, or an error occurs. Results is an array
	   * containing the concatenated results of the `iteratee` function. Invoked with
	   * (err, results).
	   */
	  var concatSeries = doSeries(concat$1);

	  /**
	   * Returns a function that when called, calls-back with the values provided.
	   * Useful as the first function in a [`waterfall`]{@link module:ControlFlow.waterfall}, or for plugging values in to
	   * [`auto`]{@link module:ControlFlow.auto}.
	   *
	   * @name constant
	   * @static
	   * @memberOf module:Utils
	   * @method
	   * @category Util
	   * @param {...*} arguments... - Any number of arguments to automatically invoke
	   * callback with.
	   * @returns {Function} Returns a function that when invoked, automatically
	   * invokes the callback with the previous given arguments.
	   * @example
	   *
	   * async.waterfall([
	   *     async.constant(42),
	   *     function (value, next) {
	   *         // value === 42
	   *     },
	   *     //...
	   * ], callback);
	   *
	   * async.waterfall([
	   *     async.constant(filename, "utf8"),
	   *     fs.readFile,
	   *     function (fileData, next) {
	   *         //...
	   *     }
	   *     //...
	   * ], callback);
	   *
	   * async.auto({
	   *     hostname: async.constant("https://server.net/"),
	   *     port: findFreePort,
	   *     launchServer: ["hostname", "port", function (options, cb) {
	   *         startServer(options, cb);
	   *     }],
	   *     //...
	   * }, callback);
	   */
	  var constant = rest(function (values) {
	      var args = [null].concat(values);
	      return initialParams(function (ignoredArgs, callback) {
	          return callback.apply(this, args);
	      });
	  });

	  /**
	   * This method returns the first argument given to it.
	   *
	   * @static
	   * @since 0.1.0
	   * @memberOf _
	   * @category Util
	   * @param {*} value Any value.
	   * @returns {*} Returns `value`.
	   * @example
	   *
	   * var object = { 'user': 'fred' };
	   *
	   * console.log(_.identity(object) === object);
	   * // => true
	   */
	  function identity(value) {
	    return value;
	  }

	  function _createTester(eachfn, check, getResult) {
	      return function (arr, limit, iteratee, cb) {
	          function done(err) {
	              if (cb) {
	                  if (err) {
	                      cb(err);
	                  } else {
	                      cb(null, getResult(false));
	                  }
	              }
	          }
	          function wrappedIteratee(x, _, callback) {
	              if (!cb) return callback();
	              iteratee(x, function (err, v) {
	                  if (cb) {
	                      if (err) {
	                          cb(err);
	                          cb = iteratee = false;
	                      } else if (check(v)) {
	                          cb(null, getResult(true, x));
	                          cb = iteratee = false;
	                      }
	                  }
	                  callback();
	              });
	          }
	          if (arguments.length > 3) {
	              cb = cb || noop;
	              eachfn(arr, limit, wrappedIteratee, done);
	          } else {
	              cb = iteratee;
	              cb = cb || noop;
	              iteratee = limit;
	              eachfn(arr, wrappedIteratee, done);
	          }
	      };
	  }

	  function _findGetResult(v, x) {
	      return x;
	  }

	  /**
	   * Returns the first value in `coll` that passes an async truth test. The
	   * `iteratee` is applied in parallel, meaning the first iteratee to return
	   * `true` will fire the detect `callback` with that result. That means the
	   * result might not be the first item in the original `coll` (in terms of order)
	   * that passes the test.

	   * If order within the original `coll` is important, then look at
	   * [`detectSeries`]{@link module:Collections.detectSeries}.
	   *
	   * @name detect
	   * @static
	   * @memberOf module:Collections
	   * @method
	   * @alias find
	   * @category Collections
	   * @param {Array|Iterable|Object} coll - A collection to iterate over.
	   * @param {Function} iteratee - A truth test to apply to each item in `coll`.
	   * The iteratee is passed a `callback(err, truthValue)` which must be called
	   * with a boolean argument once it has completed. Invoked with (item, callback).
	   * @param {Function} [callback] - A callback which is called as soon as any
	   * iteratee returns `true`, or after all the `iteratee` functions have finished.
	   * Result will be the first item in the array that passes the truth test
	   * (iteratee) or the value `undefined` if none passed. Invoked with
	   * (err, result).
	   * @example
	   *
	   * async.detect(['file1','file2','file3'], function(filePath, callback) {
	   *     fs.access(filePath, function(err) {
	   *         callback(null, !err)
	   *     });
	   * }, function(err, result) {
	   *     // result now equals the first file in the list that exists
	   * });
	   */
	  var detect = _createTester(eachOf, identity, _findGetResult);

	  /**
	   * The same as [`detect`]{@link module:Collections.detect} but runs a maximum of `limit` async operations at a
	   * time.
	   *
	   * @name detectLimit
	   * @static
	   * @memberOf module:Collections
	   * @method
	   * @see [async.detect]{@link module:Collections.detect}
	   * @alias findLimit
	   * @category Collections
	   * @param {Array|Iterable|Object} coll - A collection to iterate over.
	   * @param {number} limit - The maximum number of async operations at a time.
	   * @param {Function} iteratee - A truth test to apply to each item in `coll`.
	   * The iteratee is passed a `callback(err, truthValue)` which must be called
	   * with a boolean argument once it has completed. Invoked with (item, callback).
	   * @param {Function} [callback] - A callback which is called as soon as any
	   * iteratee returns `true`, or after all the `iteratee` functions have finished.
	   * Result will be the first item in the array that passes the truth test
	   * (iteratee) or the value `undefined` if none passed. Invoked with
	   * (err, result).
	   */
	  var detectLimit = _createTester(eachOfLimit, identity, _findGetResult);

	  /**
	   * The same as [`detect`]{@link module:Collections.detect} but runs only a single async operation at a time.
	   *
	   * @name detectSeries
	   * @static
	   * @memberOf module:Collections
	   * @method
	   * @see [async.detect]{@link module:Collections.detect}
	   * @alias findSeries
	   * @category Collections
	   * @param {Array|Iterable|Object} coll - A collection to iterate over.
	   * @param {Function} iteratee - A truth test to apply to each item in `coll`.
	   * The iteratee is passed a `callback(err, truthValue)` which must be called
	   * with a boolean argument once it has completed. Invoked with (item, callback).
	   * @param {Function} [callback] - A callback which is called as soon as any
	   * iteratee returns `true`, or after all the `iteratee` functions have finished.
	   * Result will be the first item in the array that passes the truth test
	   * (iteratee) or the value `undefined` if none passed. Invoked with
	   * (err, result).
	   */
	  var detectSeries = _createTester(eachOfSeries, identity, _findGetResult);

	  function consoleFunc(name) {
	      return rest(function (fn, args) {
	          fn.apply(null, args.concat([rest(function (err, args) {
	              if (typeof console === 'object') {
	                  if (err) {
	                      if (console.error) {
	                          console.error(err);
	                      }
	                  } else if (console[name]) {
	                      arrayEach(args, function (x) {
	                          console[name](x);
	                      });
	                  }
	              }
	          })]));
	      });
	  }

	  /**
	   * Logs the result of an `async` function to the `console` using `console.dir`
	   * to display the properties of the resulting object. Only works in Node.js or
	   * in browsers that support `console.dir` and `console.error` (such as FF and
	   * Chrome). If multiple arguments are returned from the async function,
	   * `console.dir` is called on each argument in order.
	   *
	   * @name dir
	   * @static
	   * @memberOf module:Utils
	   * @method
	   * @category Util
	   * @param {Function} function - The function you want to eventually apply all
	   * arguments to.
	   * @param {...*} arguments... - Any number of arguments to apply to the function.
	   * @example
	   *
	   * // in a module
	   * var hello = function(name, callback) {
	   *     setTimeout(function() {
	   *         callback(null, {hello: name});
	   *     }, 1000);
	   * };
	   *
	   * // in the node repl
	   * node> async.dir(hello, 'world');
	   * {hello: 'world'}
	   */
	  var dir = consoleFunc('dir');

	  /**
	   * The post-check version of [`during`]{@link module:ControlFlow.during}. To reflect the difference in
	   * the order of operations, the arguments `test` and `fn` are switched.
	   *
	   * Also a version of [`doWhilst`]{@link module:ControlFlow.doWhilst} with asynchronous `test` function.
	   * @name doDuring
	   * @static
	   * @memberOf module:ControlFlow
	   * @method
	   * @see [async.during]{@link module:ControlFlow.during}
	   * @category Control Flow
	   * @param {Function} fn - A function which is called each time `test` passes.
	   * The function is passed a `callback(err)`, which must be called once it has
	   * completed with an optional `err` argument. Invoked with (callback).
	   * @param {Function} test - asynchronous truth test to perform before each
	   * execution of `fn`. Invoked with (...args, callback), where `...args` are the
	   * non-error args from the previous callback of `fn`.
	   * @param {Function} [callback] - A callback which is called after the test
	   * function has failed and repeated execution of `fn` has stopped. `callback`
	   * will be passed an error if one occured, otherwise `null`.
	   */
	  function doDuring(fn, test, callback) {
	      callback = onlyOnce(callback || noop);

	      var next = rest(function (err, args) {
	          if (err) return callback(err);
	          args.push(check);
	          test.apply(this, args);
	      });

	      function check(err, truth) {
	          if (err) return callback(err);
	          if (!truth) return callback(null);
	          fn(next);
	      }

	      check(null, true);
	  }

	  /**
	   * The post-check version of [`whilst`]{@link module:ControlFlow.whilst}. To reflect the difference in
	   * the order of operations, the arguments `test` and `iteratee` are switched.
	   *
	   * `doWhilst` is to `whilst` as `do while` is to `while` in plain JavaScript.
	   *
	   * @name doWhilst
	   * @static
	   * @memberOf module:ControlFlow
	   * @method
	   * @see [async.whilst]{@link module:ControlFlow.whilst}
	   * @category Control Flow
	   * @param {Function} iteratee - A function which is called each time `test`
	   * passes. The function is passed a `callback(err)`, which must be called once
	   * it has completed with an optional `err` argument. Invoked with (callback).
	   * @param {Function} test - synchronous truth test to perform after each
	   * execution of `iteratee`. Invoked with Invoked with the non-error callback
	   * results of `iteratee`.
	   * @param {Function} [callback] - A callback which is called after the test
	   * function has failed and repeated execution of `iteratee` has stopped.
	   * `callback` will be passed an error and any arguments passed to the final
	   * `iteratee`'s callback. Invoked with (err, [results]);
	   */
	  function doWhilst(iteratee, test, callback) {
	      callback = onlyOnce(callback || noop);
	      var next = rest(function (err, args) {
	          if (err) return callback(err);
	          if (test.apply(this, args)) return iteratee(next);
	          callback.apply(null, [null].concat(args));
	      });
	      iteratee(next);
	  }

	  /**
	   * Like ['doWhilst']{@link module:ControlFlow.doWhilst}, except the `test` is inverted. Note the
	   * argument ordering differs from `until`.
	   *
	   * @name doUntil
	   * @static
	   * @memberOf module:ControlFlow
	   * @method
	   * @see [async.doWhilst]{@link module:ControlFlow.doWhilst}
	   * @category Control Flow
	   * @param {Function} fn - A function which is called each time `test` fails.
	   * The function is passed a `callback(err)`, which must be called once it has
	   * completed with an optional `err` argument. Invoked with (callback).
	   * @param {Function} test - synchronous truth test to perform after each
	   * execution of `fn`. Invoked with the non-error callback results of `fn`.
	   * @param {Function} [callback] - A callback which is called after the test
	   * function has passed and repeated execution of `fn` has stopped. `callback`
	   * will be passed an error and any arguments passed to the final `fn`'s
	   * callback. Invoked with (err, [results]);
	   */
	  function doUntil(fn, test, callback) {
	      doWhilst(fn, function () {
	          return !test.apply(this, arguments);
	      }, callback);
	  }

	  /**
	   * Like [`whilst`]{@link module:ControlFlow.whilst}, except the `test` is an asynchronous function that
	   * is passed a callback in the form of `function (err, truth)`. If error is
	   * passed to `test` or `fn`, the main callback is immediately called with the
	   * value of the error.
	   *
	   * @name during
	   * @static
	   * @memberOf module:ControlFlow
	   * @method
	   * @see [async.whilst]{@link module:ControlFlow.whilst}
	   * @category Control Flow
	   * @param {Function} test - asynchronous truth test to perform before each
	   * execution of `fn`. Invoked with (callback).
	   * @param {Function} fn - A function which is called each time `test` passes.
	   * The function is passed a `callback(err)`, which must be called once it has
	   * completed with an optional `err` argument. Invoked with (callback).
	   * @param {Function} [callback] - A callback which is called after the test
	   * function has failed and repeated execution of `fn` has stopped. `callback`
	   * will be passed an error, if one occured, otherwise `null`.
	   * @example
	   *
	   * var count = 0;
	   *
	   * async.during(
	   *     function (callback) {
	   *         return callback(null, count < 5);
	   *     },
	   *     function (callback) {
	   *         count++;
	   *         setTimeout(callback, 1000);
	   *     },
	   *     function (err) {
	   *         // 5 seconds have passed
	   *     }
	   * );
	   */
	  function during(test, fn, callback) {
	      callback = onlyOnce(callback || noop);

	      function next(err) {
	          if (err) return callback(err);
	          test(check);
	      }

	      function check(err, truth) {
	          if (err) return callback(err);
	          if (!truth) return callback(null);
	          fn(next);
	      }

	      test(check);
	  }

	  function _withoutIndex(iteratee) {
	      return function (value, index, callback) {
	          return iteratee(value, callback);
	      };
	  }

	  /**
	   * The same as [`each`]{@link module:Collections.each} but runs a maximum of `limit` async operations at a time.
	   *
	   * @name eachLimit
	   * @static
	   * @memberOf module:Collections
	   * @method
	   * @see [async.each]{@link module:Collections.each}
	   * @alias forEachLimit
	   * @category Collection
	   * @param {Array|Iterable|Object} coll - A colleciton to iterate over.
	   * @param {number} limit - The maximum number of async operations at a time.
	   * @param {Function} iteratee - A function to apply to each item in `coll`. The
	   * iteratee is passed a `callback(err)` which must be called once it has
	   * completed. If no error has occurred, the `callback` should be run without
	   * arguments or with an explicit `null` argument. The array index is not passed
	   * to the iteratee. Invoked with (item, callback). If you need the index, use
	   * `eachOfLimit`.
	   * @param {Function} [callback] - A callback which is called when all
	   * `iteratee` functions have finished, or an error occurs. Invoked with (err).
	   */
	  function eachLimit(coll, limit, iteratee, callback) {
	    _eachOfLimit(limit)(coll, _withoutIndex(iteratee), callback);
	  }

	  /**
	   * Applies the function `iteratee` to each item in `coll`, in parallel.
	   * The `iteratee` is called with an item from the list, and a callback for when
	   * it has finished. If the `iteratee` passes an error to its `callback`, the
	   * main `callback` (for the `each` function) is immediately called with the
	   * error.
	   *
	   * Note, that since this function applies `iteratee` to each item in parallel,
	   * there is no guarantee that the iteratee functions will complete in order.
	   *
	   * @name each
	   * @static
	   * @memberOf module:Collections
	   * @method
	   * @alias forEach
	   * @category Collection
	   * @param {Array|Iterable|Object} coll - A collection to iterate over.
	   * @param {Function} iteratee - A function to apply to each item
	   * in `coll`. The iteratee is passed a `callback(err)` which must be called once
	   * it has completed. If no error has occurred, the `callback` should be run
	   * without arguments or with an explicit `null` argument. The array index is not
	   * passed to the iteratee. Invoked with (item, callback). If you need the index,
	   * use `eachOf`.
	   * @param {Function} [callback] - A callback which is called when all
	   * `iteratee` functions have finished, or an error occurs. Invoked with (err).
	   * @example
	   *
	   * // assuming openFiles is an array of file names and saveFile is a function
	   * // to save the modified contents of that file:
	   *
	   * async.each(openFiles, saveFile, function(err){
	   *   // if any of the saves produced an error, err would equal that error
	   * });
	   *
	   * // assuming openFiles is an array of file names
	   * async.each(openFiles, function(file, callback) {
	   *
	   *     // Perform operation on file here.
	   *     console.log('Processing file ' + file);
	   *
	   *     if( file.length > 32 ) {
	   *       console.log('This file name is too long');
	   *       callback('File name too long');
	   *     } else {
	   *       // Do work to process file here
	   *       console.log('File processed');
	   *       callback();
	   *     }
	   * }, function(err) {
	   *     // if any of the file processing produced an error, err would equal that error
	   *     if( err ) {
	   *       // One of the iterations produced an error.
	   *       // All processing will now stop.
	   *       console.log('A file failed to process');
	   *     } else {
	   *       console.log('All files have been processed successfully');
	   *     }
	   * });
	   */
	  var each = doLimit(eachLimit, Infinity);

	  /**
	   * The same as [`each`]{@link module:Collections.each} but runs only a single async operation at a time.
	   *
	   * @name eachSeries
	   * @static
	   * @memberOf module:Collections
	   * @method
	   * @see [async.each]{@link module:Collections.each}
	   * @alias forEachSeries
	   * @category Collection
	   * @param {Array|Iterable|Object} coll - A collection to iterate over.
	   * @param {Function} iteratee - A function to apply to each
	   * item in `coll`. The iteratee is passed a `callback(err)` which must be called
	   * once it has completed. If no error has occurred, the `callback` should be run
	   * without arguments or with an explicit `null` argument. The array index is
	   * not passed to the iteratee. Invoked with (item, callback). If you need the
	   * index, use `eachOfSeries`.
	   * @param {Function} [callback] - A callback which is called when all
	   * `iteratee` functions have finished, or an error occurs. Invoked with (err).
	   */
	  var eachSeries = doLimit(eachLimit, 1);

	  /**
	   * Wrap an async function and ensure it calls its callback on a later tick of
	   * the event loop.  If the function already calls its callback on a next tick,
	   * no extra deferral is added. This is useful for preventing stack overflows
	   * (`RangeError: Maximum call stack size exceeded`) and generally keeping
	   * [Zalgo](http://blog.izs.me/post/59142742143/designing-apis-for-asynchrony)
	   * contained.
	   *
	   * @name ensureAsync
	   * @static
	   * @memberOf module:Utils
	   * @method
	   * @category Util
	   * @param {Function} fn - an async function, one that expects a node-style
	   * callback as its last argument.
	   * @returns {Function} Returns a wrapped function with the exact same call
	   * signature as the function passed in.
	   * @example
	   *
	   * function sometimesAsync(arg, callback) {
	   *     if (cache[arg]) {
	   *         return callback(null, cache[arg]); // this would be synchronous!!
	   *     } else {
	   *         doSomeIO(arg, callback); // this IO would be asynchronous
	   *     }
	   * }
	   *
	   * // this has a risk of stack overflows if many results are cached in a row
	   * async.mapSeries(args, sometimesAsync, done);
	   *
	   * // this will defer sometimesAsync's callback if necessary,
	   * // preventing stack overflows
	   * async.mapSeries(args, async.ensureAsync(sometimesAsync), done);
	   */
	  function ensureAsync(fn) {
	      return initialParams(function (args, callback) {
	          var sync = true;
	          args.push(function () {
	              var innerArgs = arguments;
	              if (sync) {
	                  setImmediate$1(function () {
	                      callback.apply(null, innerArgs);
	                  });
	              } else {
	                  callback.apply(null, innerArgs);
	              }
	          });
	          fn.apply(this, args);
	          sync = false;
	      });
	  }

	  function notId(v) {
	      return !v;
	  }

	  /**
	   * The same as [`every`]{@link module:Collections.every} but runs a maximum of `limit` async operations at a time.
	   *
	   * @name everyLimit
	   * @static
	   * @memberOf module:Collections
	   * @method
	   * @see [async.every]{@link module:Collections.every}
	   * @alias allLimit
	   * @category Collection
	   * @param {Array|Iterable|Object} coll - A collection to iterate over.
	   * @param {number} limit - The maximum number of async operations at a time.
	   * @param {Function} iteratee - A truth test to apply to each item in the
	   * collection in parallel. The iteratee is passed a `callback(err, truthValue)`
	   * which must be called with a  boolean argument once it has completed. Invoked
	   * with (item, callback).
	   * @param {Function} [callback] - A callback which is called after all the
	   * `iteratee` functions have finished. Result will be either `true` or `false`
	   * depending on the values of the async tests. Invoked with (err, result).
	   */
	  var everyLimit = _createTester(eachOfLimit, notId, notId);

	  /**
	   * Returns `true` if every element in `coll` satisfies an async test. If any
	   * iteratee call returns `false`, the main `callback` is immediately called.
	   *
	   * @name every
	   * @static
	   * @memberOf module:Collections
	   * @method
	   * @alias all
	   * @category Collection
	   * @param {Array|Iterable|Object} coll - A collection to iterate over.
	   * @param {Function} iteratee - A truth test to apply to each item in the
	   * collection in parallel. The iteratee is passed a `callback(err, truthValue)`
	   * which must be called with a  boolean argument once it has completed. Invoked
	   * with (item, callback).
	   * @param {Function} [callback] - A callback which is called after all the
	   * `iteratee` functions have finished. Result will be either `true` or `false`
	   * depending on the values of the async tests. Invoked with (err, result).
	   * @example
	   *
	   * async.every(['file1','file2','file3'], function(filePath, callback) {
	   *     fs.access(filePath, function(err) {
	   *         callback(null, !err)
	   *     });
	   * }, function(err, result) {
	   *     // if result is true then every file exists
	   * });
	   */
	  var every = doLimit(everyLimit, Infinity);

	  /**
	   * The same as [`every`]{@link module:Collections.every} but runs only a single async operation at a time.
	   *
	   * @name everySeries
	   * @static
	   * @memberOf module:Collections
	   * @method
	   * @see [async.every]{@link module:Collections.every}
	   * @alias allSeries
	   * @category Collection
	   * @param {Array|Iterable|Object} coll - A collection to iterate over.
	   * @param {Function} iteratee - A truth test to apply to each item in the
	   * collection in parallel. The iteratee is passed a `callback(err, truthValue)`
	   * which must be called with a  boolean argument once it has completed. Invoked
	   * with (item, callback).
	   * @param {Function} [callback] - A callback which is called after all the
	   * `iteratee` functions have finished. Result will be either `true` or `false`
	   * depending on the values of the async tests. Invoked with (err, result).
	   */
	  var everySeries = doLimit(everyLimit, 1);

	  function _filter(eachfn, arr, iteratee, callback) {
	      callback = once(callback || noop);
	      var results = [];
	      eachfn(arr, function (x, index, callback) {
	          iteratee(x, function (err, v) {
	              if (err) {
	                  callback(err);
	              } else {
	                  if (v) {
	                      results.push({ index: index, value: x });
	                  }
	                  callback();
	              }
	          });
	      }, function (err) {
	          if (err) {
	              callback(err);
	          } else {
	              callback(null, arrayMap(results.sort(function (a, b) {
	                  return a.index - b.index;
	              }), baseProperty('value')));
	          }
	      });
	  }

	  /**
	   * The same as [`filter`]{@link module:Collections.filter} but runs a maximum of `limit` async operations at a
	   * time.
	   *
	   * @name filterLimit
	   * @static
	   * @memberOf module:Collections
	   * @method
	   * @see [async.filter]{@link module:Collections.filter}
	   * @alias selectLimit
	   * @category Collection
	   * @param {Array|Iterable|Object} coll - A collection to iterate over.
	   * @param {number} limit - The maximum number of async operations at a time.
	   * @param {Function} iteratee - A truth test to apply to each item in `coll`.
	   * The `iteratee` is passed a `callback(err, truthValue)`, which must be called
	   * with a boolean argument once it has completed. Invoked with (item, callback).
	   * @param {Function} [callback] - A callback which is called after all the
	   * `iteratee` functions have finished. Invoked with (err, results).
	   */
	  var filterLimit = doParallelLimit(_filter);

	  /**
	   * Returns a new array of all the values in `coll` which pass an async truth
	   * test. This operation is performed in parallel, but the results array will be
	   * in the same order as the original.
	   *
	   * @name filter
	   * @static
	   * @memberOf module:Collections
	   * @method
	   * @alias select
	   * @category Collection
	   * @param {Array|Iterable|Object} coll - A collection to iterate over.
	   * @param {Function} iteratee - A truth test to apply to each item in `coll`.
	   * The `iteratee` is passed a `callback(err, truthValue)`, which must be called
	   * with a boolean argument once it has completed. Invoked with (item, callback).
	   * @param {Function} [callback] - A callback which is called after all the
	   * `iteratee` functions have finished. Invoked with (err, results).
	   * @example
	   *
	   * async.filter(['file1','file2','file3'], function(filePath, callback) {
	   *     fs.access(filePath, function(err) {
	   *         callback(null, !err)
	   *     });
	   * }, function(err, results) {
	   *     // results now equals an array of the existing files
	   * });
	   */
	  var filter = doLimit(filterLimit, Infinity);

	  /**
	   * The same as [`filter`]{@link module:Collections.filter} but runs only a single async operation at a time.
	   *
	   * @name filterSeries
	   * @static
	   * @memberOf module:Collections
	   * @method
	   * @see [async.filter]{@link module:Collections.filter}
	   * @alias selectSeries
	   * @category Collection
	   * @param {Array|Iterable|Object} coll - A collection to iterate over.
	   * @param {Function} iteratee - A truth test to apply to each item in `coll`.
	   * The `iteratee` is passed a `callback(err, truthValue)`, which must be called
	   * with a boolean argument once it has completed. Invoked with (item, callback).
	   * @param {Function} [callback] - A callback which is called after all the
	   * `iteratee` functions have finished. Invoked with (err, results)
	   */
	  var filterSeries = doLimit(filterLimit, 1);

	  /**
	   * Calls the asynchronous function `fn` with a callback parameter that allows it
	   * to call itself again, in series, indefinitely.

	   * If an error is passed to the
	   * callback then `errback` is called with the error, and execution stops,
	   * otherwise it will never be called.
	   *
	   * @name forever
	   * @static
	   * @memberOf module:ControlFlow
	   * @method
	   * @category Control Flow
	   * @param {Function} fn - a function to call repeatedly. Invoked with (next).
	   * @param {Function} [errback] - when `fn` passes an error to it's callback,
	   * this function will be called, and execution stops. Invoked with (err).
	   * @example
	   *
	   * async.forever(
	   *     function(next) {
	   *         // next is suitable for passing to things that need a callback(err [, whatever]);
	   *         // it will result in this function being called again.
	   *     },
	   *     function(err) {
	   *         // if next is called with a value in its first parameter, it will appear
	   *         // in here as 'err', and execution will stop.
	   *     }
	   * );
	   */
	  function forever(fn, errback) {
	      var done = onlyOnce(errback || noop);
	      var task = ensureAsync(fn);

	      function next(err) {
	          if (err) return done(err);
	          task(next);
	      }
	      next();
	  }

	  /**
	   * Logs the result of an `async` function to the `console`. Only works in
	   * Node.js or in browsers that support `console.log` and `console.error` (such
	   * as FF and Chrome). If multiple arguments are returned from the async
	   * function, `console.log` is called on each argument in order.
	   *
	   * @name log
	   * @static
	   * @memberOf module:Utils
	   * @method
	   * @category Util
	   * @param {Function} function - The function you want to eventually apply all
	   * arguments to.
	   * @param {...*} arguments... - Any number of arguments to apply to the function.
	   * @example
	   *
	   * // in a module
	   * var hello = function(name, callback) {
	   *     setTimeout(function() {
	   *         callback(null, 'hello ' + name);
	   *     }, 1000);
	   * };
	   *
	   * // in the node repl
	   * node> async.log(hello, 'world');
	   * 'hello world'
	   */
	  var log = consoleFunc('log');

	  /**
	   * The same as [`mapValues`]{@link module:Collections.mapValues} but runs a maximum of `limit` async operations at a
	   * time.
	   *
	   * @name mapValuesLimit
	   * @static
	   * @memberOf module:Collections
	   * @method
	   * @see [async.mapValues]{@link module:Collections.mapValues}
	   * @category Collection
	   * @param {Object} obj - A collection to iterate over.
	   * @param {number} limit - The maximum number of async operations at a time.
	   * @param {Function} iteratee - A function to apply to each value in `obj`.
	   * The iteratee is passed a `callback(err, transformed)` which must be called
	   * once it has completed with an error (which can be `null`) and a
	   * transformed value. Invoked with (value, key, callback).
	   * @param {Function} [callback] - A callback which is called when all `iteratee`
	   * functions have finished, or an error occurs. Result is an object of the
	   * transformed values from the `obj`. Invoked with (err, result).
	   */
	  function mapValuesLimit(obj, limit, iteratee, callback) {
	      callback = once(callback || noop);
	      var newObj = {};
	      eachOfLimit(obj, limit, function (val, key, next) {
	          iteratee(val, key, function (err, result) {
	              if (err) return next(err);
	              newObj[key] = result;
	              next();
	          });
	      }, function (err) {
	          callback(err, newObj);
	      });
	  }

	  /**
	   * A relative of [`map`]{@link module:Collections.map}, designed for use with objects.
	   *
	   * Produces a new Object by mapping each value of `obj` through the `iteratee`
	   * function. The `iteratee` is called each `value` and `key` from `obj` and a
	   * callback for when it has finished processing. Each of these callbacks takes
	   * two arguments: an `error`, and the transformed item from `obj`. If `iteratee`
	   * passes an error to its callback, the main `callback` (for the `mapValues`
	   * function) is immediately called with the error.
	   *
	   * Note, the order of the keys in the result is not guaranteed.  The keys will
	   * be roughly in the order they complete, (but this is very engine-specific)
	   *
	   * @name mapValues
	   * @static
	   * @memberOf module:Collections
	   * @method
	   * @category Collection
	   * @param {Object} obj - A collection to iterate over.
	   * @param {Function} iteratee - A function to apply to each value and key in
	   * `coll`. The iteratee is passed a `callback(err, transformed)` which must be
	   * called once it has completed with an error (which can be `null`) and a
	   * transformed value. Invoked with (value, key, callback).
	   * @param {Function} [callback] - A callback which is called when all `iteratee`
	   * functions have finished, or an error occurs. Results is an array of the
	   * transformed items from the `obj`. Invoked with (err, result).
	   * @example
	   *
	   * async.mapValues({
	   *     f1: 'file1',
	   *     f2: 'file2',
	   *     f3: 'file3'
	   * }, function (file, key, callback) {
	   *   fs.stat(file, callback);
	   * }, function(err, result) {
	   *     // results is now a map of stats for each file, e.g.
	   *     // {
	   *     //     f1: [stats for file1],
	   *     //     f2: [stats for file2],
	   *     //     f3: [stats for file3]
	   *     // }
	   * });
	   */

	  var mapValues = doLimit(mapValuesLimit, Infinity);

	  /**
	   * The same as [`mapValues`]{@link module:Collections.mapValues} but runs only a single async operation at a time.
	   *
	   * @name mapValuesSeries
	   * @static
	   * @memberOf module:Collections
	   * @method
	   * @see [async.mapValues]{@link module:Collections.mapValues}
	   * @category Collection
	   * @param {Object} obj - A collection to iterate over.
	   * @param {Function} iteratee - A function to apply to each value in `obj`.
	   * The iteratee is passed a `callback(err, transformed)` which must be called
	   * once it has completed with an error (which can be `null`) and a
	   * transformed value. Invoked with (value, key, callback).
	   * @param {Function} [callback] - A callback which is called when all `iteratee`
	   * functions have finished, or an error occurs. Result is an object of the
	   * transformed values from the `obj`. Invoked with (err, result).
	   */
	  var mapValuesSeries = doLimit(mapValuesLimit, 1);

	  function has(obj, key) {
	      return key in obj;
	  }

	  /**
	   * Caches the results of an `async` function. When creating a hash to store
	   * function results against, the callback is omitted from the hash and an
	   * optional hash function can be used.
	   *
	   * If no hash function is specified, the first argument is used as a hash key,
	   * which may work reasonably if it is a string or a data type that converts to a
	   * distinct string. Note that objects and arrays will not behave reasonably.
	   * Neither will cases where the other arguments are significant. In such cases,
	   * specify your own hash function.
	   *
	   * The cache of results is exposed as the `memo` property of the function
	   * returned by `memoize`.
	   *
	   * @name memoize
	   * @static
	   * @memberOf module:Utils
	   * @method
	   * @category Util
	   * @param {Function} fn - The function to proxy and cache results from.
	   * @param {Function} hasher - An optional function for generating a custom hash
	   * for storing results. It has all the arguments applied to it apart from the
	   * callback, and must be synchronous.
	   * @returns {Function} a memoized version of `fn`
	   * @example
	   *
	   * var slow_fn = function(name, callback) {
	   *     // do something
	   *     callback(null, result);
	   * };
	   * var fn = async.memoize(slow_fn);
	   *
	   * // fn can now be used as if it were slow_fn
	   * fn('some name', function() {
	   *     // callback
	   * });
	   */
	  function memoize(fn, hasher) {
	      var memo = Object.create(null);
	      var queues = Object.create(null);
	      hasher = hasher || identity;
	      var memoized = initialParams(function memoized(args, callback) {
	          var key = hasher.apply(null, args);
	          if (has(memo, key)) {
	              setImmediate$1(function () {
	                  callback.apply(null, memo[key]);
	              });
	          } else if (has(queues, key)) {
	              queues[key].push(callback);
	          } else {
	              queues[key] = [callback];
	              fn.apply(null, args.concat([rest(function (args) {
	                  memo[key] = args;
	                  var q = queues[key];
	                  delete queues[key];
	                  for (var i = 0, l = q.length; i < l; i++) {
	                      q[i].apply(null, args);
	                  }
	              })]));
	          }
	      });
	      memoized.memo = memo;
	      memoized.unmemoized = fn;
	      return memoized;
	  }

	  /**
	   * Calls `callback` on a later loop around the event loop. In Node.js this just
	   * calls `setImmediate`.  In the browser it will use `setImmediate` if
	   * available, otherwise `setTimeout(callback, 0)`, which means other higher
	   * priority events may precede the execution of `callback`.
	   *
	   * This is used internally for browser-compatibility purposes.
	   *
	   * @name nextTick
	   * @static
	   * @memberOf module:Utils
	   * @method
	   * @alias setImmediate
	   * @category Util
	   * @param {Function} callback - The function to call on a later loop around
	   * the event loop. Invoked with (args...).
	   * @param {...*} args... - any number of additional arguments to pass to the
	   * callback on the next tick.
	   * @example
	   *
	   * var call_order = [];
	   * async.nextTick(function() {
	   *     call_order.push('two');
	   *     // call_order now equals ['one','two']
	   * });
	   * call_order.push('one');
	   *
	   * async.setImmediate(function (a, b, c) {
	   *     // a, b, and c equal 1, 2, and 3
	   * }, 1, 2, 3);
	   */
	  var _defer$1;

	  if (hasNextTick) {
	      _defer$1 = process.nextTick;
	  } else if (hasSetImmediate) {
	      _defer$1 = setImmediate;
	  } else {
	      _defer$1 = fallback;
	  }

	  var nextTick = wrap(_defer$1);

	  function _parallel(eachfn, tasks, callback) {
	      callback = callback || noop;
	      var results = isArrayLike(tasks) ? [] : {};

	      eachfn(tasks, function (task, key, callback) {
	          task(rest(function (err, args) {
	              if (args.length <= 1) {
	                  args = args[0];
	              }
	              results[key] = args;
	              callback(err);
	          }));
	      }, function (err) {
	          callback(err, results);
	      });
	  }

	  /**
	   * The same as [`parallel`]{@link module:ControlFlow.parallel} but runs a maximum of `limit` async operations at a
	   * time.
	   *
	   * @name parallelLimit
	   * @static
	   * @memberOf module:ControlFlow
	   * @method
	   * @see [async.parallel]{@link module:ControlFlow.parallel}
	   * @category Control Flow
	   * @param {Array|Collection} tasks - A collection containing functions to run.
	   * Each function is passed a `callback(err, result)` which it must call on
	   * completion with an error `err` (which can be `null`) and an optional `result`
	   * value.
	   * @param {number} limit - The maximum number of async operations at a time.
	   * @param {Function} [callback] - An optional callback to run once all the
	   * functions have completed successfully. This function gets a results array
	   * (or object) containing all the result arguments passed to the task callbacks.
	   * Invoked with (err, results).
	   */
	  function parallelLimit(tasks, limit, callback) {
	    _parallel(_eachOfLimit(limit), tasks, callback);
	  }

	  /**
	   * Run the `tasks` collection of functions in parallel, without waiting until
	   * the previous function has completed. If any of the functions pass an error to
	   * its callback, the main `callback` is immediately called with the value of the
	   * error. Once the `tasks` have completed, the results are passed to the final
	   * `callback` as an array.
	   *
	   * **Note:** `parallel` is about kicking-off I/O tasks in parallel, not about
	   * parallel execution of code.  If your tasks do not use any timers or perform
	   * any I/O, they will actually be executed in series.  Any synchronous setup
	   * sections for each task will happen one after the other.  JavaScript remains
	   * single-threaded.
	   *
	   * It is also possible to use an object instead of an array. Each property will
	   * be run as a function and the results will be passed to the final `callback`
	   * as an object instead of an array. This can be a more readable way of handling
	   * results from {@link async.parallel}.
	   *
	   * @name parallel
	   * @static
	   * @memberOf module:ControlFlow
	   * @method
	   * @category Control Flow
	   * @param {Array|Iterable|Object} tasks - A collection containing functions to run.
	   * Each function is passed a `callback(err, result)` which it must call on
	   * completion with an error `err` (which can be `null`) and an optional `result`
	   * value.
	   * @param {Function} [callback] - An optional callback to run once all the
	   * functions have completed successfully. This function gets a results array
	   * (or object) containing all the result arguments passed to the task callbacks.
	   * Invoked with (err, results).
	   * @example
	   * async.parallel([
	   *     function(callback) {
	   *         setTimeout(function() {
	   *             callback(null, 'one');
	   *         }, 200);
	   *     },
	   *     function(callback) {
	   *         setTimeout(function() {
	   *             callback(null, 'two');
	   *         }, 100);
	   *     }
	   * ],
	   * // optional callback
	   * function(err, results) {
	   *     // the results array will equal ['one','two'] even though
	   *     // the second function had a shorter timeout.
	   * });
	   *
	   * // an example using an object instead of an array
	   * async.parallel({
	   *     one: function(callback) {
	   *         setTimeout(function() {
	   *             callback(null, 1);
	   *         }, 200);
	   *     },
	   *     two: function(callback) {
	   *         setTimeout(function() {
	   *             callback(null, 2);
	   *         }, 100);
	   *     }
	   * }, function(err, results) {
	   *     // results is now equals to: {one: 1, two: 2}
	   * });
	   */
	  var parallel = doLimit(parallelLimit, Infinity);

	  /**
	   * A queue of tasks for the worker function to complete.
	   * @typedef {Object} QueueObject
	   * @memberOf module:ControlFlow
	   * @property {Function} length - a function returning the number of items
	   * waiting to be processed. Invoke with `queue.length()`.
	   * @property {Function} started - a function returning whether or not any
	   * items have been pushed and processed by the queue. Invoke with `queue.started()`.
	   * @property {Function} running - a function returning the number of items
	   * currently being processed. Invoke with `queue.running()`.
	   * @property {Function} workersList - a function returning the array of items
	   * currently being processed. Invoke with `queue.workersList()`.
	   * @property {Function} idle - a function returning false if there are items
	   * waiting or being processed, or true if not. Invoke with `queue.idle()`.
	   * @property {number} concurrency - an integer for determining how many `worker`
	   * functions should be run in parallel. This property can be changed after a
	   * `queue` is created to alter the concurrency on-the-fly.
	   * @property {Function} push - add a new task to the `queue`. Calls `callback`
	   * once the `worker` has finished processing the task. Instead of a single task,
	   * a `tasks` array can be submitted. The respective callback is used for every
	   * task in the list. Invoke with `queue.push(task, [callback])`,
	   * @property {Function} unshift - add a new task to the front of the `queue`.
	   * Invoke with `queue.unshift(task, [callback])`.
	   * @property {Function} saturated - a callback that is called when the number of
	   * running workers hits the `concurrency` limit, and further tasks will be
	   * queued.
	   * @property {Function} unsaturated - a callback that is called when the number
	   * of running workers is less than the `concurrency` & `buffer` limits, and
	   * further tasks will not be queued.
	   * @property {number} buffer - A minimum threshold buffer in order to say that
	   * the `queue` is `unsaturated`.
	   * @property {Function} empty - a callback that is called when the last item
	   * from the `queue` is given to a `worker`.
	   * @property {Function} drain - a callback that is called when the last item
	   * from the `queue` has returned from the `worker`.
	   * @property {Function} error - a callback that is called when a task errors.
	   * Has the signature `function(error, task)`.
	   * @property {boolean} paused - a boolean for determining whether the queue is
	   * in a paused state.
	   * @property {Function} pause - a function that pauses the processing of tasks
	   * until `resume()` is called. Invoke with `queue.pause()`.
	   * @property {Function} resume - a function that resumes the processing of
	   * queued tasks when the queue is paused. Invoke with `queue.resume()`.
	   * @property {Function} kill - a function that removes the `drain` callback and
	   * empties remaining tasks from the queue forcing it to go idle. Invoke with `queue.kill()`.
	   */

	  /**
	   * Creates a `queue` object with the specified `concurrency`. Tasks added to the
	   * `queue` are processed in parallel (up to the `concurrency` limit). If all
	   * `worker`s are in progress, the task is queued until one becomes available.
	   * Once a `worker` completes a `task`, that `task`'s callback is called.
	   *
	   * @name queue
	   * @static
	   * @memberOf module:ControlFlow
	   * @method
	   * @category Control Flow
	   * @param {Function} worker - An asynchronous function for processing a queued
	   * task, which must call its `callback(err)` argument when finished, with an
	   * optional `error` as an argument.  If you want to handle errors from an
	   * individual task, pass a callback to `q.push()`. Invoked with
	   * (task, callback).
	   * @param {number} [concurrency=1] - An `integer` for determining how many
	   * `worker` functions should be run in parallel.  If omitted, the concurrency
	   * defaults to `1`.  If the concurrency is `0`, an error is thrown.
	   * @returns {module:ControlFlow.QueueObject} A queue object to manage the tasks. Callbacks can
	   * attached as certain properties to listen for specific events during the
	   * lifecycle of the queue.
	   * @example
	   *
	   * // create a queue object with concurrency 2
	   * var q = async.queue(function(task, callback) {
	   *     console.log('hello ' + task.name);
	   *     callback();
	   * }, 2);
	   *
	   * // assign a callback
	   * q.drain = function() {
	   *     console.log('all items have been processed');
	   * };
	   *
	   * // add some items to the queue
	   * q.push({name: 'foo'}, function(err) {
	   *     console.log('finished processing foo');
	   * });
	   * q.push({name: 'bar'}, function (err) {
	   *     console.log('finished processing bar');
	   * });
	   *
	   * // add some items to the queue (batch-wise)
	   * q.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function(err) {
	   *     console.log('finished processing item');
	   * });
	   *
	   * // add some items to the front of the queue
	   * q.unshift({name: 'bar'}, function (err) {
	   *     console.log('finished processing bar');
	   * });
	   */
	  function queue$1 (worker, concurrency) {
	    return queue(function (items, cb) {
	      worker(items[0], cb);
	    }, concurrency, 1);
	  }

	  /**
	   * The same as [async.queue]{@link module:ControlFlow.queue} only tasks are assigned a priority and
	   * completed in ascending priority order.
	   *
	   * @name priorityQueue
	   * @static
	   * @memberOf module:ControlFlow
	   * @method
	   * @see [async.queue]{@link module:ControlFlow.queue}
	   * @category Control Flow
	   * @param {Function} worker - An asynchronous function for processing a queued
	   * task, which must call its `callback(err)` argument when finished, with an
	   * optional `error` as an argument.  If you want to handle errors from an
	   * individual task, pass a callback to `q.push()`. Invoked with
	   * (task, callback).
	   * @param {number} concurrency - An `integer` for determining how many `worker`
	   * functions should be run in parallel.  If omitted, the concurrency defaults to
	   * `1`.  If the concurrency is `0`, an error is thrown.
	   * @returns {module:ControlFlow.QueueObject} A priorityQueue object to manage the tasks. There are two
	   * differences between `queue` and `priorityQueue` objects:
	   * * `push(task, priority, [callback])` - `priority` should be a number. If an
	   *   array of `tasks` is given, all tasks will be assigned the same priority.
	   * * The `unshift` method was removed.
	   */
	  function priorityQueue (worker, concurrency) {
	      // Start with a normal queue
	      var q = queue$1(worker, concurrency);

	      // Override push to accept second parameter representing priority
	      q.push = function (data, priority, callback) {
	          if (callback == null) callback = noop;
	          if (typeof callback !== 'function') {
	              throw new Error('task callback must be a function');
	          }
	          q.started = true;
	          if (!isArray(data)) {
	              data = [data];
	          }
	          if (data.length === 0) {
	              // call drain immediately if there are no tasks
	              return setImmediate$1(function () {
	                  q.drain();
	              });
	          }

	          priority = priority || 0;
	          var nextNode = q._tasks.head;
	          while (nextNode && priority >= nextNode.priority) {
	              nextNode = nextNode.next;
	          }

	          arrayEach(data, function (task) {
	              var item = {
	                  data: task,
	                  priority: priority,
	                  callback: callback
	              };

	              if (nextNode) {
	                  q._tasks.insertBefore(nextNode, item);
	              } else {
	                  q._tasks.push(item);
	              }
	          });
	          setImmediate$1(q.process);
	      };

	      // Remove unshift function
	      delete q.unshift;

	      return q;
	  }

	  /**
	   * Runs the `tasks` array of functions in parallel, without waiting until the
	   * previous function has completed. Once any the `tasks` completed or pass an
	   * error to its callback, the main `callback` is immediately called. It's
	   * equivalent to `Promise.race()`.
	   *
	   * @name race
	   * @static
	   * @memberOf module:ControlFlow
	   * @method
	   * @category Control Flow
	   * @param {Array} tasks - An array containing functions to run. Each function
	   * is passed a `callback(err, result)` which it must call on completion with an
	   * error `err` (which can be `null`) and an optional `result` value.
	   * @param {Function} callback - A callback to run once any of the functions have
	   * completed. This function gets an error or result from the first function that
	   * completed. Invoked with (err, result).
	   * @returns undefined
	   * @example
	   *
	   * async.race([
	   *     function(callback) {
	   *         setTimeout(function() {
	   *             callback(null, 'one');
	   *         }, 200);
	   *     },
	   *     function(callback) {
	   *         setTimeout(function() {
	   *             callback(null, 'two');
	   *         }, 100);
	   *     }
	   * ],
	   * // main callback
	   * function(err, result) {
	   *     // the result will be equal to 'two' as it finishes earlier
	   * });
	   */
	  function race(tasks, callback) {
	      callback = once(callback || noop);
	      if (!isArray(tasks)) return callback(new TypeError('First argument to race must be an array of functions'));
	      if (!tasks.length) return callback();
	      arrayEach(tasks, function (task) {
	          task(callback);
	      });
	  }

	  var slice = Array.prototype.slice;

	  /**
	   * Same as [`reduce`]{@link module:Collections.reduce}, only operates on `array` in reverse order.
	   *
	   * @name reduceRight
	   * @static
	   * @memberOf module:Collections
	   * @method
	   * @see [async.reduce]{@link module:Collections.reduce}
	   * @alias foldr
	   * @category Collection
	   * @param {Array} array - A collection to iterate over.
	   * @param {*} memo - The initial state of the reduction.
	   * @param {Function} iteratee - A function applied to each item in the
	   * array to produce the next step in the reduction. The `iteratee` is passed a
	   * `callback(err, reduction)` which accepts an optional error as its first
	   * argument, and the state of the reduction as the second. If an error is
	   * passed to the callback, the reduction is stopped and the main `callback` is
	   * immediately called with the error. Invoked with (memo, item, callback).
	   * @param {Function} [callback] - A callback which is called after all the
	   * `iteratee` functions have finished. Result is the reduced value. Invoked with
	   * (err, result).
	   */
	  function reduceRight(array, memo, iteratee, callback) {
	    var reversed = slice.call(array).reverse();
	    reduce(reversed, memo, iteratee, callback);
	  }

	  /**
	   * Wraps the function in another function that always returns data even when it
	   * errors.
	   *
	   * The object returned has either the property `error` or `value`.
	   *
	   * @name reflect
	   * @static
	   * @memberOf module:Utils
	   * @method
	   * @category Util
	   * @param {Function} fn - The function you want to wrap
	   * @returns {Function} - A function that always passes null to it's callback as
	   * the error. The second argument to the callback will be an `object` with
	   * either an `error` or a `value` property.
	   * @example
	   *
	   * async.parallel([
	   *     async.reflect(function(callback) {
	   *         // do some stuff ...
	   *         callback(null, 'one');
	   *     }),
	   *     async.reflect(function(callback) {
	   *         // do some more stuff but error ...
	   *         callback('bad stuff happened');
	   *     }),
	   *     async.reflect(function(callback) {
	   *         // do some more stuff ...
	   *         callback(null, 'two');
	   *     })
	   * ],
	   * // optional callback
	   * function(err, results) {
	   *     // values
	   *     // results[0].value = 'one'
	   *     // results[1].error = 'bad stuff happened'
	   *     // results[2].value = 'two'
	   * });
	   */
	  function reflect(fn) {
	      return initialParams(function reflectOn(args, reflectCallback) {
	          args.push(rest(function callback(err, cbArgs) {
	              if (err) {
	                  reflectCallback(null, {
	                      error: err
	                  });
	              } else {
	                  var value = null;
	                  if (cbArgs.length === 1) {
	                      value = cbArgs[0];
	                  } else if (cbArgs.length > 1) {
	                      value = cbArgs;
	                  }
	                  reflectCallback(null, {
	                      value: value
	                  });
	              }
	          }));

	          return fn.apply(this, args);
	      });
	  }

	  function reject$1(eachfn, arr, iteratee, callback) {
	      _filter(eachfn, arr, function (value, cb) {
	          iteratee(value, function (err, v) {
	              if (err) {
	                  cb(err);
	              } else {
	                  cb(null, !v);
	              }
	          });
	      }, callback);
	  }

	  /**
	   * The same as [`reject`]{@link module:Collections.reject} but runs a maximum of `limit` async operations at a
	   * time.
	   *
	   * @name rejectLimit
	   * @static
	   * @memberOf module:Collections
	   * @method
	   * @see [async.reject]{@link module:Collections.reject}
	   * @category Collection
	   * @param {Array|Iterable|Object} coll - A collection to iterate over.
	   * @param {number} limit - The maximum number of async operations at a time.
	   * @param {Function} iteratee - A truth test to apply to each item in `coll`.
	   * The `iteratee` is passed a `callback(err, truthValue)`, which must be called
	   * with a boolean argument once it has completed. Invoked with (item, callback).
	   * @param {Function} [callback] - A callback which is called after all the
	   * `iteratee` functions have finished. Invoked with (err, results).
	   */
	  var rejectLimit = doParallelLimit(reject$1);

	  /**
	   * The opposite of [`filter`]{@link module:Collections.filter}. Removes values that pass an `async` truth test.
	   *
	   * @name reject
	   * @static
	   * @memberOf module:Collections
	   * @method
	   * @see [async.filter]{@link module:Collections.filter}
	   * @category Collection
	   * @param {Array|Iterable|Object} coll - A collection to iterate over.
	   * @param {Function} iteratee - A truth test to apply to each item in `coll`.
	   * The `iteratee` is passed a `callback(err, truthValue)`, which must be called
	   * with a boolean argument once it has completed. Invoked with (item, callback).
	   * @param {Function} [callback] - A callback which is called after all the
	   * `iteratee` functions have finished. Invoked with (err, results).
	   * @example
	   *
	   * async.reject(['file1','file2','file3'], function(filePath, callback) {
	   *     fs.access(filePath, function(err) {
	   *         callback(null, !err)
	   *     });
	   * }, function(err, results) {
	   *     // results now equals an array of missing files
	   *     createFiles(results);
	   * });
	   */
	  var reject = doLimit(rejectLimit, Infinity);

	  /**
	   * A helper function that wraps an array or an object of functions with reflect.
	   *
	   * @name reflectAll
	   * @static
	   * @memberOf module:Utils
	   * @method
	   * @see [async.reflect]{@link module:Utils.reflect}
	   * @category Util
	   * @param {Array} tasks - The array of functions to wrap in `async.reflect`.
	   * @returns {Array} Returns an array of functions, each function wrapped in
	   * `async.reflect`
	   * @example
	   *
	   * let tasks = [
	   *     function(callback) {
	   *         setTimeout(function() {
	   *             callback(null, 'one');
	   *         }, 200);
	   *     },
	   *     function(callback) {
	   *         // do some more stuff but error ...
	   *         callback(new Error('bad stuff happened'));
	   *     },
	   *     function(callback) {
	   *         setTimeout(function() {
	   *             callback(null, 'two');
	   *         }, 100);
	   *     }
	   * ];
	   *
	   * async.parallel(async.reflectAll(tasks),
	   * // optional callback
	   * function(err, results) {
	   *     // values
	   *     // results[0].value = 'one'
	   *     // results[1].error = Error('bad stuff happened')
	   *     // results[2].value = 'two'
	   * });
	   *
	   * // an example using an object instead of an array
	   * let tasks = {
	   *     one: function(callback) {
	   *         setTimeout(function() {
	   *             callback(null, 'one');
	   *         }, 200);
	   *     },
	   *     two: function(callback) {
	   *         callback('two');
	   *     },
	   *     three: function(callback) {
	   *         setTimeout(function() {
	   *             callback(null, 'three');
	   *         }, 100);
	   *     }
	   * };
	   *
	   * async.parallel(async.reflectAll(tasks),
	   * // optional callback
	   * function(err, results) {
	   *     // values
	   *     // results.one.value = 'one'
	   *     // results.two.error = 'two'
	   *     // results.three.value = 'three'
	   * });
	   */
	  function reflectAll(tasks) {
	      var results;
	      if (isArray(tasks)) {
	          results = arrayMap(tasks, reflect);
	      } else {
	          results = {};
	          baseForOwn(tasks, function (task, key) {
	              results[key] = reflect.call(this, task);
	          });
	      }
	      return results;
	  }

	  /**
	   * The same as [`reject`]{@link module:Collections.reject} but runs only a single async operation at a time.
	   *
	   * @name rejectSeries
	   * @static
	   * @memberOf module:Collections
	   * @method
	   * @see [async.reject]{@link module:Collections.reject}
	   * @category Collection
	   * @param {Array|Iterable|Object} coll - A collection to iterate over.
	   * @param {Function} iteratee - A truth test to apply to each item in `coll`.
	   * The `iteratee` is passed a `callback(err, truthValue)`, which must be called
	   * with a boolean argument once it has completed. Invoked with (item, callback).
	   * @param {Function} [callback] - A callback which is called after all the
	   * `iteratee` functions have finished. Invoked with (err, results).
	   */
	  var rejectSeries = doLimit(rejectLimit, 1);

	  /**
	   * Creates a function that returns `value`.
	   *
	   * @static
	   * @memberOf _
	   * @since 2.4.0
	   * @category Util
	   * @param {*} value The value to return from the new function.
	   * @returns {Function} Returns the new constant function.
	   * @example
	   *
	   * var objects = _.times(2, _.constant({ 'a': 1 }));
	   *
	   * console.log(objects);
	   * // => [{ 'a': 1 }, { 'a': 1 }]
	   *
	   * console.log(objects[0] === objects[1]);
	   * // => true
	   */
	  function constant$1(value) {
	    return function() {
	      return value;
	    };
	  }

	  /**
	   * Attempts to get a successful response from `task` no more than `times` times
	   * before returning an error. If the task is successful, the `callback` will be
	   * passed the result of the successful task. If all attempts fail, the callback
	   * will be passed the error and result (if any) of the final attempt.
	   *
	   * @name retry
	   * @static
	   * @memberOf module:ControlFlow
	   * @method
	   * @category Control Flow
	   * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - Can be either an
	   * object with `times` and `interval` or a number.
	   * * `times` - The number of attempts to make before giving up.  The default
	   *   is `5`.
	   * * `interval` - The time to wait between retries, in milliseconds.  The
	   *   default is `0`. The interval may also be specified as a function of the
	   *   retry count (see example).
	   * * If `opts` is a number, the number specifies the number of times to retry,
	   *   with the default interval of `0`.
	   * @param {Function} task - A function which receives two arguments: (1) a
	   * `callback(err, result)` which must be called when finished, passing `err`
	   * (which can be `null`) and the `result` of the function's execution, and (2)
	   * a `results` object, containing the results of the previously executed
	   * functions (if nested inside another control flow). Invoked with
	   * (callback, results).
	   * @param {Function} [callback] - An optional callback which is called when the
	   * task has succeeded, or after the final failed attempt. It receives the `err`
	   * and `result` arguments of the last attempt at completing the `task`. Invoked
	   * with (err, results).
	   * @example
	   *
	   * // The `retry` function can be used as a stand-alone control flow by passing
	   * // a callback, as shown below:
	   *
	   * // try calling apiMethod 3 times
	   * async.retry(3, apiMethod, function(err, result) {
	   *     // do something with the result
	   * });
	   *
	   * // try calling apiMethod 3 times, waiting 200 ms between each retry
	   * async.retry({times: 3, interval: 200}, apiMethod, function(err, result) {
	   *     // do something with the result
	   * });
	   *
	   * // try calling apiMethod 10 times with exponential backoff
	   * // (i.e. intervals of 100, 200, 400, 800, 1600, ... milliseconds)
	   * async.retry({
	   *   times: 10,
	   *   interval: function(retryCount) {
	   *     return 50 * Math.pow(2, retryCount);
	   *   }
	   * }, apiMethod, function(err, result) {
	   *     // do something with the result
	   * });
	   *
	   * // try calling apiMethod the default 5 times no delay between each retry
	   * async.retry(apiMethod, function(err, result) {
	   *     // do something with the result
	   * });
	   *
	   * // It can also be embedded within other control flow functions to retry
	   * // individual methods that are not as reliable, like this:
	   * async.auto({
	   *     users: api.getUsers.bind(api),
	   *     payments: async.retry(3, api.getPayments.bind(api))
	   * }, function(err, results) {
	   *     // do something with the results
	   * });
	   */
	  function retry(opts, task, callback) {
	      var DEFAULT_TIMES = 5;
	      var DEFAULT_INTERVAL = 0;

	      var options = {
	          times: DEFAULT_TIMES,
	          intervalFunc: constant$1(DEFAULT_INTERVAL)
	      };

	      function parseTimes(acc, t) {
	          if (typeof t === 'object') {
	              acc.times = +t.times || DEFAULT_TIMES;

	              acc.intervalFunc = typeof t.interval === 'function' ? t.interval : constant$1(+t.interval || DEFAULT_INTERVAL);
	          } else if (typeof t === 'number' || typeof t === 'string') {
	              acc.times = +t || DEFAULT_TIMES;
	          } else {
	              throw new Error("Invalid arguments for async.retry");
	          }
	      }

	      if (arguments.length < 3 && typeof opts === 'function') {
	          callback = task || noop;
	          task = opts;
	      } else {
	          parseTimes(options, opts);
	          callback = callback || noop;
	      }

	      if (typeof task !== 'function') {
	          throw new Error("Invalid arguments for async.retry");
	      }

	      var attempt = 1;
	      function retryAttempt() {
	          task(function (err) {
	              if (err && attempt++ < options.times) {
	                  setTimeout(retryAttempt, options.intervalFunc(attempt));
	              } else {
	                  callback.apply(null, arguments);
	              }
	          });
	      }

	      retryAttempt();
	  }

	  /**
	   * A close relative of [`retry`]{@link module:ControlFlow.retry}.  This method wraps a task and makes it
	   * retryable, rather than immediately calling it with retries.
	   *
	   * @name retryable
	   * @static
	   * @memberOf module:ControlFlow
	   * @method
	   * @see [async.retry]{@link module:ControlFlow.retry}
	   * @category Control Flow
	   * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - optional
	   * options, exactly the same as from `retry`
	   * @param {Function} task - the asynchronous function to wrap
	   * @returns {Functions} The wrapped function, which when invoked, will retry on
	   * an error, based on the parameters specified in `opts`.
	   * @example
	   *
	   * async.auto({
	   *     dep1: async.retryable(3, getFromFlakyService),
	   *     process: ["dep1", async.retryable(3, function (results, cb) {
	   *         maybeProcessData(results.dep1, cb);
	   *     })]
	   * }, callback);
	   */
	  function retryable (opts, task) {
	      if (!task) {
	          task = opts;
	          opts = null;
	      }
	      return initialParams(function (args, callback) {
	          function taskFn(cb) {
	              task.apply(null, args.concat([cb]));
	          }

	          if (opts) retry(opts, taskFn, callback);else retry(taskFn, callback);
	      });
	  }

	  /**
	   * Run the functions in the `tasks` collection in series, each one running once
	   * the previous function has completed. If any functions in the series pass an
	   * error to its callback, no more functions are run, and `callback` is
	   * immediately called with the value of the error. Otherwise, `callback`
	   * receives an array of results when `tasks` have completed.
	   *
	   * It is also possible to use an object instead of an array. Each property will
	   * be run as a function, and the results will be passed to the final `callback`
	   * as an object instead of an array. This can be a more readable way of handling
	   *  results from {@link async.series}.
	   *
	   * **Note** that while many implementations preserve the order of object
	   * properties, the [ECMAScript Language Specification](http://www.ecma-international.org/ecma-262/5.1/#sec-8.6)
	   * explicitly states that
	   *
	   * > The mechanics and order of enumerating the properties is not specified.
	   *
	   * So if you rely on the order in which your series of functions are executed,
	   * and want this to work on all platforms, consider using an array.
	   *
	   * @name series
	   * @static
	   * @memberOf module:ControlFlow
	   * @method
	   * @category Control Flow
	   * @param {Array|Iterable|Object} tasks - A collection containing functions to run, each
	   * function is passed a `callback(err, result)` it must call on completion with
	   * an error `err` (which can be `null`) and an optional `result` value.
	   * @param {Function} [callback] - An optional callback to run once all the
	   * functions have completed. This function gets a results array (or object)
	   * containing all the result arguments passed to the `task` callbacks. Invoked
	   * with (err, result).
	   * @example
	   * async.series([
	   *     function(callback) {
	   *         // do some stuff ...
	   *         callback(null, 'one');
	   *     },
	   *     function(callback) {
	   *         // do some more stuff ...
	   *         callback(null, 'two');
	   *     }
	   * ],
	   * // optional callback
	   * function(err, results) {
	   *     // results is now equal to ['one', 'two']
	   * });
	   *
	   * async.series({
	   *     one: function(callback) {
	   *         setTimeout(function() {
	   *             callback(null, 1);
	   *         }, 200);
	   *     },
	   *     two: function(callback){
	   *         setTimeout(function() {
	   *             callback(null, 2);
	   *         }, 100);
	   *     }
	   * }, function(err, results) {
	   *     // results is now equal to: {one: 1, two: 2}
	   * });
	   */
	  function series(tasks, callback) {
	    _parallel(eachOfSeries, tasks, callback);
	  }

	  /**
	   * The same as [`some`]{@link module:Collections.some} but runs a maximum of `limit` async operations at a time.
	   *
	   * @name someLimit
	   * @static
	   * @memberOf module:Collections
	   * @method
	   * @see [async.some]{@link module:Collections.some}
	   * @alias anyLimit
	   * @category Collection
	   * @param {Array|Iterable|Object} coll - A collection to iterate over.
	   * @param {number} limit - The maximum number of async operations at a time.
	   * @param {Function} iteratee - A truth test to apply to each item in the array
	   * in parallel. The iteratee is passed a `callback(err, truthValue)` which must
	   * be called with a boolean argument once it has completed. Invoked with
	   * (item, callback).
	   * @param {Function} [callback] - A callback which is called as soon as any
	   * iteratee returns `true`, or after all the iteratee functions have finished.
	   * Result will be either `true` or `false` depending on the values of the async
	   * tests. Invoked with (err, result).
	   */
	  var someLimit = _createTester(eachOfLimit, Boolean, identity);

	  /**
	   * Returns `true` if at least one element in the `coll` satisfies an async test.
	   * If any iteratee call returns `true`, the main `callback` is immediately
	   * called.
	   *
	   * @name some
	   * @static
	   * @memberOf module:Collections
	   * @method
	   * @alias any
	   * @category Collection
	   * @param {Array|Iterable|Object} coll - A collection to iterate over.
	   * @param {Function} iteratee - A truth test to apply to each item in the array
	   * in parallel. The iteratee is passed a `callback(err, truthValue)` which must
	   * be called with a boolean argument once it has completed. Invoked with
	   * (item, callback).
	   * @param {Function} [callback] - A callback which is called as soon as any
	   * iteratee returns `true`, or after all the iteratee functions have finished.
	   * Result will be either `true` or `false` depending on the values of the async
	   * tests. Invoked with (err, result).
	   * @example
	   *
	   * async.some(['file1','file2','file3'], function(filePath, callback) {
	   *     fs.access(filePath, function(err) {
	   *         callback(null, !err)
	   *     });
	   * }, function(err, result) {
	   *     // if result is true then at least one of the files exists
	   * });
	   */
	  var some = doLimit(someLimit, Infinity);

	  /**
	   * The same as [`some`]{@link module:Collections.some} but runs only a single async operation at a time.
	   *
	   * @name someSeries
	   * @static
	   * @memberOf module:Collections
	   * @method
	   * @see [async.some]{@link module:Collections.some}
	   * @alias anySeries
	   * @category Collection
	   * @param {Array|Iterable|Object} coll - A collection to iterate over.
	   * @param {Function} iteratee - A truth test to apply to each item in the array
	   * in parallel. The iteratee is passed a `callback(err, truthValue)` which must
	   * be called with a boolean argument once it has completed. Invoked with
	   * (item, callback).
	   * @param {Function} [callback] - A callback which is called as soon as any
	   * iteratee returns `true`, or after all the iteratee functions have finished.
	   * Result will be either `true` or `false` depending on the values of the async
	   * tests. Invoked with (err, result).
	   */
	  var someSeries = doLimit(someLimit, 1);

	  /**
	   * Sorts a list by the results of running each `coll` value through an async
	   * `iteratee`.
	   *
	   * @name sortBy
	   * @static
	   * @memberOf module:Collections
	   * @method
	   * @category Collection
	   * @param {Array|Iterable|Object} coll - A collection to iterate over.
	   * @param {Function} iteratee - A function to apply to each item in `coll`.
	   * The iteratee is passed a `callback(err, sortValue)` which must be called once
	   * it has completed with an error (which can be `null`) and a value to use as
	   * the sort criteria. Invoked with (item, callback).
	   * @param {Function} callback - A callback which is called after all the
	   * `iteratee` functions have finished, or an error occurs. Results is the items
	   * from the original `coll` sorted by the values returned by the `iteratee`
	   * calls. Invoked with (err, results).
	   * @example
	   *
	   * async.sortBy(['file1','file2','file3'], function(file, callback) {
	   *     fs.stat(file, function(err, stats) {
	   *         callback(err, stats.mtime);
	   *     });
	   * }, function(err, results) {
	   *     // results is now the original array of files sorted by
	   *     // modified date
	   * });
	   *
	   * // By modifying the callback parameter the
	   * // sorting order can be influenced:
	   *
	   * // ascending order
	   * async.sortBy([1,9,3,5], function(x, callback) {
	   *     callback(null, x);
	   * }, function(err,result) {
	   *     // result callback
	   * });
	   *
	   * // descending order
	   * async.sortBy([1,9,3,5], function(x, callback) {
	   *     callback(null, x*-1);    //<- x*-1 instead of x, turns the order around
	   * }, function(err,result) {
	   *     // result callback
	   * });
	   */
	  function sortBy(coll, iteratee, callback) {
	      map(coll, function (x, callback) {
	          iteratee(x, function (err, criteria) {
	              if (err) return callback(err);
	              callback(null, { value: x, criteria: criteria });
	          });
	      }, function (err, results) {
	          if (err) return callback(err);
	          callback(null, arrayMap(results.sort(comparator), baseProperty('value')));
	      });

	      function comparator(left, right) {
	          var a = left.criteria,
	              b = right.criteria;
	          return a < b ? -1 : a > b ? 1 : 0;
	      }
	  }

	  /**
	   * Sets a time limit on an asynchronous function. If the function does not call
	   * its callback within the specified milliseconds, it will be called with a
	   * timeout error. The code property for the error object will be `'ETIMEDOUT'`.
	   *
	   * @name timeout
	   * @static
	   * @memberOf module:Utils
	   * @method
	   * @category Util
	   * @param {Function} asyncFn - The asynchronous function you want to set the
	   * time limit.
	   * @param {number} milliseconds - The specified time limit.
	   * @param {*} [info] - Any variable you want attached (`string`, `object`, etc)
	   * to timeout Error for more information..
	   * @returns {Function} Returns a wrapped function that can be used with any of
	   * the control flow functions.
	   * @example
	   *
	   * async.timeout(function(callback) {
	   *     doAsyncTask(callback);
	   * }, 1000);
	   */
	  function timeout(asyncFn, milliseconds, info) {
	      var originalCallback, timer;
	      var timedOut = false;

	      function injectedCallback() {
	          if (!timedOut) {
	              originalCallback.apply(null, arguments);
	              clearTimeout(timer);
	          }
	      }

	      function timeoutCallback() {
	          var name = asyncFn.name || 'anonymous';
	          var error = new Error('Callback function "' + name + '" timed out.');
	          error.code = 'ETIMEDOUT';
	          if (info) {
	              error.info = info;
	          }
	          timedOut = true;
	          originalCallback(error);
	      }

	      return initialParams(function (args, origCallback) {
	          originalCallback = origCallback;
	          // setup timer and call original function
	          timer = setTimeout(timeoutCallback, milliseconds);
	          asyncFn.apply(null, args.concat(injectedCallback));
	      });
	  }

	  /* Built-in method references for those with the same name as other `lodash` methods. */
	  var nativeCeil = Math.ceil;
	  var nativeMax$1 = Math.max;
	  /**
	   * The base implementation of `_.range` and `_.rangeRight` which doesn't
	   * coerce arguments to numbers.
	   *
	   * @private
	   * @param {number} start The start of the range.
	   * @param {number} end The end of the range.
	   * @param {number} step The value to increment or decrement by.
	   * @param {boolean} [fromRight] Specify iterating from right to left.
	   * @returns {Array} Returns the range of numbers.
	   */
	  function baseRange(start, end, step, fromRight) {
	    var index = -1,
	        length = nativeMax$1(nativeCeil((end - start) / (step || 1)), 0),
	        result = Array(length);

	    while (length--) {
	      result[fromRight ? length : ++index] = start;
	      start += step;
	    }
	    return result;
	  }

	  /**
	   * The same as [times]{@link module:ControlFlow.times} but runs a maximum of `limit` async operations at a
	   * time.
	   *
	   * @name timesLimit
	   * @static
	   * @memberOf module:ControlFlow
	   * @method
	   * @see [async.times]{@link module:ControlFlow.times}
	   * @category Control Flow
	   * @param {number} count - The number of times to run the function.
	   * @param {number} limit - The maximum number of async operations at a time.
	   * @param {Function} iteratee - The function to call `n` times. Invoked with the
	   * iteration index and a callback (n, next).
	   * @param {Function} callback - see [async.map]{@link module:Collections.map}.
	   */
	  function timeLimit(count, limit, iteratee, callback) {
	    mapLimit(baseRange(0, count, 1), limit, iteratee, callback);
	  }

	  /**
	   * Calls the `iteratee` function `n` times, and accumulates results in the same
	   * manner you would use with [map]{@link module:Collections.map}.
	   *
	   * @name times
	   * @static
	   * @memberOf module:ControlFlow
	   * @method
	   * @see [async.map]{@link module:Collections.map}
	   * @category Control Flow
	   * @param {number} n - The number of times to run the function.
	   * @param {Function} iteratee - The function to call `n` times. Invoked with the
	   * iteration index and a callback (n, next).
	   * @param {Function} callback - see {@link module:Collections.map}.
	   * @example
	   *
	   * // Pretend this is some complicated async factory
	   * var createUser = function(id, callback) {
	   *     callback(null, {
	   *         id: 'user' + id
	   *     });
	   * };
	   *
	   * // generate 5 users
	   * async.times(5, function(n, next) {
	   *     createUser(n, function(err, user) {
	   *         next(err, user);
	   *     });
	   * }, function(err, users) {
	   *     // we should now have 5 users
	   * });
	   */
	  var times = doLimit(timeLimit, Infinity);

	  /**
	   * The same as [times]{@link module:ControlFlow.times} but runs only a single async operation at a time.
	   *
	   * @name timesSeries
	   * @static
	   * @memberOf module:ControlFlow
	   * @method
	   * @see [async.times]{@link module:ControlFlow.times}
	   * @category Control Flow
	   * @param {number} n - The number of times to run the function.
	   * @param {Function} iteratee - The function to call `n` times. Invoked with the
	   * iteration index and a callback (n, next).
	   * @param {Function} callback - see {@link module:Collections.map}.
	   */
	  var timesSeries = doLimit(timeLimit, 1);

	  /**
	   * A relative of `reduce`.  Takes an Object or Array, and iterates over each
	   * element in series, each step potentially mutating an `accumulator` value.
	   * The type of the accumulator defaults to the type of collection passed in.
	   *
	   * @name transform
	   * @static
	   * @memberOf module:Collections
	   * @method
	   * @category Collection
	   * @param {Array|Iterable|Object} coll - A collection to iterate over.
	   * @param {*} [accumulator] - The initial state of the transform.  If omitted,
	   * it will default to an empty Object or Array, depending on the type of `coll`
	   * @param {Function} iteratee - A function applied to each item in the
	   * collection that potentially modifies the accumulator. The `iteratee` is
	   * passed a `callback(err)` which accepts an optional error as its first
	   * argument. If an error is passed to the callback, the transform is stopped
	   * and the main `callback` is immediately called with the error.
	   * Invoked with (accumulator, item, key, callback).
	   * @param {Function} [callback] - A callback which is called after all the
	   * `iteratee` functions have finished. Result is the transformed accumulator.
	   * Invoked with (err, result).
	   * @example
	   *
	   * async.transform([1,2,3], function(acc, item, index, callback) {
	   *     // pointless async:
	   *     process.nextTick(function() {
	   *         acc.push(item * 2)
	   *         callback(null)
	   *     });
	   * }, function(err, result) {
	   *     // result is now equal to [2, 4, 6]
	   * });
	   *
	   * @example
	   *
	   * async.transform({a: 1, b: 2, c: 3}, function (obj, val, key, callback) {
	   *     setImmediate(function () {
	   *         obj[key] = val * 2;
	   *         callback();
	   *     })
	   * }, function (err, result) {
	   *     // result is equal to {a: 2, b: 4, c: 6}
	   * })
	   */
	  function transform(coll, accumulator, iteratee, callback) {
	      if (arguments.length === 3) {
	          callback = iteratee;
	          iteratee = accumulator;
	          accumulator = isArray(coll) ? [] : {};
	      }
	      callback = once(callback || noop);

	      eachOf(coll, function (v, k, cb) {
	          iteratee(accumulator, v, k, cb);
	      }, function (err) {
	          callback(err, accumulator);
	      });
	  }

	  /**
	   * Undoes a [memoize]{@link module:Utils.memoize}d function, reverting it to the original,
	   * unmemoized form. Handy for testing.
	   *
	   * @name unmemoize
	   * @static
	   * @memberOf module:Utils
	   * @method
	   * @see [async.memoize]{@link module:Utils.memoize}
	   * @category Util
	   * @param {Function} fn - the memoized function
	   * @returns {Function} a function that calls the original unmemoized function
	   */
	  function unmemoize(fn) {
	      return function () {
	          return (fn.unmemoized || fn).apply(null, arguments);
	      };
	  }

	  /**
	   * Repeatedly call `fn`, while `test` returns `true`. Calls `callback` when
	   * stopped, or an error occurs.
	   *
	   * @name whilst
	   * @static
	   * @memberOf module:ControlFlow
	   * @method
	   * @category Control Flow
	   * @param {Function} test - synchronous truth test to perform before each
	   * execution of `fn`. Invoked with ().
	   * @param {Function} iteratee - A function which is called each time `test` passes.
	   * The function is passed a `callback(err)`, which must be called once it has
	   * completed with an optional `err` argument. Invoked with (callback).
	   * @param {Function} [callback] - A callback which is called after the test
	   * function has failed and repeated execution of `fn` has stopped. `callback`
	   * will be passed an error and any arguments passed to the final `fn`'s
	   * callback. Invoked with (err, [results]);
	   * @returns undefined
	   * @example
	   *
	   * var count = 0;
	   * async.whilst(
	   *     function() { return count < 5; },
	   *     function(callback) {
	   *         count++;
	   *         setTimeout(function() {
	   *             callback(null, count);
	   *         }, 1000);
	   *     },
	   *     function (err, n) {
	   *         // 5 seconds have passed, n = 5
	   *     }
	   * );
	   */
	  function whilst(test, iteratee, callback) {
	      callback = onlyOnce(callback || noop);
	      if (!test()) return callback(null);
	      var next = rest(function (err, args) {
	          if (err) return callback(err);
	          if (test()) return iteratee(next);
	          callback.apply(null, [null].concat(args));
	      });
	      iteratee(next);
	  }

	  /**
	   * Repeatedly call `fn` until `test` returns `true`. Calls `callback` when
	   * stopped, or an error occurs. `callback` will be passed an error and any
	   * arguments passed to the final `fn`'s callback.
	   *
	   * The inverse of [whilst]{@link module:ControlFlow.whilst}.
	   *
	   * @name until
	   * @static
	   * @memberOf module:ControlFlow
	   * @method
	   * @see [async.whilst]{@link module:ControlFlow.whilst}
	   * @category Control Flow
	   * @param {Function} test - synchronous truth test to perform before each
	   * execution of `fn`. Invoked with ().
	   * @param {Function} fn - A function which is called each time `test` fails.
	   * The function is passed a `callback(err)`, which must be called once it has
	   * completed with an optional `err` argument. Invoked with (callback).
	   * @param {Function} [callback] - A callback which is called after the test
	   * function has passed and repeated execution of `fn` has stopped. `callback`
	   * will be passed an error and any arguments passed to the final `fn`'s
	   * callback. Invoked with (err, [results]);
	   */
	  function until(test, fn, callback) {
	      whilst(function () {
	          return !test.apply(this, arguments);
	      }, fn, callback);
	  }

	  /**
	   * Runs the `tasks` array of functions in series, each passing their results to
	   * the next in the array. However, if any of the `tasks` pass an error to their
	   * own callback, the next function is not executed, and the main `callback` is
	   * immediately called with the error.
	   *
	   * @name waterfall
	   * @static
	   * @memberOf module:ControlFlow
	   * @method
	   * @category Control Flow
	   * @param {Array} tasks - An array of functions to run, each function is passed
	   * a `callback(err, result1, result2, ...)` it must call on completion. The
	   * first argument is an error (which can be `null`) and any further arguments
	   * will be passed as arguments in order to the next task.
	   * @param {Function} [callback] - An optional callback to run once all the
	   * functions have completed. This will be passed the results of the last task's
	   * callback. Invoked with (err, [results]).
	   * @returns undefined
	   * @example
	   *
	   * async.waterfall([
	   *     function(callback) {
	   *         callback(null, 'one', 'two');
	   *     },
	   *     function(arg1, arg2, callback) {
	   *         // arg1 now equals 'one' and arg2 now equals 'two'
	   *         callback(null, 'three');
	   *     },
	   *     function(arg1, callback) {
	   *         // arg1 now equals 'three'
	   *         callback(null, 'done');
	   *     }
	   * ], function (err, result) {
	   *     // result now equals 'done'
	   * });
	   *
	   * // Or, with named functions:
	   * async.waterfall([
	   *     myFirstFunction,
	   *     mySecondFunction,
	   *     myLastFunction,
	   * ], function (err, result) {
	   *     // result now equals 'done'
	   * });
	   * function myFirstFunction(callback) {
	   *     callback(null, 'one', 'two');
	   * }
	   * function mySecondFunction(arg1, arg2, callback) {
	   *     // arg1 now equals 'one' and arg2 now equals 'two'
	   *     callback(null, 'three');
	   * }
	   * function myLastFunction(arg1, callback) {
	   *     // arg1 now equals 'three'
	   *     callback(null, 'done');
	   * }
	   */
	  function waterfall (tasks, callback) {
	      callback = once(callback || noop);
	      if (!isArray(tasks)) return callback(new Error('First argument to waterfall must be an array of functions'));
	      if (!tasks.length) return callback();
	      var taskIndex = 0;

	      function nextTask(args) {
	          if (taskIndex === tasks.length) {
	              return callback.apply(null, [null].concat(args));
	          }

	          var taskCallback = onlyOnce(rest(function (err, args) {
	              if (err) {
	                  return callback.apply(null, [err].concat(args));
	              }
	              nextTask(args);
	          }));

	          args.push(taskCallback);

	          var task = tasks[taskIndex++];
	          task.apply(null, args);
	      }

	      nextTask([]);
	  }

	  var index = {
	    applyEach: applyEach,
	    applyEachSeries: applyEachSeries,
	    apply: apply$1,
	    asyncify: asyncify,
	    auto: auto,
	    autoInject: autoInject,
	    cargo: cargo,
	    compose: compose,
	    concat: concat,
	    concatSeries: concatSeries,
	    constant: constant,
	    detect: detect,
	    detectLimit: detectLimit,
	    detectSeries: detectSeries,
	    dir: dir,
	    doDuring: doDuring,
	    doUntil: doUntil,
	    doWhilst: doWhilst,
	    during: during,
	    each: each,
	    eachLimit: eachLimit,
	    eachOf: eachOf,
	    eachOfLimit: eachOfLimit,
	    eachOfSeries: eachOfSeries,
	    eachSeries: eachSeries,
	    ensureAsync: ensureAsync,
	    every: every,
	    everyLimit: everyLimit,
	    everySeries: everySeries,
	    filter: filter,
	    filterLimit: filterLimit,
	    filterSeries: filterSeries,
	    forever: forever,
	    log: log,
	    map: map,
	    mapLimit: mapLimit,
	    mapSeries: mapSeries,
	    mapValues: mapValues,
	    mapValuesLimit: mapValuesLimit,
	    mapValuesSeries: mapValuesSeries,
	    memoize: memoize,
	    nextTick: nextTick,
	    parallel: parallel,
	    parallelLimit: parallelLimit,
	    priorityQueue: priorityQueue,
	    queue: queue$1,
	    race: race,
	    reduce: reduce,
	    reduceRight: reduceRight,
	    reflect: reflect,
	    reflectAll: reflectAll,
	    reject: reject,
	    rejectLimit: rejectLimit,
	    rejectSeries: rejectSeries,
	    retry: retry,
	    retryable: retryable,
	    seq: seq,
	    series: series,
	    setImmediate: setImmediate$1,
	    some: some,
	    someLimit: someLimit,
	    someSeries: someSeries,
	    sortBy: sortBy,
	    timeout: timeout,
	    times: times,
	    timesLimit: timeLimit,
	    timesSeries: timesSeries,
	    transform: transform,
	    unmemoize: unmemoize,
	    until: until,
	    waterfall: waterfall,
	    whilst: whilst,

	    // aliases
	    all: every,
	    any: some,
	    forEach: each,
	    forEachSeries: eachSeries,
	    forEachLimit: eachLimit,
	    forEachOf: eachOf,
	    forEachOfSeries: eachOfSeries,
	    forEachOfLimit: eachOfLimit,
	    inject: reduce,
	    foldl: reduce,
	    foldr: reduceRight,
	    select: filter,
	    selectLimit: filterLimit,
	    selectSeries: filterSeries,
	    wrapSync: asyncify
	  };

	  exports['default'] = index;
	  exports.applyEach = applyEach;
	  exports.applyEachSeries = applyEachSeries;
	  exports.apply = apply$1;
	  exports.asyncify = asyncify;
	  exports.auto = auto;
	  exports.autoInject = autoInject;
	  exports.cargo = cargo;
	  exports.compose = compose;
	  exports.concat = concat;
	  exports.concatSeries = concatSeries;
	  exports.constant = constant;
	  exports.detect = detect;
	  exports.detectLimit = detectLimit;
	  exports.detectSeries = detectSeries;
	  exports.dir = dir;
	  exports.doDuring = doDuring;
	  exports.doUntil = doUntil;
	  exports.doWhilst = doWhilst;
	  exports.during = during;
	  exports.each = each;
	  exports.eachLimit = eachLimit;
	  exports.eachOf = eachOf;
	  exports.eachOfLimit = eachOfLimit;
	  exports.eachOfSeries = eachOfSeries;
	  exports.eachSeries = eachSeries;
	  exports.ensureAsync = ensureAsync;
	  exports.every = every;
	  exports.everyLimit = everyLimit;
	  exports.everySeries = everySeries;
	  exports.filter = filter;
	  exports.filterLimit = filterLimit;
	  exports.filterSeries = filterSeries;
	  exports.forever = forever;
	  exports.log = log;
	  exports.map = map;
	  exports.mapLimit = mapLimit;
	  exports.mapSeries = mapSeries;
	  exports.mapValues = mapValues;
	  exports.mapValuesLimit = mapValuesLimit;
	  exports.mapValuesSeries = mapValuesSeries;
	  exports.memoize = memoize;
	  exports.nextTick = nextTick;
	  exports.parallel = parallel;
	  exports.parallelLimit = parallelLimit;
	  exports.priorityQueue = priorityQueue;
	  exports.queue = queue$1;
	  exports.race = race;
	  exports.reduce = reduce;
	  exports.reduceRight = reduceRight;
	  exports.reflect = reflect;
	  exports.reflectAll = reflectAll;
	  exports.reject = reject;
	  exports.rejectLimit = rejectLimit;
	  exports.rejectSeries = rejectSeries;
	  exports.retry = retry;
	  exports.retryable = retryable;
	  exports.seq = seq;
	  exports.series = series;
	  exports.setImmediate = setImmediate$1;
	  exports.some = some;
	  exports.someLimit = someLimit;
	  exports.someSeries = someSeries;
	  exports.sortBy = sortBy;
	  exports.timeout = timeout;
	  exports.times = times;
	  exports.timesLimit = timeLimit;
	  exports.timesSeries = timesSeries;
	  exports.transform = transform;
	  exports.unmemoize = unmemoize;
	  exports.until = until;
	  exports.waterfall = waterfall;
	  exports.whilst = whilst;
	  exports.all = every;
	  exports.allLimit = everyLimit;
	  exports.allSeries = everySeries;
	  exports.any = some;
	  exports.anyLimit = someLimit;
	  exports.anySeries = someSeries;
	  exports.find = detect;
	  exports.findLimit = detectLimit;
	  exports.findSeries = detectSeries;
	  exports.forEach = each;
	  exports.forEachSeries = eachSeries;
	  exports.forEachLimit = eachLimit;
	  exports.forEachOf = eachOf;
	  exports.forEachOfSeries = eachOfSeries;
	  exports.forEachOfLimit = eachOfLimit;
	  exports.inject = reduce;
	  exports.foldl = reduce;
	  exports.foldr = reduceRight;
	  exports.select = filter;
	  exports.selectLimit = filterLimit;
	  exports.selectSeries = filterSeries;
	  exports.wrapSync = asyncify;

	}));
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(34).setImmediate, __webpack_require__(35)))

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(setImmediate, clearImmediate) {var nextTick = __webpack_require__(35).nextTick;
	var apply = Function.prototype.apply;
	var slice = Array.prototype.slice;
	var immediateIds = {};
	var nextImmediateId = 0;

	// DOM APIs, for completeness

	exports.setTimeout = function() {
	  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
	};
	exports.setInterval = function() {
	  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
	};
	exports.clearTimeout =
	exports.clearInterval = function(timeout) { timeout.close(); };

	function Timeout(id, clearFn) {
	  this._id = id;
	  this._clearFn = clearFn;
	}
	Timeout.prototype.unref = Timeout.prototype.ref = function() {};
	Timeout.prototype.close = function() {
	  this._clearFn.call(window, this._id);
	};

	// Does not start the time, just sets up the members needed.
	exports.enroll = function(item, msecs) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = msecs;
	};

	exports.unenroll = function(item) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = -1;
	};

	exports._unrefActive = exports.active = function(item) {
	  clearTimeout(item._idleTimeoutId);

	  var msecs = item._idleTimeout;
	  if (msecs >= 0) {
	    item._idleTimeoutId = setTimeout(function onTimeout() {
	      if (item._onTimeout)
	        item._onTimeout();
	    }, msecs);
	  }
	};

	// That's not how node.js implements it but the exposed api is the same.
	exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function(fn) {
	  var id = nextImmediateId++;
	  var args = arguments.length < 2 ? false : slice.call(arguments, 1);

	  immediateIds[id] = true;

	  nextTick(function onNextTick() {
	    if (immediateIds[id]) {
	      // fn.call() is faster so we optimize for the common use-case
	      // @see http://jsperf.com/call-apply-segu
	      if (args) {
	        fn.apply(null, args);
	      } else {
	        fn.call(null);
	      }
	      // Prevent ids from leaking
	      exports.clearImmediate(id);
	    }
	  });

	  return id;
	};

	exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function(id) {
	  delete immediateIds[id];
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(34).setImmediate, __webpack_require__(34).clearImmediate))

/***/ },
/* 35 */
/***/ function(module, exports) {

	// shim for using process in browser

	var process = module.exports = {};
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = setTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    clearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        setTimeout(drainQueue, 0);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	(function () {
		'use strict';

		var controllerId = 'MobileChatDetailCtrl';
		angular.module('bds').controller(controllerId, function ($compile, $state, $scope, $rootScope, socket, $location, $http, Upload, HouseService, RewayCommonUtil, NgMap, $window, $timeout) {
			// Chat Page Controller
			// Varialbles Initialization.
			var vm = this;
			vm.adsID = $state.params.adsID;
			// from general chat if exist $state.params.toUserID
			vm.toUserID = $state.params.toUserID;

			vm.ads = null;
			vm.user = null;
			vm.toUser = null;
			vm.chatMsg = "";
			vm.currentLocation = {};
			vm.sendLocation = {};
			vm.toUserOnline;

			$scope.sampleSentences = [{ value: 0, lable: "Xin chào bạn!" }, { value: 1, lable: "Nhà đã bán chưa bạn?" }, { value: 2, lable: "Gửi cho mình thêm ảnh" }, { value: 3, lable: "Gửi cho mình vị trí chính xác của nhà" }, { value: 4, lable: "Giá cuối cùng bạn bán là bao nhiêu?" }, { value: 5, lable: "Giá có thương lượng được không bạn?" }, { value: 6, lable: "Giảm giá chút đi bạn" }, { value: 7, lable: "Cảm ơn bạn!" }];
			$scope.chatBox = {};

			/*
	  //use to show location on new window
	  // with msg.content = "https://www.google.com/maps?q=" + vm.currentLocation.lat + "," + vm.currentLocation.lon;
	  vm.openMap = function(mapUrl){
	  	$window.open(mapUrl, '_blank');
	  };
	  */
			// autocomplete
			vm.favoriteSearchSource = [{
				description: "Vị trí hiện tại",
				location: true,
				class: "ui-autocomplete-category"
			}];

			vm.autoCompleteChange = function (event) {
				if (vm.autoCompleteText == '') {
					$("#searchSendLocation").autocomplete("option", "source", vm.favoriteSearchSource);
					$("#searchSendLocation").autocomplete("search", "");
				}
				vm.toggleQuickClearAutoComplete();
			};

			vm.showFavorite = function (event) {
				if (vm.autoCompleteText == '' || !vm.autoCompleteText) {
					$("#searchSendLocation").autocomplete("option", "source", vm.favoriteSearchSource);
					$("#searchSendLocation").autocomplete("search", "");
				}
			};
			vm.keyPress = function (event) {
				vm.showFrequentSearch = false;
				$("#searchSendLocation").autocomplete("option", "source", vm.autocompleteGoogleSource);
				var $ww = $(window).width();
			};

			vm.autocompleteGoogleSource = function (request, response) {
				console.log(request);
				var options = {
					input: request.term,
					//types: ['(cities)'],
					//region: 'US',
					componentRestrictions: { country: "vn" }
				};
				function callback(predictions, status) {
					var results = [];
					if (predictions) {
						console.log(predictions);
						for (var i = 0, prediction; prediction = predictions[i]; i++) {
							results.push({
								description: prediction.description,
								types: prediction.types,
								place_id: prediction.place_id,
								class: "iconLocation gray"
							});
						}
					}
					response(results);
				}
				var service = new google.maps.places.AutocompleteService();
				service.getPlacePredictions(options, callback);
			};

			vm.selectPlaceCallback = function (item) {
				console.log(item);
				if (item.lastSearchSeparator == true) {
					return;
				}
				vm.item = item;
				if (vm.item.place_id) {
					var request = {
						placeId: vm.item.place_id
					};
					var service = new google.maps.places.PlacesService(vm.fullMapSendLocation);
					service.getDetails(request, function (place, status) {
						vm.fullMapSendLocation.fitBounds(place.geometry.viewport);
						vm.sendLocation.lat = vm.fullMapSendLocation.getCenter().lat();
						vm.sendLocation.lon = vm.fullMapSendLocation.getCenter().lng();
						console.log("-----------------------selectautoComplete---------------");
						vm.getDiaChinhGoogle(vm.sendLocation.lat, vm.sendLocation.lon);
						console.log(vm.location.lat);
						console.log(vm.location.lon);
					});
				}
			};

			vm.toggleQuickClearAutoComplete = function () {
				if (vm.autoCompleteText == '' || !vm.autoCompleteText) {
					$("#searchSendLocation").autocomplete("option", "source", vm.favoriteSearchSource);
					$("#searchSendLocation").autocomplete("search", "");
					$(".close-search").removeAttr("style");
					$(".input-fr").removeAttr("style");
				} else {
					$(".close-search").show();
					$(".input-fr").css("width", $ww - 78);
				}
			};

			//end autoComplete

			//getPlace
			vm.getDiaChinhGoogle = function (lat, lon) {
				vm.getGeoCode(lat, lon, function (res) {
					if (res.results) {
						vm.googlePlaces = res.results;
						var place = vm.googlePlaces[0];
						vm.autoCompleteText = place.formatted_address;
					}
				});
			};

			vm.getGeoCode = function (lat, lon, callback) {
				var url = "https://maps.googleapis.com/maps/api/geocode/json?" + "key=AIzaSyAnioOM0qiWwUoCz8hNS8B2YuzKiYYaDdU" + "&latlng=" + lat + ',' + lon;
				console.log(url);

				return fetch(url).then(function (response) {
					return response.json();
				}).then(function (data) {
					console.log("-------------------getGeoCode---------------");
					console.log(data);
					callback(data);
				}).catch(function (e) {
					return e;
				});
			};
			//end getPlace

			vm.getCurrentLocation = function () {
				if (navigator.geolocation) {
					navigator.geolocation.getCurrentPosition(function (position) {
						console.log(position);
						vm.currentLocation.lat = position.coords.latitude;
						vm.currentLocation.lon = position.coords.longitude;
						vm.sendLocation.lat = vm.currentLocation.lat;
						vm.sendLocation.lon = vm.currentLocation.lon;
						console.log("-----------------------getCurrentLocation---------------");
						vm.getDiaChinhGoogle(vm.sendLocation.lat, vm.sendLocation.lon);
					}, function (error) {
						console.log(error);
					});
				} else {}
			};

			vm.showFullMap = function (isViewLocation) {
				vm.isViewLocation = isViewLocation;
				$('#mapsBoxSendLocation').modal("show");
			};

			vm.sendUrlMapLocation = function () {
				if (vm.sendLocation.lat && vm.sendLocation.lon) {
					vm.isFileSelected = false;
					var dateString = formatAMPM(new Date());
					var msg = $scope.getMessage();
					//msg.content = "https://www.google.com/maps?q=" + vm.currentLocation.lat + "," + vm.currentLocation.lon;
					msg.location = {
						lat: vm.sendLocation.lat,
						lon: vm.sendLocation.lon
					};
					msg.msgType = window.RewayConst.CHAT_MESSAGE_TYPE.LOCATION;
					socket.emit("send-message", msg, function (data) {
						//delivery report code goes here
						if (data.success == true) {
							if (data.offline == true) {
								vm.toUserOnline = false;
								$scope.chatBox.status = window.RewayConst.MSG.USER_OFFLINE;
								$scope.chatBox.onlineClass = "offline";
								//console.log("TODO: this person is offline he will receive the message next time he online");
							}
							msg.timeStamp = dateString;
							console.log(msg);
							window.RewayClientUtils.addChatMessage($scope.chatBox, msg);
							$scope.$apply();
							$("body").animate({ scrollTop: $(document).height() }, "slow");
							// var objDiv = document.getElementById("chatDetailId");
							// objDiv.scrollTop = objDiv.scrollHeight;
						}
					});
				} else {
						vm.isMsgBoxEmpty = true;
					}
			};

			vm.init = function () {
				console.log("------------------------init--------------------------");
				console.log($rootScope.user);
				vm.getCurrentLocation();

				socket.emit('alert user online', { email: $rootScope.user.userEmail, fromUserID: $rootScope.user.userID, fromUserName: $rootScope.user.userName }, function (data) {
					console.log("alert user online " + $rootScope.user.userID);
				});

				socket.emit('get-unread-message', { userID: $rootScope.user.userID }, function (data) {
					console.log("-----------------emit get-unread-message " + $rootScope.user.userID);
					console.log(data);
				});

				HouseService.getUserInfo({ userID: $rootScope.user.userID }).then(function (res) {
					if (res.status == 200 && res.data.status == 0) {
						vm.user = res.data.userInfo;
					}
				});

				RewayCommonUtil.placeAutoCompletePost(vm.selectPlaceCallback, "searchSendLocation");

				$('#mapsBoxSendLocation').on('show.bs.modal', function (e) {
					$timeout(function () {
						if (!vm.fullMapSendLocation) {
							vm.fullMapSendLocation = NgMap.initMap('fullMapSendLocation');
							google.maps.event.addListener(vm.fullMapSendLocation, "click", function (event) {
								vm.sendLocation.lat = event.latLng.lat();
								vm.sendLocation.lon = event.latLng.lng();
								console.log("-------movecursor-----lat: " + vm.sendLocation.lat);
								console.log("---------movecusor---lon: " + vm.sendLocation.lon);
							});
							google.maps.event.addListener(vm.fullMapSendLocation, "center_changed", function () {
								vm.sendLocation.lat = vm.fullMapSendLocation.getCenter().lat();
								vm.sendLocation.lon = vm.fullMapSendLocation.getCenter().lng();
								vm.getDiaChinhGoogle(vm.sendLocation.lat, vm.sendLocation.lon);
								console.log("-------movecusor-----lat: " + vm.sendLocation.lat);
								console.log("---------movecusor---lon: " + vm.sendLocation.lon);
							});
						}
					}, 300);
				});

				HouseService.detailAds({ adsID: vm.adsID, userID: $rootScope.user.userID }).then(function (res) {
					if (res.status == 200 && res.data.status == 0) {
						vm.ads = res.data.ads;
						if (!vm.toUserID) {
							if (vm.ads.dangBoi.userID) {
								vm.toUserID = vm.ads.dangBoi.userID;
							}
						}
						if (vm.toUserID) {
							socket.emit('check user online', { fromUserID: $rootScope.user.userID, toUserID: vm.toUserID }, function (data) {
								console.log("register socket user " + vm.toUserID);
							});

							HouseService.getUserInfo({ userID: vm.toUserID }).then(function (res) {
								if (res.status == 200 && res.data.status == 0) {
									vm.toUser = res.data.userInfo;
									vm.initChatBox({ userID: vm.toUser.userID, name: vm.toUser.fullName, avatar: vm.toUser.avatar });
									HouseService.getAllChatMsg({ userID: $rootScope.user.userID, partnerUserID: vm.toUser.userID, adsID: vm.adsID }).then(function (res) {
										if (res.status == 200 && res.data.status == 0) {
											if (res.data.data.length > 0) {
												var msgList = [];
												for (var i = res.data.data.length - 1; i >= 0; i--) {
													msgList.push(res.data.data[i].default);
												}

												var async = __webpack_require__(33);
												async.forEach(msgList, function (msg) {
													window.RewayClientUtils.addChatMessage($scope.chatBox, msg);

													//$('#chatDetailId').scrollTop($('#chatDetailId')[0].scrollHeight);
													//var objDiv = document.getElementById("chatDetailId");
													//objDiv.scrollTop = objDiv.scrollHeight;
												}, function (err) {
													if (err) {
														throw err;
													}
													console.log("processing all elements completed");
												});
												$("body").animate({ scrollTop: $(document).height() }, "slow");
											}
										}
									});
								}
							});
						}
					} else {
						return;
					}
				});
			};

			vm.goBack = function () {
				vm.closeChat();
				$window.history.back();
			};

			$timeout(function () {
				vm.init();
			}, 300);

			if ($rootScope.user && $rootScope.user.userID) {
				$scope.userID = $rootScope.user.userID;
			}

			vm.isMe = function (userID) {
				if ($scope.userID.trim() == userID.trim()) return true;else return false;
			};

			/**
	   Handle in comming message
	   */
			socket.on("new message", function (data) {
				console.log("----------------------on new msg-detail-------------------");
				if (data.fromUserID && vm.toUserID && data.fromUserID.trim() == vm.toUserID.trim()) {
					if (!$scope.chatBox.user) {
						vm.initChatBox({ userID: data.fromUserID, name: data.fromFullName, avatar: data.fromUserAvatar });
					}
					data.date = new Date(data.date);
					socket.emit("read-messages", data, function (res) {
						console.log("mark messages as read " + res);
					});
					window.RewayClientUtils.addChatMessage($scope.chatBox, data);
					$scope.$apply();
					$("body").animate({ scrollTop: $(document).height() }, "slow");
				}
			});

			socket.on("check user online", function (data) {
				console.log("-----------------check user----------------");
				console.log(data);
				$timeout(function () {
					if (vm.toUserID && data) {
						vm.toUserOnline = data.toUserIsOnline;
					}
				}, 100);
			});

			socket.on("alert user online", function (data) {
				console.log("-----------------alert user online----------------");
				console.log(data);
				$timeout(function () {
					if (vm.toUserID.trim() == data.fromUserID) {
						vm.toUserOnline = true;
					}
				}, 100);
			});

			socket.on("alert user offline", function (data) {
				console.log("-----------------alert user offline----------------");
				console.log(data);
				$timeout(function () {
					if (vm.toUserID.trim() == data.fromUserID) {
						vm.toUserOnline = false;
					}
				}, 100);
			});

			socket.on("user-start-typing", function (data) {
				var toUserName = $scope.chatBox.user.name;
				if (toUserName.indexOf('@') >= 0) {
					toUserName = toUserName.substring(0, toUserName.indexOf('@'));
				}
				$scope.chatBox.status = toUserName + " is typing...";
				$scope.$apply();
			});

			socket.on("user-stop-typing", function (data) {
				$scope.chatBox.status = "";
				$scope.$apply();
			});

			socket.on("unread-messages", function (data) {
				console.log("------------------chat-unreadMessage-----------------");
				console.log(data);
				var readedData = [];
				for (var i = 0, len = data.length; i < len; i++) {
					var msg = data[i].default;
					msg.date = new Date(msg.date);
					if (vm.adsID.trim() == msg.relatedToAds.adsID.trim() && $rootScope.user.userID.trim() == msg.toUserID.trim() && vm.toUserID.trim() == msg.fromUserID.trim()) {
						readedData.push(data[i]);
					}
					console.log("msg[" + i + "] " + msg);
				}
				socket.emit("read-messages", readedData, function (res) {
					console.log("mark messages as read " + res);
				});
			});

			vm.initChatBox = function (user) {
				$scope.chatBox.user = user;
				$scope.chatBox.onlineClass = "online";
				$scope.chatBox.hidden = false;
				$scope.chatBox.ads = {
					adsID: vm.ads.adsID,
					cover: vm.ads.image.cover,
					diaChinhFullName: vm.ads.place.diaChinhFullName,
					dienTichFmt: vm.ads.dienTichFmt,
					giaFmt: vm.ads.giaFmt,
					loaiNhaDat: vm.ads.loaiNhaDat,
					loaiNhaDatFmt: vm.ads.loaiNhaDatFmt,
					loaiTin: vm.ads.loaiTin
				};
				$scope.chatBox.status = "";
				$scope.chatBox.messages = [];
			};

			//End ChatPanel

			$scope.chatKeypress = function (event) {
				var keyCode = event.which || event.keyCode;
				if (keyCode === 13) {
					socket.emit('user-stop-typing', { fromUserID: $rootScope.user.userID, toUserID: $scope.chatBox.user.userID }, function (data) {
						console.log("emit stop typing to " + $scope.chatBox.user.userID);
					});
					vm.sendMsg();
				} else {
					socket.emit('user-start-typing', { fromUserID: $rootScope.user.userID, toUserID: $scope.chatBox.user.userID }, function (data) {
						console.log("emit start typing to " + $scope.chatBox.user.userID);
					});
				}
			};
			$scope.chatBlur = function (event) {
				socket.emit('user-stop-typing', { fromUserID: $rootScope.user.userID, toUserID: $scope.chatBox.user.userID }, function (data) {
					console.log("emit stop typing to " + $scope.chatBox.user.userID);
				});
			};

			$scope.getMessage = function () {
				return {
					fromUserID: vm.user.userID.trim(),
					fromUserAvatar: vm.user.avatar,
					toUserID: $scope.chatBox.user.userID.trim(),
					toFullName: $scope.chatBox.user.name,
					fromFullName: vm.user.fullName,
					relatedToAds: $scope.chatBox.ads,
					content: vm.chatMsg,
					msgType: window.RewayConst.CHAT_MESSAGE_TYPE.TEXT,
					timeStamp: formatAMPM(new Date()),
					date: new Date(),
					type: "Chat"
				};
			};

			vm.chonMauCau = function (mauCau) {
				vm.chatMsg = mauCau;
				$('.list-sort').toggle();
				$("#msgTxtId").focus();
			};

			$scope.uploadFiles = function (files) {
				$scope.files = files;
				var msg = $scope.getMessage();
				if (files && files.length) {
					var async = __webpack_require__(33);
					async.forEach(files, function (myFile) {
						var ft = vm.catchFile(myFile);
						var isImageFile = ft == "image";
						var fileName = myFile.name;
						console.log(fileName);
						fileName = fileName.substring(fileName.lastIndexOf("."), fileName.length);
						fileName = "Chat_" + $rootScope.user.userID + "_" + new Date().getTime() + fileName;

						Upload.upload({
							url: '/api/upload',
							data: { files: myFile, filename: fileName }
						}).then(function (resp) {
							console.log('Success ' + resp.config.data.files.name + 'uploaded. Response: ' + resp.data);

							$timeout(function () {
								var fileUrl = location.protocol;
								fileUrl = fileUrl.concat("//").concat(window.location.host).concat(resp.data.file.url);
								var dateString = formatAMPM(new Date());
								var msg = $scope.getMessage();
								msg.msgType = window.RewayConst.CHAT_MESSAGE_TYPE.FILE;
								msg.content = fileUrl;
								socket.emit('send-message', msg, function (data) {
									console.log("sent image to " + $scope.chatBox.user.userID);
									if (data.success == true) {
										if (data.offline == true) {
											vm.toUserOnline = false;
											$scope.chatBox.status = window.RewayConst.MSG.USER_OFFLINE;
											$scope.chatBox.onlineClass = "offline";
											//console.log("TODO: this person is offline he will receive the message next time he online");
										}
										vm.chatMsg = "";
										msg.timeStamp = dateString;
										window.RewayClientUtils.addChatMessage($scope.chatBox, msg);
										$scope.$apply();
										$("body").animate({ scrollTop: $(document).height() }, "slow");
										// var objDiv = document.getElementById("chatDetailId");
										// objDiv.scrollTop = objDiv.scrollHeight;
									}
								});
							}, 100);
						}, function (resp) {
							console.log('Error status: ' + resp.status);
						}, function (evt) {
							var progressPercentage = parseInt(100.0 * evt.loaded / evt.total);
							console.log('progress: ' + progressPercentage + '% ' + evt.config.data.files.name);
						});
					}, function (err) {
						if (err) {
							throw err;
						}
						console.log("processing all elements completed");
					});
				}
			};

			// message time formatting into string
			function formatAMPM(date) {
				var hours = date.getHours();
				var minutes = date.getMinutes();
				var ampm = hours >= 12 ? 'pm' : 'am';
				hours = hours % 12;
				hours = hours ? hours : 12; // the hour '0' should be '12'
				minutes = minutes < 10 ? '0' + minutes : minutes;
				var strTime = hours + ':' + minutes + ' ' + ampm;
				return strTime;
			}

			// ====================================== Messege Sending Code ============================
			// sending text message function
			vm.sendMsg = function () {
				console.log("---------------sendMsg------1---------");
				if (vm.chatMsg) {
					vm.isFileSelected = false;
					var dateString = formatAMPM(new Date());
					var msg = $scope.getMessage();
					socket.emit("send-message", msg, function (data) {
						//delivery report code goes here
						if (data.success == true) {
							if (data.offline == true) {
								vm.toUserOnline = false;
								$scope.chatBox.status = window.RewayConst.MSG.USER_OFFLINE;
								$scope.chatBox.onlineClass = "offline";
								//console.log("TODO: this person is offline he will receive the message next time he online");
							}
							vm.chatMsg = "";
							msg.timeStamp = dateString;
							// $scope.chatBox.messages.push(msg);
							console.log(msg);
							window.RewayClientUtils.addChatMessage($scope.chatBox, msg);
							$scope.$apply();
							$("body").animate({ scrollTop: $(document).height() }, "slow");
							// var objDiv = document.getElementById("chatDetailId");
							// objDiv.scrollTop = objDiv.scrollHeight;
						}
					});
				} else {
						vm.isMsgBoxEmpty = true;
					}
			};

			vm.closeChat = function () {
				if ($scope.chatBox.user.userID) {
					$scope.$bus.publish({
						channel: 'chat',
						topic: 'close chat',
						data: $scope.chatBox.user.userID
					});
				}
			};

			// function for checking file type
			vm.catchFile = function (file) {
				if (!file) return "invalid format";
				if (file.type == "application/pdf" || file.type == "application/msword" || file.type == "application/vnd.openxmlformats-officedocument.wordprocessingml.document" || file.type == "text/plain" || file.type == "application/vnd.ms-excel") {
					return "document";
				} else if (file.type == "audio/mp3" || file.type == "audio/mpeg") {
					return "music";
				} else {
					var filetype = file.type.substring(0, file.type.indexOf('/'));
					if (filetype == "image") {
						return "image";
					} else {
						return "invalid format";
					}
				}
			};
		});
	})();

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	(function () {
		'use strict';

		var controllerId = 'MobilePostCtrl';
		angular.module('bds').controller(controllerId, function (jwtHelper, $rootScope, $http, $scope, Upload, $state, HouseService, NewsService, RewayCommonUtil, NgMap, $window, $timeout, $location, $localStorage) {
			var vm = this;

			vm.ads = {};
			vm.ads.loaiTin = 0;
			vm.adsID = $state.params.adsID;
			vm.marker = {
				id: 1,
				coords: {
					latitude: 16.0439,
					longitude: 108.199
				},
				content: undefined,
				data: 'test'
			};
			$scope.location = {};
			$scope.loaiTin = 0;
			$scope.soPhongNgu;
			$scope.soPhongTam;
			$scope.soTang;
			$scope.addressDetail = '';
			vm.showStreetView = false;

			vm.duAn = [];
			vm.diaChinh = {};

			vm.location = {};
			vm.diaChinh = {};
			vm.loaiNhaDatBan = window.RewayListValue.LoaiNhaDatBanWeb;
			vm.loaiNhaDatThue = window.RewayListValue.LoaiNhaDatThueWeb;
			vm.dacTinhNha = window.RewayListValue.DacTinhNha;
			vm.huongNhaList = window.RewayListValue.getNameValueArray(window.RewayListValue.HuongNha);

			$scope.rangeNumber = [];
			for (var i = 0; i < 8; i++) {
				$scope.rangeNumber.push(i);
			}

			vm.loaiGias = [{ value: 1, lable: "Triệu" }, { value: 2, lable: "Tỷ" }, { value: 3, lable: "Trăm nghìn/m2" }, { value: 4, lable: "Triệu/m2" }, { value: 0, lable: "Thỏa thuận" }];
			vm.loaiGia = { value: 1, lable: "Triệu" };

			vm.makeListNamXayDung = function () {
				console.log("----------------------makeListNamXayDung-----1-----");
				console.log($rootScope.user);
				var currentYear = new Date().getFullYear();
				var result = [];
				result.push({ value: 0, lable: "" });
				for (var i = 0; i < 100; i++) {
					result.push({ value: currentYear - i, lable: currentYear - i });
				}
				return result;
			};

			$scope.namXayDungList = vm.makeListNamXayDung();

			$(".btn-more .collapse-title").click(function () {
				$(this).parent().hide(), $(".more-box").removeClass("more-box-hide");
			});

			$(".btn-reset .collapse-title").click(function () {
				$(this).parent().parent().find(".btn-more").removeAttr("style");
				$(this).parent().parent().find(".title-more").removeAttr("style");
				$(this).parent().parent().find(".more-box").addClass("more-box-hide");
				$(this).parent().parent().find(".spinner").addClass("spinner-hide");
				$(this).parent().parent().find(".spinner").parent().find(".collapse-title i").addClass("iconDownOpen").removeClass("iconUpOpen");
				$(this).parent().parent().find(".btn-group .btn").removeClass("active");
				$(this).parent().parent().find(".btn-group .btn:first-child").addClass("active");
				$(this).parent().parent().find(".search").val('');
			});

			/*
	  vm.getDanhMucNamXd = function(){
	  	$scope.currentYear = new Date().getFullYear();
	  	$scope.namXayDungList = [];
	  	let varYear;
	  	for (var i = 0; i< 100; i++) {
	  		varYear = { value: $scope.currentYear, lable: $scope.currentYear };
	  		$scope.namXayDungList.push(varYear);
	  	}
	  }*/

			// autocomplete
			vm.favoriteSearchSource = [{
				description: "Vị trí hiện tại",
				location: true,
				class: "ui-autocomplete-category"
			}];

			vm.autoCompleteChange = function (event) {
				if (vm.autoCompleteText == '') {
					$("#searchAddPost").autocomplete("option", "source", vm.favoriteSearchSource);
					$("#searchAddPost").autocomplete("search", "");
				}
				vm.toggleQuickClearAutoComplete();
			};

			vm.showFavorite = function (event) {
				if (vm.autoCompleteText == '' || !vm.autoCompleteText) {
					$("#searchAddPost").autocomplete("option", "source", vm.favoriteSearchSource);
					$("#searchAddPost").autocomplete("search", "");
				}
			};

			//current only remove urlAdr, must delete real file on server
			vm.removeAvatarImg = function () {
				if (vm.ads.image.cover) {
					HouseService.deleteFile({ fileUrl: vm.ads.image.cover.trim() }).then(function (res) {
						console.log(res);
						vm.ads.image.cover = '';
					});
				}
			};

			vm.removeNormalImg = function (img) {
				if (vm.ads.image.images) {
					if (img) {
						//var urlToDelete = img.substring(img.indexOf("web/"), img.length);
						HouseService.deleteFile({ fileUrl: img.trim() }).then(function (res) {
							console.log(res);
							if (res.status == 200 && res.data.status == 0) {
								var removeIndex = vm.ads.image.images.indexOf(img);
								if (removeIndex > -1) {
									vm.ads.image.images.splice(removeIndex, 1);
								}
							}
						});
					}
				}
			};

			vm.mapClick = function (event) {
				vm.showStreetView = false;
				//$('#mapsBox').modal("show");
			};
			$scope.chonDiaChinh = function () {
				console.log($scope.listDiaChinh[0]);
				if ($scope.listDiaChinh) {
					vm.viewPort = $scope.listDiaChinh[0].viewPort;;
					if (vm.viewPort) {
						//$scope.center = [vm.viewport.center.lat,vm.viewport.center.lon];
						var southWest = new google.maps.LatLng(vm.viewPort.southwest.lat, vm.viewPort.southwest.lon);
						var northEast = new google.maps.LatLng(vm.viewPort.northeast.lat, vm.viewPort.northeast.lon);
						var bounds = new google.maps.LatLngBounds(southWest, northEast);

						// move map to viewport
						vm.fullMapPost.fitBounds(bounds);
					}
				}
			};

			vm.autocompleteGoogleSource = function (request, response) {
				console.log(request);
				var options = {
					input: request.term,
					//types: ['(cities)'],
					//region: 'US',
					componentRestrictions: { country: "vn" }
				};
				function callback(predictions, status) {
					var results = [];
					if (predictions) {
						console.log(predictions);
						for (var i = 0, prediction; prediction = predictions[i]; i++) {
							results.push({
								description: prediction.description,
								types: prediction.types,
								place_id: prediction.place_id,
								class: "iconLocation gray"
							});
						}
					}
					response(results);
				}
				var service = new google.maps.places.AutocompleteService();
				service.getPlacePredictions(options, callback);
			};

			vm.autocompleteSource = function (request, response) {
				var results = [];
				$http.get("/api/place/autocomplete?input=" + request.term).then(function (res) {
					var predictions = res.data.predictions;
					console.log(predictions);
					if (res.status == '200') {
						for (var i = 0, prediction; prediction = predictions[i]; i++) {
							results.push({
								description: prediction.fullName,
								types: prediction.placeType,
								viewPort: prediction.viewport,
								tinh: prediction.tinh,
								huyen: prediction.huyen,
								xa: prediction.xa,
								placeId: prediction.placeId,
								class: "iconLocation gray"
							});
						}
					}
					$scope.listDiaChinh = results;
					response(results);
				});
			};

			vm.keyPress = function (event) {
				vm.showFrequentSearch = false;
				$("#searchAddPost").autocomplete("option", "source", vm.autocompleteGoogleSource);
				var $ww = $(window).width();
			};

			vm.toggleQuickClearAutoComplete = function () {
				if (vm.autoCompleteText == '' || !vm.autoCompleteText) {
					$("#searchAddPost").autocomplete("option", "source", vm.favoriteSearchSource);
					$("#searchAddPost").autocomplete("search", "");
					$(".close-search").removeAttr("style");
					$(".input-fr").removeAttr("style");
				} else {
					$(".close-search").show();
					$(".input-fr").css("width", $ww - 78);
				}
				// if($(".search").find("input").hasClass("input-fr")){

				//     if($(".input-fr").val().length>0) {
				//         $(".close-search").show();
				//         $(".input-fr").css("width", $ww-78);
				//     }else{
				//         $(".close-search").removeAttr("style");
				//         $(".input-fr").removeAttr("style");
				//     }
				// }
			};

			vm.selectPlaceCallback = function (item) {
				console.log(item);
				if (item.lastSearchSeparator == true) {
					return;
				}
				vm.item = item;
				if (vm.item.place_id) {
					var request = {
						placeId: vm.item.place_id
					};
					var service = new google.maps.places.PlacesService(vm.fullMapPost);
					service.getDetails(request, function (place, status) {
						vm.fullMapPost.fitBounds(place.geometry.viewport);
						vm.location.lat = vm.fullMapPost.getCenter().lat();
						vm.location.lon = vm.fullMapPost.getCenter().lng();
						console.log(vm.location.lat);
						console.log(vm.location.lon);
					});
				}
			};

			vm.selectPlaceCallbackBk = function (item) {
				console.log(item);
				if (item.lastSearchSeparator == true) {
					return;
				}
				vm.item = item;
				if (vm.item.placeId) $rootScope.searchData.placeId = vm.item.placeId;
				vm.keepViewport = false;
				if (item.query) {
					vm.place = vm.item.place;
					$scope.searchData = item.query;
					vm.updateDrums();
				} else {
					vm.place = item;
				}
				if (!item.location) {
					$scope.searchData.circle = undefined;
				}
				$scope.$apply();
			};
			// end auto

			vm.resetLocation = function () {
				vm.autoCompleteText = "";
				vm.location.lat = $scope.location.lat;
				vm.location.lon = $scope.location.lon;
				vm.toggleQuickClearAutoComplete();
			};

			vm.setDacTinhNha = function (value) {
				if (value == 0) {
					vm.ads.nhaMoiXay = !vm.ads.nhaMoiXay;
				} else if (value == 1) {
					vm.ads.nhaLoGoc = !vm.ads.nhaLoGoc;
				} else if (value == 2) {
					vm.ads.otoDoCua = !vm.ads.otoDoCua;
				} else if (value == 3) {
					vm.ads.nhaKinhDoanhDuoc = !vm.ads.nhaKinhDoanhDuoc;
				} else if (value == 4) {
					vm.ads.noiThatDayDu = !vm.ads.noiThatDayDu;
				} else if (value == 5) {
					vm.ads.chinhChuDangTin = !vm.ads.chinhChuDangTin;
				}
			};
			vm.isActiveClass = function (value) {
				if (value == 0) {
					return vm.ads.nhaMoiXay;
				} else if (value == 1) {
					return vm.ads.nhaLoGoc;
				} else if (value == 2) {
					return vm.ads.otoDoCua;
				} else if (value == 3) {
					return vm.ads.nhaKinhDoanhDuoc;
				} else if (value == 4) {
					return vm.ads.noiThatDayDu;
				} else if (value == 5) {
					return vm.ads.chinhChuDangTin;
				}
			};
			vm.getCurrentLocation = function () {
				if (navigator.geolocation) {
					navigator.geolocation.getCurrentPosition(function (position) {
						console.log(position);
						$rootScope.currentLocation.lat = position.coords.latitude;
						$rootScope.currentLocation.lon = position.coords.longitude;
						$scope.currentLocation = $rootScope.currentLocation;
						vm.location.lat = $rootScope.currentLocation.lat;
						vm.location.lon = $rootScope.currentLocation.lon;
						$scope.location.lat = $rootScope.currentLocation.lat;
						$scope.location.lon = $rootScope.currentLocation.lon;
						vm.getDiaChinhGoogle(vm.location.lat, vm.location.lon);
						vm.marker.coords.lat = vm.location.lat;
						vm.marker.coords.lon = vm.location.lon;
					}, function (error) {
						console.log(error);
					});
				} else {}
			};

			//get place in danh muc dia chinh
			//dung voi post-get
			vm.getDiaChinhInDbPostGet = function (lat, lon) {
				vm.getGeoCode(lat, lon, function (res) {
					if (res.data.results) {
						var places = res.data.results;
						var newPlace = places[0];
						for (var i = 0; i < places.length; i++) {
							var xa = window.RewayPlaceUtil.getXa(places[i]);
							if (xa != '') {
								newPlace = places[i];
								break;
							}
						}
						var tinh = window.RewayPlaceUtil.getTinh(newPlace);
						var huyen = window.RewayPlaceUtil.getHuyen(newPlace);
						var xa = window.RewayPlaceUtil.getXa(newPlace);
						var diaChinh = {};
						vm.location.tinh = tinh;
						vm.location.huyen = huyen;
						vm.location.xa = xa;
						diaChinh.tinhKhongDau = window.RewayUtil.locDau(tinh);
						diaChinh.huyenKhongDau = window.RewayUtil.locDau(huyen);
						diaChinh.xaKhongDau = window.RewayUtil.locDau(xa);
						var placeType = 'T';
						if (diaChinh.huyenKhongDau) placeType = 'H';
						if (diaChinh.xaKhongDau) placeType = 'X';
						var diaChinhDto = {
							tinhKhongDau: diaChinh.tinhKhongDau,
							huyenKhongDau: diaChinh.huyenKhongDau,
							xaKhongDau: diaChinh.xaKhongDau,
							placeType: placeType
						};
						HouseService.getPlaceByDiaChinhKhongDau(diaChinhDto).then(function (res) {
							if (res) {
								vm.diaChinh = res.data.diaChinh;
								vm.duAn = res.data.duAn;
								vm.ads.place.diaChi = vm.diaChinh.fullName;
								vm.ads.place.diaChinh.codeTinh = vm.diaChinh.tinh;
								vm.ads.place.diaChinh.codeHuyen = vm.diaChinh.huyen;
								vm.ads.place.diaChinh.codeXa = vm.diaChinh.xa;
								vm.ads.place.diaChinh.tinh = vm.location.tinh;
								vm.ads.place.diaChinh.huyen = vm.location.huyen;
								vm.ads.place.diaChinh.xa = vm.location.xa;
								vm.ads.place.geo.lat = vm.location.lat;
								vm.ads.place.geo.lon = vm.location.lon;
								console.log(vm.diaChinh);
								console.log(vm.duAn);
							}
						});
					}
				});
			};

			vm.getGeoCodePostGet = function (lat, lon, callback) {
				console.log($localStorage.relandToken);
				var url = "https://maps.googleapis.com/maps/api/geocode/json?" + "key=AIzaSyDhk9mOXjM79P7ceOceYSCxQO-o9YXCR3A" + "&latlng=" + lat + ',' + lon;
				$http.post(url).then(function (res) {
					console.log(res);
					callback(res);
					//console.log(res.data.results[0]);
				});
			};

			//get place in danh muc dia chinh
			//dung voi fetch
			vm.getDiaChinhGoogle = function (lat, lon) {
				vm.getGeoCode(lat, lon, function (res) {
					if (res.results) {
						vm.googlePlaces = res.results;
						var place = vm.googlePlaces[0];
						vm.autoCompleteText = place.formatted_address;
					}
				});
			};

			vm.getDiaChinhInDb = function (lat, lon, isInit) {
				if (!vm.googlePlaces || vm.googlePlaces && vm.googlePlaces.length == 0) {
					vm.getGeoCode(lat, lon, function (res) {
						if (res.results) {
							vm.googlePlaces = res.results;
							var place = vm.googlePlaces[0];
							vm.autoCompleteText = place.formatted_address;
						}
						var place = vm.googlePlaces[0];
						for (var i = 0; i < vm.googlePlaces.length; i++) {
							var xa = window.RewayPlaceUtil.getXa(vm.googlePlaces[i]);
							if (xa != '') {
								place = vm.googlePlaces[i];
								break;
							}
						}
						var tinh = window.RewayPlaceUtil.getTinh(place);
						var huyen = window.RewayPlaceUtil.getHuyen(place);
						var xa = window.RewayPlaceUtil.getXa(place);
						var diaChinh = {};
						vm.location.tinh = tinh;
						vm.location.huyen = huyen;
						vm.location.xa = xa;
						diaChinh.tinhKhongDau = window.RewayUtil.locDau(tinh);
						diaChinh.huyenKhongDau = window.RewayUtil.locDau(huyen);
						diaChinh.xaKhongDau = window.RewayUtil.locDau(xa);
						var placeType = 'T';
						if (diaChinh.huyenKhongDau) placeType = 'H';
						if (diaChinh.xaKhongDau) placeType = 'X';
						var diaChinhDto = {
							tinhKhongDau: diaChinh.tinhKhongDau,
							huyenKhongDau: diaChinh.huyenKhongDau,
							xaKhongDau: diaChinh.xaKhongDau,
							placeType: placeType
						};
						HouseService.getPlaceByDiaChinhKhongDau(diaChinhDto).then(function (res) {
							if (res) {
								vm.diaChinh = res.data.diaChinh;
								vm.duAn = res.data.duAn;
								vm.ads.place.diaChi = vm.diaChinh.fullName;
								vm.ads.place.diaChinh.codeTinh = vm.diaChinh.tinh;
								vm.ads.place.diaChinh.codeHuyen = vm.diaChinh.huyen;
								vm.ads.place.diaChinh.codeXa = vm.diaChinh.xa;
								vm.ads.place.diaChinh.tinh = vm.location.tinh;
								vm.ads.place.diaChinh.huyen = vm.location.huyen;
								vm.ads.place.diaChinh.xa = vm.location.xa;
								vm.ads.place.geo.lat = vm.location.lat;
								vm.ads.place.geo.lon = vm.location.lon;

								if (!isInit) $("#duAnLbl").text("");
								console.log(vm.diaChinh);
								console.log(vm.duAn);
							}
						});
					});
				} else {
					var place = vm.googlePlaces[0];
					vm.autoCompleteText = place.formatted_address;
					for (var i = 0; i < vm.googlePlaces.length; i++) {
						var xa = window.RewayPlaceUtil.getXa(vm.googlePlaces[i]);
						if (xa != '') {
							place = vm.googlePlaces[i];
							break;
						}
					}
					var tinh = window.RewayPlaceUtil.getTinh(place);
					var huyen = window.RewayPlaceUtil.getHuyen(place);
					var xa = window.RewayPlaceUtil.getXa(place);
					var diaChinh = {};
					vm.location.tinh = tinh;
					vm.location.huyen = huyen;
					vm.location.xa = xa;
					diaChinh.tinhKhongDau = window.RewayUtil.locDau(tinh);
					diaChinh.huyenKhongDau = window.RewayUtil.locDau(huyen);
					diaChinh.xaKhongDau = window.RewayUtil.locDau(xa);
					var placeType = 'T';
					if (diaChinh.huyenKhongDau) placeType = 'H';
					if (diaChinh.xaKhongDau) placeType = 'X';
					var diaChinhDto = {
						tinhKhongDau: diaChinh.tinhKhongDau,
						huyenKhongDau: diaChinh.huyenKhongDau,
						xaKhongDau: diaChinh.xaKhongDau,
						placeType: placeType
					};
					HouseService.getPlaceByDiaChinhKhongDau(diaChinhDto).then(function (res) {
						if (res) {
							vm.diaChinh = res.data.diaChinh;
							vm.duAn = res.data.duAn;
							vm.ads.place.diaChi = vm.diaChinh.fullName;
							vm.ads.place.diaChinh.codeTinh = vm.diaChinh.tinh;
							vm.ads.place.diaChinh.codeHuyen = vm.diaChinh.huyen;
							vm.ads.place.diaChinh.codeXa = vm.diaChinh.xa;
							vm.ads.place.diaChinh.tinh = vm.location.tinh;
							vm.ads.place.diaChinh.huyen = vm.location.huyen;
							vm.ads.place.diaChinh.xa = vm.location.xa;
							vm.ads.place.geo.lat = vm.location.lat;
							vm.ads.place.geo.lon = vm.location.lon;

							if (!isInit) $("#duAnLbl").text("");
							console.log(vm.diaChinh);
							console.log(vm.duAn);
						}
					});
				}
			};

			/*
	  // lay luon dia chinh theo danh muc chuan hoa
	  vm.getDiaChinhInDb = function(lat, lon, isInit){
	  	vm.getGeoCode(lat, lon, function(res){
	  		if(res.results){
	  			var places = res.results;
	  			var newPlace = places[0];
	  			for (var i=0; i<places.length; i++) {
	  				var xa = window.RewayPlaceUtil.getXa(places[i]);
	  				if (xa != '') {
	  					newPlace = places[i];
	  					break;
	  				}
	  			}
	  			var tinh = window.RewayPlaceUtil.getTinh(newPlace);
	  			var huyen = window.RewayPlaceUtil.getHuyen(newPlace);
	  			var xa = window.RewayPlaceUtil.getXa(newPlace);
	  			var diaChinh = {};
	  			vm.location.tinh = tinh;
	  			vm.location.huyen = huyen;
	  			vm.location.xa = xa;
	  			diaChinh.tinhKhongDau = window.RewayUtil.locDau(tinh);
	  			diaChinh.huyenKhongDau = window.RewayUtil.locDau(huyen);
	  			diaChinh.xaKhongDau = window.RewayUtil.locDau(xa);
	  			var placeType = 'T';
	  			if (diaChinh.huyenKhongDau)
	  				placeType = 'H';
	  			if (diaChinh.xaKhongDau)
	  				placeType = 'X';
	  			var diaChinhDto = {
	  				tinhKhongDau: diaChinh.tinhKhongDau,
	  				huyenKhongDau: diaChinh.huyenKhongDau,
	  				xaKhongDau: diaChinh.xaKhongDau,
	  				placeType: placeType
	  			}
	  			HouseService.getPlaceByDiaChinhKhongDau(diaChinhDto).then(function(res){
	  				if(res){
	  					vm.diaChinh = res.data.diaChinh;
	  					vm.duAn = res.data.duAn;
	  					vm.ads.place.diaChi = vm.diaChinh.fullName;
	  					vm.ads.place.diaChinh.codeTinh = vm.diaChinh.tinh;
	  					vm.ads.place.diaChinh.codeHuyen = vm.diaChinh.huyen;
	  					vm.ads.place.diaChinh.codeXa = vm.diaChinh.xa;
	  					vm.ads.place.diaChinh.tinh = vm.location.tinh;
	  					vm.ads.place.diaChinh.huyen = vm.location.huyen;
	  					vm.ads.place.diaChinh.xa = vm.location.xa;
	  					vm.ads.place.geo.lat = vm.location.lat;
	  					vm.ads.place.geo.lon = vm.location.lon;
	  							vm.autoCompleteText = vm.diaChinh.fullName;
	  					if(!isInit)
	  						$("#duAnLbl").text("");
	  					console.log(vm.diaChinh);
	  					console.log(vm.duAn);
	  				}
	  			});
	  		}
	  	})
	  }*/

			vm.getGeoCode = function (lat, lon, callback) {
				var url = "https://maps.googleapis.com/maps/api/geocode/json?" + "key=AIzaSyAnioOM0qiWwUoCz8hNS8B2YuzKiYYaDdU" + "&latlng=" + lat + ',' + lon;

				console.log(url);

				return fetch(url).then(function (response) {
					return response.json();
				}).then(function (data) {
					console.log(data);
					callback(data);
				}).catch(function (e) {
					return e;
				});
			};

			vm.showFullMap = function () {
				vm.showStreetView = false;
				$('#mapsBoxPost').modal("show");
			};

			vm.initMapData = function () {
				$('#mapsBoxPost').on('show.bs.modal', function (e) {
					$timeout(function () {
						if (!vm.fullMapPost) {
							vm.fullMapPost = NgMap.initMap('fullMapPost');
							/*var infoWnd = new google.maps.InfoWindow({
	      	content :  "<font color='#FF0000'>Vị trí lựa chọn</font>",
	      	position : vm.fullMapPost.getCenter(),
	      	backgroundColor: 'rgb(57,57,57)',
	      	borderWidth: 1,
	      	borderColor: '#2c2c2c',
	      	disableAutoPan: true
	      });
	      infoWnd.open(vm.fullMapPost);
	      */
							google.maps.event.addListener(vm.fullMapPost, "click", function (event) {
								vm.location.lat = event.latLng.lat();
								vm.location.lon = event.latLng.lng();
								console.log("------------lat: " + vm.location.lat);
								console.log("------------lon: " + vm.location.lon);
							});

							google.maps.event.addListener(vm.fullMapPost, "center_changed", function () {
								// infoWnd.setContent("<font color='#FF0000'>Vị trí lựa chọn</font>");
								// infoWnd.setPosition(vm.fullMapPost.getCenter());
								// infoWnd.open(vm.fullMapPost);
								vm.location.lat = vm.fullMapPost.getCenter().lat();
								vm.location.lon = vm.fullMapPost.getCenter().lng();

								$timeout(function () {
									vm.getDiaChinhGoogle(vm.location.lat, vm.location.lon);
								}, 300);

								console.log("----------movecusor--lat: " + vm.location.lat);
								console.log("---------movecusor---lon: " + vm.location.lon);
							});
						}
						/*
	      vm.fullMapPost.getStreetView().setVisible(vm.showStreetView);
	      if(vm.showStreetView == true){
	      console.log("------------show.bs.modal----3------");
	      vm.fullMapPost.getStreetView().setPosition(vm.ads.streetviewLatLng);
	      // vm.showStreetView = false;
	      }*/
					}, 300);
				});
			};

			vm.initPost = function () {
				//vm.getDanhMucNamXd();
				$("#projectBoxPost .type-list li a").click(function () {
					$(".project-box .collapse-title span label").html($(this).html());
				});
				vm.initMapData();
				initDataPost();

				RewayCommonUtil.placeAutoCompletePost(vm.selectPlaceCallback, "searchAddPost");
				$(".btn-more .collapse-title").click(function () {
					$(this).parent().hide(), $(".more-box").removeClass("more-box-hide");
				});

				//vm.updateDrumsPost();

				$(".post").animate({
					right: 0
				}, 120);
				$("body").addClass("bodySearchShow");
				$(".post").scrollTop(0);
				$(".post-footer").addClass("fixed");
				overlay(".overlay");

				Hammer.plugins.fakeMultitouch();
				$("select#yearBuild").drum({
					onChange: function onChange(selected) {
						$("#" + selected.id + "_value").html($(selected).find(":selected").html());
						if (selected.id == "yearBuild") {
							vm.ads.namXayDung = selected.value;
						}
						if (selected.selectedIndex == 0) {
							vm.ads.namXayDung = null;
							$("#yearBuild_value").text("Bất kỳ");
						}
					}
				});
			};
			function initDataPost() {
				console.log("---------------initDataPost---------------");
				console.log($rootScope.user);
				if (vm.adsID) {
					HouseService.getUpdateAds({ adsID: vm.adsID }).then(function (res) {
						console.log("-------------------------initData with adsId--------");
						vm.ads = res.data.data;
						console.log(vm.ads);
						if (navigator.geolocation) {
							navigator.geolocation.getCurrentPosition(function (position) {
								console.log(position);
								$rootScope.currentLocation.lat = position.coords.latitude;
								$rootScope.currentLocation.lon = position.coords.longitude;
								$scope.currentLocation = $rootScope.currentLocation;
							}, function (error) {
								console.log(error);
							});
						} else {
							console.log("------------not navigator.geolocation----------------");
						}
						if (vm.ads.place.geo) {
							vm.location.lat = vm.ads.place.geo.lat;
							vm.location.lon = vm.ads.place.geo.lon;
							$scope.location.lat = vm.location.lat;
							$scope.location.lon = vm.location.lon;
							vm.getDiaChinhInDb(vm.location.lat, vm.location.lon, true);
						}
						if (vm.ads.place.diaChinh.duAn) {
							$("#duAnLbl").text(vm.ads.place.diaChinh.duAn.length > 30 ? vm.ads.place.diaChinh.duAn.substring(0, 30) + "..." : vm.ads.place.diaChinh.duAn);
						}

						if (vm.ads.loaiTin == 0) {
							vm.loaiNhaDat = vm.loaiNhaDatBan;
						} else {
							vm.loaiNhaDat = vm.loaiNhaDatThue;
						}

						if (vm.ads.loaiNhaDat) {
							$scope.loaiNhaDat = vm.ads.loaiNhaDat;
						}

						if (vm.ads.loaiNhaDat) {
							if (vm.ads.loaiTin == 0) {
								for (var i = 0; i < vm.loaiNhaDatBan.length; i++) {
									if (parseInt(vm.loaiNhaDatBan[i].value) == vm.ads.loaiNhaDat) {
										$("#loaiNhaLbl").text(vm.loaiNhaDatBan[i].lable > 30 ? vm.loaiNhaDatBan[i].lable.substring(0, 30) + "..." : vm.loaiNhaDatBan[i].lable);
										break;
									}
								}
							} else {
								for (var i = 0; i < vm.loaiNhaDatThue.length; i++) {
									if (parseInt(vm.loaiNhaDatThue[i].value) == vm.ads.loaiNhaDat) {
										$("#loaiNhaLbl").text(vm.loaiNhaDatThue[i].lable > 30 ? vm.loaiNhaDatThue[i].lable.substring(0, 30) + "..." : vm.loaiNhaDatThue[i].lable);
										break;
									}
								}
							}
						}

						if (vm.ads.huongNha) {
							for (var i = 0; i < vm.huongNhaList.length; i++) {
								if (parseInt(vm.huongNhaList[i].value) == parseInt(vm.ads.huongNha)) {
									$("#huongNhaLbl").text(vm.huongNhaList[i].lable > 30 ? vm.huongNhaList[i].lable.substring(0, 30) + "..." : vm.huongNhaList[i].lable);
									break;
								}
							}
						}

						if (vm.ads.gia >= 1000) {
							vm.gia = vm.ads.gia / 1000;
							vm.gia = Math.round(vm.gia * 1000) / 1000;
							vm.loaiGia = vm.loaiGias[1];
							$("#lblGiaPost").text(vm.gia + " Tỷ");
						} else if (vm.ads.gia < 1000 && vm.ads.gia > -1) {
							vm.gia = vm.ads.gia;
							vm.loaiGia = vm.loaiGias[0];
							$("#lblGiaPost").text(vm.gia + " Triệu");
						} else {
							vm.gia = null;
							vm.loaiGia = vm.loaiGias[4];
							$("#lblGiaPost").text("Thỏa thuận");
						}

						var lienHeTxt = null;
						if (vm.ads.lienHe.tenLienLac && vm.ads.lienHe.tenLienLac.trim().length > 0) {
							lienHeTxt = vm.ads.lienHe.tenLienLac;
						}
						if (vm.ads.lienHe.phone && vm.ads.lienHe.phone.trim().length > 0) {
							if (lienHeTxt.trim().length > 0) {
								lienHeTxt = lienHeTxt + '-' + vm.ads.lienHe.phone;
							} else {
								lienHeTxt = vm.ads.lienHe.phone;
							}
						}
						$("#lienHeLbl").text(lienHeTxt);

						if (vm.ads.namXayDung) {
							for (var i = 0; i < $scope.namXayDungList.length; i++) {
								if ($scope.namXayDungList[i].value == parseInt(vm.ads.namXayDung)) {
									$("select#yearBuild").drum('setIndex', i);
									$("#yearBuild_value").text(vm.ads.namXayDung);
									break;
								}
							}
						}
					});
				} else {
					vm.ads.image = {};
					vm.ads.image.cover = '';
					vm.ads.image.images = [];

					vm.ads.place = {
						diaChi: '',
						diaChinh: {
							codeTinh: '',
							codeHuyen: '',
							codeXa: '',
							codeDuAn: '',
							tinh: '',
							huyen: '',
							xa: '',
							duAn: ''
						},
						geo: { lat: '', lon: '' }
					};

					vm.ads.chiTiet = '';
					vm.ads.nhaMoiXay = false;
					vm.ads.nhaLoGoc = false;
					vm.ads.otoDoCua = false;
					vm.ads.nhaKinhDoanhDuoc = false;
					vm.ads.noiThatDayDu = false;
					vm.ads.chinhChuDangTin = false;

					if (!$rootScope.user.userID) {
						if ($localStorage.relandToken) {
							var decodedToken = {};
							decodedToken = jwtHelper.decodeToken($localStorage.relandToken);
							HouseService.profile({ userID: decodedToken.userID }).then(function (res) {
								if (res.data.success == true) $rootScope.user = res.data.user;
								vm.ads.lienHe = {
									showTenLienLac: false,
									showPhone: false,
									showEmail: false
								};
								if ($rootScope.user.fullName) {
									vm.ads.lienHe.tenLienLac = $rootScope.user.fullName;
									vm.ads.lienHe.showTenLienLac = true;
								}
								if ($rootScope.user.phone) {
									vm.ads.lienHe.phone = $rootScope.user.phone;
									vm.ads.lienHe.showPhone = true;
								}
								if ($rootScope.user.email) {
									vm.ads.lienHe.email = $rootScope.user.userEmail;
									vm.ads.lienHe.showEmail = true;
								}
							});
						}
					} else {
						vm.ads.lienHe = {
							showTenLienLac: false,
							showPhone: false,
							showEmail: false
						};
						if ($rootScope.user.fullName) {
							vm.ads.lienHe.tenLienLac = $rootScope.user.fullName;
							vm.ads.lienHe.showTenLienLac = true;
						}
						if ($rootScope.user.phone) {
							vm.ads.lienHe.phone = $rootScope.user.phone;
							vm.ads.lienHe.showPhone = true;
						}
						if ($rootScope.user.email) {
							vm.ads.lienHe.email = $rootScope.user.userEmail;
							vm.ads.lienHe.showEmail = true;
						}
					}

					vm.selectLoaiTin($scope.loaiTin);
					vm.getCurrentLocation();
				}
			}
			/*
	   var setDrumValues = function(select, value){
	   var options = select[0].options;
	   console.log("---------setDrumValues-----------");
	   console.log("---------1-----------");
	   console.log(options);
	  		 for(var i =0;i<options.length;i++){
	   console.log(i);
	   console.log(options[i]);
	   if(options[i].value==value){
	   console.log("---vao----");
	   select.drum('setIndex', i);
	   $("#"+select.attr("id") + "_value").html(options[i].label);
	   break;
	   }
	   }
	  		 }
	  
	  		 vm.updateDrumsPost = function(){
	   //set years drum
	   var yearXd = vm.ads.namXayDung;
	   var yearXdElm = $("select#yearBuild");
	   console.log("----------updateDrumsPost---------");
	   console.log("----------1---------");
	   console.log(yearXdElm);
	   setDrumValues(yearXdElm, yearXd);
	   }
	   */

			Date.prototype.yyyymmdd = function () {
				var mm = this.getMonth() + 1; // getMonth() is zero-based
				mm = mm >= 10 ? mm : '0' + mm;
				var dd = this.getDate();
				dd = dd >= 10 ? dd : '0' + dd;

				return [this.getFullYear(), mm, dd].join(''); // padding
			};

			vm.dangTin = function (isValid) {

				if (isValid) {
					console.log("--------------dangTin----------------");
					if (vm.ads.place.diaChi) {
						if (vm.ads.place.diaChiChiTiet) {
							vm.ads.place.diaChi = vm.ads.place.diaChiChiTiet + ", " + vm.ads.place.diaChi;
						}
					}
					if ($rootScope.user) {
						vm.ads.dangBoi = {};
						if ($rootScope.user.userName) {
							vm.ads.dangBoi.name = $rootScope.user.userName;
						}
						if ($rootScope.user.phone) {
							vm.ads.dangBoi.name = $rootScope.user.phone;
						}
						if ($rootScope.user.userEmail) {
							vm.ads.dangBoi.email = $rootScope.user.userEmail;
						}
						if ($rootScope.user.userID) {
							vm.ads.dangBoi.userID = $rootScope.user.userID;
						}
					}

					vm.ads.duongTruocNha = parseFloat(vm.ads.duongTruocNha);
					vm.ads.matTien = parseFloat(vm.ads.matTien);
					vm.ads.huongNha = parseFloat(vm.ads.huongNha);

					var date = new Date();
					vm.ads.ngayDangTin = date.yyyymmdd();

					if (vm.gia) vm.gia = parseFloat(vm.gia);
					if (vm.ads.dienTich) vm.ads.dienTich = parseFloat(vm.ads.dienTich);

					if (vm.loaiGia.value == 0) {
						vm.ads.gia = -1;
						vm.ads.giaM2 = -1;
					} else if (vm.loaiGia.value == 1) {
						vm.ads.gia = vm.gia;
						var giaM2 = vm.ads.gia / vm.ads.dienTich;
						giaM2 = parseFloat(giaM2);
						vm.ads.giaM2 = Math.round(giaM2 * 1000) / 1000;
					} else if (vm.loaiGia.value == 2) {
						vm.ads.gia = vm.gia * 1000;
						var giaM2 = vm.ads.gia / vm.ads.dienTich;
						giaM2 = parseFloat(giaM2);
						vm.ads.giaM2 = Math.round(giaM2 * 1000) / 1000;
					} else if (vm.loaiGia.value == 3) {
						vm.ads.giaM2 = vm.gia / 10;
						var gia = vm.ads.giaM2 * vm.ads.dienTich;
						gia = parseFloat(gia);
						vm.ads.gia = Math.round(gia * 1000) / 1000;
					} else if (vm.loaiGia.value == 4) {
						vm.ads.giaM2 = vm.gia;
						var gia = vm.ads.giaM2 * vm.ads.dienTich;
						gia = parseFloat(gia);
						vm.ads.gia = Math.round(gia * 1000) / 1000;
					}

					console.log("------------danTin-------------1-------------");
					console.log(vm.ads);

					var adsDto = JSON.stringify(vm.ads);

					HouseService.postAds(adsDto).then(function (res) {
						console.log("------------HouseService.postAds-------------");
						console.log(res);
						$state.go('madsMgmt');
					});
				} else {
					console.log("--------------invalid----------------");
					console.log(angular.element('input.ng-invalid').first());
					angular.element('input.ng-invalid').first().focus();
				}
			};

			vm.selectLoaiTin = function (loaiTin) {
				console.log("--------------selectLoaiTin----------------");
				$scope.loaiTin = loaiTin;
				if (loaiTin == 0) {
					vm.loaiNhaDat = vm.loaiNhaDatBan;
				} else {
					vm.loaiNhaDat = vm.loaiNhaDatThue;
				}

				if (vm.ads.loaiTin != loaiTin) {
					vm.ads.loaiTin = loaiTin;
					vm.ads.loaiNhaDat = 0;
					$scope.loaiNhaDat = null;
					$("#loaiNhaLbl").text("Bất kỳ");
				}
			};

			vm.selectLoaiNhaDat = function (lnd) {
				vm.ads.loaiNhaDat = parseFloat(lnd.value);
				if (vm.ads.loaiTin == 0) {
					if (vm.ads.loaiNhaDat == 0) {
						$scope.loaiNhaDat = null;
					} else {
						$scope.loaiNhaDat = vm.ads.loaiNhaDat;
					}
					$("#loaiNhaLbl").text(lnd.lable);
				} else {
					if (vm.ads.loaiNhaDat == 0) {
						$scope.loaiNhaDat = null;
					} else {
						$scope.loaiNhaDat = vm.ads.loaiNhaDat;
					}
					$("#loaiNhaLbl").text(lnd.lable);
				}
			};

			vm.selectLoaiNhaDat(vm.loaiNhaDatBan[0]);

			vm.selectHuongNha = function (hn) {
				vm.ads.huongNha = hn.value;
				$("#huongNhaLbl").text(hn.lable);
			};

			vm.selectLoaiGia = function (lg) {
				vm.loaiGia = lg;
				if (vm.loaiGia.value == 0) {
					vm.ads.gia = -1;
					vm.ads.giaM2 = -1;
					$("#giaTienPost").prop("readonly", true);
					$("#lblGiaPost").text(vm.loaiGia.lable);
				} else {
					$("#giaTienPost").prop("readonly", false);
					if (vm.gia && vm.gia > 0) {
						vm.gia = parseFloat(vm.gia);
						$("#lblGiaPost").text(vm.gia + " " + vm.loaiGia.lable);
						if (vm.loaiGia.value == 1) {
							vm.ads.gia = vm.gia;
							var giaM2 = vm.ads.gia / vm.ads.dienTich;
							giaM2 = parseFloat(giaM2);
							vm.ads.giaM2 = Math.round(giaM2 * 1000) / 1000;
						} else if (vm.loaiGia.value == 2) {
							vm.ads.gia = vm.gia * 1000;
							var giaM2 = vm.ads.gia / vm.ads.dienTich;
							giaM2 = parseFloat(giaM2);
							vm.ads.giaM2 = Math.round(giaM2 * 1000) / 1000;
						} else if (vm.loaiGia.value == 3) {
							vm.ads.giaM2 = vm.gia / 10;
							var gia = vm.ads.giaM2 * vm.ads.dienTich;
							gia = parseFloat(gia);
							vm.ads.gia = Math.round(gia * 1000) / 1000;
						} else if (vm.loaiGia.value == 4) {
							vm.ads.giaM2 = vm.gia;
							var gia = vm.ads.giaM2 * vm.ads.dienTich;
							gia = parseFloat(gia);
							vm.ads.gia = Math.round(gia * 1000) / 1000;
						}
					}
				}
			};

			vm.changeGiaTien = function () {
				if (vm.loaiGia.value == 0) {
					vm.ads.gia = -1;
					vm.ads.giaM2 = -1;
					$("#lblGiaPost").text(vm.loaiGia.lable);
				} else {
					$("#lblGiaPost").text(vm.gia + " " + vm.loaiGia.lable);
					vm.gia = parseFloat(vm.gia);
					if (vm.loaiGia.value == 1) {
						vm.ads.gia = vm.gia;
						var giaM2 = vm.ads.gia / vm.ads.dienTich;
						giaM2 = parseFloat(giaM2);
						vm.ads.giaM2 = Math.round(giaM2 * 1000) / 1000;
					} else if (vm.loaiGia.value == 2) {
						vm.ads.gia = vm.gia * 1000;
						var giaM2 = vm.ads.gia / vm.ads.dienTich;
						giaM2 = parseFloat(giaM2);
						vm.ads.giaM2 = Math.round(giaM2 * 1000) / 1000;
					} else if (vm.loaiGia.value == 3) {
						vm.ads.giaM2 = vm.gia / 10;
						var gia = vm.ads.giaM2 * vm.ads.dienTich;
						gia = parseFloat(gia);
						vm.ads.gia = Math.round(gia * 1000) / 1000;
					} else if (vm.loaiGia.value == 4) {
						vm.ads.giaM2 = vm.gia;
						var gia = vm.ads.giaM2 * vm.ads.dienTich;
						gia = parseFloat(gia);
						vm.ads.gia = Math.round(gia * 1000) / 1000;
					}
				}
			};

			vm.selectDuAn = function (da) {
				vm.ads.place.diaChinh.codeDuAn = da.duAn;
				vm.ads.place.diaChinh.duAn = da.fullName;
				$("#duAnLbl").text(da.placeName.length > 30 ? da.placeName.substring(0, 30) + "..." : da.placeName);
				console.log(vm.ads.place.diaChinh.codeDuAn);
			};

			vm.setSoPhongNgu = function (value) {
				vm.ads.soPhongNgu = value;
				console.log(vm.ads.soPhongNgu);
				if (vm.ads.soPhongNgu && vm.ads.soPhongNgu != $scope.soPhongNgu) {
					$scope.soPhongNgu = '';
				}
			};
			vm.setSoTang = function (value) {
				vm.ads.soTang = value;
				console.log(vm.ads.soTang);
				if (vm.ads.soTang && vm.ads.soTang != $scope.soTang) {
					$scope.soTang = '';
				}
			};

			vm.setSoPhongTam = function (value) {
				vm.ads.soPhongTam = value;
				console.log(vm.ads.soPhongTam);
				if (vm.ads.soPhongTam && vm.ads.soPhongTam != $scope.soPhongTam) {
					$scope.soPhongTam = '';
				}
			};

			vm.toggleShowTenLL = function () {
				vm.ads.lienHe.showTenLienLac = !vm.ads.lienHe.showTenLienLac;
			};

			vm.toggleShowPhone = function () {
				vm.ads.lienHe.showPhone = !vm.ads.lienHe.showPhone;
			};

			vm.toggleShowEmail = function () {
				vm.ads.lienHe.showEmail = !vm.ads.lienHe.showEmail;
			};

			vm.changeLienHeLbl = function (hn) {
				var lienHeTxt = '';
				if (vm.ads.lienHe.tenLienLac && vm.ads.lienHe.tenLienLac.trim().length > 0) {
					lienHeTxt = vm.ads.lienHe.tenLienLac;
				}
				if (vm.ads.lienHe.phone && vm.ads.lienHe.phone.trim().length > 0) {
					if (lienHeTxt.trim().length > 0) {
						lienHeTxt = lienHeTxt + '-' + vm.ads.lienHe.phone;
					} else {
						lienHeTxt = vm.ads.lienHe.phone;
					}
				}
				$("#lienHeLbl").text(lienHeTxt);
			};

			vm.spinner = function (event, box, item) {
				var me = event.target;
				me = $(me).closest('a');
				if (me.parent().find($(box)).hasClass(item)) {
					me.parent().find($(box)).removeClass(item);
					me.find("i").addClass("iconUpOpen").removeClass("iconDownOpen");
				} else {
					me.parent().find($(box)).addClass(item);
					me.find("i").addClass("iconDownOpen").removeClass("iconUpOpen");
				}
			};

			$timeout(function () {
				vm.initPost();
			}, 300);

			$scope.uploadFiles = function (files) {
				var async = __webpack_require__(33);
				if ($rootScope.isLoggedIn() == false) {
					$scope.$bus.publish({
						channel: 'login',
						topic: 'show login',
						data: { label: "Đăng nhập để lưu BĐS" }
					});
					return;
				}

				$scope.files = files;
				if (files && files.length) {

					async.forEach(files, function (myFile) {
						var fileName = myFile.name;
						console.log(fileName);
						fileName = fileName.substring(fileName.lastIndexOf("."), fileName.length);
						fileName = "Ads_" + $rootScope.user.userID + "_" + new Date().getTime() + fileName;

						Upload.upload({
							url: '/api/upload',
							data: { files: myFile, filename: fileName }
						}).then(function (resp) {
							console.log('Success ' + resp.config.data.files.name + 'uploaded. Response: ' + resp.data);

							$timeout(function () {
								var fileUrl = location.protocol;
								fileUrl = fileUrl.concat("//").concat(window.location.host).concat(resp.data.file.url);

								console.log("----fileUrl: " + fileUrl);
								if (vm.ads.image.cover.trim().length == 0) {
									vm.ads.image.cover = fileUrl;
								} else {
									vm.ads.image.images.push(fileUrl);
								}
							}, 100);
						}, function (resp) {
							console.log('Error status: ' + resp.status);
						}, function (evt) {
							var progressPercentage = parseInt(100.0 * evt.loaded / evt.total);
							console.log('progress: ' + progressPercentage + '% ' + evt.config.data.files.name);
						});
					}, function (err) {
						if (err) {
							throw err;
						}
						console.log("processing all elements completed");
					});
				}
			};
		});
	})();

/***/ },
/* 38 */
/***/ function(module, exports) {

	'use strict';

	(function () {
		'use strict';

		var controllerId = 'MobileAdsMgmtCtrl';
		angular.module('bds').controller(controllerId, function ($rootScope, $http, $scope, Upload, $state, HouseService, NewsService, RewayCommonUtil, NgMap, $window, $timeout, $location, $localStorage) {
			var vm = this;

			vm.adsLikes = [];
			vm.adsSales = [];
			vm.adsRents = [];

			vm.goDetail = function (ads) {
				$state.go('mdetail', { "adsID": ads.adsID });
			};

			vm.updateAds = function (ads) {
				console.log("------------------updateAds-------------");
				$state.go('mpost', { "adsID": ads.adsID });
			};

			vm.deleteAds = function (ads, loaiTin) {
				console.log("------------------deleteAds-------------");
				var avatarImage = ads.image.cover;
				var imgList = ads.image.images;
				HouseService.deleteAds({ adsID: ads.adsID }).then(function (res) {
					console.log("------------------callService-------------");
					console.log(res);
					if (res.status == 200) {
						if (loaiTin == 0) {
							var index = vm.adsSales.indexOf(ads);
							vm.adsSales.splice(index, 1);
						} else {
							var index = vm.adsRents.indexOf(ads);
							vm.adsRents.splice(index, 1);
						}
						if (avatarImage) {
							HouseService.deleteFile({ fileUrl: avatarImage.trim() }).then(function (res) {
								console.log(res);
							});
						}
						if (imgList) {
							for (var i = 0; i < imgList.length; i++) {
								HouseService.deleteFile({ fileUrl: imgList[i].trim() }).then(function (res) {
									console.log(res);
								});
							}
						}
					}
				});
			};

			vm.initAdsLikesData = function () {
				if ($rootScope.user && $rootScope.user.userID) {
					HouseService.getAdsLikes({ userID: $rootScope.user.userID }).then(function (res) {
						if (res.status == 200) {
							if (res.data.data) {
								for (var i = 0; i < res.data.data.length; i++) {
									vm.adsLikes.push(res.data.data[i]);
								}
							}
						}
						console.log("------------initLikes---------------");
						console.log(vm.adsLikes);
					});
				}
			};

			vm.initAdsSaleRents = function () {
				if ($rootScope.user && $rootScope.user.userID) {
					HouseService.getMyAds({ userID: $rootScope.user.userID }).then(function (res) {
						console.log("------------initAdsSaleRent---------------");
						console.log(res);
						if (res.status == 200) {
							if (res.data.data) {
								for (var i = 0; i < res.data.data.length; i++) {
									if (res.data.data[i].loaiTin == 0) {
										vm.adsSales.push(res.data.data[i]);
									} else if (res.data.data[i].loaiTin == 1) {
										vm.adsRents.push(res.data.data[i]);
									}
								}
							}
						}
					});
				}
			};
			/*
	  		vm.scrollElement = function(){
	  			console.log("-------------scrollElement--121-----");
	  			$('#banId').click(function (e) {
	  				$('html, body').animate({
	  					scrollTop: $('#managerBuy').offset().top - 1
	  				}, 'slow');
	  			});
	  
	  			console.log("-------------scrollElement--1-----");
	  
	  		}
	  */
			vm.unlikeAds = function (event, ads) {
				console.log("------------unlikeAds---------------");
				$(event.target).attr('class', 'icon-heart refresh');
				$(event.target).unbind();
				if ($rootScope.user && $rootScope.user.userID) {
					HouseService.unlikeAds({ userID: $rootScope.user.userID, adsID: ads.adsID }).then(function (res) {
						if (res.status == 200) {
							var index = vm.adsLikes.indexOf(ads);
							vm.adsLikes.splice(index, 1);
						}
						console.log(vm.adsLikes);
					});
				}
			};

			vm.init = function () {
				vm.initAdsLikesData();
				vm.initAdsSaleRents();
			};

			$timeout(function () {
				vm.init();
			}, 300);
		});
	})();

/***/ },
/* 39 */
/***/ function(module, exports) {

	'use strict';

	(function () {
	    'use strict';

	    var controllerId = 'MobileListAdsCtrl';
	    angular.module('bds').controller(controllerId, function ($rootScope, $http, $scope, $state, HouseService, NewsService, NgMap, $window, $timeout, $location, $localStorage) {
	        var vm = this;
	        vm.likeAds = function (event, adsID) {
	            //event.stopPropagation();
	            if ($rootScope.isLoggedIn() == false) {
	                $scope.$bus.publish({
	                    channel: 'login',
	                    topic: 'show login',
	                    data: { label: "Đăng nhập để lưu BĐS" }
	                });
	                return;
	            }
	            if (!$rootScope.user.adsLikes) {
	                $rootScope.user.adsLikes = [];
	            }
	            var ind = $rootScope.user.adsLikes.indexOf(adsID);
	            if (ind >= 0) {
	                HouseService.unlikeAds({ userID: $rootScope.user.userID, adsID: adsID }).then(function (res) {
	                    if (res.status == 200) {
	                        var index = $rootScope.user.adsLikes.indexOf(adsID);
	                        $rootScope.user.adsLikes.splice(index, 1);
	                    }
	                });
	            } else {
	                HouseService.likeAds({ adsID: adsID, userID: $rootScope.user.userID }).then(function (res) {
	                    //alert(res.data.msg);
	                    //console.log(res);
	                    if (res.data.success == true || res.data.status == 1) {
	                        $rootScope.user.adsLikes.push(adsID);
	                    }
	                });
	            }
	        };
	        vm.goDetail = function (event, i) {
	            $state.go('mdetail', { "adsID": vm.adsList[i].adsID }, { location: true });
	        };
	        vm.init = function () {
	            vm.doneSearch = false;
	            if ($state.params.query) {
	                vm.searchData = $state.params.query;
	                vm.searchData.isIncludeCountInResponse = false;
	                vm.searchData.limit = 200;
	                vm.searchData.updateLastSearch = false;

	                HouseService.findAdsSpatial(vm.searchData).then(function (res) {
	                    vm.adsList = res.data.list;
	                    vm.doneSearch = true;
	                });
	            }
	        };
	        vm.init();
	    });
	})();

/***/ },
/* 40 */
/***/ function(module, exports) {

	'use strict';

	angular.module('bds').directive('bdsMobileLeftMenu', ['$timeout', function ($timeout) {
	    var def = {
	        restrict: 'E',
	        scope: {},
	        terminal: true,
	        templateUrl: "/web/common/directives/mobile/bds-mobile-left-menu.tpl.html",
	        replace: 'true',
	        controller: ['$state', 'socket', '$scope', '$rootScope', '$http', '$window', '$localStorage', 'HouseService', function ($state, socket, $scope, $rootScope, $http, $window, $localStorage, HouseService) {
	            var vm = this;
	            vm.gotoHomePage = function (event) {
	                vm.hideMenuLeft();
	                $state.go('mhome', {}, { location: true });
	                $(".overlay").click();
	            };
	            vm.showLogin = function (event) {
	                //$('#loginBox').fadeIn(500);
	                //window.loca
	            };

	            vm.gotoSearchPage = function (event) {
	                console.log("-------vao msearch");
	                $state.go('msearch', { "place": 'ChIJoRyG2ZurNTERqRfKcnt_iOc', "loaiTin": 0, "loaiNhaDat": 0, "viewMode": "list" }, { location: true });
	                $(".overlay").click();
	            };
	            //nhannc
	            vm.hideMenuLeft = function () {
	                $(".overlay").hide();
	                $(".nav_mobile").find("i").removeClass("iconLeftOpen").addClass("iconMenu");
	                $("body").removeClass("bodyNavShow").removeAttr("style");
	                $("nav.main").removeAttr("style");
	            };

	            vm.gotoChatPage = function () {
	                console.log("-------vao mchats");
	                vm.hideMenuLeft();
	                if ($rootScope.isLoggedIn() == false) {
	                    $scope.$bus.publish({
	                        channel: 'login',
	                        topic: 'show login',
	                        data: { label: "Đăng nhập để đăng tin" }
	                    });
	                    return true;
	                }
	                $state.go('mchats');
	                $(".overlay").click();
	            };

	            vm.gotoDangTinPage = function (event) {
	                console.log("-------vao mpost");
	                vm.hideMenuLeft();
	                if ($rootScope.isLoggedIn() == false) {
	                    $scope.$bus.publish({
	                        channel: 'login',
	                        topic: 'show login',
	                        data: { label: "Đăng nhập để đăng tin" }
	                    });
	                    return true;
	                }
	                $state.go('mpost');
	                $(".overlay").click();
	            };
	            vm.gotoQuanLyDangTin = function (event) {
	                console.log("-------vao madsMgmt");
	                vm.hideMenuLeft();
	                if ($rootScope.isLoggedIn() == false) {
	                    $scope.$bus.publish({
	                        channel: 'login',
	                        topic: 'show login',
	                        data: { label: "Đăng nhập để truy cập quản lý tin đăng" }
	                    });
	                    return true;
	                }
	                $state.go('madsMgmt');
	                $(".overlay").click();
	            };
	            //nhannc end
	            vm.showFilter = function () {
	                $scope.$bus.publish({
	                    channel: 'search',
	                    topic: 'show search',
	                    data: null
	                });
	                $(".overlay").click();
	            };
	            vm.gotoRelandApp = function (event) {};
	            vm.profile = function () {
	                $state.go('profile', { userID: $rootScope.user.userID }, { location: true });
	            };
	            vm.signout = function () {
	                $localStorage.relandToken = undefined;
	                // $rootScope.user.userName = undefined;
	                $rootScope.user = {
	                    userID: undefined,
	                    adsLikes: [],
	                    lastSearch: null,
	                    autoSearch: false
	                };
	                $scope.$bus.publish({
	                    channel: 'login',
	                    topic: 'logged out',
	                    data: {}
	                });

	                socket.emit('user leave', { email: $rootScope.user.userEmail, userID: $rootScope.user.userID, username: $rootScope.user.userName, userAvatar: undefined }, function (data) {
	                    console.log("disconect socket user " + $rootScope.user.userName);
	                });
	                $(".overlay").click();
	            };
	        }],
	        controllerAs: "mmn"
	    };
	    return def;
	}]);

/***/ },
/* 41 */
/***/ function(module, exports) {

	'use strict';

	angular.module('bds').directive('bdsMobileFilter', ['$timeout', function ($timeout) {
	    var def = {
	        restrict: 'E',
	        scope: { mode: '=mode', searchData: "=searchData" },
	        terminal: true,
	        templateUrl: "/web/common/directives/mobile/bds-mobile-filter.tpl.html",
	        replace: 'true',
	        controller: ['$state', 'socket', '$scope', '$rootScope', '$http', '$window', '$localStorage', 'HouseService', 'RewayCommonUtil', 'NgMap', function ($state, socket, $scope, $rootScope, $http, $window, $localStorage, HouseService, RewayCommonUtil, NgMap) {
	            var vm = this;
	            $(".btn-more .collapse-title").click(function () {
	                $(this).parent().hide(), $(".more-box").removeClass("more-box-hide");
	            });
	            vm.reset = function () {
	                $(".btn-more").removeAttr("style");
	                $(".more-box").addClass("more-box-hide");
	                $(".spinner").addClass("spinner-hide");
	                $(".spinner").parent().find(".collapse-title i").addClass("iconDownOpen").removeClass("iconUpOpen");
	                $(".btn-group .btn").removeClass("active");
	                $(".btn-group .btn:first-child").addClass("active");
	            };
	            vm.pageSize = 25;
	            vm.initialized = false;
	            vm.keepViewport = true;
	            vm.stateName = $state.current.name;
	            // $scope.searchData = {};
	            // //Object.assign($scope.searchData,$rootScope.searchData);
	            // _.assign($scope.searchData,$rootScope.searchData);
	            // $scope.sd.abc = 'd';

	            vm.loaiNhaDatBan = window.RewayListValue.LoaiNhaDatBanWeb;
	            vm.loaiNhaDatThue = window.RewayListValue.LoaiNhaDatThueWeb;

	            vm.huongNhaList = window.RewayListValue.getNameValueArray(window.RewayListValue.HuongNha);

	            vm.sellPrices = [{
	                value: [0, 9999999999999],
	                lable: "Bất kỳ"
	            }, {
	                value: [0, 500],
	                lable: "<500 triệu"
	            }, {
	                value: [500, 800],
	                lable: "500-800 triệu"
	            }, {
	                value: [800, 1000],
	                lable: "800 triệu - 1 tỷ"
	            }, {
	                value: [1000, 2000],
	                lable: "1-2 tỷ"
	            }, {
	                value: [2000, 3000],
	                lable: "2-3 tỷ"
	            }, {
	                value: [3000, 5000],
	                lable: "3-5 tỷ"
	            }, {
	                value: [5000, 7000],
	                lable: "5-7 tỷ"
	            }, {
	                value: [7000, 10000],
	                lable: "7-10 tỷ"
	            }, {
	                value: [10000, 20000],
	                lable: "10-20 tỷ"
	            }, {
	                value: [20000 - 30000],
	                lable: "20-30 tỷ"
	            }, {
	                value: [30000 - 99999999999999],
	                lable: ">30 tỷ"
	            }];

	            vm.rentPrices = [{
	                value: [0, 9999999999999],
	                lable: "Bất kỳ"
	            }, {
	                value: [0, 1],
	                lable: "<1 triệu"
	            }, {
	                value: [1, 3],
	                lable: "1-3 triệu"
	            }, {
	                value: [3, 5],
	                lable: "3-5 triệu"
	            }, {
	                value: [5, 10],
	                lable: "5-10 triệu"
	            }, {
	                value: [10, 20],
	                lable: "10-20 triệu"
	            }, {
	                value: [20, 40],
	                lable: "20-40 triệu"
	            }, {
	                value: [40, 70],
	                lable: "40-70 triệu"
	            }, {
	                value: [70, 100],
	                lable: "70-100 triệu"
	            }, {
	                value: [100, 999999999999],
	                lable: ">100 triệu"
	            }];
	            vm.areas = [{
	                value: [0, 9999999999999],
	                lable: "Bất kỳ"
	            }, {
	                value: [0, 30],
	                lable: "<30 m2"
	            }, {
	                value: [30, 50],
	                lable: "30-50 m2"
	            }, {
	                value: [50, 80],
	                lable: "50-80 m2"
	            }, {
	                value: [80, 100],
	                lable: "80-100 m2"
	            }, {
	                value: [100, 150],
	                lable: "100-150 m2"
	            }, {
	                value: [150, 200],
	                lable: "150-200 m2"
	            }, {
	                value: [200, 250],
	                lable: "200-250 m2"
	            }, {
	                value: [250, 300],
	                lable: "250-300 m2"
	            }, {
	                value: [300, 500],
	                lable: "300-500 m2"
	            }, {
	                value: [500, 9999999999999999],
	                lable: ">500 m2"
	            }];
	            vm.ngayDangTinList = [{
	                value: "19810101",
	                lable: "Bất kỳ"
	            }, {
	                value: Date.today().add(-1).days().toString('yyyyMMdd'),
	                lable: "1 ngày"
	            }, {
	                value: Date.today().add(-2).days().toString('yyyyMMdd'),
	                lable: "2 ngày"
	            }, {
	                value: Date.today().add(-3).days().toString('yyyyMMdd'),
	                lable: "3 ngày"
	            }, {
	                value: Date.today().add(-5).days().toString('yyyyMMdd'),
	                lable: "5 ngày"
	            }, {
	                value: Date.today().add(-7).days().toString('yyyyMMdd'),
	                lable: "7 ngày"
	            }, {
	                value: Date.today().add(-14).days().toString('yyyyMMdd'),
	                lable: "14 ngày"
	            }, {
	                value: Date.today().add(-30).days().toString('yyyyMMdd'),
	                lable: "30 ngày"
	            }, {
	                value: Date.today().add(-90).days().toString('yyyyMMdd'),
	                lable: "90 ngày"
	            }];

	            vm.selectLoaiTin = function (loaiTin) {
	                $scope.searchData.loaiTin = loaiTin;
	                if ($scope.searchData.loaiTin == 0) {
	                    vm.loaiNhaDat = vm.loaiNhaDatBan;
	                    vm.prices = vm.sellPrices;
	                } else {
	                    vm.loaiNhaDat = vm.loaiNhaDatThue;
	                    vm.prices = vm.rentPrices;
	                }
	            };
	            vm.selectLoaiTin($scope.searchData.loaiTin);

	            vm.selectLoaiNhaDat = function (lnd) {
	                $scope.searchData.loaiNhaDat = [lnd.value];
	                $('#typeBox').modal("hide");
	            };
	            vm.selectHuongNha = function (hn) {
	                $scope.searchData.huongNha = [hn.value];
	                $('#trendBox').modal("hide");
	            };

	            vm.setSearchDataSpn = function (val) {
	                $scope.searchData.soPhongNguGREATER = val;
	            };
	            vm.setSearchDataSpt = function (val) {
	                $scope.searchData.soPhongTamGREATER = val;
	            };
	            vm.setSearchDataGia = function (event, index) {
	                var value = event.target;
	            };
	            vm.setSearchDataRadius = function (val) {
	                vm.radius = val;
	            };

	            vm.gotoHomePage = function (event) {
	                $state.go('mhome', {}, { location: true });
	                $(".overlay").click();
	            };
	            vm.showLogin = function (event) {
	                $('#box-login').fadeIn(500);
	                //window.loca
	            };
	            vm.hideFilter = function () {
	                $(".search").removeAttr("style");
	                $(".search_mobile").find("i").removeClass("iconCancel").addClass("iconSearch");
	                $("body").removeClass("bodyNavShow");
	                $(".search-footer").removeClass("fixed");
	                $(".search-btn").css("display", "none");
	                $(".overlay").click();
	                $(".spinner").addClass("spinner-hide");
	                $(".spinner").parent().find(".collapse-title i").addClass("iconDownOpen").removeClass("iconUpOpen");
	                $(".btn-group .btn").removeClass("active");
	                $(".btn-group .btn:first-child").addClass("active");
	                $(".search input").val('');
	                $(".search_mobile").removeClass("active");
	            };

	            vm.spinner = function (event, box, item) {
	                var me = event.target;
	                me = $(me).closest('a');
	                if (me.parent().find($(box)).hasClass(item)) {
	                    me.parent().find($(box)).removeClass(item);
	                    me.find("i").addClass("iconUpOpen").removeClass("iconDownOpen");
	                } else {
	                    me.parent().find($(box)).addClass(item);
	                    me.find("i").addClass("iconDownOpen").removeClass("iconUpOpen");
	                }
	            };

	            vm.gotoSearchPage = function (event) {
	                //$state.go('msearch', { "place" : 'ChIJoRyG2ZurNTERqRfKcnt_iOc', "loaiTin" : 0, "loaiNhaDat" : 0 ,"viewMode": "list"}, {location: true});
	                // if(!vm.place)
	                //     vm.place = {place_id: "ChIJoRyG2ZurNTERqRfKcnt_iOc"};
	                // $state.transitionTo("msearch", { "place" : vm.place.place_id, "loaiTin" : 0, "loaiNhaDat" : 0 ,"query": $scope.searchData, "viewMode": "list"}, {
	                //     reload: true,
	                //     inherit: false,
	                //     notify: true
	                // });
	                if ($scope.searchData.dienTichKhacFrom || $scope.searchData.dienTichKhacTo) {
	                    $scope.searchData.dienTichBETWEEN[0] = 0 || $scope.searchData.dienTichKhacFrom;
	                    $scope.searchData.dienTichBETWEEN[1] = $scope.searchData.dienTichKhacTo || 9999999999999999;
	                    $scope.searchData.dienTichKhacFrom = undefined;
	                    $scope.searchData.dienTichKhacTo = undefined;
	                }
	                if ($scope.searchData.giaKhacFrom || $scope.searchData.giaKhacTo) {
	                    $scope.searchData.giaBETWEEN[0] = $scope.searchData.giaKhacFrom || 0;
	                    $scope.searchData.giaBETWEEN[1] = $scope.searchData.giaKhacTo || 9999999999999999;
	                    $scope.searchData.giaKhacFrom = undefined;
	                    $scope.searchData.giaKhacTo = undefined;
	                }
	                if (vm.item) {
	                    if (vm.item.query) {
	                        $scope.searchData = vm.item.query;
	                    } else if (vm.item.location) {
	                        $scope.searchData.circle = {
	                            center: $rootScope.currentLocation,
	                            radius: vm.radius
	                        };
	                    } else {
	                        $scope.searchData.diaChinh = {
	                            tinhKhongDau: vm.place.tinh,
	                            huyenKhongDau: vm.place.huyen,
	                            xaKhongDau: vm.place.xa,
	                            fullName: vm.place.description
	                        };
	                    }
	                }

	                // $state.go("msearch", { "place" : vm.place.place_id, "loaiTin" : 0, "loaiNhaDat" : 0 ,"query": $scope.searchData, "viewMode": "list"});

	                $state.go("msearch", { "placeId": $rootScope.searchData.placeId, "loaiTin": 0, "loaiNhaDat": 0, "query": $scope.searchData, "viewMode": $scope.mode ? $scope.mode : "list" }, { reload: true });
	                $(".overlay").click();
	            };
	            vm.gotoRelandApp = function (event) {};
	            vm.profile = function () {
	                $state.go('profile', { userID: $rootScope.user.userID }, { location: true });
	            };
	            vm.selectPlaceCallback = function (item) {
	                if (item.lastSearchSeparator == true) {
	                    return;
	                }
	                vm.item = item;
	                if (vm.item.placeId) $rootScope.searchData.placeId = vm.item.placeId;
	                vm.keepViewport = false;
	                if (item.query) {
	                    vm.place = vm.item.place;
	                    $scope.searchData = item.query;
	                    vm.updateDrums();
	                } else {
	                    vm.place = item;
	                }
	                if (!item.location) {
	                    $scope.searchData.circle = undefined;
	                }
	                $scope.$apply();
	            };

	            NgMap.getMap("filtermap").then(function (map) {
	                vm.map = map;
	                /*window.RewayClientUtils.createPlaceAutoComplete(vm.selectPlaceCallback,"searchadd",map,[
	                    {
	                        description: "1",
	                        types:      "1", 
	                        place_id:   "111",
	                        class: "iconLocation gray"
	                    },
	                    {
	                        description: "2",
	                        types:      "1", 
	                        place_id:   "111",
	                        class: "iconLocation gray"
	                    }
	                ]);*/

	                RewayCommonUtil.placeAutoComplete(vm.selectPlaceCallback, "searchadd", [{
	                    description: "3",
	                    types: "1",
	                    place_id: "111",
	                    class: "iconLocation grasy"
	                }, {
	                    description: "4",
	                    types: "1",
	                    place_id: "111",
	                    class: "iconLocation grasy"
	                }]);
	                // vm.PlacesService =  new google.maps.places.PlacesService(map);                              
	            });

	            var setDrumValues = function setDrumValues(select, value) {
	                var options = select[0].options;
	                if (value.indexOf("[0,9999999") > -1) {
	                    select.drum('setIndex', 0);
	                    $("#" + select.attr("id") + "_value").html(options[0].label);
	                } else {
	                    for (var i = 0; i < options.length; i++) {
	                        if (options[i].value == value) {
	                            select.drum('setIndex', i);
	                            $("#" + select.attr("id") + "_value").html(options[i].label);
	                            break;
	                        }
	                    }
	                }
	            };
	            vm.showFrequentSearch = false;
	            vm.autocompleteSource = function (request, response) {
	                var results = [];
	                $http.get("/api/place/autocomplete?input=" + request.term).then(function (res) {
	                    var predictions = res.data.predictions;
	                    if (res.status == '200') {
	                        for (var i = 0, prediction; prediction = predictions[i]; i++) {
	                            results.push({
	                                description: prediction.fullName,
	                                types: prediction.placeType,
	                                viewPort: prediction.viewPort,
	                                tinh: prediction.tinh,
	                                huyen: prediction.huyen,
	                                xa: prediction.xa,
	                                placeId: prediction.placeId,
	                                class: "iconLocation gray"
	                            });
	                        }
	                    }
	                    response(results);
	                });
	            };
	            vm.favoriteSearchSource = [{
	                description: "Vị trí hiện tại",
	                location: true,
	                class: "ui-autocomplete-category"
	            }];

	            vm.keyPress = function (event) {
	                vm.showFrequentSearch = false;
	                $("#searchadd").autocomplete("option", "source", vm.autocompleteSource);
	                var $ww = $(window).width();
	            };
	            vm.toggleQuickClearAutoComplete = function () {
	                if (vm.autoCompleteText == '' || !vm.autoCompleteText) {
	                    $("#searchadd").autocomplete("option", "source", vm.favoriteSearchSource);
	                    $("#searchadd").autocomplete("search", "");
	                    $(".close-search").removeAttr("style");
	                    $(".input-fr").removeAttr("style");
	                } else {
	                    $(".close-search").show();
	                    $(".input-fr").css("width", $ww - 78);
	                }
	                // if($(".search").find("input").hasClass("input-fr")){

	                //     if($(".input-fr").val().length>0) {
	                //         $(".close-search").show();
	                //         $(".input-fr").css("width", $ww-78);
	                //     }else{
	                //         $(".close-search").removeAttr("style");
	                //         $(".input-fr").removeAttr("style");
	                //     }
	                // }
	            };
	            vm.autoCompleteChange = function (event) {
	                if (vm.autoCompleteText == '') {
	                    $("#searchadd").autocomplete("option", "source", vm.favoriteSearchSource);
	                    $("#searchadd").autocomplete("search", "");
	                }
	                vm.toggleQuickClearAutoComplete();
	            };
	            vm.showFavorite = function (event) {
	                if (vm.autoCompleteText == '' || !vm.autoCompleteText) {
	                    $("#searchadd").autocomplete("option", "source", vm.favoriteSearchSource);
	                    $("#searchadd").autocomplete("search", "");
	                }
	            };

	            vm.userLoggedIn = function () {
	                var saveSearches = $rootScope.user.saveSearch;
	                if (saveSearches) {
	                    for (var i = saveSearches.length - 1; i >= 0; i--) {
	                        var des = window.RewayUtil.convertQuery2String(saveSearches[i].query);
	                        if (des && des.length > 20) des = des.substring(0, 20) + "...";
	                        vm.favoriteSearchSource.splice(1, 0, {
	                            description: saveSearches[i].name,
	                            subDescription: des,
	                            query: saveSearches[i].query,
	                            class: "fa fa-heart red ui-menu-item-wrapper"
	                        });
	                    }
	                }
	            };

	            vm.updateDrums = function () {
	                //set price drum
	                var prices = "[" + $scope.searchData.giaBETWEEN[0] + "," + $scope.searchData.giaBETWEEN[1] + "]";
	                var pricesElm = $("#price_" + $scope.searchData.loaiTin + " select#prices");
	                setDrumValues(pricesElm, prices);

	                // var area1 = $scope.searchData.dienTichBETWEEN[0];
	                // var area1Elm = $("select#area1");
	                // setDrumValues(area1Elm,area1);

	                var area = "[" + $scope.searchData.dienTichBETWEEN[0] + "," + $scope.searchData.dienTichBETWEEN[1] + "]";
	                var areaElm = $("select#area");
	                setDrumValues(areaElm, area);

	                var datepost = $scope.searchData.ngayDangTinGREATER;
	                var datepostElm = $("select#datepost");
	                setDrumValues(datepostElm, datepost);
	            };
	            vm.init = function () {
	                $scope.$bus.subscribe({
	                    channel: 'search',
	                    topic: 'search',
	                    callback: function callback(data, envelope) {
	                        //console.log('add new chat box', data, envelope);
	                        var des = window.RewayUtil.convertQuery2String(data.query);
	                        if (des && des.length > 20) des = des.substring(0, 20) + "...";
	                        vm.favoriteSearchSource.push({
	                            description: "Tìm kiếm lúc " + data.time,
	                            subDescription: des,
	                            query: data.query,
	                            class: "fa fa-history gray ui-menu-item-wrapper"
	                        });
	                    }
	                });

	                $("#typeBox .type-list li a").click(function () {
	                    $(".type-box .collapse-title span label").html($(this).html());
	                });
	                $("#trendBox .type-list li a").click(function () {
	                    $(".trend-box .collapse-title span label").html($(this).html());
	                });
	                Hammer.plugins.fakeMultitouch();
	                $("select.drum").drum({
	                    onChange: function onChange(selected) {
	                        //if (selected.value !=0)                            
	                        $("#" + selected.id + "_value").html($(selected).find(":selected").html());
	                        var array = JSON.parse(selected.value);
	                        if (selected.id == "prices") {
	                            $scope.searchData.giaBETWEEN = array;
	                        } else if (selected.id == "area") {
	                            $scope.searchData.dienTichBETWEEN = array;
	                        } else if (selected.id == "datepost") {
	                            $scope.searchData.ngayDangTinGREATER = selected.value;
	                        }
	                    }
	                });
	                vm.updateDrums();

	                if ($rootScope.getAllLastSearch($localStorage)) {
	                    var lastSearches = $rootScope.getAllLastSearch($localStorage);
	                    if (lastSearches.length > 0) {
	                        vm.favoriteSearchSource.push({
	                            description: "Tìm kiếm gần đây",
	                            lastSearchSeparator: true
	                        });
	                    }
	                    for (var i = lastSearches.length - 1; i >= 0; i--) {
	                        var des = window.RewayUtil.convertQuery2String(lastSearches[i].query);
	                        if (des && des.length > 20) des = des.substring(0, 20) + "...";
	                        vm.favoriteSearchSource.push({
	                            description: "Tìm kiếm lúc " + lastSearches[i].time,
	                            subDescription: des,
	                            query: lastSearches[i].query,
	                            class: "fa fa-history gray ui-menu-item-wrapper"
	                        });
	                    }
	                }

	                vm.userLoggedIn();

	                $scope.$bus.subscribe({
	                    channel: 'user',
	                    topic: 'logged-in',
	                    callback: function callback(data, envelope) {
	                        //console.log('add new chat box', data, envelope);
	                        vm.userLoggedIn();
	                    }
	                });
	            };
	            $timeout(function () {
	                vm.init();
	                vm.initialized = true;
	            }, 0);
	        }],
	        controllerAs: "mf"
	    };
	    return def;
	}]);

/***/ },
/* 42 */
/***/ function(module, exports) {

	'use strict';

	angular.module('bds').directive('bdsMobileHeader', ['$timeout', function ($timeout) {
	    var def = {
	        restrict: 'E',
	        scope: { mode: '=mode' },
	        terminal: true,
	        templateUrl: "/web/common/directives/mobile/bds-mobile-header.tpl.html",
	        replace: 'true',
	        controller: ['$state', 'socket', '$scope', '$rootScope', '$http', '$window', '$localStorage', 'HouseService', 'RewayCommonUtil', function ($state, socket, $scope, $rootScope, $http, $window, $localStorage, HouseService, RewayCommonUtil) {
	            var vm = this;
	            vm.stateName = $state.current.name;
	            //nhannc
	            $scope.isPostPage = false;
	            vm.openPost = function () {
	                $(".post").animate({
	                    right: 0
	                }, 120);
	                $("body").addClass("bodySearchShow");
	                $(".post").scrollTop(0);
	                $(".post-footer").addClass("fixed");
	                overlay(".overlay");
	            };
	            vm.exitPost = function () {
	                $(".post").removeAttr("style");
	                $("body").removeClass("bodySearchShow");
	                $(".post-footer").removeClass("fixed");
	            };
	            //end nhannc
	            vm.goToSearchPage = function () {
	                if ($rootScope.searchData.placeId) {
	                    $state.go("msearch", { "placeId": $rootScope.searchData.placeId, "loaiTin": 0, "loaiNhaDat": 0, "query": $rootScope.searchData, "viewMode": "map" }, { reload: true });
	                } else {
	                    if (navigator.geolocation) {
	                        navigator.geolocation.getCurrentPosition(function (position) {
	                            $rootScope.currentLocation.lat = position.coords.latitude;
	                            $rootScope.currentLocation.lon = position.coords.longitude;
	                            RewayCommonUtil.getGeoCodePostGet(position.coords.latitude, position.coords.longitude, function (results) {
	                                if (results) {
	                                    var places = results;
	                                    var newPlace = places[0];
	                                    for (var i = 0; i < places.length; i++) {
	                                        var xa = window.RewayPlaceUtil.getXa(places[i]);
	                                        if (xa != '') {
	                                            newPlace = places[i];
	                                            break;
	                                        }
	                                    }
	                                    var tinh = window.RewayPlaceUtil.getTinh(newPlace);
	                                    var huyen = window.RewayPlaceUtil.getHuyen(newPlace);
	                                    var xa = window.RewayPlaceUtil.getXa(newPlace);
	                                    var diaChinh = {};
	                                    diaChinh.tinhKhongDau = window.RewayUtil.locDau(tinh);
	                                    diaChinh.huyenKhongDau = window.RewayUtil.locDau(huyen);
	                                    //diaChinh.xaKhongDau = window.RewayUtil.locDau(xa);
	                                    var placeType = 'T';
	                                    if (diaChinh.huyenKhongDau) placeType = 'H';
	                                    // if (diaChinh.xaKhongDau)
	                                    //     placeType = 'X';
	                                    var diaChinhDto = {
	                                        tinhKhongDau: diaChinh.tinhKhongDau,
	                                        huyenKhongDau: diaChinh.huyenKhongDau,
	                                        // xaKhongDau: diaChinh.xaKhongDau,
	                                        placeType: placeType
	                                    };
	                                    HouseService.getPlaceByDiaChinhKhongDau(diaChinhDto).then(function (res) {
	                                        console.log("--------------HouseService.getPlaceByDiaChinhKhongDau-------------");
	                                        if (res) {
	                                            $state.go("msearch", { "placeId": res.data.diaChinh.placeId, "loaiTin": 0, "loaiNhaDat": 0, "query": $rootScope.searchData, "viewMode": "map" }, { reload: true });
	                                        }
	                                    });
	                                }
	                            });
	                        }, function (error) {
	                            console.log(error);
	                            // vm.showAskCurrentLocation  = true;
	                            $state.go("msearch", { "placeId": "Place_T_HN", "loaiTin": 0, "loaiNhaDat": 0, "query": $rootScope.searchData, "viewMode": "map" }, { reload: true });
	                        });
	                    } else {
	                        $state.go("msearch", { "placeId": "Place_T_HN", "loaiTin": 0, "loaiNhaDat": 0, "query": $rootScope.searchData, "viewMode": "map" }, { reload: true });
	                    }
	                }
	            };
	            vm.searchfr = function () {
	                $(".search").removeAttr("style");
	                $(".search_mobile").find("i").removeClass("iconCancel").addClass("iconSearch");
	                $("body").removeClass("bodyNavShow");
	                $(".search-footer").removeClass("fixed");
	                $(".search-btn").css("display", "none");
	                vm.reset();
	            };
	            vm.reset = function () {
	                // $(".btn-more").removeAttr("style");
	                // $(".more-box").addClass("more-box-hide");
	                // $(".spinner").addClass("spinner-hide");
	                // $(".spinner").parent().find(".collapse-title i").addClass("iconDownOpen").removeClass("iconUpOpen");
	                // $(".btn-group .btn").removeClass("active");
	                // $(".btn-group .btn:first-child").addClass("active");
	                $(".spinner").addClass("spinner-hide");
	                $(".spinner").parent().find(".collapse-title i").addClass("iconDownOpen").removeClass("iconUpOpen");
	                $(".btn-group .btn").removeClass("active");
	                $(".btn-group .btn:first-child").addClass("active");
	                $(".search input").val('');
	                $(".search_mobile").removeClass("active");
	            };
	            vm.toggleFilter = function (event) {
	                //nhannc
	                if ($(".search_mobile").find("i").hasClass("iconSearch")) {
	                    if ($(".post").css("right") == "0px") {
	                        $scope.isPostPage = true;
	                        vm.exitPost();
	                    }
	                } else {
	                    if ($scope.isPostPage) {
	                        vm.openPost();
	                    }
	                    $scope.isPostPage = false;
	                }
	                //end nhannc
	                if (!$('.search_mobile').hasClass("active")) {
	                    $(event.target).text("Hủy");
	                    $(".search").animate({
	                        right: 0
	                    }, 120);
	                    $(".search_mobile").find("i").removeClass("iconSearch").addClass("iconCancel");
	                    //$("body").addClass("bodyNavShow");
	                    $(".search").scrollTop(0);
	                    $(".search-footer").addClass("fixed");
	                    $(".search-btn").css("display", "block");
	                    $(".search_mobile").addClass("active");
	                } else {

	                    $(event.target).text("Lọc");
	                    vm.searchfr();
	                }
	            };

	            vm.toggleLeftMenu = function () {
	                $(".overlay").show();
	                $(".nav_mobile").find("i").removeClass("iconMenu").addClass("iconLeftOpen");
	                $("body").addClass("bodyNavShow").animate({
	                    left: 270
	                }, 120);
	                $("nav.main").animate({
	                    left: 0
	                }, 120);
	            };

	            $scope.$bus.subscribe({
	                channel: 'search',
	                topic: 'show search',
	                callback: function callback(data, envelope) {
	                    if (!$('.search_mobile').hasClass("active")) {
	                        $(".search").animate({
	                            right: 0
	                        }, 120);
	                        $(".search_mobile").find("i").removeClass("iconSearch").addClass("iconCancel");
	                        //$("body").addClass("bodyNavShow");
	                        $(".search").scrollTop(0);
	                        $(".search-footer").addClass("fixed");
	                        $(".search-btn").css("display", "block");
	                        $(".search_mobile").addClass("active");
	                    }
	                }
	            });

	            vm.showFrequentSearch = false;
	            vm.autocompleteSource = function (request, response) {
	                var results = [];
	                $http.get("/api/place/autocomplete?input=" + request.term).then(function (res) {
	                    var predictions = res.data.predictions;
	                    if (res.status == '200') {
	                        for (var i = 0, prediction; prediction = predictions[i]; i++) {
	                            results.push({
	                                description: prediction.fullName,
	                                types: prediction.placeType,
	                                viewPort: prediction.viewPort,
	                                tinh: prediction.tinh,
	                                huyen: prediction.huyen,
	                                xa: prediction.xa,
	                                placeId: prediction.placeId,
	                                class: "iconLocation gray"
	                            });
	                        }
	                    }
	                    response(results);
	                });
	            };
	            vm.favoriteSearchSource = [{
	                description: "Vị trí hiện tại",
	                location: true,
	                class: "ui-autocomplete-category"
	            }];

	            vm.keyPress = function (event) {
	                vm.showFrequentSearch = false;
	                $("#searchadd1").autocomplete("option", "source", vm.autocompleteSource);
	                var $ww = $(window).width();
	            };
	            vm.toggleQuickClearAutoComplete = function () {
	                if (vm.autoCompleteText == '' || !vm.autoCompleteText) {
	                    $("#searchadd1").autocomplete("option", "source", vm.favoriteSearchSource);
	                    $("#searchadd1").autocomplete("search", "");
	                    $(".close-search").removeAttr("style");
	                    $(".input-fr").removeAttr("style");
	                } else {
	                    $(".close-search").show();
	                    $(".input-fr").css("width", $ww - 78);
	                }
	                // if($(".search").find("input").hasClass("input-fr")){

	                //     if($(".input-fr").val().length>0) {
	                //         $(".close-search").show();
	                //         $(".input-fr").css("width", $ww-78);
	                //     }else{
	                //         $(".close-search").removeAttr("style");
	                //         $(".input-fr").removeAttr("style");
	                //     }
	                // }
	            };
	            vm.autoCompleteChange = function (event) {
	                if (vm.autoCompleteText == '') {
	                    $("#searchadd1").autocomplete("option", "source", vm.favoriteSearchSource);
	                    $("#searchadd1").autocomplete("search", "");
	                }
	                vm.toggleQuickClearAutoComplete();
	            };
	            vm.showFavorite = function (event) {
	                if (vm.autoCompleteText == '' || !vm.autoCompleteText) {
	                    $("#searchadd1").autocomplete("option", "source", vm.favoriteSearchSource);
	                    $("#searchadd1").autocomplete("search", "");
	                }
	            };
	            vm.userLoggedIn = function () {
	                var saveSearches = $rootScope.user.saveSearch;
	                if (saveSearches) {
	                    for (var i = saveSearches.length - 1; i >= 0; i--) {
	                        var des = window.RewayUtil.convertQuery2String(saveSearches[i].query);
	                        if (des && des.length > 20) des = des.substring(0, 20) + "...";
	                        vm.favoriteSearchSource.splice(1, 0, {
	                            description: saveSearches[i].name,
	                            subDescription: des,
	                            query: saveSearches[i].query,
	                            class: "fa fa-heart red ui-menu-item-wrapper"
	                        });
	                    }
	                }
	            };

	            vm.selectPlaceCallback1 = function (item) {
	                if (item.lastSearchSeparator == true) {
	                    return;
	                }
	                vm.item = item;
	                if (vm.item.placeId) $rootScope.searchData.placeId = vm.item.placeId;
	                vm.keepViewport = false;
	                if (item.query) {
	                    $rootScope.searchData = item.query;
	                    // vm.updateDrums();
	                }
	                if (!item.location) {
	                    $rootScope.searchData.circle = undefined;
	                }
	                // $scope.$apply();  
	                $state.go("msearch", { "placeId": $rootScope.searchData.placeId, "loaiTin": 0, "loaiNhaDat": 0, "query": $rootScope.searchData, "viewMode": $scope.mode ? $scope.mode : "list" }, { reload: true });
	                $(".overlay").click();
	            };
	            vm.init = function () {
	                RewayCommonUtil.placeAutoComplete(vm.selectPlaceCallback1, "searchadd1", [{
	                    description: "3",
	                    types: "1",
	                    place_id: "111",
	                    class: "iconLocation grasy"
	                }, {
	                    description: "4",
	                    types: "1",
	                    place_id: "111",
	                    class: "iconLocation grasy"
	                }]);

	                $scope.$bus.subscribe({
	                    channel: 'search',
	                    topic: 'search',
	                    callback: function callback(data, envelope) {
	                        //console.log('add new chat box', data, envelope);
	                        var des = window.RewayUtil.convertQuery2String(data.query);
	                        if (des && des.length > 20) des = des.substring(0, 20) + "...";
	                        vm.favoriteSearchSource.push({
	                            description: "Tìm kiếm lúc " + data.time,
	                            subDescription: des,
	                            query: data.query,
	                            class: "fa fa-history gray ui-menu-item-wrapper"
	                        });
	                    }
	                });

	                if ($rootScope.getAllLastSearch($localStorage)) {
	                    var lastSearches = $rootScope.getAllLastSearch($localStorage);
	                    if (lastSearches.length > 0) {
	                        vm.favoriteSearchSource.push({
	                            description: "Tìm kiếm gần đây",
	                            lastSearchSeparator: true
	                        });
	                    }
	                    for (var i = lastSearches.length - 1; i >= 0; i--) {
	                        var des = window.RewayUtil.convertQuery2String(lastSearches[i].query);
	                        if (des && des.length > 20) des = des.substring(0, 20) + "...";
	                        vm.favoriteSearchSource.push({
	                            description: "Tìm kiếm lúc " + lastSearches[i].time,
	                            subDescription: des,
	                            query: lastSearches[i].query,
	                            class: "fa fa-history gray ui-menu-item-wrapper"
	                        });
	                    }
	                }

	                vm.userLoggedIn();

	                $scope.$bus.subscribe({
	                    channel: 'user',
	                    topic: 'logged-in',
	                    callback: function callback(data, envelope) {
	                        //console.log('add new chat box', data, envelope);
	                        vm.userLoggedIn();
	                    }
	                });
	            };

	            $timeout(function () {
	                vm.init();
	            }, 0);

	            $scope.$on("$destroy", function () {
	                $('#searchadd1').autocomplete("destroy");
	            });
	        }],
	        controllerAs: "mhdr"
	    };
	    return def;
	}]);

/***/ },
/* 43 */
/***/ function(module, exports) {

	'use strict';

	angular.module('bds').directive("bdsMobileLoginForm", [function () {
	  return {
	    restrict: 'E',
	    scope: {},
	    // template: '<div class="box-login" id="box-login"><div class="inner"><form action="index.html" method="post" id="form-login" novalidate><div ng-if="$root.token" class="head">Đăng nhập/Đăng ký để lưu thông tin tìm kiếm</div><div ng-if="!$root.token" class="head">Chào mừng bạn quay lại với Reland. Xin nhập mật khẩu</div><a href="#box-login" class="btn-close" data-login="close"><i class="fa fa-times"></i></a><div ng-if="$root.token" class="control"><input type="email" ng-model="lc.email" placeholder="Enter email address" class="form-control" name="email" required/></div><div ng-if="!$root.token" class="control"><input type="password" ng-model="lc.password" class="form-control" required> </input></div><div class="handle"><button type="button" ng-click="lc.signin();" class="btn-login">Đăng nhập</button></div><div class="rule">Tôi đồng ý với các điều khoản <a href="/terms/" target="_blank">sử dụng</a> và <a href="/privacy/" target="_blank">bản quyền của Reland</a>.</div><div class="register">Bạn có phải là môi giới BĐS? <a href="/agent_signup/?redirect_url=http://www.trulia.com/"> Đăng ký tại đây.</a></div></form></div></div>',
	    templateUrl: "/web/common/directives/mobile/bds-mobile-login.tpl.html",
	    replace: 'true',
	    controller: ['socket', '$scope', '$rootScope', '$http', '$window', '$localStorage', 'HouseService', 'jwtHelper', function (socket, $scope, $rootScope, $http, $window, $localStorage, HouseService, jwtHelper) {
	      $scope.loginError = false;
	      var vm = this;

	      vm.login = true;
	      vm.reset = false;
	      vm.ENTER_EMAIL = 1;
	      vm.ENTER_PASSWORD = 2;
	      vm.LOGGED_IN = 3;
	      vm.FORGOT_PASSWORD = 4;
	      vm.SENT_PASSWORD = 5;
	      vm.RESET_PASSWORD = 6;
	      vm.state = vm.ENTER_EMAIL;
	      vm.head = "Đăng nhập/Đăng ký để lưu thông tin tìm kiếm";
	      vm.subHead = "";
	      $scope.$bus.subscribe({
	        channel: 'login',
	        topic: 'logged out',
	        callback: function callback(data, envelope) {
	          vm.userExist = false;
	          vm.password = "";
	          $localStorage.relandToken = undefined;
	          $rootScope.user.userID = undefined;
	          vm.changeState(vm.ENTER_EMAIL, vm.userExist);
	        }
	      });

	      $scope.$bus.subscribe({
	        channel: 'login',
	        topic: 'show login',
	        callback: function callback(data, envelope) {
	          var token = data.token;
	          if (token) {
	            var mydecode = jwtHelper.decodeToken(token);
	            vm.resetPasswordToken = token;
	            vm.resetUserID = mydecode.userID;
	            vm.resetHead = "Xin nhập mật khẩu mới";
	            vm.reset = true;
	            vm.login = false;
	            vm.state = vm.RESET_PASSWORD;
	          } else {
	            vm.state = vm.ENTER_EMAIL;
	            vm.userExist = false;
	            vm.password = "";
	            $localStorage.relandToken = undefined;
	            vm.head = data.label;
	            vm.subHead = "";
	          }
	          $('#loginBox').modal("show");
	        }
	      });

	      vm.exitLoginBox = function ($event) {
	        if (!$event || $event.target.id == "box-login") {
	          vm.userExist = false;
	          vm.changeState(vm.ENTER_EMAIL, false);
	        }
	      };
	      vm.forgotPassword = function () {
	        vm.changeState(vm.FORGOT_PASSWORD);
	      };

	      vm.changeState = function (state, userExist) {
	        vm.state = state;
	        if (state == vm.FORGOT_PASSWORD) {
	          vm.head = "Quên mật khẩu?";
	          vm.subHead = "Hãy nhập email, Reland sẽ gửi mật khẩu tới email";
	        }
	        if (vm.state == vm.SENT_PASSWORD) {
	          vm.subHead = "Reland đã gửi mật khẩu tới email của bạn. Hãy kiểm tra và nhập mật khẩu mới để đăng nhập";
	        }
	        if (vm.state == vm.ENTER_EMAIL) {
	          vm.head = "Đăng nhập/Đăng ký để lưu thông tin tìm kiếm";
	          vm.subHead = "";
	        }
	        if (vm.state == vm.ENTER_PASSWORD) {
	          vm.head = "Đăng nhập/Đăng ký để lưu thông tin tìm kiếm";
	          if (userExist == true) vm.head = "Chào mừng bạn quay lại với Reland. Xin nhập mật khẩu";else if (userExist == false) vm.head = "Tạo mật khẩu";
	        }
	      };

	      vm.signin = function () {

	        var loginForm = $('#form-login');
	        var data = {
	          email: vm.email,
	          matKhau: vm.password
	        };
	        if (vm.email && vm.email.indexOf("@") == -1) {
	          data.email = undefined;
	          data.phone = vm.email;
	        }
	        //if (loginForm.valid()) {
	        if (vm.state == vm.RESET_PASSWORD) {
	          HouseService.resetPassword({ token: vm.resetPasswordToken, pass: vm.resetPassword }).then(function (resp) {
	            if (resp.data.success == true) {
	              //need to auto login here
	              HouseService.login({ userID: vm.resetUserID, matKhau: vm.resetPassword }).then(function (res) {
	                if (res.data.login == true) {
	                  //alert("signin with email " + $scope.email + " password " + this.password + " and token: " + res.data.token); 
	                  //$window.token = res.data.token;
	                  $localStorage.relandToken = res.data.token;
	                  $localStorage.lastSearch = res.data.lastSearch;

	                  $rootScope.user.userName = res.data.userName;
	                  if (res.data.fullName) $rootScope.user.fullName = res.data.fullName;
	                  $rootScope.user.userID = res.data.userID;
	                  $rootScope.user.userAvatar = res.data.avatar;
	                  //hung dummy here to set userID to email so we can test chat
	                  //$rootScope.user.userID = res.data.email;
	                  $rootScope.user.userID = res.data.userID;
	                  $rootScope.user.adsLikes = res.data.adsLikes;
	                  $rootScope.user.userEmail = res.data.email;
	                  $rootScope.user.phone = res.data.phone;
	                  $rootScope.user.lastSearch = res.data.lastSearch;
	                  $rootScope.user.lastViewAds = res.data.lastViewAds;
	                  $rootScope.user.saveSearch = res.data.saveSearch;

	                  vm.class = "has-sub";
	                  vm.state = vm.LOGGED_IN;
	                  vm.userExist = false;
	                  vm.password = "";
	                  socket.emit('new user', { email: $rootScope.user.userEmail, userID: $rootScope.user.userID, username: $rootScope.user.userName, avatar: res.data.avatar }, function (data) {
	                    console.log("register socket user " + $rootScope.user.userName);
	                  });
	                  $scope.$bus.publish({
	                    channel: 'user',
	                    topic: 'logged-in',
	                    data: null
	                  });
	                  $('#box-login').hide();
	                } else {
	                  //alert(res.data.message);
	                  vm.head = res.data.message;
	                }
	              });
	            } else {
	              alert(resp.data.msg);
	            }
	          });
	        } else if (vm.state == vm.FORGOT_PASSWORD) {
	          HouseService.forgotPassword({
	            email: vm.email,
	            newPass: vm.password
	          }).then(function (res) {
	            if (res.data.success == true) vm.changeState(vm.SENT_PASSWORD);else vm.subHead = res.data.msg;
	          });
	        } else if (vm.state == vm.ENTER_EMAIL) {
	          HouseService.checkUserExist(data).then(function (res) {
	            vm.userExist = res.data.exist;
	            vm.changeState(vm.ENTER_PASSWORD, vm.userExist);
	          });
	        } else if (vm.state == vm.ENTER_PASSWORD || vm.state == vm.SENT_PASSWORD) {
	          if (vm.userExist == true) {
	            //sign in
	            HouseService.login(data).then(function (res) {
	              if (res.data.login == true) {
	                //alert("signin with email " + $scope.email + " password " + this.password + " and token: " + res.data.token); 
	                //$window.token = res.data.token;
	                $localStorage.relandToken = res.data.token;
	                $localStorage.lastSearch = res.data.lastSearch;

	                $rootScope.user.userName = res.data.userName;
	                if (res.data.fullName) $rootScope.user.fullName = res.data.fullName;
	                $rootScope.user.userID = res.data.userID;
	                $rootScope.user.userAvatar = res.data.avatar;
	                //hung dummy here to set userID to email so we can test chat
	                //$rootScope.user.userID = res.data.email;
	                $rootScope.user.userID = res.data.userID;
	                $rootScope.user.adsLikes = res.data.adsLikes;
	                $rootScope.user.userEmail = res.data.email;
	                $rootScope.user.phone = res.data.phone;
	                $rootScope.user.lastSearch = res.data.lastSearch;
	                $rootScope.user.lastViewAds = res.data.lastViewAds;
	                $rootScope.user.saveSearch = res.data.saveSearch;
	                vm.class = "has-sub";
	                vm.state = vm.LOGGED_IN;
	                vm.userExist = false;
	                vm.password = "";
	                socket.emit('new user', { email: $rootScope.user.userEmail, userID: $rootScope.user.userID, username: $rootScope.user.userName, avatar: res.data.avatar }, function (data) {
	                  console.log("register socket user " + $rootScope.user.userName);
	                });
	                $scope.$bus.publish({
	                  channel: 'user',
	                  topic: 'logged-in',
	                  data: null
	                });
	                $('#loginBox').modal('hide');
	                // $('#loginBox').hide();
	              } else {
	                  //alert(res.data.message);
	                  vm.head = res.data.message;
	                }
	            });
	          } else {
	            //register
	            HouseService.signup(data).then(function (res) {
	              $localStorage.relandToken = res.data.token;
	              $rootScope.user.userName = res.data.userName;
	              //nhannc
	              if (res.data.fullName) $rootScope.user.fullName = res.data.fullName;
	              $rootScope.user.userID = res.data.userID;
	              $rootScope.user.email = res.data.email;
	              $rootScope.user.phone = res.data.phone;
	              console.log($rootScope.user.userID);
	              //end nhannc
	              vm.class = "has-sub";
	              vm.state = vm.LOGGED_IN;
	              socket.emit('new user', { email: $rootScope.user.userEmail, userID: $rootScope.user.userID, name: $rootScope.user.userName, userAvatar: undefined }, function (data) {
	                console.log("register socket user " + $rootScope.user.userName);
	              });
	              $('#loginBox').modal('hide');
	              $('#box-login').hide();
	            });
	          }
	        }
	        //}
	      };

	      /*var formLogin = $("#form-login");
	      // $("#form-login").validate();
	      // if(formLogin.validate){
	        $.validator.addMethod("mailorphone", function(value, element) {
	          var mail = jQuery.validator.methods.email.call(this, value, element);
	          var digits = jQuery.validator.methods.digits.call(this, value, element);
	          var minlength = jQuery.validator.methods.minlength.call(this, value, element,8);
	          return mail || (digits && minlength);
	        });
	        formLogin.validate({
	          rules: {
	            mailorphone: {
	              required: true,                  
	              mailorphone: true
	            },
	            password: {
	              required: true
	            },
	            passwordConfirm: {
	              required: function(element){
	                var pass = $("#form-login [name = 'password']").val();
	                var passConfirm = element.value;
	                if(pass){
	                  return !(pass == passConfirm);
	                }else
	                  return false;
	              }
	            }                
	          },
	          messages: {
	            mailorphone: {
	              mailorphone: 'Xin nhập email hoặc số điện thoại',
	              required: 'Xin nhập email hoặc số điện thoại'
	            },
	            password: {
	              required: 'Xin nhập mật khẩu'
	            },
	            passwordConfirm: {
	              required: 'Mật khẩu không khớp',
	            }
	          }
	        });    
	      // }
	      */
	    }],
	    controllerAs: 'mlc'
	  };
	}]);

/***/ },
/* 44 */
/***/ function(module, exports) {

	"use strict";

	var danhMuc = {};

	var BAT_KY = "Bất kỳ";

	danhMuc.BAT_KY = BAT_KY;
	danhMuc.BIG = 9999999;

	danhMuc.sellStepValues = [0, 1000, 2000, 3000, 5000, 7000, 10000, 20000, 30000]; //trieu

	danhMuc.filter_max_value = {
	    lable: "Bất kỳ",
	    value: 999999999999999999
	};

	danhMuc.sortHouseOptions = [{
	    lable: "Giá từ cao đến thấp",
	    value: "giaDESC",
	    position: 1
	}, {
	    lable: "Giá từ thấp đến cao",
	    value: "giaASC",
	    position: 2
	}, {
	    lable: "Diện tích từ cao đến thấp",
	    value: "dienTichDESC",
	    position: 3
	}, {
	    lable: "Diện tích từ thấp đến cao",
	    value: "dienTichASC",
	    position: 4
	}];

	danhMuc.sell_steps = [{
	    value: 1000,
	    lable: "1 tỷ",
	    position: 1
	}, {
	    value: 2000,
	    lable: "2 tỷ",
	    position: 2
	}, {
	    value: 3000,
	    lable: "3 tỷ",
	    position: 3
	}, {
	    value: 5000,
	    lable: "5 tỷ",
	    position: 4
	}, {
	    value: 7000,
	    lable: "7 tỷ",
	    position: 5
	}, {
	    value: 10000,
	    lable: "10 tỷ",
	    position: 6
	}, {
	    value: 20000,
	    lable: "20 tỷ",
	    position: 7
	}, {
	    value: 30000,
	    lable: "30 tỷ",
	    position: 8
	}];

	danhMuc.rentStepValues = [0, 2, 5, 10, 20, 50, 100, 500]; //by month

	danhMuc.khoangDienTich = [{
	    value: {
	        min: 0,
	        max: 30,
	        id: 1
	    },
	    label: "<= 30m2",
	    position: 2
	}, {
	    value: {
	        min: 30,
	        max: 50,
	        id: 2
	    },
	    label: "30 - 50m2",
	    position: 3
	}, {
	    value: {
	        min: 50,
	        max: 50,
	        id: 3
	    },
	    label: "50 - 80m2",
	    position: 4
	}, {
	    value: {
	        min: 80,
	        max: 100,
	        id: 4
	    },
	    label: "80 - 100m2",
	    position: 4
	}, {
	    value: {
	        min: 100,
	        max: 150,
	        id: 5
	    },
	    label: "100 - 150m2",
	    position: 5
	}, {
	    value: {
	        min: 150,
	        max: 200,
	        id: 6
	    },
	    label: "150 - 200m2",
	    position: 6
	}, {
	    value: {
	        min: 200,
	        max: 250,
	        id: 7
	    },
	    label: "200 - 250m2",
	    position: 7
	}, {
	    value: {
	        min: 250,
	        max: 300,
	        id: 8
	    },
	    label: "250 - 300m2",
	    position: 8
	}, {
	    value: {
	        min: 300,
	        max: 500,
	        id: 9
	    },
	    label: "300 - 500m2",
	    position: 9
	}, {
	    value: {
	        min: 500,
	        max: 999999999999999,
	        id: 10
	    },
	    label: ">= 500m2",
	    position: 10
	}, {
	    value: {
	        min: 0,
	        max: 999999999999999,
	        id: 11
	    },
	    label: "Diện tích bất kỳ",
	    position: 11
	}];
	danhMuc.khoangGia = [{
	    value: {
	        min: 0,
	        max: 500,
	        id: 1
	    },
	    label: "<= 500 triệu",
	    position: 2
	}, {
	    value: {
	        min: 500,
	        max: 800,
	        id: 2
	    },
	    label: "500 - 800 triệu",
	    position: 3
	}, {
	    value: {
	        min: 800,
	        max: 1000,
	        id: 3
	    },
	    label: "800 triệu - 1 tỷ",
	    position: 4
	}, {
	    value: {
	        min: 1000,
	        max: 2000,
	        id: 4
	    },
	    label: "1 - 2 tỷ",
	    position: 5
	}, {
	    value: {
	        min: 2000,
	        max: 3000,
	        id: 5
	    },
	    label: "2 - 3 tỷ",
	    position: 6
	}, {
	    value: {
	        min: 3000,
	        max: 5000,
	        id: 6
	    },
	    label: "3 - 5 tỷ",
	    position: 7
	}, {
	    value: {
	        min: 5000,
	        max: 7000,
	        id: 7
	    },
	    label: "5 - 7 tỷ",
	    position: 8
	}, {
	    value: {
	        min: 7000,
	        max: 10000,
	        id: 8
	    },
	    label: "7 - 10 tỷ",
	    position: 9
	}, {
	    value: {
	        min: 10000,
	        max: 20000,
	        id: 9
	    },
	    label: "10 - 20 tỷ",
	    position: 10
	}, {
	    value: {
	        min: 20000,
	        max: 30000,
	        id: 10
	    },
	    label: "20 - 30 tỷ",
	    position: 11
	}, {
	    value: {
	        min: 30000,
	        max: 999999999999,
	        id: 11
	    },
	    label: ">= 30 tỷ",
	    position: 12
	}, {
	    value: {
	        min: 0,
	        max: 999999999999,
	        id: 12
	    },
	    label: "Giá bất kỳ",
	    position: 13
	}];

	danhMuc.khoangGiaThue = [{
	    value: {
	        min: 0,
	        max: 1,
	        id: 1
	    },
	    label: "<= 1 triệu",
	    position: 2
	}, {
	    value: {
	        min: 1,
	        max: 3,
	        id: 2
	    },
	    label: "1 - 3 triệu",
	    position: 3
	}, {
	    value: {
	        min: 3,
	        max: 5,
	        id: 3
	    },
	    label: "3 - 5 triệu",
	    position: 4
	}, {
	    value: {
	        min: 5,
	        max: 10,
	        id: 4
	    },
	    label: "5 - 10 triệu",
	    position: 5
	}, {
	    value: {
	        min: 10,
	        max: 40,
	        id: 5
	    },
	    label: "10 - 40 triệu",
	    position: 6
	}, {
	    value: {
	        min: 40,
	        max: 70,
	        id: 6
	    },
	    label: "40 - 70 triệu",
	    position: 7
	}, {
	    value: {
	        min: 70,
	        max: 100,
	        id: 7
	    },
	    label: "70 - 100 triệu",
	    position: 8
	}, {
	    value: {
	        min: 100,
	        max: 999999999999,
	        id: 8
	    },
	    label: "> 100 triệu",
	    position: 9
	}, {
	    value: {
	        min: 0,
	        max: 999999999999,
	        id: 9
	    },
	    label: "Giá bất kỳ",
	    position: 10
	}];

	danhMuc.dienTichStepValues = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 150, 200, 250, 300, 400, 500];

	danhMuc.convertDienTichStepValueToNameValueArray = function () {
	    var result = [];
	    for (var i = 1; i < danhMuc.dienTichStepValues.length; i++) {
	        result.push({
	            value: danhMuc.dienTichStepValues[i],
	            lable: danhMuc.dienTichStepValues[i] + " m2",
	            position: i
	        });
	    }
	    return result;
	};

	danhMuc.dientich_steps = danhMuc.convertDienTichStepValueToNameValueArray();

	danhMuc.LoaiTin = {
	    0: "Bán",
	    1: "Cho Thuê"
	};

	danhMuc.LoaiTinTuc = [{ value: "1", lable: "Tin thị trường" }, { value: "2", lable: "Phân tích - Nhận định" }, { value: "3", lable: "Chính sách - Quản lý" }, { value: "4", lable: "Thông tin quy hoạch" }, { value: "6", lable: "BĐS thế giới" }, { value: "7", lable: "Tài chính - Chứng khoán - BĐS" }, { value: "5", lable: "Tư vấn luật" }, { value: "8", lable: "Lời khuyên" }];

	danhMuc.LoaiNhaDatBan = {
	    1: "Bán căn hộ chung cư",
	    2: "Bán nhà riêng",
	    3: "Bán biệt thự, liền kề",
	    4: "Bán nhà mặt phố",
	    5: "Bán đất nền dự án",
	    6: "Bán đất",
	    7: "Bán trang trại, khu nghỉ dưỡng",
	    8: "Bán kho, nhà xưởng",
	    99: "Bán loại bất động sản khác",
	    10: "Tìm kiếm nâng cao",
	    0: "Tất cả"
	};

	danhMuc.menu = [{
	    label: "BĐS bán",
	    value: { loaiTin: "0", loaiNhaDat: "0" },
	    level: "1",
	    visible: true,
	    items: [{ visible: true, value: { loaiTin: "0", loaiNhaDat: "1" }, label: "Bán căn hộ chung cư" }, { visible: true, value: { loaiTin: "0", loaiNhaDat: "2" }, label: "Bán nhà riêng" }, { visible: true, value: { loaiTin: "0", loaiNhaDat: "3" }, label: "Bán nhà mặt phố" }, { visible: true, value: { loaiTin: "0", loaiNhaDat: "4" }, label: "Bán biệt thự, liền kề" }, { visible: true, value: { loaiTin: "0", loaiNhaDat: "6" }, label: "Bán Shophouse" }, { visible: true, value: { loaiTin: "0", loaiNhaDat: "7" }, label: "Bán đất nền dự án" }, { visible: true, value: { loaiTin: "0", loaiNhaDat: "5" }, label: "Bán đất" }, { visible: true, value: { loaiTin: "0", loaiNhaDat: "8" }, label: "Bán trang trại, khu nghỉ dưỡng" }, { visible: true, value: { loaiTin: "0", loaiNhaDat: "99" }, label: "Bán các BDS khác" }, { visible: true, value: { loaiTin: "0", loaiNhaDat: "10" }, label: "Tìm kiếm nâng cao" }, { visible: true, value: { loaiTin: "0", loaiNhaDat: "0" }, label: "Tất cả" }]
	}, {
	    label: "BĐS cho thuê",
	    value: { loaiTin: "1", loaiNhaDat: "0" },
	    level: "1",
	    visible: true,
	    items: [{ visible: true, value: { loaiTin: "1", loaiNhaDat: "1" }, label: "Mua căn hộ chung cư" }, { visible: true, value: { loaiTin: "1", loaiNhaDat: "2" }, label: "Mua nhà riêng" }, { visible: true, value: { loaiTin: "1", loaiNhaDat: "3" }, label: "Mua biệt thự, liền kề" }, { visible: true, value: { loaiTin: "1", loaiNhaDat: "4" }, label: "Mua nhà mặt phố" }, { visible: true, value: { loaiTin: "1", loaiNhaDat: "5" }, label: "Mua đất nền dự án" }, { visible: true, value: { loaiTin: "1", loaiNhaDat: "6" }, label: "Mua đất" }, { visible: true, value: { loaiTin: "1", loaiNhaDat: "7" }, label: "Mua trang trại, khu nghỉ dưỡng" }, { visible: true, value: { loaiTin: "1", loaiNhaDat: "8" }, label: "Bán trang trại, khu nghỉ dưỡng" }, { visible: true, value: { loaiTin: "1", loaiNhaDat: "9" }, label: "Mua kho, nhà xưởng" }, { visible: true, value: { loaiTin: "1", loaiNhaDat: "10" }, label: "Mua loại BĐS khác" }, { visible: true, value: { loaiTin: "1", loaiNhaDat: "11" }, label: "Tìm kiếm nâng cao" }, { visible: true, value: { loaiTin: "1", loaiNhaDat: "0" }, label: "Tất cả" }]
	}, {
	    label: "Giới thiệu",
	    value: {},
	    visible: true,
	    items: [{ value: {}, label: "Môi giới" }, { value: {}, label: "Ứng dụng Mobile" }]
	}];

	danhMuc.LoaiNhaDatBanWeb = [{ value: "0", lable: "Bất kỳ" }, { value: "1", lable: "Bán căn hộ chung cư" }, { value: "2", lable: "Bán nhà riêng" }, { value: "3", lable: "Bán biệt thự, liền kề" }, { value: "4", lable: "Bán nhà mặt phố" }, { value: "5", lable: "Bán đất nền dự án" }, { value: "6", lable: "Bán đất" }, { value: "7", lable: "Bán trang trại, khu nghỉ dưỡng" }, { value: "8", lable: "Bán kho, nhà xưởng" }, { value: "99", lable: "Bán loại bất động sản khác" }];

	danhMuc.LoaiNhaDatCanMuaWeb = [{ value: "1", lable: "Mua căn hộ chung cư" }, { value: "2", lable: "Mua nhà riêng" }, { value: "3", lable: "Mua biệt thự, liền kề" }, { value: "4", lable: "Mua nhà mặt phố" }, { value: "5", lable: "Mua đất nền dự án" }, { value: "6", lable: "Mua đất" }, { value: "7", lable: "Mua trang trại, khu nghỉ dưỡng" }, { value: "8", lable: "Bán trang trại, khu nghỉ dưỡng" }, { value: "9", lable: "Mua kho, nhà xưởng" }, { value: "10", lable: "Mua loại BĐS khác" }, { value: "11", lable: "Tìm kiếm nâng cao" }, { value: "0", lable: "Tất cả" }];

	danhMuc.LoaiNhaDatCanThueWeb = [{ value: "1", lable: "Cần thuê căn hộ chung cư" }, { value: "2", lable: "Cần thuê nhà riêng" }, { value: "3", lable: "Cần thuê nhà mặt phố" }, { value: "4", lable: "Cần thuê nhà trọ, phòng trọ" }, { value: "5", lable: "Cần thuê văn phòng" }, { value: "6", lable: "Cần thuê cửa hàng, ki ốt" }, { value: "7", lable: "Cần thuê kho, nhà xưởng, đất" }, { value: "8", lable: "Cần thuê loại BĐS khác" }, { value: "11", lable: "Tìm kiếm nâng cao" }, { value: "0", lable: "Tất cả" }];

	danhMuc.LoaiNhaDatThue = {
	    1: "Cho Thuê căn hộ chung cư",
	    2: "Cho Thuê nhà riêng",
	    3: "Cho Thuê nhà mặt phố",
	    4: "Cho Thuê nhà trọ, phòng trọ",
	    5: "Cho Thuê văn phòng",
	    6: "Cho Thuê cửa hàng, ki-ốt",
	    7: "Cho Thuê kho, nhà xưởng, đất",
	    99: "Cho Thuê loại bất động sản khác",
	    8: "Tìm kiếm nâng cao",
	    0: "Tất cả"
	};

	danhMuc.LoaiNhaDatThueWeb = [{ value: "0", lable: "Bất kỳ" }, { value: "1", lable: "Cho Thuê căn hộ chung cư" }, { value: "2", lable: "Cho Thuê nhà riêng" }, { value: "3", lable: "Cho Thuê nhà mặt phố" }, { value: "6", lable: "Cho thuê nhà trọ, phòng trọ" }, { value: "4", lable: "Cho Thuê văn phòng" }, { value: "5", lable: "Cho Thuê cửa hàng, ki-ốt" }, { value: "7", lable: "Cho thuê kho, nhà xưởng, đất" }, { value: "99", lable: "Cho Thuê loại bất động sản khác" }];

	danhMuc.DacTinhNha = [{ value: "0", lable: "Nhà mới xây" }, { value: "1", lable: "Nhà lô góc" }, { value: "2", lable: "Ôtô đỗ cửa" }, { value: "3", lable: "Nhà kinh doanh được" }, { value: "4", lable: "Nội thất đầy đủ" }, { value: "5", lable: "Chính chủ đăng tin" }];

	danhMuc.SoPhongNgu = {
	    0: BAT_KY,
	    1: "1+",
	    2: "2+",
	    3: "3+",
	    4: "4+",
	    5: "5+"
	};

	danhMuc.SoTang = {
	    0: BAT_KY,
	    1: "1+",
	    2: "2+",
	    3: "3+",
	    4: "4+",
	    5: "5+"
	};

	danhMuc.SoPhongTam = {
	    0: BAT_KY,
	    1: "1+",
	    2: "2+",
	    3: "3+",
	    4: "4+",
	    5: "5+"
	};

	danhMuc.RadiusInKm = {
	    0.5: "0.5km",
	    1: "1km",
	    2: "2km",
	    3: "3km",
	    4: "4km",
	    5: "5km"
	};

	danhMuc.RadiusInKmKey = [0.5, 1, 2, 3, 4, 5];

	danhMuc.NgayDaDang = {
	    0: BAT_KY,
	    1: "1",
	    7: "7",
	    14: "14",
	    30: "30",
	    90: "90"
	};

	danhMuc.NgayDaDangKey = [0, 1, 7, 14, 30, 90];

	danhMuc.HuongNha = {
	    0: BAT_KY,
	    1: "Đông",
	    2: "Tây",
	    3: "Nam",
	    4: "Bắc",
	    5: "Đông-Bắc",
	    6: "Tây-Bắc",
	    7: "Đông-Nam",
	    8: "Tây-Nam"
	};

	danhMuc.getDanhMucKeys = function (hashDanhMuc) {
	    var result = [];
	    for (var k in hashDanhMuc) {
	        result.push(k);
	    }
	    return result;
	};

	danhMuc.getNameValueArray = function (hashDanhMuc) {
	    console.log("getNameValueArray");
	    console.log(hashDanhMuc);
	    var result = [];
	    //var keys = danhMuc.getDanhMucKeys(hashDanhMuc);
	    for (var k in hashDanhMuc) {
	        result.push({
	            value: k,
	            lable: hashDanhMuc[k]
	        });
	    }
	    console.log(result);
	    return result;
	};

	danhMuc.getDanhMucValues = function (hashDanhMuc) {
	    var result = [];
	    for (var k in hashDanhMuc) {
	        result.push(hashDanhMuc[k]);
	    }
	    return result;
	};

	danhMuc.getLoaiNhaDatBanValues = function () {
	    return danhMuc.getDanhMucValues(danhMuc.LoaiNhaDatBan);
	};

	danhMuc.getLoaiNhaDatThueValues = function () {
	    return danhMuc.getDanhMucValues(danhMuc.LoaiNhaDatThue);
	};

	danhMuc.getSoPhongNguValues = function () {
	    return danhMuc.getDanhMucValues(danhMuc.SoPhongNgu);
	};

	danhMuc.getSoTangValues = function () {
	    return danhMuc.getDanhMucValues(danhMuc.SoTang);
	};

	danhMuc.getSoPhongTamValues = function () {
	    return danhMuc.getDanhMucValues(danhMuc.SoPhongTam);
	};

	danhMuc.getHuongNhaValues = function () {
	    return danhMuc.getDanhMucValues(danhMuc.HuongNha);
	};

	danhMuc.getRadiusInKmValues = function () {
	    return ["0.5", "1", "2", "3", "4", "5"];
	};

	danhMuc.getNgayDaDangValues = function () {
	    return danhMuc.NgayDaDangKey;
	};

	danhMuc.getLoaiNhaDatForDisplay = function (loaiTin, loaiNhaDatKey) {
	    var value = '';
	    if (loaiTin == 'ban') value = danhMuc.LoaiNhaDatBan[loaiNhaDatKey];

	    if (loaiTin == 'thue') value = danhMuc.LoaiNhaDatThue[loaiNhaDatKey];

	    if (!value) value = BAT_KY;

	    return value;
	};

	danhMuc.getLoaiNhaDatForDisplayNew = function (loaiTin, loaiNhaDatKey) {
	    var value = '';
	    if (loaiTin == '0') value = danhMuc.LoaiNhaDatBan[loaiNhaDatKey];

	    if (loaiTin == '1') value = danhMuc.LoaiNhaDatThue[loaiNhaDatKey];

	    if (!value) value = BAT_KY;

	    return value;
	};

	danhMuc.getDanhMucKeyByIndex = function (hashDanhMuc, index) {
	    var find = '';
	    var i = 0;
	    for (var k in hashDanhMuc) {
	        if (i == index) {
	            find = k;
	            break;
	        }
	        i++;
	    }
	    return find;
	};

	danhMuc.getSoPhongByIndex = function (index) {
	    return danhMuc.getDanhMucKeyByIndex(danhMuc.SoPhongNgu, index);
	};

	danhMuc.getSoTangByIndex = function (index) {
	    return danhMuc.getDanhMucKeyByIndex(danhMuc.SoTang, index);
	};

	danhMuc.getSoPhongTamByIndex = function (index) {
	    return danhMuc.getDanhMucKeyByIndex(danhMuc.SoPhongTam, index);
	};

	danhMuc.getRadiusInKmByIndex = function (index) {
	    return danhMuc.RadiusInKmKey[index];
	};

	danhMuc.getHuongNhaDisplay = function (val) {
	    if (!val) {
	        return "Không rõ";
	    }
	    return "Hướng " + eval('danhMuc.HuongNha[' + val + ']');
	};

	module.exports = danhMuc;

	if (typeof window !== 'undefined') window.RewayListValue = danhMuc;

	//import {LoaiNhaDatBan} from "danhMuc"...

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _ = __webpack_require__(5);

	var util = __webpack_require__(46);

	var placeUtil = {};

	placeUtil.getDuAnFullName = function (place) {
	    if (!place.duAn) {
	        return null;
	    }

	    var ret = "";
	    var _appendIfHave = function _appendIfHave(ret, value) {
	        if (ret) ret = ret + ", " + value;else ret = value;

	        return ret;
	    };

	    ret = _appendIfHave(ret, place.duAn);

	    ret = _appendIfHave(ret, place.diaChinh.huyen);

	    ret = _appendIfHave(ret, place.diaChinh.tinh);

	    return ret;
	};

	placeUtil.getDiaChinhFromGooglePlace = function (place) {
	    var tinh = "";
	    var huyen = "";
	    var xa = "";

	    for (var i = 0; i < place.address_components.length; i++) {
	        var addr = place.address_components[i];

	        if (addr.types[0] == placeUtil.type.TINH) {
	            tinh = addr.long_name;
	        }

	        if (addr.types[0] == placeUtil.type.HUYEN) {
	            huyen = addr.long_name;
	        }

	        if (addr.types[0] == placeUtil.type.XA || addr.types[0] == placeUtil.type.XA2) {
	            xa = addr.long_name;
	        }
	    }

	    //todo: Name tu liem ? harded code for now
	    if (huyen == "Từ Liêm") {
	        huyen = "Nam Từ Liêm";
	    }

	    var diaChinh = {
	        tinh: this.chuanHoa(tinh),
	        huyen: this.chuanHoa(huyen),
	        xa: this.chuanHoa(xa),
	        tinhCoDau: tinh,
	        huyenCoDau: huyen,
	        xaCoDau: xa
	    };

	    return diaChinh;
	};

	placeUtil.getDiaChinh = function (diaChi, needRemovePrefix) {
	    var spl = diaChi.split(",");
	    if (!spl || spl.length == 0) {
	        spl = diaChi.split("-");
	    }

	    var diaChinh = {};

	    var i = spl.length;
	    diaChinh.tinh = spl[--i].trim();
	    if (diaChinh.tinh) diaChinh.tinhKhongDau = util.locDau(diaChinh.tinh);

	    var rawHuyen = spl[--i];
	    if (rawHuyen) {
	        if (needRemovePrefix) {
	            diaChinh.huyen = rawHuyen.trim().replace("Quận ", "").replace("Huyện ", "");
	        } else {
	            diaChinh.huyen = rawHuyen.trim();
	        }

	        if (diaChinh.huyen) diaChinh.huyenKhongDau = util.locDau(diaChinh.huyen);
	    } else {
	        console.log("WARN -- no HUYEN information " + diaChi);
	    }

	    if (i > 0) {
	        var v = spl[--i].trim();
	        if (!v.startsWith("Dự án")) {
	            diaChinh.xa = v;
	            if (diaChinh.xa) diaChinh.xaKhongDau = util.locDau(diaChinh.xa);
	        } else {
	            return diaChinh;
	        }
	    }

	    if (i > 0) {
	        var v = spl[--i].trim();
	        if (!v.startsWith("Dự án")) {
	            diaChinh.duong = v;
	        } else {
	            return diaChinh;
	        }
	    }

	    return diaChinh;
	};

	placeUtil.fullName = function (place) {
	    //todo: other types
	    if (place.placeType === "Quan" || place.placeType === "Huyen") {
	        return place.placeName + ", " + place.parentName;
	    }

	    return place.placeName;
	};
	// return Quoc Gia form Place.Place is type of Google api
	placeUtil.getQuocGia = function (place) {

	    var getCountry = "";

	    for (var i = 0; i < place.address_components.length; i++) {
	        var addr = place.address_components[i];

	        if (addr.types[0] == 'country') {
	            getCountry = addr.long_name;
	        }
	    }
	    return getCountry;
	};

	// return Tinh form Place.Place is type of Google api
	placeUtil.getTinh = function (place) {

	    var Tinh = "";

	    for (var i = 0; i < place.address_components.length; i++) {
	        var addr = place.address_components[i];

	        if (addr.types[0] == placeUtil.type.TINH) {
	            Tinh = addr.long_name;
	        }
	    }
	    return Tinh;
	};

	// return Huyen form Place.Place is type of Google api
	placeUtil.getHuyen = function (place) {

	    var Huyen = "";

	    for (var i = 0; i < place.address_components.length; i++) {
	        var addr = place.address_components[i];

	        if (addr.types[0] == placeUtil.type.HUYEN) {
	            Huyen = addr.long_name;
	        }
	    }
	    return Huyen;
	};

	// return Xa form Place.Place is type of Google api
	placeUtil.getXa = function (place) {

	    var Xa = "";

	    for (var i = 0; i < place.address_components.length; i++) {
	        var addr = place.address_components[i];

	        if (addr.types[0] == placeUtil.type.XA || addr.types[0] == placeUtil.type.XA2) {
	            Xa = addr.long_name;
	        }
	    }
	    return Xa;
	};

	// chuan hoa va bo dau 1 string
	placeUtil.chuanHoaAndLocDau = function (str) {
	    if (!str) {
	        return null;
	    }

	    var result = str;

	    /* No need this
	    var COMMON_WORDS = [
	        'Quận ','Huyện ',
	        'Tỉnh ', 'Thành phố ','TP.' ,'Tp.' ,'tp.','tp ' ,'TP ',
	        'Phường ' ,'Xã ', 'Thị trấn '
	    ];
	      COMMON_WORDS.forEach((e) => {
	      if (result.startsWith(e)) {
	        result = result.substring(e.length)
	      }
	    });
	    */

	    result = util.locDau(result);

	    return result;
	};

	// chuan hoa va bo dau 1 string: tu google
	placeUtil.chuanHoa = function (string) {

	    if (!string) {
	        return null;
	    }

	    var result = util.locDau(string);

	    var COMMON_WORDS = {
	        '-district': '',
	        '-vietnam': '',
	        '-province': '',
	        'hanoi': 'ha-noi'
	    };
	    for (var f in COMMON_WORDS) {
	        result = result.replace(f, COMMON_WORDS[f]);
	    }

	    return result;
	};

	placeUtil.type = {
	    TINH: "administrative_area_level_1",
	    HUYEN: "administrative_area_level_2",
	    XA: "administrative_area_level_3",
	    XA2: "sublocality_level_1",
	    DUONG: "route"
	};

	placeUtil.typeName = {
	    TINH: "Tỉnh",
	    HUYEN: "Huyện",
	    XA: "Xã",
	    DUONG: "Đường",
	    DIA_DIEM: "Địa điểm"

	};

	placeUtil.chuanHoaDiaChinh = function (diaChinh) {
	    if (diaChinh) {
	        diaChinh.tinhKhongDau = this.chuanHoa(diaChinh.tinhKhongDau);
	    }
	};

	placeUtil.isHuyen = function (place) {
	    var placeTypes = place.types;

	    if (_.indexOf(placeTypes, placeUtil.type.HUYEN) > -1) {
	        return true;
	    }

	    if (_.indexOf(placeTypes, 'political') > -1 && _.indexOf(placeTypes, 'locality') > -1 && (place.address_components.length == 3 || place.formatted_address.split(",").length == 3)) {
	        return true;
	    }

	    /*
	    if (_.indexOf(placeTypes, 'political') > -1
	        && _.indexOf(placeTypes, 'sublocality') > -1
	      && _.indexOf(placeTypes, 'sublocality_level_1') > -1
	          && ( place.formatted_address.indexOf("District") > -1 )
	    ) {
	        return true;
	    }
	    */

	    return false;
	};

	placeUtil.getTypeName = function (place) {
	    var placeTypes = place.types;

	    if (_.indexOf(placeTypes, placeUtil.type.TINH) > -1) {
	        return placeUtil.typeName.TINH;
	    }
	    if (placeUtil.isHuyen(place)) {
	        return placeUtil.typeName.HUYEN;
	    }

	    if (_.indexOf(placeTypes, placeUtil.type.XA) > -1) {
	        return placeUtil.typeName.XA;
	    }

	    if (_.indexOf(placeTypes, placeUtil.type.XA2) > -1) {
	        return placeUtil.typeName.XA;
	    }

	    if (_.indexOf(placeTypes, 'political') > -1 && (_.indexOf(placeTypes, 'locality') > -1 || _.indexOf(placeTypes, 'sublocality_level_1') > -1 || _.indexOf(placeTypes, 'neighborhood') > -1) && (place.address_components.length == 4 || place.formatted_address.split(",").length == 4)) {
	        return placeUtil.typeName.XA;
	    }

	    if (_.indexOf(placeTypes, placeUtil.type.DUONG) > -1) {
	        return placeUtil.typeName.DUONG;
	    }

	    return placeUtil.typeName.DIA_DIEM;
	};

	placeUtil.getShortName = function (fullName) {
	    if (!fullName) {
	        return null;
	    }

	    var result = fullName;

	    var COMMON_WORDS = [{ val1: ', Huyện ', val2: ', ' }, { val1: ', Tỉnh ', val2: ', ' }, { val1: ', Thành phố ', val2: ', ' }, { val1: ', Quận ', val2: ', Q. ' }, { val1: 'Thị trấn ', val2: 'TT. ' }, { val1: 'Phường ', val2: 'P. ' }, { val1: 'Thị xã ', val2: 'Tx. ' }];

	    COMMON_WORDS.forEach(function (e) {
	        result = result.replace(e.val1, e.val2);
	    });

	    return result;
	};

	placeUtil.isOnePoint = function (place) {
	    var name = placeUtil.relandTypeName || placeUtil.getTypeName(place);
	    return name === placeUtil.typeName.DIA_DIEM || name === placeUtil.typeName.DUONG;
	};

	module.exports = placeUtil;

	if (typeof window !== 'undefined') window.RewayPlaceUtil = placeUtil;

/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var striptags = __webpack_require__(47);
	var moment = __webpack_require__(48);
	var constant = __webpack_require__(154);
	var DanhMuc = __webpack_require__(44);
	var cfg = __webpack_require__(155);
	var _ = __webpack_require__(5);

	var util = {};

	util.locDau = function (str) {
	    var a1 = locDauInt(str);
	    var a2 = locDauInt(a1);

	    return a2;
	};

	util.locHtml = function (str) {
	    if (!str) {
	        return str;
	    }
	    str = str.replace(/&lt;|&LT|&#x0003C;|&#60;/g, "<");
	    str = str.replace(/&nbsp;|&#160;/g, " ");
	    str = str.replace(/&quot;|&QUOT;|&#x00022;|&#34;/g, "\"");
	    str = str.replace(/&gt;|&GT;|&#x0003E;|&#62;/g, ">");
	    str = str.replace(/&amp;|&AMP;|&#x00026;|&#38;/g, "&");
	    return str;
	};

	var locDauInt = function locDauInt(str) {
	    if (!str) {
	        return str;
	    }
	    //var str = (document.getElementById("title").value);
	    str = str.toLowerCase();
	    str = str.replace(/à|á|ạ|ả|ã|â|ầ|ấ|ậ|ẩ|ẫ|ă|ằ|ắ|ặ|ẳ|ẵ|à/g, "a");
	    str = str.replace(/è|é|ẹ|ẻ|ẽ|ê|ề|ế|ệ|ể|ễ/g, "e");
	    str = str.replace(/ì|í|ị|ỉ|ĩ/g, "i");
	    str = str.replace(/ò|ó|ọ|ỏ|õ|ô|ồ|ố|ộ|ổ|ỗ|ơ|ờ|ộ|ớ|ợ|ở|ỡ|ọ/g, "o");
	    str = str.replace(/ù|ú|ụ|ủ|ũ|ư|ừ|ứ|ự|ử|ữ/g, "u");
	    str = str.replace(/ỳ|ý|ỵ|ỷ|ỹ/g, "y");
	    str = str.replace(/đ/g, "d");
	    str = str.replace(/!|@|\$|%|\^|\*|\(|\)|\+|\=|\<|\>|\?|\/|,|\.|\:|\'| |\"|\&|\#|\[|\]|~/g, "-");
	    str = str.replace(/-+-/g, "-"); //thay thế 2- thành 1-
	    str = str.replace(/^\-+|\-+$/g, ""); //cắt bỏ ký tự - ở đầu và cuối chuỗi
	    return str;
	};

	util.roundToTwo = function (num) {
	    return +(Math.round(num + "e+2") + "e-2");
	};

	util.getPriceDisplay = function (val, loaiTin, forWeb) {
	    try {
	        if (!val || val == -1) {
	            return "Thỏa thuận";
	        }

	        val = Number(val);

	        if (loaiTin === 0) {
	            //ban
	            if (val < 1000) {
	                return util.roundToTwo(val) + " triệu";
	            }

	            return util.roundToTwo(val / 1000) + " tỷ";
	        } else {
	            return util.roundToTwo(val) + (forWeb ? "triệu" : "triệu");
	        }
	    } catch (ex) {
	        console.log("Error when getPriceDisplay of " + val, ex);
	    }
	};

	util.getPriceM2Display = function (val, loaiTin, forWeb) {
	    try {
	        if (!val || val == -1) {
	            return "Thỏa thuận";
	        }
	        val = Number(val);
	        if (loaiTin === 0) {
	            //ban
	            if (val >= 1000) {
	                return Math.round(val * 100000) / 100 + " tỷ/m²";
	            } else if (val < 1000 && val >= 1) {
	                return Math.round(val * 10) / 10 + " triệu/m²";
	            } else {
	                return Math.round(val * 1000) + " nghìn/m²";
	            }
	        } else {
	            if (val >= 1) {
	                return Math.round(val * 10) / 10 + " triệu/m²";
	            } else {
	                return Math.round(val * 1000) + " nghìn/m²";
	            }
	        }
	    } catch (ex) {
	        console.log("Error when getPriceDisplay of " + val, ex);
	    }
	};

	util.getDienTichDisplay = function (val) {
	    if (!val || val == -1) {
	        return "Không rõ";
	    }

	    return val + "m²";
	};

	util.replaceBrHtml = function (string_to_replace) {
	    return string_to_replace.replace(/&nbsp;/g, ' ').replace(/<br\s*\/?>/mg, "\n\r");
	    if (!val) {
	        return "Không rõ";
	    }
	};

	util.replaceBrToDowntoLine = function (inputString) {
	    var kq = "";
	    var Timkiem = 'Tìm kiếm theo từ khóa';

	    var kqReplace = util.replaceBrHtml(inputString);
	    var kqReplaceA = striptags(kqReplace);

	    if (inputString) {
	        var idx = kqReplaceA.indexOf(Timkiem);
	        if (idx > 0) kq = kqReplaceA.substring(0, idx);else kq = kqReplaceA;
	    }
	    return kq;
	};

	util.removeAllHtmlTagAndReplaceOneString = function (inputString, replaceString) {
	    var kqRemove = striptags(inputString);
	    return kqRemove.replace(replaceString, "").trim();
	};

	util.popField = function (obj, field) {
	    var a = obj[field];
	    delete obj[field];

	    return a;
	};
	// Input string is 25-05-2015 to Date type
	util.parseDate = function (dateStr) {
	    var parts = dateStr.split("-");
	    return new Date(parts[2], parts[1] - 1, parts[0]);
	};

	util.equalDate = function (date1Str, date2Str) {
	    var date1 = this.parseDate(date1Str);
	    var date2 = this.parseDate(date2Str);
	    if (date1 < date2 || date1 > date2) return false;else return true;
	};

	util.parseDate = function (dateStr) {
	    var parts = dateStr.split("-");
	    return new Date(parts[2], parts[1] - 1, parts[0]);
	};

	util.convertFormatDate = function (ngayDangTin) {
	    var bdsComDateFormat = 'DD-MM-YYYY';
	    if (moment(ngayDangTin, bdsComDateFormat).isValid()) {
	        var ngayDangTinDate = moment(ngayDangTin, bdsComDateFormat);
	        return moment(ngayDangTinDate).format(constant.FORMAT.DATE_IN_DB);
	    }
	};

	util.convertFormatDatetoYYYYMMDD = function (ngayDangTin) {
	    var bdsComDateFormat = 'DD/MM/YYYY';
	    if (moment(ngayDangTin, bdsComDateFormat).isValid()) {
	        var ngayDangTinDate = moment(ngayDangTin, bdsComDateFormat);
	        return moment(ngayDangTinDate).format(constant.FORMAT.DATE_IN_DB);
	    }
	};

	util.isEmail = function (str) {
	    return str && str.indexOf('@') > -1;
	};

	//comments out sicne seems not used
	// //giaDESC, dienTichASC, ngayDangTinASC, giaM2DESC, soPhongNguDESC, soPhongTamDESC
	// util.toOrderBy = function(orderByPam) {
	//     var orderByField;
	//     var orderByType;
	//     var ret = null;

	//     if (orderByPam){
	//         var arr = orderByPam.split(",");
	//         var firstElement = arr[0];
	//         var len =   firstElement.length;

	//         if(firstElement.endsWith("DESC")){
	//             orderByField = firstElement.substring(0,len - 4);
	//             orderByType =  "DESC";
	//         } else {
	//             if (firstElement.endsWith("ASC"))
	//                 orderByField = firstElement.substring(0,len - 3);
	//             else
	//                 orderByField = firstElement;

	//             orderByType =  "ASC";
	//         }

	//         ret = {orderByField, orderByType};
	//     }

	//     return ret;
	// };

	util.toNumber = function (val) {
	    if (isNaN(val)) {
	        console.log("Not a number, will return null:" + val);
	        return undefined;
	    }

	    return Number(val);
	};

	util.upperFirstCharacter = function (str) {
	    if (!str || str.length == 0) {
	        return "";
	    }

	    return str[0].toUpperCase() + str.slice(1);;
	};

	util.convertQuery2String = function (query) {
	    var toStrRange = function toStrRange(range) {
	        if (range && range[0] == 0 && range[1] == DanhMuc.BIG) {
	            return undefined;
	        }
	        return range;
	    };

	    // let {loaiTin, loaiNhaDat, giaBETWEEN, soPhongNguGREATER, dienTichBETWEEN,
	    //   orderBy, limit, huongNha, ngayDangTinGREATER, polygon, pageNo, soPhongTamGREATER,
	    //   diaChinh, circle, viewport, isIncludeCountInResponse
	    // } = query;

	    var tmp = {
	        'tin': query.loaiTin,
	        'nhà đất': query.loaiNhaDat == 0 ? undefined : query.loaiNhaDat,
	        'giá': toStrRange(query.giaBETWEEN),
	        'ngủ': query.soPhongNguGREATER == 0 ? undefined : query.soPhongNguGREATER,
	        'tắm': query.soPhongTamGREATER == 0 ? undefined : query.soPhongTamGREATER,
	        'dt': toStrRange(query.dienTichBETWEEN),
	        'orderBy': query.orderBy,
	        'diaChinh': query.diaChinh,
	        'viewport': query.viewport,
	        'circle': query.circle,
	        'limit': query.limit || 250 || undefined,
	        'hướng': query.huongNha || undefined,
	        'ngày': query.ngayDangTinGREATER || undefined,
	        'polygon': query.polygon || undefined,
	        'pageNo': query.pageNo || undefined,
	        'isIncludeCountInResponse': query.isIncludeCountInResponse || undefined
	    };

	    return JSON.stringify(tmp);
	};

	var defaultItemInCollection = {
	    adsID: "EMPTY",
	    giaFmt: " ",
	    khuVuc: " ",
	    soPhongNguFmt: " ",
	    soPhongTamFmt: " ",
	    dienTichFmt: " ",
	    cover: "http://203.162.13.177:5000/web/asset/img/reland_house_large.jpg"
	};

	util.appDefault = function (collection) {
	    for (var i = collection.data.length; i < 5; i++) {
	        collection.data.push(defaultItemInCollection);
	    }

	    return collection;
	};

	util.convertListResult = function (list) {
	    var result = list.map(function (e) {
	        var cover = e.image.cover || cfg.noCoverUrl;
	        if (cover == '/web/asset/img/reland_house_large.jpg') {
	            cover = cfg.noCoverUrl;
	        }

	        return {
	            adsID: e.adsID,
	            loaiTin: e.loaiTin,
	            loaiNhaDat: e.loaiNhaDat,
	            giaFmt: e.giaFmt || undefined,
	            dienTichFmt: e.dienTichFmt || undefined,
	            khuVuc: e.place.diaChinh.huyen ? e.place.diaChinh.huyen + ", " + e.place.diaChinh.tinh : e.place.diaChinh.tinh,
	            soPhongNguFmt: e.soPhongNguFmt || undefined,
	            soPhongTamFmt: e.soPhongTamFmt || undefined,
	            cover: cover
	        };
	    });
	    return result;
	};

	util.formatHomeBst = function (title1, title2, query, res) {
	    if (!res.list || res.list.length == 0) {
	        return {
	            title1: title1,
	            title2: title2,
	            data: [],
	            query: query
	        };
	    }
	    var collection = {
	        title1: title1,
	        title2: title2,
	        data: convertListResult(res.list),
	        query: query
	    };
	    return collection;
	};

	util.generateHomeSearchSeries = function (query, currentLocation, searcher, searcherCallback) {
	    console.log("homeData4App V2 " + JSON.stringify(query));
	    query.limit = 5;
	    query.pageNo = 1;
	    query.loaiTin = query.loaiTin ? query.loaiTin : 0;
	    var ngayDangTinBegin = moment().subtract(365, 'days').format('YYYYMMDD');
	    query.isIncludeCountInResponse = false; //no need count
	    query.ngayDangTinGREATER = ngayDangTinBegin;
	    //todo: order ?
	    var lastQuery = undefined;
	    if (query) {
	        lastQuery = {};
	        Object.assign(lastQuery, query);
	    }
	    var searchDiaChinh = query.diaChinh;
	    // services.getDiaChinhKhongDauByGeocode(currentLocation.lat, currentLocation.lon)
	    function formatBst(title1, title2, query, res) {
	        if (!res.list || res.list.length == 0) {
	            return {
	                title1: title1,
	                title2: title2,
	                data: [],
	                query: query
	            };
	        }
	        var collection = {
	            title1: title1,
	            title2: title2,
	            data: convertListResult(res.list),
	            query: query
	        };
	        return collection;
	    }
	    function appDefault(collection) {
	        for (var i = collection.data.length; i < 5; i++) {
	            collection.data.push(defaultItemInCollection);
	        }

	        return collection;
	    };

	    function convertListResult(list) {
	        var result = list.map(function (e) {
	            var cover = e.image.cover || cfg.noCoverUrl;
	            if (cover == '/web/asset/img/reland_house_large.jpg') {
	                cover = cfg.noCoverUrl;
	            }

	            return {
	                adsID: e.adsID,
	                loaiTin: e.loaiTin,
	                loaiNhaDat: e.loaiNhaDat,
	                giaFmt: e.giaFmt || undefined,
	                dienTichFmt: e.dienTichFmt || undefined,
	                khuVuc: e.place.diaChinh.huyen ? e.place.diaChinh.huyen + ", " + e.place.diaChinh.tinh : e.place.diaChinh.tinh,
	                soPhongNguFmt: e.soPhongNguFmt || undefined,
	                soPhongTamFmt: e.soPhongTamFmt || undefined,
	                cover: cover
	            };
	        });
	        return result;
	    };

	    function generateSearchNgangGiaFn(query, diaChinh) {
	        var results = [];
	        var loaiNhaDat = [];
	        var loaiTin = query.loaiTin;
	        if (!diaChinh) diaChinh = {};
	        if (loaiTin == 0) {
	            loaiNhaDat = [1, 2, 3, 4, 7, 5];
	        } else if (loaiTin == 1) {
	            loaiNhaDat = [1, 2, 3, 4];
	        }

	        _(loaiNhaDat).forEach(function (value) {
	            // console.log("tim log loaiNhaDat" + value);
	            results.push(function (callback) {
	                var queryNgangGia = {};Object.assign(queryNgangGia, query);
	                var loaiNhaDatName = DanhMuc.getLoaiNhaDatForDisplayNew(loaiTin, value);
	                var giaDisplay = " ngang giá";
	                if (!queryNgangGia.giaBETWEEN || queryNgangGia.giaBETWEEN[0] == 0 && queryNgangGia.giaBETWEEN[1] > 99999) {
	                    queryNgangGia.giaBETWEEN = [];
	                    queryNgangGia.giaBETWEEN[0] = 0;
	                    queryNgangGia.giaBETWEEN[1] = 5000;
	                    if (loaiTin == 0) {
	                        if (value == 1 || value == 2 || value == 5 || value == 7) {
	                            loaiNhaDatName = loaiNhaDatName + " dưới 5 tỷ";
	                        } else {
	                            loaiNhaDatName = loaiNhaDatName + " dưới 20 tỷ";
	                        }
	                    } else if (loaiTin == 1) {
	                        if (value == 4) {
	                            loaiNhaDatName = loaiNhaDatName + " dưới 5 triệu";
	                        } else {
	                            loaiNhaDatName = loaiNhaDatName + " dưới 20 triệu";
	                        }
	                    }
	                } else {
	                    loaiNhaDatName = loaiNhaDatName + " ngang giá";
	                }
	                // queryNgangGia.ngayDangTinGREATER = 700; 
	                queryNgangGia.orderBy = { name: "ngayDangTin", type: "DESC" };
	                queryNgangGia.loaiNhaDat = [value];
	                // searchAds(loaiNhaDatName   ,diaChinh?diaChinh.fullName:"",queryNgangGia,callback);
	                searcher(queryNgangGia).then(function (res) {
	                    res.data.list = formatBst(loaiNhaDatName, diaChinh ? diaChinh.fullName : "", queryNgangGia, res.data);
	                    searcherCallback(res);
	                    callback(null, res.data.list);
	                });
	            });
	            // console.log("tim log " + results[0]);
	        });

	        return results;
	    }
	    var fl = [];
	    if (currentLocation && currentLocation.lat) {

	        // query.diaChinh = currentLocation;
	        query.circle = {
	            center: {
	                lat: currentLocation.lat,
	                lon: currentLocation.lon
	            },
	            radius: 2
	        };
	        fl.push(function (callback) {
	            var queryNearBy = {};
	            Object.assign(queryNearBy, query);
	            // queryNearBy.diaChinh.xaKhongDau = query.diaChinh.xa || undefined;
	            searcher(queryNearBy).then(function (res) {
	                res.data.list = formatBst("Nhà Gần Vị Trí Bạn", undefined, queryNearBy, res.data);
	                searcherCallback(res);
	                callback(null, res.data.list);
	            });
	        });
	    }
	    if (lastQuery) {
	        fl.push(function (callback) {
	            var queryMoiDang = {};
	            Object.assign(queryMoiDang, query);
	            queryMoiDang.orderBy = {
	                name: "ngayDangTin",
	                type: "DESC"
	            };
	            // searchAds("Nhà Mới Đăng", query.diaChinh?(query.diaChinh.fullName):query.fullName, queryMoiDang, callback);
	            searcher(queryMoiDang).then(function (res) {
	                res.data.list = formatBst("Nhà Mới Đăng", query.diaChinh ? query.diaChinh.fullName : query.fullName, queryMoiDang, res.data);
	                searcherCallback(res);
	                callback(null, res.data.list);
	            });
	        });
	        if (lastQuery.giaBETWEEN && !(lastQuery.giaBETWEEN[0] == 0 && lastQuery.giaBETWEEN[1] > 999999)) {}
	        var ngangGiaFl = generateSearchNgangGiaFn(lastQuery, query.diaChinh);
	        fl = _.concat(fl, ngangGiaFl);
	        // console.log("tim log bc " + ngangGiaFl[1]);
	    } else {
	            console.log("tim log not have last query");
	            fl.push(function (callback) {
	                var queryMoiDang = {};
	                Object.assign(queryMoiDang, query);
	                queryMoiDang.orderBy = {
	                    name: "ngayDangTin",
	                    type: "DESC"
	                };

	                //searchAds("Nhà Mới Đăng", query.diaChinh?(query.diaChinh.fullName):query.fullName, queryMoiDang, callback);
	                searcher(queryMoiDang).then(function (res) {
	                    res.data.list = formatBst("Nhà Mới Đăng", query.diaChinh ? query.diaChinh.fullName : query.fullName, queryMoiDang, res.data);
	                    searcherCallback(res);
	                    callback(null, res.data.list);
	                });
	            });
	        }

	    return fl;
	};

	util.convertGiaM2 = function (value) {
	    if (value) {
	        if (value > 1000) {
	            return value + " tỷ";
	        }
	    } else {
	        return '';
	    }
	};

	module.exports = util;

	if (typeof window !== 'undefined') window.RewayUtil = util;

/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';

	(function (root, factory) {
	    if (true) {
	        // AMD. Register as an anonymous module.
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof module === 'object' && module.exports) {
	        // Node. Does not work with strict CommonJS, but
	        // only CommonJS-like environments that support module.exports,
	        // like Node.
	        module.exports = factory();
	    } else {
	        // Browser globals (root is window)
	        root.striptags = factory();
	  }
	}(this, function () {
	    var STATE_OUTPUT       = 0,
	        STATE_HTML         = 1,
	        STATE_PRE_COMMENT  = 2,
	        STATE_COMMENT      = 3,
	        WHITESPACE         = /\s/,
	        ALLOWED_TAGS_REGEX = /<(\w*)>/g;

	    function striptags(html, allowableTags) {
	        var html = html || '',
	            state = STATE_OUTPUT,
	            depth = 0,
	            output = '',
	            tagBuffer = '',
	            inQuote = false,
	            i, length, c;

	        if (typeof allowableTags === 'string') {
	            // Parse the string into an array of tags
	            allowableTags = parseAllowableTags(allowableTags);
	        } else if (!Array.isArray(allowableTags)) {
	            // If it is not an array, explicitly set to null
	            allowableTags = null;
	        }

	        for (i = 0, length = html.length; i < length; i++) {
	            c = html[i];

	            switch (c) {
	                case '<': {
	                    // ignore '<' if inside a quote
	                    if (inQuote) {
	                        break;
	                    }

	                    // '<' followed by a space is not a valid tag, continue
	                    if (html[i + 1] == ' ') {
	                        consumeCharacter(c);
	                        break;
	                    }

	                    // change to STATE_HTML
	                    if (state == STATE_OUTPUT) {
	                        state = STATE_HTML;

	                        consumeCharacter(c);
	                        break;
	                    }

	                    // ignore additional '<' characters when inside a tag
	                    if (state == STATE_HTML) {
	                        depth++;
	                        break;
	                    }

	                    consumeCharacter(c);
	                    break;
	                }

	                case '>': {
	                    // something like this is happening: '<<>>'
	                    if (depth) {
	                        depth--;
	                        break;
	                    }

	                    // ignore '>' if inside a quote
	                    if (inQuote) {
	                        break;
	                    }

	                    // an HTML tag was closed
	                    if (state == STATE_HTML) {
	                        inQuote = state = 0;

	                        if (allowableTags) {
	                            tagBuffer += '>';
	                            flushTagBuffer();
	                        }

	                        break;
	                    }

	                    // '<!' met its ending '>'
	                    if (state == STATE_PRE_COMMENT) {
	                        inQuote = state = 0;
	                        tagBuffer = '';
	                        break;
	                    }

	                    // if last two characters were '--', then end comment
	                    if (state == STATE_COMMENT &&
	                        html[i - 1] == '-' &&
	                        html[i - 2] == '-') {

	                        inQuote = state = 0;
	                        tagBuffer = '';
	                        break;
	                    }

	                    consumeCharacter(c);
	                    break;
	                }

	                // catch both single and double quotes
	                case '"':
	                case '\'': {
	                    if (state == STATE_HTML) {
	                        if (inQuote == c) {
	                            // end quote found
	                            inQuote = false;
	                        } else if (!inQuote) {
	                            // start quote only if not already in one
	                            inQuote = c;
	                        }
	                    }

	                    consumeCharacter(c);
	                    break;
	                }

	                case '!': {
	                    if (state == STATE_HTML &&
	                        html[i - 1] == '<') {

	                        // looks like we might be starting a comment
	                        state = STATE_PRE_COMMENT;
	                        break;
	                    }

	                    consumeCharacter(c);
	                    break;
	                }

	                case '-': {
	                    // if the previous two characters were '!-', this is a comment
	                    if (state == STATE_PRE_COMMENT &&
	                        html[i - 1] == '-' &&
	                        html[i - 2] == '!') {

	                        state = STATE_COMMENT;
	                        break;
	                    }

	                    consumeCharacter(c);
	                    break;
	                }

	                case 'E':
	                case 'e': {
	                    // check for DOCTYPE, because it looks like a comment and isn't
	                    if (state == STATE_PRE_COMMENT &&
	                        html.substr(i - 6, 7).toLowerCase() == 'doctype') {

	                        state = STATE_HTML;
	                        break;
	                    }

	                    consumeCharacter(c);
	                    break;
	                }

	                default: {
	                    consumeCharacter(c);
	                }
	            }
	        }

	        function consumeCharacter(c) {
	            if (state == STATE_OUTPUT) {
	                output += c;
	            } else if (allowableTags && state == STATE_HTML) {
	                tagBuffer += c;
	            }
	        }

	        function flushTagBuffer() {
	            var normalized = '',
	                nonWhitespaceSeen = false,
	                i, length, c;

	            normalizeTagBuffer:
	            for (i = 0, length = tagBuffer.length; i < length; i++) {
	                c = tagBuffer[i].toLowerCase();

	                switch (c) {
	                    case '<': {
	                        break;
	                    }

	                    case '>': {
	                        break normalizeTagBuffer;
	                    }

	                    case '/': {
	                        nonWhitespaceSeen = true;
	                        break;
	                    }

	                    default: {
	                        if (!c.match(WHITESPACE)) {
	                            nonWhitespaceSeen = true;
	                            normalized += c;
	                        } else if (nonWhitespaceSeen) {
	                            break normalizeTagBuffer;
	                        }
	                    }
	                }
	            }

	            if (allowableTags.indexOf(normalized) !== -1) {
	                output += tagBuffer;
	            }

	            tagBuffer = '';
	        }

	        return output;
	    }

	    /**
	     * Return an array containing tags that are allowed to pass through the
	     * algorithm.
	     *
	     * @param string allowableTags A string of tags to allow (e.g. "<b><strong>").
	     * @return array|null An array of allowed tags or null if none.
	     */
	    function parseAllowableTags(allowableTags) {
	        var tagsArray = [],
	            match;

	        while ((match = ALLOWED_TAGS_REGEX.exec(allowableTags)) !== null) {
	            tagsArray.push(match[1]);
	        }

	        return tagsArray.length !== 0 ? tagsArray : null;
	    }

	    return striptags;
	}));


/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {//! moment.js
	//! version : 2.15.1
	//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
	//! license : MIT
	//! momentjs.com

	;(function (global, factory) {
	     true ? module.exports = factory() :
	    typeof define === 'function' && define.amd ? define(factory) :
	    global.moment = factory()
	}(this, function () { 'use strict';

	    var hookCallback;

	    function utils_hooks__hooks () {
	        return hookCallback.apply(null, arguments);
	    }

	    // This is done to register the method called with moment()
	    // without creating circular dependencies.
	    function setHookCallback (callback) {
	        hookCallback = callback;
	    }

	    function isArray(input) {
	        return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
	    }

	    function isObject(input) {
	        // IE8 will treat undefined and null as object if it wasn't for
	        // input != null
	        return input != null && Object.prototype.toString.call(input) === '[object Object]';
	    }

	    function isObjectEmpty(obj) {
	        var k;
	        for (k in obj) {
	            // even if its not own property I'd still call it non-empty
	            return false;
	        }
	        return true;
	    }

	    function isDate(input) {
	        return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
	    }

	    function map(arr, fn) {
	        var res = [], i;
	        for (i = 0; i < arr.length; ++i) {
	            res.push(fn(arr[i], i));
	        }
	        return res;
	    }

	    function hasOwnProp(a, b) {
	        return Object.prototype.hasOwnProperty.call(a, b);
	    }

	    function extend(a, b) {
	        for (var i in b) {
	            if (hasOwnProp(b, i)) {
	                a[i] = b[i];
	            }
	        }

	        if (hasOwnProp(b, 'toString')) {
	            a.toString = b.toString;
	        }

	        if (hasOwnProp(b, 'valueOf')) {
	            a.valueOf = b.valueOf;
	        }

	        return a;
	    }

	    function create_utc__createUTC (input, format, locale, strict) {
	        return createLocalOrUTC(input, format, locale, strict, true).utc();
	    }

	    function defaultParsingFlags() {
	        // We need to deep clone this object.
	        return {
	            empty           : false,
	            unusedTokens    : [],
	            unusedInput     : [],
	            overflow        : -2,
	            charsLeftOver   : 0,
	            nullInput       : false,
	            invalidMonth    : null,
	            invalidFormat   : false,
	            userInvalidated : false,
	            iso             : false,
	            parsedDateParts : [],
	            meridiem        : null
	        };
	    }

	    function getParsingFlags(m) {
	        if (m._pf == null) {
	            m._pf = defaultParsingFlags();
	        }
	        return m._pf;
	    }

	    var some;
	    if (Array.prototype.some) {
	        some = Array.prototype.some;
	    } else {
	        some = function (fun) {
	            var t = Object(this);
	            var len = t.length >>> 0;

	            for (var i = 0; i < len; i++) {
	                if (i in t && fun.call(this, t[i], i, t)) {
	                    return true;
	                }
	            }

	            return false;
	        };
	    }

	    function valid__isValid(m) {
	        if (m._isValid == null) {
	            var flags = getParsingFlags(m);
	            var parsedParts = some.call(flags.parsedDateParts, function (i) {
	                return i != null;
	            });
	            var isNowValid = !isNaN(m._d.getTime()) &&
	                flags.overflow < 0 &&
	                !flags.empty &&
	                !flags.invalidMonth &&
	                !flags.invalidWeekday &&
	                !flags.nullInput &&
	                !flags.invalidFormat &&
	                !flags.userInvalidated &&
	                (!flags.meridiem || (flags.meridiem && parsedParts));

	            if (m._strict) {
	                isNowValid = isNowValid &&
	                    flags.charsLeftOver === 0 &&
	                    flags.unusedTokens.length === 0 &&
	                    flags.bigHour === undefined;
	            }

	            if (Object.isFrozen == null || !Object.isFrozen(m)) {
	                m._isValid = isNowValid;
	            }
	            else {
	                return isNowValid;
	            }
	        }
	        return m._isValid;
	    }

	    function valid__createInvalid (flags) {
	        var m = create_utc__createUTC(NaN);
	        if (flags != null) {
	            extend(getParsingFlags(m), flags);
	        }
	        else {
	            getParsingFlags(m).userInvalidated = true;
	        }

	        return m;
	    }

	    function isUndefined(input) {
	        return input === void 0;
	    }

	    // Plugins that add properties should also add the key here (null value),
	    // so we can properly clone ourselves.
	    var momentProperties = utils_hooks__hooks.momentProperties = [];

	    function copyConfig(to, from) {
	        var i, prop, val;

	        if (!isUndefined(from._isAMomentObject)) {
	            to._isAMomentObject = from._isAMomentObject;
	        }
	        if (!isUndefined(from._i)) {
	            to._i = from._i;
	        }
	        if (!isUndefined(from._f)) {
	            to._f = from._f;
	        }
	        if (!isUndefined(from._l)) {
	            to._l = from._l;
	        }
	        if (!isUndefined(from._strict)) {
	            to._strict = from._strict;
	        }
	        if (!isUndefined(from._tzm)) {
	            to._tzm = from._tzm;
	        }
	        if (!isUndefined(from._isUTC)) {
	            to._isUTC = from._isUTC;
	        }
	        if (!isUndefined(from._offset)) {
	            to._offset = from._offset;
	        }
	        if (!isUndefined(from._pf)) {
	            to._pf = getParsingFlags(from);
	        }
	        if (!isUndefined(from._locale)) {
	            to._locale = from._locale;
	        }

	        if (momentProperties.length > 0) {
	            for (i in momentProperties) {
	                prop = momentProperties[i];
	                val = from[prop];
	                if (!isUndefined(val)) {
	                    to[prop] = val;
	                }
	            }
	        }

	        return to;
	    }

	    var updateInProgress = false;

	    // Moment prototype object
	    function Moment(config) {
	        copyConfig(this, config);
	        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
	        // Prevent infinite loop in case updateOffset creates new moment
	        // objects.
	        if (updateInProgress === false) {
	            updateInProgress = true;
	            utils_hooks__hooks.updateOffset(this);
	            updateInProgress = false;
	        }
	    }

	    function isMoment (obj) {
	        return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);
	    }

	    function absFloor (number) {
	        if (number < 0) {
	            // -0 -> 0
	            return Math.ceil(number) || 0;
	        } else {
	            return Math.floor(number);
	        }
	    }

	    function toInt(argumentForCoercion) {
	        var coercedNumber = +argumentForCoercion,
	            value = 0;

	        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
	            value = absFloor(coercedNumber);
	        }

	        return value;
	    }

	    // compare two arrays, return the number of differences
	    function compareArrays(array1, array2, dontConvert) {
	        var len = Math.min(array1.length, array2.length),
	            lengthDiff = Math.abs(array1.length - array2.length),
	            diffs = 0,
	            i;
	        for (i = 0; i < len; i++) {
	            if ((dontConvert && array1[i] !== array2[i]) ||
	                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
	                diffs++;
	            }
	        }
	        return diffs + lengthDiff;
	    }

	    function warn(msg) {
	        if (utils_hooks__hooks.suppressDeprecationWarnings === false &&
	                (typeof console !==  'undefined') && console.warn) {
	            console.warn('Deprecation warning: ' + msg);
	        }
	    }

	    function deprecate(msg, fn) {
	        var firstTime = true;

	        return extend(function () {
	            if (utils_hooks__hooks.deprecationHandler != null) {
	                utils_hooks__hooks.deprecationHandler(null, msg);
	            }
	            if (firstTime) {
	                var args = [];
	                var arg;
	                for (var i = 0; i < arguments.length; i++) {
	                    arg = '';
	                    if (typeof arguments[i] === 'object') {
	                        arg += '\n[' + i + '] ';
	                        for (var key in arguments[0]) {
	                            arg += key + ': ' + arguments[0][key] + ', ';
	                        }
	                        arg = arg.slice(0, -2); // Remove trailing comma and space
	                    } else {
	                        arg = arguments[i];
	                    }
	                    args.push(arg);
	                }
	                warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + (new Error()).stack);
	                firstTime = false;
	            }
	            return fn.apply(this, arguments);
	        }, fn);
	    }

	    var deprecations = {};

	    function deprecateSimple(name, msg) {
	        if (utils_hooks__hooks.deprecationHandler != null) {
	            utils_hooks__hooks.deprecationHandler(name, msg);
	        }
	        if (!deprecations[name]) {
	            warn(msg);
	            deprecations[name] = true;
	        }
	    }

	    utils_hooks__hooks.suppressDeprecationWarnings = false;
	    utils_hooks__hooks.deprecationHandler = null;

	    function isFunction(input) {
	        return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
	    }

	    function locale_set__set (config) {
	        var prop, i;
	        for (i in config) {
	            prop = config[i];
	            if (isFunction(prop)) {
	                this[i] = prop;
	            } else {
	                this['_' + i] = prop;
	            }
	        }
	        this._config = config;
	        // Lenient ordinal parsing accepts just a number in addition to
	        // number + (possibly) stuff coming from _ordinalParseLenient.
	        this._ordinalParseLenient = new RegExp(this._ordinalParse.source + '|' + (/\d{1,2}/).source);
	    }

	    function mergeConfigs(parentConfig, childConfig) {
	        var res = extend({}, parentConfig), prop;
	        for (prop in childConfig) {
	            if (hasOwnProp(childConfig, prop)) {
	                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
	                    res[prop] = {};
	                    extend(res[prop], parentConfig[prop]);
	                    extend(res[prop], childConfig[prop]);
	                } else if (childConfig[prop] != null) {
	                    res[prop] = childConfig[prop];
	                } else {
	                    delete res[prop];
	                }
	            }
	        }
	        for (prop in parentConfig) {
	            if (hasOwnProp(parentConfig, prop) &&
	                    !hasOwnProp(childConfig, prop) &&
	                    isObject(parentConfig[prop])) {
	                // make sure changes to properties don't modify parent config
	                res[prop] = extend({}, res[prop]);
	            }
	        }
	        return res;
	    }

	    function Locale(config) {
	        if (config != null) {
	            this.set(config);
	        }
	    }

	    var keys;

	    if (Object.keys) {
	        keys = Object.keys;
	    } else {
	        keys = function (obj) {
	            var i, res = [];
	            for (i in obj) {
	                if (hasOwnProp(obj, i)) {
	                    res.push(i);
	                }
	            }
	            return res;
	        };
	    }

	    var defaultCalendar = {
	        sameDay : '[Today at] LT',
	        nextDay : '[Tomorrow at] LT',
	        nextWeek : 'dddd [at] LT',
	        lastDay : '[Yesterday at] LT',
	        lastWeek : '[Last] dddd [at] LT',
	        sameElse : 'L'
	    };

	    function locale_calendar__calendar (key, mom, now) {
	        var output = this._calendar[key] || this._calendar['sameElse'];
	        return isFunction(output) ? output.call(mom, now) : output;
	    }

	    var defaultLongDateFormat = {
	        LTS  : 'h:mm:ss A',
	        LT   : 'h:mm A',
	        L    : 'MM/DD/YYYY',
	        LL   : 'MMMM D, YYYY',
	        LLL  : 'MMMM D, YYYY h:mm A',
	        LLLL : 'dddd, MMMM D, YYYY h:mm A'
	    };

	    function longDateFormat (key) {
	        var format = this._longDateFormat[key],
	            formatUpper = this._longDateFormat[key.toUpperCase()];

	        if (format || !formatUpper) {
	            return format;
	        }

	        this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
	            return val.slice(1);
	        });

	        return this._longDateFormat[key];
	    }

	    var defaultInvalidDate = 'Invalid date';

	    function invalidDate () {
	        return this._invalidDate;
	    }

	    var defaultOrdinal = '%d';
	    var defaultOrdinalParse = /\d{1,2}/;

	    function ordinal (number) {
	        return this._ordinal.replace('%d', number);
	    }

	    var defaultRelativeTime = {
	        future : 'in %s',
	        past   : '%s ago',
	        s  : 'a few seconds',
	        m  : 'a minute',
	        mm : '%d minutes',
	        h  : 'an hour',
	        hh : '%d hours',
	        d  : 'a day',
	        dd : '%d days',
	        M  : 'a month',
	        MM : '%d months',
	        y  : 'a year',
	        yy : '%d years'
	    };

	    function relative__relativeTime (number, withoutSuffix, string, isFuture) {
	        var output = this._relativeTime[string];
	        return (isFunction(output)) ?
	            output(number, withoutSuffix, string, isFuture) :
	            output.replace(/%d/i, number);
	    }

	    function pastFuture (diff, output) {
	        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
	        return isFunction(format) ? format(output) : format.replace(/%s/i, output);
	    }

	    var aliases = {};

	    function addUnitAlias (unit, shorthand) {
	        var lowerCase = unit.toLowerCase();
	        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
	    }

	    function normalizeUnits(units) {
	        return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
	    }

	    function normalizeObjectUnits(inputObject) {
	        var normalizedInput = {},
	            normalizedProp,
	            prop;

	        for (prop in inputObject) {
	            if (hasOwnProp(inputObject, prop)) {
	                normalizedProp = normalizeUnits(prop);
	                if (normalizedProp) {
	                    normalizedInput[normalizedProp] = inputObject[prop];
	                }
	            }
	        }

	        return normalizedInput;
	    }

	    var priorities = {};

	    function addUnitPriority(unit, priority) {
	        priorities[unit] = priority;
	    }

	    function getPrioritizedUnits(unitsObj) {
	        var units = [];
	        for (var u in unitsObj) {
	            units.push({unit: u, priority: priorities[u]});
	        }
	        units.sort(function (a, b) {
	            return a.priority - b.priority;
	        });
	        return units;
	    }

	    function makeGetSet (unit, keepTime) {
	        return function (value) {
	            if (value != null) {
	                get_set__set(this, unit, value);
	                utils_hooks__hooks.updateOffset(this, keepTime);
	                return this;
	            } else {
	                return get_set__get(this, unit);
	            }
	        };
	    }

	    function get_set__get (mom, unit) {
	        return mom.isValid() ?
	            mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;
	    }

	    function get_set__set (mom, unit, value) {
	        if (mom.isValid()) {
	            mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
	        }
	    }

	    // MOMENTS

	    function stringGet (units) {
	        units = normalizeUnits(units);
	        if (isFunction(this[units])) {
	            return this[units]();
	        }
	        return this;
	    }


	    function stringSet (units, value) {
	        if (typeof units === 'object') {
	            units = normalizeObjectUnits(units);
	            var prioritized = getPrioritizedUnits(units);
	            for (var i = 0; i < prioritized.length; i++) {
	                this[prioritized[i].unit](units[prioritized[i].unit]);
	            }
	        } else {
	            units = normalizeUnits(units);
	            if (isFunction(this[units])) {
	                return this[units](value);
	            }
	        }
	        return this;
	    }

	    function zeroFill(number, targetLength, forceSign) {
	        var absNumber = '' + Math.abs(number),
	            zerosToFill = targetLength - absNumber.length,
	            sign = number >= 0;
	        return (sign ? (forceSign ? '+' : '') : '-') +
	            Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
	    }

	    var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;

	    var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;

	    var formatFunctions = {};

	    var formatTokenFunctions = {};

	    // token:    'M'
	    // padded:   ['MM', 2]
	    // ordinal:  'Mo'
	    // callback: function () { this.month() + 1 }
	    function addFormatToken (token, padded, ordinal, callback) {
	        var func = callback;
	        if (typeof callback === 'string') {
	            func = function () {
	                return this[callback]();
	            };
	        }
	        if (token) {
	            formatTokenFunctions[token] = func;
	        }
	        if (padded) {
	            formatTokenFunctions[padded[0]] = function () {
	                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
	            };
	        }
	        if (ordinal) {
	            formatTokenFunctions[ordinal] = function () {
	                return this.localeData().ordinal(func.apply(this, arguments), token);
	            };
	        }
	    }

	    function removeFormattingTokens(input) {
	        if (input.match(/\[[\s\S]/)) {
	            return input.replace(/^\[|\]$/g, '');
	        }
	        return input.replace(/\\/g, '');
	    }

	    function makeFormatFunction(format) {
	        var array = format.match(formattingTokens), i, length;

	        for (i = 0, length = array.length; i < length; i++) {
	            if (formatTokenFunctions[array[i]]) {
	                array[i] = formatTokenFunctions[array[i]];
	            } else {
	                array[i] = removeFormattingTokens(array[i]);
	            }
	        }

	        return function (mom) {
	            var output = '', i;
	            for (i = 0; i < length; i++) {
	                output += array[i] instanceof Function ? array[i].call(mom, format) : array[i];
	            }
	            return output;
	        };
	    }

	    // format date using native date object
	    function formatMoment(m, format) {
	        if (!m.isValid()) {
	            return m.localeData().invalidDate();
	        }

	        format = expandFormat(format, m.localeData());
	        formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);

	        return formatFunctions[format](m);
	    }

	    function expandFormat(format, locale) {
	        var i = 5;

	        function replaceLongDateFormatTokens(input) {
	            return locale.longDateFormat(input) || input;
	        }

	        localFormattingTokens.lastIndex = 0;
	        while (i >= 0 && localFormattingTokens.test(format)) {
	            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
	            localFormattingTokens.lastIndex = 0;
	            i -= 1;
	        }

	        return format;
	    }

	    var match1         = /\d/;            //       0 - 9
	    var match2         = /\d\d/;          //      00 - 99
	    var match3         = /\d{3}/;         //     000 - 999
	    var match4         = /\d{4}/;         //    0000 - 9999
	    var match6         = /[+-]?\d{6}/;    // -999999 - 999999
	    var match1to2      = /\d\d?/;         //       0 - 99
	    var match3to4      = /\d\d\d\d?/;     //     999 - 9999
	    var match5to6      = /\d\d\d\d\d\d?/; //   99999 - 999999
	    var match1to3      = /\d{1,3}/;       //       0 - 999
	    var match1to4      = /\d{1,4}/;       //       0 - 9999
	    var match1to6      = /[+-]?\d{1,6}/;  // -999999 - 999999

	    var matchUnsigned  = /\d+/;           //       0 - inf
	    var matchSigned    = /[+-]?\d+/;      //    -inf - inf

	    var matchOffset    = /Z|[+-]\d\d:?\d\d/gi; // +00:00 -00:00 +0000 -0000 or Z
	    var matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z

	    var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/; // 123456789 123456789.123

	    // any word (or two) characters or numbers including two/three word month in arabic.
	    // includes scottish gaelic two word and hyphenated months
	    var matchWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i;


	    var regexes = {};

	    function addRegexToken (token, regex, strictRegex) {
	        regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {
	            return (isStrict && strictRegex) ? strictRegex : regex;
	        };
	    }

	    function getParseRegexForToken (token, config) {
	        if (!hasOwnProp(regexes, token)) {
	            return new RegExp(unescapeFormat(token));
	        }

	        return regexes[token](config._strict, config._locale);
	    }

	    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
	    function unescapeFormat(s) {
	        return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
	            return p1 || p2 || p3 || p4;
	        }));
	    }

	    function regexEscape(s) {
	        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
	    }

	    var tokens = {};

	    function addParseToken (token, callback) {
	        var i, func = callback;
	        if (typeof token === 'string') {
	            token = [token];
	        }
	        if (typeof callback === 'number') {
	            func = function (input, array) {
	                array[callback] = toInt(input);
	            };
	        }
	        for (i = 0; i < token.length; i++) {
	            tokens[token[i]] = func;
	        }
	    }

	    function addWeekParseToken (token, callback) {
	        addParseToken(token, function (input, array, config, token) {
	            config._w = config._w || {};
	            callback(input, config._w, config, token);
	        });
	    }

	    function addTimeToArrayFromToken(token, input, config) {
	        if (input != null && hasOwnProp(tokens, token)) {
	            tokens[token](input, config._a, config, token);
	        }
	    }

	    var YEAR = 0;
	    var MONTH = 1;
	    var DATE = 2;
	    var HOUR = 3;
	    var MINUTE = 4;
	    var SECOND = 5;
	    var MILLISECOND = 6;
	    var WEEK = 7;
	    var WEEKDAY = 8;

	    var indexOf;

	    if (Array.prototype.indexOf) {
	        indexOf = Array.prototype.indexOf;
	    } else {
	        indexOf = function (o) {
	            // I know
	            var i;
	            for (i = 0; i < this.length; ++i) {
	                if (this[i] === o) {
	                    return i;
	                }
	            }
	            return -1;
	        };
	    }

	    function daysInMonth(year, month) {
	        return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();
	    }

	    // FORMATTING

	    addFormatToken('M', ['MM', 2], 'Mo', function () {
	        return this.month() + 1;
	    });

	    addFormatToken('MMM', 0, 0, function (format) {
	        return this.localeData().monthsShort(this, format);
	    });

	    addFormatToken('MMMM', 0, 0, function (format) {
	        return this.localeData().months(this, format);
	    });

	    // ALIASES

	    addUnitAlias('month', 'M');

	    // PRIORITY

	    addUnitPriority('month', 8);

	    // PARSING

	    addRegexToken('M',    match1to2);
	    addRegexToken('MM',   match1to2, match2);
	    addRegexToken('MMM',  function (isStrict, locale) {
	        return locale.monthsShortRegex(isStrict);
	    });
	    addRegexToken('MMMM', function (isStrict, locale) {
	        return locale.monthsRegex(isStrict);
	    });

	    addParseToken(['M', 'MM'], function (input, array) {
	        array[MONTH] = toInt(input) - 1;
	    });

	    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
	        var month = config._locale.monthsParse(input, token, config._strict);
	        // if we didn't find a month name, mark the date as invalid.
	        if (month != null) {
	            array[MONTH] = month;
	        } else {
	            getParsingFlags(config).invalidMonth = input;
	        }
	    });

	    // LOCALES

	    var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/;
	    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
	    function localeMonths (m, format) {
	        if (!m) {
	            return this._months;
	        }
	        return isArray(this._months) ? this._months[m.month()] :
	            this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];
	    }

	    var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');
	    function localeMonthsShort (m, format) {
	        if (!m) {
	            return this._monthsShort;
	        }
	        return isArray(this._monthsShort) ? this._monthsShort[m.month()] :
	            this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
	    }

	    function units_month__handleStrictParse(monthName, format, strict) {
	        var i, ii, mom, llc = monthName.toLocaleLowerCase();
	        if (!this._monthsParse) {
	            // this is not used
	            this._monthsParse = [];
	            this._longMonthsParse = [];
	            this._shortMonthsParse = [];
	            for (i = 0; i < 12; ++i) {
	                mom = create_utc__createUTC([2000, i]);
	                this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
	                this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
	            }
	        }

	        if (strict) {
	            if (format === 'MMM') {
	                ii = indexOf.call(this._shortMonthsParse, llc);
	                return ii !== -1 ? ii : null;
	            } else {
	                ii = indexOf.call(this._longMonthsParse, llc);
	                return ii !== -1 ? ii : null;
	            }
	        } else {
	            if (format === 'MMM') {
	                ii = indexOf.call(this._shortMonthsParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._longMonthsParse, llc);
	                return ii !== -1 ? ii : null;
	            } else {
	                ii = indexOf.call(this._longMonthsParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._shortMonthsParse, llc);
	                return ii !== -1 ? ii : null;
	            }
	        }
	    }

	    function localeMonthsParse (monthName, format, strict) {
	        var i, mom, regex;

	        if (this._monthsParseExact) {
	            return units_month__handleStrictParse.call(this, monthName, format, strict);
	        }

	        if (!this._monthsParse) {
	            this._monthsParse = [];
	            this._longMonthsParse = [];
	            this._shortMonthsParse = [];
	        }

	        // TODO: add sorting
	        // Sorting makes sure if one month (or abbr) is a prefix of another
	        // see sorting in computeMonthsParse
	        for (i = 0; i < 12; i++) {
	            // make the regex if we don't have it already
	            mom = create_utc__createUTC([2000, i]);
	            if (strict && !this._longMonthsParse[i]) {
	                this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
	                this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
	            }
	            if (!strict && !this._monthsParse[i]) {
	                regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
	                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
	            }
	            // test the regex
	            if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
	                return i;
	            } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
	                return i;
	            } else if (!strict && this._monthsParse[i].test(monthName)) {
	                return i;
	            }
	        }
	    }

	    // MOMENTS

	    function setMonth (mom, value) {
	        var dayOfMonth;

	        if (!mom.isValid()) {
	            // No op
	            return mom;
	        }

	        if (typeof value === 'string') {
	            if (/^\d+$/.test(value)) {
	                value = toInt(value);
	            } else {
	                value = mom.localeData().monthsParse(value);
	                // TODO: Another silent failure?
	                if (typeof value !== 'number') {
	                    return mom;
	                }
	            }
	        }

	        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
	        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
	        return mom;
	    }

	    function getSetMonth (value) {
	        if (value != null) {
	            setMonth(this, value);
	            utils_hooks__hooks.updateOffset(this, true);
	            return this;
	        } else {
	            return get_set__get(this, 'Month');
	        }
	    }

	    function getDaysInMonth () {
	        return daysInMonth(this.year(), this.month());
	    }

	    var defaultMonthsShortRegex = matchWord;
	    function monthsShortRegex (isStrict) {
	        if (this._monthsParseExact) {
	            if (!hasOwnProp(this, '_monthsRegex')) {
	                computeMonthsParse.call(this);
	            }
	            if (isStrict) {
	                return this._monthsShortStrictRegex;
	            } else {
	                return this._monthsShortRegex;
	            }
	        } else {
	            if (!hasOwnProp(this, '_monthsShortRegex')) {
	                this._monthsShortRegex = defaultMonthsShortRegex;
	            }
	            return this._monthsShortStrictRegex && isStrict ?
	                this._monthsShortStrictRegex : this._monthsShortRegex;
	        }
	    }

	    var defaultMonthsRegex = matchWord;
	    function monthsRegex (isStrict) {
	        if (this._monthsParseExact) {
	            if (!hasOwnProp(this, '_monthsRegex')) {
	                computeMonthsParse.call(this);
	            }
	            if (isStrict) {
	                return this._monthsStrictRegex;
	            } else {
	                return this._monthsRegex;
	            }
	        } else {
	            if (!hasOwnProp(this, '_monthsRegex')) {
	                this._monthsRegex = defaultMonthsRegex;
	            }
	            return this._monthsStrictRegex && isStrict ?
	                this._monthsStrictRegex : this._monthsRegex;
	        }
	    }

	    function computeMonthsParse () {
	        function cmpLenRev(a, b) {
	            return b.length - a.length;
	        }

	        var shortPieces = [], longPieces = [], mixedPieces = [],
	            i, mom;
	        for (i = 0; i < 12; i++) {
	            // make the regex if we don't have it already
	            mom = create_utc__createUTC([2000, i]);
	            shortPieces.push(this.monthsShort(mom, ''));
	            longPieces.push(this.months(mom, ''));
	            mixedPieces.push(this.months(mom, ''));
	            mixedPieces.push(this.monthsShort(mom, ''));
	        }
	        // Sorting makes sure if one month (or abbr) is a prefix of another it
	        // will match the longer piece.
	        shortPieces.sort(cmpLenRev);
	        longPieces.sort(cmpLenRev);
	        mixedPieces.sort(cmpLenRev);
	        for (i = 0; i < 12; i++) {
	            shortPieces[i] = regexEscape(shortPieces[i]);
	            longPieces[i] = regexEscape(longPieces[i]);
	        }
	        for (i = 0; i < 24; i++) {
	            mixedPieces[i] = regexEscape(mixedPieces[i]);
	        }

	        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
	        this._monthsShortRegex = this._monthsRegex;
	        this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
	        this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
	    }

	    // FORMATTING

	    addFormatToken('Y', 0, 0, function () {
	        var y = this.year();
	        return y <= 9999 ? '' + y : '+' + y;
	    });

	    addFormatToken(0, ['YY', 2], 0, function () {
	        return this.year() % 100;
	    });

	    addFormatToken(0, ['YYYY',   4],       0, 'year');
	    addFormatToken(0, ['YYYYY',  5],       0, 'year');
	    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

	    // ALIASES

	    addUnitAlias('year', 'y');

	    // PRIORITIES

	    addUnitPriority('year', 1);

	    // PARSING

	    addRegexToken('Y',      matchSigned);
	    addRegexToken('YY',     match1to2, match2);
	    addRegexToken('YYYY',   match1to4, match4);
	    addRegexToken('YYYYY',  match1to6, match6);
	    addRegexToken('YYYYYY', match1to6, match6);

	    addParseToken(['YYYYY', 'YYYYYY'], YEAR);
	    addParseToken('YYYY', function (input, array) {
	        array[YEAR] = input.length === 2 ? utils_hooks__hooks.parseTwoDigitYear(input) : toInt(input);
	    });
	    addParseToken('YY', function (input, array) {
	        array[YEAR] = utils_hooks__hooks.parseTwoDigitYear(input);
	    });
	    addParseToken('Y', function (input, array) {
	        array[YEAR] = parseInt(input, 10);
	    });

	    // HELPERS

	    function daysInYear(year) {
	        return isLeapYear(year) ? 366 : 365;
	    }

	    function isLeapYear(year) {
	        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
	    }

	    // HOOKS

	    utils_hooks__hooks.parseTwoDigitYear = function (input) {
	        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
	    };

	    // MOMENTS

	    var getSetYear = makeGetSet('FullYear', true);

	    function getIsLeapYear () {
	        return isLeapYear(this.year());
	    }

	    function createDate (y, m, d, h, M, s, ms) {
	        //can't just apply() to create a date:
	        //http://stackoverflow.com/questions/181348/instantiating-a-javascript-object-by-calling-prototype-constructor-apply
	        var date = new Date(y, m, d, h, M, s, ms);

	        //the date constructor remaps years 0-99 to 1900-1999
	        if (y < 100 && y >= 0 && isFinite(date.getFullYear())) {
	            date.setFullYear(y);
	        }
	        return date;
	    }

	    function createUTCDate (y) {
	        var date = new Date(Date.UTC.apply(null, arguments));

	        //the Date.UTC function remaps years 0-99 to 1900-1999
	        if (y < 100 && y >= 0 && isFinite(date.getUTCFullYear())) {
	            date.setUTCFullYear(y);
	        }
	        return date;
	    }

	    // start-of-first-week - start-of-year
	    function firstWeekOffset(year, dow, doy) {
	        var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
	            fwd = 7 + dow - doy,
	            // first-week day local weekday -- which local weekday is fwd
	            fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

	        return -fwdlw + fwd - 1;
	    }

	    //http://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
	    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
	        var localWeekday = (7 + weekday - dow) % 7,
	            weekOffset = firstWeekOffset(year, dow, doy),
	            dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
	            resYear, resDayOfYear;

	        if (dayOfYear <= 0) {
	            resYear = year - 1;
	            resDayOfYear = daysInYear(resYear) + dayOfYear;
	        } else if (dayOfYear > daysInYear(year)) {
	            resYear = year + 1;
	            resDayOfYear = dayOfYear - daysInYear(year);
	        } else {
	            resYear = year;
	            resDayOfYear = dayOfYear;
	        }

	        return {
	            year: resYear,
	            dayOfYear: resDayOfYear
	        };
	    }

	    function weekOfYear(mom, dow, doy) {
	        var weekOffset = firstWeekOffset(mom.year(), dow, doy),
	            week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
	            resWeek, resYear;

	        if (week < 1) {
	            resYear = mom.year() - 1;
	            resWeek = week + weeksInYear(resYear, dow, doy);
	        } else if (week > weeksInYear(mom.year(), dow, doy)) {
	            resWeek = week - weeksInYear(mom.year(), dow, doy);
	            resYear = mom.year() + 1;
	        } else {
	            resYear = mom.year();
	            resWeek = week;
	        }

	        return {
	            week: resWeek,
	            year: resYear
	        };
	    }

	    function weeksInYear(year, dow, doy) {
	        var weekOffset = firstWeekOffset(year, dow, doy),
	            weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
	        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
	    }

	    // FORMATTING

	    addFormatToken('w', ['ww', 2], 'wo', 'week');
	    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

	    // ALIASES

	    addUnitAlias('week', 'w');
	    addUnitAlias('isoWeek', 'W');

	    // PRIORITIES

	    addUnitPriority('week', 5);
	    addUnitPriority('isoWeek', 5);

	    // PARSING

	    addRegexToken('w',  match1to2);
	    addRegexToken('ww', match1to2, match2);
	    addRegexToken('W',  match1to2);
	    addRegexToken('WW', match1to2, match2);

	    addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
	        week[token.substr(0, 1)] = toInt(input);
	    });

	    // HELPERS

	    // LOCALES

	    function localeWeek (mom) {
	        return weekOfYear(mom, this._week.dow, this._week.doy).week;
	    }

	    var defaultLocaleWeek = {
	        dow : 0, // Sunday is the first day of the week.
	        doy : 6  // The week that contains Jan 1st is the first week of the year.
	    };

	    function localeFirstDayOfWeek () {
	        return this._week.dow;
	    }

	    function localeFirstDayOfYear () {
	        return this._week.doy;
	    }

	    // MOMENTS

	    function getSetWeek (input) {
	        var week = this.localeData().week(this);
	        return input == null ? week : this.add((input - week) * 7, 'd');
	    }

	    function getSetISOWeek (input) {
	        var week = weekOfYear(this, 1, 4).week;
	        return input == null ? week : this.add((input - week) * 7, 'd');
	    }

	    // FORMATTING

	    addFormatToken('d', 0, 'do', 'day');

	    addFormatToken('dd', 0, 0, function (format) {
	        return this.localeData().weekdaysMin(this, format);
	    });

	    addFormatToken('ddd', 0, 0, function (format) {
	        return this.localeData().weekdaysShort(this, format);
	    });

	    addFormatToken('dddd', 0, 0, function (format) {
	        return this.localeData().weekdays(this, format);
	    });

	    addFormatToken('e', 0, 0, 'weekday');
	    addFormatToken('E', 0, 0, 'isoWeekday');

	    // ALIASES

	    addUnitAlias('day', 'd');
	    addUnitAlias('weekday', 'e');
	    addUnitAlias('isoWeekday', 'E');

	    // PRIORITY
	    addUnitPriority('day', 11);
	    addUnitPriority('weekday', 11);
	    addUnitPriority('isoWeekday', 11);

	    // PARSING

	    addRegexToken('d',    match1to2);
	    addRegexToken('e',    match1to2);
	    addRegexToken('E',    match1to2);
	    addRegexToken('dd',   function (isStrict, locale) {
	        return locale.weekdaysMinRegex(isStrict);
	    });
	    addRegexToken('ddd',   function (isStrict, locale) {
	        return locale.weekdaysShortRegex(isStrict);
	    });
	    addRegexToken('dddd',   function (isStrict, locale) {
	        return locale.weekdaysRegex(isStrict);
	    });

	    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
	        var weekday = config._locale.weekdaysParse(input, token, config._strict);
	        // if we didn't get a weekday name, mark the date as invalid
	        if (weekday != null) {
	            week.d = weekday;
	        } else {
	            getParsingFlags(config).invalidWeekday = input;
	        }
	    });

	    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
	        week[token] = toInt(input);
	    });

	    // HELPERS

	    function parseWeekday(input, locale) {
	        if (typeof input !== 'string') {
	            return input;
	        }

	        if (!isNaN(input)) {
	            return parseInt(input, 10);
	        }

	        input = locale.weekdaysParse(input);
	        if (typeof input === 'number') {
	            return input;
	        }

	        return null;
	    }

	    function parseIsoWeekday(input, locale) {
	        if (typeof input === 'string') {
	            return locale.weekdaysParse(input) % 7 || 7;
	        }
	        return isNaN(input) ? null : input;
	    }

	    // LOCALES

	    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
	    function localeWeekdays (m, format) {
	        if (!m) {
	            return this._weekdays;
	        }
	        return isArray(this._weekdays) ? this._weekdays[m.day()] :
	            this._weekdays[this._weekdays.isFormat.test(format) ? 'format' : 'standalone'][m.day()];
	    }

	    var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
	    function localeWeekdaysShort (m) {
	        return (m) ? this._weekdaysShort[m.day()] : this._weekdaysShort;
	    }

	    var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
	    function localeWeekdaysMin (m) {
	        return (m) ? this._weekdaysMin[m.day()] : this._weekdaysMin;
	    }

	    function day_of_week__handleStrictParse(weekdayName, format, strict) {
	        var i, ii, mom, llc = weekdayName.toLocaleLowerCase();
	        if (!this._weekdaysParse) {
	            this._weekdaysParse = [];
	            this._shortWeekdaysParse = [];
	            this._minWeekdaysParse = [];

	            for (i = 0; i < 7; ++i) {
	                mom = create_utc__createUTC([2000, 1]).day(i);
	                this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
	                this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
	                this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
	            }
	        }

	        if (strict) {
	            if (format === 'dddd') {
	                ii = indexOf.call(this._weekdaysParse, llc);
	                return ii !== -1 ? ii : null;
	            } else if (format === 'ddd') {
	                ii = indexOf.call(this._shortWeekdaysParse, llc);
	                return ii !== -1 ? ii : null;
	            } else {
	                ii = indexOf.call(this._minWeekdaysParse, llc);
	                return ii !== -1 ? ii : null;
	            }
	        } else {
	            if (format === 'dddd') {
	                ii = indexOf.call(this._weekdaysParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._shortWeekdaysParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._minWeekdaysParse, llc);
	                return ii !== -1 ? ii : null;
	            } else if (format === 'ddd') {
	                ii = indexOf.call(this._shortWeekdaysParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._weekdaysParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._minWeekdaysParse, llc);
	                return ii !== -1 ? ii : null;
	            } else {
	                ii = indexOf.call(this._minWeekdaysParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._weekdaysParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._shortWeekdaysParse, llc);
	                return ii !== -1 ? ii : null;
	            }
	        }
	    }

	    function localeWeekdaysParse (weekdayName, format, strict) {
	        var i, mom, regex;

	        if (this._weekdaysParseExact) {
	            return day_of_week__handleStrictParse.call(this, weekdayName, format, strict);
	        }

	        if (!this._weekdaysParse) {
	            this._weekdaysParse = [];
	            this._minWeekdaysParse = [];
	            this._shortWeekdaysParse = [];
	            this._fullWeekdaysParse = [];
	        }

	        for (i = 0; i < 7; i++) {
	            // make the regex if we don't have it already

	            mom = create_utc__createUTC([2000, 1]).day(i);
	            if (strict && !this._fullWeekdaysParse[i]) {
	                this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\.?') + '$', 'i');
	                this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\.?') + '$', 'i');
	                this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\.?') + '$', 'i');
	            }
	            if (!this._weekdaysParse[i]) {
	                regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
	                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
	            }
	            // test the regex
	            if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
	                return i;
	            } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
	                return i;
	            } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
	                return i;
	            } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
	                return i;
	            }
	        }
	    }

	    // MOMENTS

	    function getSetDayOfWeek (input) {
	        if (!this.isValid()) {
	            return input != null ? this : NaN;
	        }
	        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
	        if (input != null) {
	            input = parseWeekday(input, this.localeData());
	            return this.add(input - day, 'd');
	        } else {
	            return day;
	        }
	    }

	    function getSetLocaleDayOfWeek (input) {
	        if (!this.isValid()) {
	            return input != null ? this : NaN;
	        }
	        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
	        return input == null ? weekday : this.add(input - weekday, 'd');
	    }

	    function getSetISODayOfWeek (input) {
	        if (!this.isValid()) {
	            return input != null ? this : NaN;
	        }

	        // behaves the same as moment#day except
	        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
	        // as a setter, sunday should belong to the previous week.

	        if (input != null) {
	            var weekday = parseIsoWeekday(input, this.localeData());
	            return this.day(this.day() % 7 ? weekday : weekday - 7);
	        } else {
	            return this.day() || 7;
	        }
	    }

	    var defaultWeekdaysRegex = matchWord;
	    function weekdaysRegex (isStrict) {
	        if (this._weekdaysParseExact) {
	            if (!hasOwnProp(this, '_weekdaysRegex')) {
	                computeWeekdaysParse.call(this);
	            }
	            if (isStrict) {
	                return this._weekdaysStrictRegex;
	            } else {
	                return this._weekdaysRegex;
	            }
	        } else {
	            if (!hasOwnProp(this, '_weekdaysRegex')) {
	                this._weekdaysRegex = defaultWeekdaysRegex;
	            }
	            return this._weekdaysStrictRegex && isStrict ?
	                this._weekdaysStrictRegex : this._weekdaysRegex;
	        }
	    }

	    var defaultWeekdaysShortRegex = matchWord;
	    function weekdaysShortRegex (isStrict) {
	        if (this._weekdaysParseExact) {
	            if (!hasOwnProp(this, '_weekdaysRegex')) {
	                computeWeekdaysParse.call(this);
	            }
	            if (isStrict) {
	                return this._weekdaysShortStrictRegex;
	            } else {
	                return this._weekdaysShortRegex;
	            }
	        } else {
	            if (!hasOwnProp(this, '_weekdaysShortRegex')) {
	                this._weekdaysShortRegex = defaultWeekdaysShortRegex;
	            }
	            return this._weekdaysShortStrictRegex && isStrict ?
	                this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
	        }
	    }

	    var defaultWeekdaysMinRegex = matchWord;
	    function weekdaysMinRegex (isStrict) {
	        if (this._weekdaysParseExact) {
	            if (!hasOwnProp(this, '_weekdaysRegex')) {
	                computeWeekdaysParse.call(this);
	            }
	            if (isStrict) {
	                return this._weekdaysMinStrictRegex;
	            } else {
	                return this._weekdaysMinRegex;
	            }
	        } else {
	            if (!hasOwnProp(this, '_weekdaysMinRegex')) {
	                this._weekdaysMinRegex = defaultWeekdaysMinRegex;
	            }
	            return this._weekdaysMinStrictRegex && isStrict ?
	                this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
	        }
	    }


	    function computeWeekdaysParse () {
	        function cmpLenRev(a, b) {
	            return b.length - a.length;
	        }

	        var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [],
	            i, mom, minp, shortp, longp;
	        for (i = 0; i < 7; i++) {
	            // make the regex if we don't have it already
	            mom = create_utc__createUTC([2000, 1]).day(i);
	            minp = this.weekdaysMin(mom, '');
	            shortp = this.weekdaysShort(mom, '');
	            longp = this.weekdays(mom, '');
	            minPieces.push(minp);
	            shortPieces.push(shortp);
	            longPieces.push(longp);
	            mixedPieces.push(minp);
	            mixedPieces.push(shortp);
	            mixedPieces.push(longp);
	        }
	        // Sorting makes sure if one weekday (or abbr) is a prefix of another it
	        // will match the longer piece.
	        minPieces.sort(cmpLenRev);
	        shortPieces.sort(cmpLenRev);
	        longPieces.sort(cmpLenRev);
	        mixedPieces.sort(cmpLenRev);
	        for (i = 0; i < 7; i++) {
	            shortPieces[i] = regexEscape(shortPieces[i]);
	            longPieces[i] = regexEscape(longPieces[i]);
	            mixedPieces[i] = regexEscape(mixedPieces[i]);
	        }

	        this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
	        this._weekdaysShortRegex = this._weekdaysRegex;
	        this._weekdaysMinRegex = this._weekdaysRegex;

	        this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
	        this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
	        this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
	    }

	    // FORMATTING

	    function hFormat() {
	        return this.hours() % 12 || 12;
	    }

	    function kFormat() {
	        return this.hours() || 24;
	    }

	    addFormatToken('H', ['HH', 2], 0, 'hour');
	    addFormatToken('h', ['hh', 2], 0, hFormat);
	    addFormatToken('k', ['kk', 2], 0, kFormat);

	    addFormatToken('hmm', 0, 0, function () {
	        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
	    });

	    addFormatToken('hmmss', 0, 0, function () {
	        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) +
	            zeroFill(this.seconds(), 2);
	    });

	    addFormatToken('Hmm', 0, 0, function () {
	        return '' + this.hours() + zeroFill(this.minutes(), 2);
	    });

	    addFormatToken('Hmmss', 0, 0, function () {
	        return '' + this.hours() + zeroFill(this.minutes(), 2) +
	            zeroFill(this.seconds(), 2);
	    });

	    function meridiem (token, lowercase) {
	        addFormatToken(token, 0, 0, function () {
	            return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
	        });
	    }

	    meridiem('a', true);
	    meridiem('A', false);

	    // ALIASES

	    addUnitAlias('hour', 'h');

	    // PRIORITY
	    addUnitPriority('hour', 13);

	    // PARSING

	    function matchMeridiem (isStrict, locale) {
	        return locale._meridiemParse;
	    }

	    addRegexToken('a',  matchMeridiem);
	    addRegexToken('A',  matchMeridiem);
	    addRegexToken('H',  match1to2);
	    addRegexToken('h',  match1to2);
	    addRegexToken('HH', match1to2, match2);
	    addRegexToken('hh', match1to2, match2);

	    addRegexToken('hmm', match3to4);
	    addRegexToken('hmmss', match5to6);
	    addRegexToken('Hmm', match3to4);
	    addRegexToken('Hmmss', match5to6);

	    addParseToken(['H', 'HH'], HOUR);
	    addParseToken(['a', 'A'], function (input, array, config) {
	        config._isPm = config._locale.isPM(input);
	        config._meridiem = input;
	    });
	    addParseToken(['h', 'hh'], function (input, array, config) {
	        array[HOUR] = toInt(input);
	        getParsingFlags(config).bigHour = true;
	    });
	    addParseToken('hmm', function (input, array, config) {
	        var pos = input.length - 2;
	        array[HOUR] = toInt(input.substr(0, pos));
	        array[MINUTE] = toInt(input.substr(pos));
	        getParsingFlags(config).bigHour = true;
	    });
	    addParseToken('hmmss', function (input, array, config) {
	        var pos1 = input.length - 4;
	        var pos2 = input.length - 2;
	        array[HOUR] = toInt(input.substr(0, pos1));
	        array[MINUTE] = toInt(input.substr(pos1, 2));
	        array[SECOND] = toInt(input.substr(pos2));
	        getParsingFlags(config).bigHour = true;
	    });
	    addParseToken('Hmm', function (input, array, config) {
	        var pos = input.length - 2;
	        array[HOUR] = toInt(input.substr(0, pos));
	        array[MINUTE] = toInt(input.substr(pos));
	    });
	    addParseToken('Hmmss', function (input, array, config) {
	        var pos1 = input.length - 4;
	        var pos2 = input.length - 2;
	        array[HOUR] = toInt(input.substr(0, pos1));
	        array[MINUTE] = toInt(input.substr(pos1, 2));
	        array[SECOND] = toInt(input.substr(pos2));
	    });

	    // LOCALES

	    function localeIsPM (input) {
	        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
	        // Using charAt should be more compatible.
	        return ((input + '').toLowerCase().charAt(0) === 'p');
	    }

	    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
	    function localeMeridiem (hours, minutes, isLower) {
	        if (hours > 11) {
	            return isLower ? 'pm' : 'PM';
	        } else {
	            return isLower ? 'am' : 'AM';
	        }
	    }


	    // MOMENTS

	    // Setting the hour should keep the time, because the user explicitly
	    // specified which hour he wants. So trying to maintain the same hour (in
	    // a new timezone) makes sense. Adding/subtracting hours does not follow
	    // this rule.
	    var getSetHour = makeGetSet('Hours', true);

	    var baseConfig = {
	        calendar: defaultCalendar,
	        longDateFormat: defaultLongDateFormat,
	        invalidDate: defaultInvalidDate,
	        ordinal: defaultOrdinal,
	        ordinalParse: defaultOrdinalParse,
	        relativeTime: defaultRelativeTime,

	        months: defaultLocaleMonths,
	        monthsShort: defaultLocaleMonthsShort,

	        week: defaultLocaleWeek,

	        weekdays: defaultLocaleWeekdays,
	        weekdaysMin: defaultLocaleWeekdaysMin,
	        weekdaysShort: defaultLocaleWeekdaysShort,

	        meridiemParse: defaultLocaleMeridiemParse
	    };

	    // internal storage for locale config files
	    var locales = {};
	    var globalLocale;

	    function normalizeLocale(key) {
	        return key ? key.toLowerCase().replace('_', '-') : key;
	    }

	    // pick the locale from the array
	    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
	    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
	    function chooseLocale(names) {
	        var i = 0, j, next, locale, split;

	        while (i < names.length) {
	            split = normalizeLocale(names[i]).split('-');
	            j = split.length;
	            next = normalizeLocale(names[i + 1]);
	            next = next ? next.split('-') : null;
	            while (j > 0) {
	                locale = loadLocale(split.slice(0, j).join('-'));
	                if (locale) {
	                    return locale;
	                }
	                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
	                    //the next array item is better than a shallower substring of this one
	                    break;
	                }
	                j--;
	            }
	            i++;
	        }
	        return null;
	    }

	    function loadLocale(name) {
	        var oldLocale = null;
	        // TODO: Find a better way to register and load all the locales in Node
	        if (!locales[name] && (typeof module !== 'undefined') &&
	                module && module.exports) {
	            try {
	                oldLocale = globalLocale._abbr;
	                __webpack_require__(49)("./" + name);
	                // because defineLocale currently also sets the global locale, we
	                // want to undo that for lazy loaded locales
	                locale_locales__getSetGlobalLocale(oldLocale);
	            } catch (e) { }
	        }
	        return locales[name];
	    }

	    // This function will load locale and then set the global locale.  If
	    // no arguments are passed in, it will simply return the current global
	    // locale key.
	    function locale_locales__getSetGlobalLocale (key, values) {
	        var data;
	        if (key) {
	            if (isUndefined(values)) {
	                data = locale_locales__getLocale(key);
	            }
	            else {
	                data = defineLocale(key, values);
	            }

	            if (data) {
	                // moment.duration._locale = moment._locale = data;
	                globalLocale = data;
	            }
	        }

	        return globalLocale._abbr;
	    }

	    function defineLocale (name, config) {
	        if (config !== null) {
	            var parentConfig = baseConfig;
	            config.abbr = name;
	            if (locales[name] != null) {
	                deprecateSimple('defineLocaleOverride',
	                        'use moment.updateLocale(localeName, config) to change ' +
	                        'an existing locale. moment.defineLocale(localeName, ' +
	                        'config) should only be used for creating a new locale ' +
	                        'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');
	                parentConfig = locales[name]._config;
	            } else if (config.parentLocale != null) {
	                if (locales[config.parentLocale] != null) {
	                    parentConfig = locales[config.parentLocale]._config;
	                } else {
	                    // treat as if there is no base config
	                    deprecateSimple('parentLocaleUndefined',
	                            'specified parentLocale is not defined yet. See http://momentjs.com/guides/#/warnings/parent-locale/');
	                }
	            }
	            locales[name] = new Locale(mergeConfigs(parentConfig, config));

	            // backwards compat for now: also set the locale
	            locale_locales__getSetGlobalLocale(name);

	            return locales[name];
	        } else {
	            // useful for testing
	            delete locales[name];
	            return null;
	        }
	    }

	    function updateLocale(name, config) {
	        if (config != null) {
	            var locale, parentConfig = baseConfig;
	            // MERGE
	            if (locales[name] != null) {
	                parentConfig = locales[name]._config;
	            }
	            config = mergeConfigs(parentConfig, config);
	            locale = new Locale(config);
	            locale.parentLocale = locales[name];
	            locales[name] = locale;

	            // backwards compat for now: also set the locale
	            locale_locales__getSetGlobalLocale(name);
	        } else {
	            // pass null for config to unupdate, useful for tests
	            if (locales[name] != null) {
	                if (locales[name].parentLocale != null) {
	                    locales[name] = locales[name].parentLocale;
	                } else if (locales[name] != null) {
	                    delete locales[name];
	                }
	            }
	        }
	        return locales[name];
	    }

	    // returns locale data
	    function locale_locales__getLocale (key) {
	        var locale;

	        if (key && key._locale && key._locale._abbr) {
	            key = key._locale._abbr;
	        }

	        if (!key) {
	            return globalLocale;
	        }

	        if (!isArray(key)) {
	            //short-circuit everything else
	            locale = loadLocale(key);
	            if (locale) {
	                return locale;
	            }
	            key = [key];
	        }

	        return chooseLocale(key);
	    }

	    function locale_locales__listLocales() {
	        return keys(locales);
	    }

	    function checkOverflow (m) {
	        var overflow;
	        var a = m._a;

	        if (a && getParsingFlags(m).overflow === -2) {
	            overflow =
	                a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :
	                a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :
	                a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :
	                a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :
	                a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :
	                a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :
	                -1;

	            if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
	                overflow = DATE;
	            }
	            if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
	                overflow = WEEK;
	            }
	            if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
	                overflow = WEEKDAY;
	            }

	            getParsingFlags(m).overflow = overflow;
	        }

	        return m;
	    }

	    // iso 8601 regex
	    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
	    var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/;
	    var basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/;

	    var tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;

	    var isoDates = [
	        ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
	        ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
	        ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
	        ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
	        ['YYYY-DDD', /\d{4}-\d{3}/],
	        ['YYYY-MM', /\d{4}-\d\d/, false],
	        ['YYYYYYMMDD', /[+-]\d{10}/],
	        ['YYYYMMDD', /\d{8}/],
	        // YYYYMM is NOT allowed by the standard
	        ['GGGG[W]WWE', /\d{4}W\d{3}/],
	        ['GGGG[W]WW', /\d{4}W\d{2}/, false],
	        ['YYYYDDD', /\d{7}/]
	    ];

	    // iso time formats and regexes
	    var isoTimes = [
	        ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
	        ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
	        ['HH:mm:ss', /\d\d:\d\d:\d\d/],
	        ['HH:mm', /\d\d:\d\d/],
	        ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
	        ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
	        ['HHmmss', /\d\d\d\d\d\d/],
	        ['HHmm', /\d\d\d\d/],
	        ['HH', /\d\d/]
	    ];

	    var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;

	    // date from iso format
	    function configFromISO(config) {
	        var i, l,
	            string = config._i,
	            match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
	            allowTime, dateFormat, timeFormat, tzFormat;

	        if (match) {
	            getParsingFlags(config).iso = true;

	            for (i = 0, l = isoDates.length; i < l; i++) {
	                if (isoDates[i][1].exec(match[1])) {
	                    dateFormat = isoDates[i][0];
	                    allowTime = isoDates[i][2] !== false;
	                    break;
	                }
	            }
	            if (dateFormat == null) {
	                config._isValid = false;
	                return;
	            }
	            if (match[3]) {
	                for (i = 0, l = isoTimes.length; i < l; i++) {
	                    if (isoTimes[i][1].exec(match[3])) {
	                        // match[2] should be 'T' or space
	                        timeFormat = (match[2] || ' ') + isoTimes[i][0];
	                        break;
	                    }
	                }
	                if (timeFormat == null) {
	                    config._isValid = false;
	                    return;
	                }
	            }
	            if (!allowTime && timeFormat != null) {
	                config._isValid = false;
	                return;
	            }
	            if (match[4]) {
	                if (tzRegex.exec(match[4])) {
	                    tzFormat = 'Z';
	                } else {
	                    config._isValid = false;
	                    return;
	                }
	            }
	            config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
	            configFromStringAndFormat(config);
	        } else {
	            config._isValid = false;
	        }
	    }

	    // date from iso format or fallback
	    function configFromString(config) {
	        var matched = aspNetJsonRegex.exec(config._i);

	        if (matched !== null) {
	            config._d = new Date(+matched[1]);
	            return;
	        }

	        configFromISO(config);
	        if (config._isValid === false) {
	            delete config._isValid;
	            utils_hooks__hooks.createFromInputFallback(config);
	        }
	    }

	    utils_hooks__hooks.createFromInputFallback = deprecate(
	        'value provided is not in a recognized ISO format. moment construction falls back to js Date(), ' +
	        'which is not reliable across all browsers and versions. Non ISO date formats are ' +
	        'discouraged and will be removed in an upcoming major release. Please refer to ' +
	        'http://momentjs.com/guides/#/warnings/js-date/ for more info.',
	        function (config) {
	            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
	        }
	    );

	    // Pick the first defined of two or three arguments.
	    function defaults(a, b, c) {
	        if (a != null) {
	            return a;
	        }
	        if (b != null) {
	            return b;
	        }
	        return c;
	    }

	    function currentDateArray(config) {
	        // hooks is actually the exported moment object
	        var nowValue = new Date(utils_hooks__hooks.now());
	        if (config._useUTC) {
	            return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
	        }
	        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
	    }

	    // convert an array to a date.
	    // the array should mirror the parameters below
	    // note: all values past the year are optional and will default to the lowest possible value.
	    // [year, month, day , hour, minute, second, millisecond]
	    function configFromArray (config) {
	        var i, date, input = [], currentDate, yearToUse;

	        if (config._d) {
	            return;
	        }

	        currentDate = currentDateArray(config);

	        //compute day of the year from weeks and weekdays
	        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
	            dayOfYearFromWeekInfo(config);
	        }

	        //if the day of the year is set, figure out what it is
	        if (config._dayOfYear) {
	            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

	            if (config._dayOfYear > daysInYear(yearToUse)) {
	                getParsingFlags(config)._overflowDayOfYear = true;
	            }

	            date = createUTCDate(yearToUse, 0, config._dayOfYear);
	            config._a[MONTH] = date.getUTCMonth();
	            config._a[DATE] = date.getUTCDate();
	        }

	        // Default to current date.
	        // * if no year, month, day of month are given, default to today
	        // * if day of month is given, default month and year
	        // * if month is given, default only year
	        // * if year is given, don't default anything
	        for (i = 0; i < 3 && config._a[i] == null; ++i) {
	            config._a[i] = input[i] = currentDate[i];
	        }

	        // Zero out whatever was not defaulted, including time
	        for (; i < 7; i++) {
	            config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
	        }

	        // Check for 24:00:00.000
	        if (config._a[HOUR] === 24 &&
	                config._a[MINUTE] === 0 &&
	                config._a[SECOND] === 0 &&
	                config._a[MILLISECOND] === 0) {
	            config._nextDay = true;
	            config._a[HOUR] = 0;
	        }

	        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
	        // Apply timezone offset from input. The actual utcOffset can be changed
	        // with parseZone.
	        if (config._tzm != null) {
	            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
	        }

	        if (config._nextDay) {
	            config._a[HOUR] = 24;
	        }
	    }

	    function dayOfYearFromWeekInfo(config) {
	        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;

	        w = config._w;
	        if (w.GG != null || w.W != null || w.E != null) {
	            dow = 1;
	            doy = 4;

	            // TODO: We need to take the current isoWeekYear, but that depends on
	            // how we interpret now (local, utc, fixed offset). So create
	            // a now version of current config (take local/utc/offset flags, and
	            // create now).
	            weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(local__createLocal(), 1, 4).year);
	            week = defaults(w.W, 1);
	            weekday = defaults(w.E, 1);
	            if (weekday < 1 || weekday > 7) {
	                weekdayOverflow = true;
	            }
	        } else {
	            dow = config._locale._week.dow;
	            doy = config._locale._week.doy;

	            weekYear = defaults(w.gg, config._a[YEAR], weekOfYear(local__createLocal(), dow, doy).year);
	            week = defaults(w.w, 1);

	            if (w.d != null) {
	                // weekday -- low day numbers are considered next week
	                weekday = w.d;
	                if (weekday < 0 || weekday > 6) {
	                    weekdayOverflow = true;
	                }
	            } else if (w.e != null) {
	                // local weekday -- counting starts from begining of week
	                weekday = w.e + dow;
	                if (w.e < 0 || w.e > 6) {
	                    weekdayOverflow = true;
	                }
	            } else {
	                // default to begining of week
	                weekday = dow;
	            }
	        }
	        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
	            getParsingFlags(config)._overflowWeeks = true;
	        } else if (weekdayOverflow != null) {
	            getParsingFlags(config)._overflowWeekday = true;
	        } else {
	            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
	            config._a[YEAR] = temp.year;
	            config._dayOfYear = temp.dayOfYear;
	        }
	    }

	    // constant that refers to the ISO standard
	    utils_hooks__hooks.ISO_8601 = function () {};

	    // date from string and format string
	    function configFromStringAndFormat(config) {
	        // TODO: Move this to another part of the creation flow to prevent circular deps
	        if (config._f === utils_hooks__hooks.ISO_8601) {
	            configFromISO(config);
	            return;
	        }

	        config._a = [];
	        getParsingFlags(config).empty = true;

	        // This array is used to make a Date, either with `new Date` or `Date.UTC`
	        var string = '' + config._i,
	            i, parsedInput, tokens, token, skipped,
	            stringLength = string.length,
	            totalParsedInputLength = 0;

	        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

	        for (i = 0; i < tokens.length; i++) {
	            token = tokens[i];
	            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
	            // console.log('token', token, 'parsedInput', parsedInput,
	            //         'regex', getParseRegexForToken(token, config));
	            if (parsedInput) {
	                skipped = string.substr(0, string.indexOf(parsedInput));
	                if (skipped.length > 0) {
	                    getParsingFlags(config).unusedInput.push(skipped);
	                }
	                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
	                totalParsedInputLength += parsedInput.length;
	            }
	            // don't parse if it's not a known token
	            if (formatTokenFunctions[token]) {
	                if (parsedInput) {
	                    getParsingFlags(config).empty = false;
	                }
	                else {
	                    getParsingFlags(config).unusedTokens.push(token);
	                }
	                addTimeToArrayFromToken(token, parsedInput, config);
	            }
	            else if (config._strict && !parsedInput) {
	                getParsingFlags(config).unusedTokens.push(token);
	            }
	        }

	        // add remaining unparsed input length to the string
	        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
	        if (string.length > 0) {
	            getParsingFlags(config).unusedInput.push(string);
	        }

	        // clear _12h flag if hour is <= 12
	        if (config._a[HOUR] <= 12 &&
	            getParsingFlags(config).bigHour === true &&
	            config._a[HOUR] > 0) {
	            getParsingFlags(config).bigHour = undefined;
	        }

	        getParsingFlags(config).parsedDateParts = config._a.slice(0);
	        getParsingFlags(config).meridiem = config._meridiem;
	        // handle meridiem
	        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);

	        configFromArray(config);
	        checkOverflow(config);
	    }


	    function meridiemFixWrap (locale, hour, meridiem) {
	        var isPm;

	        if (meridiem == null) {
	            // nothing to do
	            return hour;
	        }
	        if (locale.meridiemHour != null) {
	            return locale.meridiemHour(hour, meridiem);
	        } else if (locale.isPM != null) {
	            // Fallback
	            isPm = locale.isPM(meridiem);
	            if (isPm && hour < 12) {
	                hour += 12;
	            }
	            if (!isPm && hour === 12) {
	                hour = 0;
	            }
	            return hour;
	        } else {
	            // this is not supposed to happen
	            return hour;
	        }
	    }

	    // date from string and array of format strings
	    function configFromStringAndArray(config) {
	        var tempConfig,
	            bestMoment,

	            scoreToBeat,
	            i,
	            currentScore;

	        if (config._f.length === 0) {
	            getParsingFlags(config).invalidFormat = true;
	            config._d = new Date(NaN);
	            return;
	        }

	        for (i = 0; i < config._f.length; i++) {
	            currentScore = 0;
	            tempConfig = copyConfig({}, config);
	            if (config._useUTC != null) {
	                tempConfig._useUTC = config._useUTC;
	            }
	            tempConfig._f = config._f[i];
	            configFromStringAndFormat(tempConfig);

	            if (!valid__isValid(tempConfig)) {
	                continue;
	            }

	            // if there is any input that was not parsed add a penalty for that format
	            currentScore += getParsingFlags(tempConfig).charsLeftOver;

	            //or tokens
	            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

	            getParsingFlags(tempConfig).score = currentScore;

	            if (scoreToBeat == null || currentScore < scoreToBeat) {
	                scoreToBeat = currentScore;
	                bestMoment = tempConfig;
	            }
	        }

	        extend(config, bestMoment || tempConfig);
	    }

	    function configFromObject(config) {
	        if (config._d) {
	            return;
	        }

	        var i = normalizeObjectUnits(config._i);
	        config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {
	            return obj && parseInt(obj, 10);
	        });

	        configFromArray(config);
	    }

	    function createFromConfig (config) {
	        var res = new Moment(checkOverflow(prepareConfig(config)));
	        if (res._nextDay) {
	            // Adding is smart enough around DST
	            res.add(1, 'd');
	            res._nextDay = undefined;
	        }

	        return res;
	    }

	    function prepareConfig (config) {
	        var input = config._i,
	            format = config._f;

	        config._locale = config._locale || locale_locales__getLocale(config._l);

	        if (input === null || (format === undefined && input === '')) {
	            return valid__createInvalid({nullInput: true});
	        }

	        if (typeof input === 'string') {
	            config._i = input = config._locale.preparse(input);
	        }

	        if (isMoment(input)) {
	            return new Moment(checkOverflow(input));
	        } else if (isArray(format)) {
	            configFromStringAndArray(config);
	        } else if (isDate(input)) {
	            config._d = input;
	        } else if (format) {
	            configFromStringAndFormat(config);
	        }  else {
	            configFromInput(config);
	        }

	        if (!valid__isValid(config)) {
	            config._d = null;
	        }

	        return config;
	    }

	    function configFromInput(config) {
	        var input = config._i;
	        if (input === undefined) {
	            config._d = new Date(utils_hooks__hooks.now());
	        } else if (isDate(input)) {
	            config._d = new Date(input.valueOf());
	        } else if (typeof input === 'string') {
	            configFromString(config);
	        } else if (isArray(input)) {
	            config._a = map(input.slice(0), function (obj) {
	                return parseInt(obj, 10);
	            });
	            configFromArray(config);
	        } else if (typeof(input) === 'object') {
	            configFromObject(config);
	        } else if (typeof(input) === 'number') {
	            // from milliseconds
	            config._d = new Date(input);
	        } else {
	            utils_hooks__hooks.createFromInputFallback(config);
	        }
	    }

	    function createLocalOrUTC (input, format, locale, strict, isUTC) {
	        var c = {};

	        if (typeof(locale) === 'boolean') {
	            strict = locale;
	            locale = undefined;
	        }

	        if ((isObject(input) && isObjectEmpty(input)) ||
	                (isArray(input) && input.length === 0)) {
	            input = undefined;
	        }
	        // object construction must be done this way.
	        // https://github.com/moment/moment/issues/1423
	        c._isAMomentObject = true;
	        c._useUTC = c._isUTC = isUTC;
	        c._l = locale;
	        c._i = input;
	        c._f = format;
	        c._strict = strict;

	        return createFromConfig(c);
	    }

	    function local__createLocal (input, format, locale, strict) {
	        return createLocalOrUTC(input, format, locale, strict, false);
	    }

	    var prototypeMin = deprecate(
	        'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
	        function () {
	            var other = local__createLocal.apply(null, arguments);
	            if (this.isValid() && other.isValid()) {
	                return other < this ? this : other;
	            } else {
	                return valid__createInvalid();
	            }
	        }
	    );

	    var prototypeMax = deprecate(
	        'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
	        function () {
	            var other = local__createLocal.apply(null, arguments);
	            if (this.isValid() && other.isValid()) {
	                return other > this ? this : other;
	            } else {
	                return valid__createInvalid();
	            }
	        }
	    );

	    // Pick a moment m from moments so that m[fn](other) is true for all
	    // other. This relies on the function fn to be transitive.
	    //
	    // moments should either be an array of moment objects or an array, whose
	    // first element is an array of moment objects.
	    function pickBy(fn, moments) {
	        var res, i;
	        if (moments.length === 1 && isArray(moments[0])) {
	            moments = moments[0];
	        }
	        if (!moments.length) {
	            return local__createLocal();
	        }
	        res = moments[0];
	        for (i = 1; i < moments.length; ++i) {
	            if (!moments[i].isValid() || moments[i][fn](res)) {
	                res = moments[i];
	            }
	        }
	        return res;
	    }

	    // TODO: Use [].sort instead?
	    function min () {
	        var args = [].slice.call(arguments, 0);

	        return pickBy('isBefore', args);
	    }

	    function max () {
	        var args = [].slice.call(arguments, 0);

	        return pickBy('isAfter', args);
	    }

	    var now = function () {
	        return Date.now ? Date.now() : +(new Date());
	    };

	    function Duration (duration) {
	        var normalizedInput = normalizeObjectUnits(duration),
	            years = normalizedInput.year || 0,
	            quarters = normalizedInput.quarter || 0,
	            months = normalizedInput.month || 0,
	            weeks = normalizedInput.week || 0,
	            days = normalizedInput.day || 0,
	            hours = normalizedInput.hour || 0,
	            minutes = normalizedInput.minute || 0,
	            seconds = normalizedInput.second || 0,
	            milliseconds = normalizedInput.millisecond || 0;

	        // representation for dateAddRemove
	        this._milliseconds = +milliseconds +
	            seconds * 1e3 + // 1000
	            minutes * 6e4 + // 1000 * 60
	            hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
	        // Because of dateAddRemove treats 24 hours as different from a
	        // day when working around DST, we need to store them separately
	        this._days = +days +
	            weeks * 7;
	        // It is impossible translate months into days without knowing
	        // which months you are are talking about, so we have to store
	        // it separately.
	        this._months = +months +
	            quarters * 3 +
	            years * 12;

	        this._data = {};

	        this._locale = locale_locales__getLocale();

	        this._bubble();
	    }

	    function isDuration (obj) {
	        return obj instanceof Duration;
	    }

	    function absRound (number) {
	        if (number < 0) {
	            return Math.round(-1 * number) * -1;
	        } else {
	            return Math.round(number);
	        }
	    }

	    // FORMATTING

	    function offset (token, separator) {
	        addFormatToken(token, 0, 0, function () {
	            var offset = this.utcOffset();
	            var sign = '+';
	            if (offset < 0) {
	                offset = -offset;
	                sign = '-';
	            }
	            return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);
	        });
	    }

	    offset('Z', ':');
	    offset('ZZ', '');

	    // PARSING

	    addRegexToken('Z',  matchShortOffset);
	    addRegexToken('ZZ', matchShortOffset);
	    addParseToken(['Z', 'ZZ'], function (input, array, config) {
	        config._useUTC = true;
	        config._tzm = offsetFromString(matchShortOffset, input);
	    });

	    // HELPERS

	    // timezone chunker
	    // '+10:00' > ['10',  '00']
	    // '-1530'  > ['-15', '30']
	    var chunkOffset = /([\+\-]|\d\d)/gi;

	    function offsetFromString(matcher, string) {
	        var matches = ((string || '').match(matcher) || []);
	        var chunk   = matches[matches.length - 1] || [];
	        var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];
	        var minutes = +(parts[1] * 60) + toInt(parts[2]);

	        return parts[0] === '+' ? minutes : -minutes;
	    }

	    // Return a moment from input, that is local/utc/zone equivalent to model.
	    function cloneWithOffset(input, model) {
	        var res, diff;
	        if (model._isUTC) {
	            res = model.clone();
	            diff = (isMoment(input) || isDate(input) ? input.valueOf() : local__createLocal(input).valueOf()) - res.valueOf();
	            // Use low-level api, because this fn is low-level api.
	            res._d.setTime(res._d.valueOf() + diff);
	            utils_hooks__hooks.updateOffset(res, false);
	            return res;
	        } else {
	            return local__createLocal(input).local();
	        }
	    }

	    function getDateOffset (m) {
	        // On Firefox.24 Date#getTimezoneOffset returns a floating point.
	        // https://github.com/moment/moment/pull/1871
	        return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
	    }

	    // HOOKS

	    // This function will be called whenever a moment is mutated.
	    // It is intended to keep the offset in sync with the timezone.
	    utils_hooks__hooks.updateOffset = function () {};

	    // MOMENTS

	    // keepLocalTime = true means only change the timezone, without
	    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
	    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
	    // +0200, so we adjust the time as needed, to be valid.
	    //
	    // Keeping the time actually adds/subtracts (one hour)
	    // from the actual represented time. That is why we call updateOffset
	    // a second time. In case it wants us to change the offset again
	    // _changeInProgress == true case, then we have to adjust, because
	    // there is no such time in the given timezone.
	    function getSetOffset (input, keepLocalTime) {
	        var offset = this._offset || 0,
	            localAdjust;
	        if (!this.isValid()) {
	            return input != null ? this : NaN;
	        }
	        if (input != null) {
	            if (typeof input === 'string') {
	                input = offsetFromString(matchShortOffset, input);
	            } else if (Math.abs(input) < 16) {
	                input = input * 60;
	            }
	            if (!this._isUTC && keepLocalTime) {
	                localAdjust = getDateOffset(this);
	            }
	            this._offset = input;
	            this._isUTC = true;
	            if (localAdjust != null) {
	                this.add(localAdjust, 'm');
	            }
	            if (offset !== input) {
	                if (!keepLocalTime || this._changeInProgress) {
	                    add_subtract__addSubtract(this, create__createDuration(input - offset, 'm'), 1, false);
	                } else if (!this._changeInProgress) {
	                    this._changeInProgress = true;
	                    utils_hooks__hooks.updateOffset(this, true);
	                    this._changeInProgress = null;
	                }
	            }
	            return this;
	        } else {
	            return this._isUTC ? offset : getDateOffset(this);
	        }
	    }

	    function getSetZone (input, keepLocalTime) {
	        if (input != null) {
	            if (typeof input !== 'string') {
	                input = -input;
	            }

	            this.utcOffset(input, keepLocalTime);

	            return this;
	        } else {
	            return -this.utcOffset();
	        }
	    }

	    function setOffsetToUTC (keepLocalTime) {
	        return this.utcOffset(0, keepLocalTime);
	    }

	    function setOffsetToLocal (keepLocalTime) {
	        if (this._isUTC) {
	            this.utcOffset(0, keepLocalTime);
	            this._isUTC = false;

	            if (keepLocalTime) {
	                this.subtract(getDateOffset(this), 'm');
	            }
	        }
	        return this;
	    }

	    function setOffsetToParsedOffset () {
	        if (this._tzm) {
	            this.utcOffset(this._tzm);
	        } else if (typeof this._i === 'string') {
	            var tZone = offsetFromString(matchOffset, this._i);

	            if (tZone === 0) {
	                this.utcOffset(0, true);
	            } else {
	                this.utcOffset(offsetFromString(matchOffset, this._i));
	            }
	        }
	        return this;
	    }

	    function hasAlignedHourOffset (input) {
	        if (!this.isValid()) {
	            return false;
	        }
	        input = input ? local__createLocal(input).utcOffset() : 0;

	        return (this.utcOffset() - input) % 60 === 0;
	    }

	    function isDaylightSavingTime () {
	        return (
	            this.utcOffset() > this.clone().month(0).utcOffset() ||
	            this.utcOffset() > this.clone().month(5).utcOffset()
	        );
	    }

	    function isDaylightSavingTimeShifted () {
	        if (!isUndefined(this._isDSTShifted)) {
	            return this._isDSTShifted;
	        }

	        var c = {};

	        copyConfig(c, this);
	        c = prepareConfig(c);

	        if (c._a) {
	            var other = c._isUTC ? create_utc__createUTC(c._a) : local__createLocal(c._a);
	            this._isDSTShifted = this.isValid() &&
	                compareArrays(c._a, other.toArray()) > 0;
	        } else {
	            this._isDSTShifted = false;
	        }

	        return this._isDSTShifted;
	    }

	    function isLocal () {
	        return this.isValid() ? !this._isUTC : false;
	    }

	    function isUtcOffset () {
	        return this.isValid() ? this._isUTC : false;
	    }

	    function isUtc () {
	        return this.isValid() ? this._isUTC && this._offset === 0 : false;
	    }

	    // ASP.NET json date format regex
	    var aspNetRegex = /^(\-)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/;

	    // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
	    // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
	    // and further modified to allow for strings containing both week and day
	    var isoRegex = /^(-)?P(?:(-?[0-9,.]*)Y)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)W)?(?:(-?[0-9,.]*)D)?(?:T(?:(-?[0-9,.]*)H)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)S)?)?$/;

	    function create__createDuration (input, key) {
	        var duration = input,
	            // matching against regexp is expensive, do it on demand
	            match = null,
	            sign,
	            ret,
	            diffRes;

	        if (isDuration(input)) {
	            duration = {
	                ms : input._milliseconds,
	                d  : input._days,
	                M  : input._months
	            };
	        } else if (typeof input === 'number') {
	            duration = {};
	            if (key) {
	                duration[key] = input;
	            } else {
	                duration.milliseconds = input;
	            }
	        } else if (!!(match = aspNetRegex.exec(input))) {
	            sign = (match[1] === '-') ? -1 : 1;
	            duration = {
	                y  : 0,
	                d  : toInt(match[DATE])                         * sign,
	                h  : toInt(match[HOUR])                         * sign,
	                m  : toInt(match[MINUTE])                       * sign,
	                s  : toInt(match[SECOND])                       * sign,
	                ms : toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match
	            };
	        } else if (!!(match = isoRegex.exec(input))) {
	            sign = (match[1] === '-') ? -1 : 1;
	            duration = {
	                y : parseIso(match[2], sign),
	                M : parseIso(match[3], sign),
	                w : parseIso(match[4], sign),
	                d : parseIso(match[5], sign),
	                h : parseIso(match[6], sign),
	                m : parseIso(match[7], sign),
	                s : parseIso(match[8], sign)
	            };
	        } else if (duration == null) {// checks for null or undefined
	            duration = {};
	        } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
	            diffRes = momentsDifference(local__createLocal(duration.from), local__createLocal(duration.to));

	            duration = {};
	            duration.ms = diffRes.milliseconds;
	            duration.M = diffRes.months;
	        }

	        ret = new Duration(duration);

	        if (isDuration(input) && hasOwnProp(input, '_locale')) {
	            ret._locale = input._locale;
	        }

	        return ret;
	    }

	    create__createDuration.fn = Duration.prototype;

	    function parseIso (inp, sign) {
	        // We'd normally use ~~inp for this, but unfortunately it also
	        // converts floats to ints.
	        // inp may be undefined, so careful calling replace on it.
	        var res = inp && parseFloat(inp.replace(',', '.'));
	        // apply sign while we're at it
	        return (isNaN(res) ? 0 : res) * sign;
	    }

	    function positiveMomentsDifference(base, other) {
	        var res = {milliseconds: 0, months: 0};

	        res.months = other.month() - base.month() +
	            (other.year() - base.year()) * 12;
	        if (base.clone().add(res.months, 'M').isAfter(other)) {
	            --res.months;
	        }

	        res.milliseconds = +other - +(base.clone().add(res.months, 'M'));

	        return res;
	    }

	    function momentsDifference(base, other) {
	        var res;
	        if (!(base.isValid() && other.isValid())) {
	            return {milliseconds: 0, months: 0};
	        }

	        other = cloneWithOffset(other, base);
	        if (base.isBefore(other)) {
	            res = positiveMomentsDifference(base, other);
	        } else {
	            res = positiveMomentsDifference(other, base);
	            res.milliseconds = -res.milliseconds;
	            res.months = -res.months;
	        }

	        return res;
	    }

	    // TODO: remove 'name' arg after deprecation is removed
	    function createAdder(direction, name) {
	        return function (val, period) {
	            var dur, tmp;
	            //invert the arguments, but complain about it
	            if (period !== null && !isNaN(+period)) {
	                deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' +
	                'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
	                tmp = val; val = period; period = tmp;
	            }

	            val = typeof val === 'string' ? +val : val;
	            dur = create__createDuration(val, period);
	            add_subtract__addSubtract(this, dur, direction);
	            return this;
	        };
	    }

	    function add_subtract__addSubtract (mom, duration, isAdding, updateOffset) {
	        var milliseconds = duration._milliseconds,
	            days = absRound(duration._days),
	            months = absRound(duration._months);

	        if (!mom.isValid()) {
	            // No op
	            return;
	        }

	        updateOffset = updateOffset == null ? true : updateOffset;

	        if (milliseconds) {
	            mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
	        }
	        if (days) {
	            get_set__set(mom, 'Date', get_set__get(mom, 'Date') + days * isAdding);
	        }
	        if (months) {
	            setMonth(mom, get_set__get(mom, 'Month') + months * isAdding);
	        }
	        if (updateOffset) {
	            utils_hooks__hooks.updateOffset(mom, days || months);
	        }
	    }

	    var add_subtract__add      = createAdder(1, 'add');
	    var add_subtract__subtract = createAdder(-1, 'subtract');

	    function getCalendarFormat(myMoment, now) {
	        var diff = myMoment.diff(now, 'days', true);
	        return diff < -6 ? 'sameElse' :
	                diff < -1 ? 'lastWeek' :
	                diff < 0 ? 'lastDay' :
	                diff < 1 ? 'sameDay' :
	                diff < 2 ? 'nextDay' :
	                diff < 7 ? 'nextWeek' : 'sameElse';
	    }

	    function moment_calendar__calendar (time, formats) {
	        // We want to compare the start of today, vs this.
	        // Getting start-of-today depends on whether we're local/utc/offset or not.
	        var now = time || local__createLocal(),
	            sod = cloneWithOffset(now, this).startOf('day'),
	            format = utils_hooks__hooks.calendarFormat(this, sod) || 'sameElse';

	        var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);

	        return this.format(output || this.localeData().calendar(format, this, local__createLocal(now)));
	    }

	    function clone () {
	        return new Moment(this);
	    }

	    function isAfter (input, units) {
	        var localInput = isMoment(input) ? input : local__createLocal(input);
	        if (!(this.isValid() && localInput.isValid())) {
	            return false;
	        }
	        units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
	        if (units === 'millisecond') {
	            return this.valueOf() > localInput.valueOf();
	        } else {
	            return localInput.valueOf() < this.clone().startOf(units).valueOf();
	        }
	    }

	    function isBefore (input, units) {
	        var localInput = isMoment(input) ? input : local__createLocal(input);
	        if (!(this.isValid() && localInput.isValid())) {
	            return false;
	        }
	        units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
	        if (units === 'millisecond') {
	            return this.valueOf() < localInput.valueOf();
	        } else {
	            return this.clone().endOf(units).valueOf() < localInput.valueOf();
	        }
	    }

	    function isBetween (from, to, units, inclusivity) {
	        inclusivity = inclusivity || '()';
	        return (inclusivity[0] === '(' ? this.isAfter(from, units) : !this.isBefore(from, units)) &&
	            (inclusivity[1] === ')' ? this.isBefore(to, units) : !this.isAfter(to, units));
	    }

	    function isSame (input, units) {
	        var localInput = isMoment(input) ? input : local__createLocal(input),
	            inputMs;
	        if (!(this.isValid() && localInput.isValid())) {
	            return false;
	        }
	        units = normalizeUnits(units || 'millisecond');
	        if (units === 'millisecond') {
	            return this.valueOf() === localInput.valueOf();
	        } else {
	            inputMs = localInput.valueOf();
	            return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
	        }
	    }

	    function isSameOrAfter (input, units) {
	        return this.isSame(input, units) || this.isAfter(input,units);
	    }

	    function isSameOrBefore (input, units) {
	        return this.isSame(input, units) || this.isBefore(input,units);
	    }

	    function diff (input, units, asFloat) {
	        var that,
	            zoneDelta,
	            delta, output;

	        if (!this.isValid()) {
	            return NaN;
	        }

	        that = cloneWithOffset(input, this);

	        if (!that.isValid()) {
	            return NaN;
	        }

	        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

	        units = normalizeUnits(units);

	        if (units === 'year' || units === 'month' || units === 'quarter') {
	            output = monthDiff(this, that);
	            if (units === 'quarter') {
	                output = output / 3;
	            } else if (units === 'year') {
	                output = output / 12;
	            }
	        } else {
	            delta = this - that;
	            output = units === 'second' ? delta / 1e3 : // 1000
	                units === 'minute' ? delta / 6e4 : // 1000 * 60
	                units === 'hour' ? delta / 36e5 : // 1000 * 60 * 60
	                units === 'day' ? (delta - zoneDelta) / 864e5 : // 1000 * 60 * 60 * 24, negate dst
	                units === 'week' ? (delta - zoneDelta) / 6048e5 : // 1000 * 60 * 60 * 24 * 7, negate dst
	                delta;
	        }
	        return asFloat ? output : absFloor(output);
	    }

	    function monthDiff (a, b) {
	        // difference in months
	        var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),
	            // b is in (anchor - 1 month, anchor + 1 month)
	            anchor = a.clone().add(wholeMonthDiff, 'months'),
	            anchor2, adjust;

	        if (b - anchor < 0) {
	            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
	            // linear across the month
	            adjust = (b - anchor) / (anchor - anchor2);
	        } else {
	            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
	            // linear across the month
	            adjust = (b - anchor) / (anchor2 - anchor);
	        }

	        //check for negative zero, return zero if negative zero
	        return -(wholeMonthDiff + adjust) || 0;
	    }

	    utils_hooks__hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
	    utils_hooks__hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

	    function toString () {
	        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
	    }

	    function moment_format__toISOString () {
	        var m = this.clone().utc();
	        if (0 < m.year() && m.year() <= 9999) {
	            if (isFunction(Date.prototype.toISOString)) {
	                // native implementation is ~50x faster, use it when we can
	                return this.toDate().toISOString();
	            } else {
	                return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
	            }
	        } else {
	            return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
	        }
	    }

	    function format (inputString) {
	        if (!inputString) {
	            inputString = this.isUtc() ? utils_hooks__hooks.defaultFormatUtc : utils_hooks__hooks.defaultFormat;
	        }
	        var output = formatMoment(this, inputString);
	        return this.localeData().postformat(output);
	    }

	    function from (time, withoutSuffix) {
	        if (this.isValid() &&
	                ((isMoment(time) && time.isValid()) ||
	                 local__createLocal(time).isValid())) {
	            return create__createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);
	        } else {
	            return this.localeData().invalidDate();
	        }
	    }

	    function fromNow (withoutSuffix) {
	        return this.from(local__createLocal(), withoutSuffix);
	    }

	    function to (time, withoutSuffix) {
	        if (this.isValid() &&
	                ((isMoment(time) && time.isValid()) ||
	                 local__createLocal(time).isValid())) {
	            return create__createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);
	        } else {
	            return this.localeData().invalidDate();
	        }
	    }

	    function toNow (withoutSuffix) {
	        return this.to(local__createLocal(), withoutSuffix);
	    }

	    // If passed a locale key, it will set the locale for this
	    // instance.  Otherwise, it will return the locale configuration
	    // variables for this instance.
	    function locale (key) {
	        var newLocaleData;

	        if (key === undefined) {
	            return this._locale._abbr;
	        } else {
	            newLocaleData = locale_locales__getLocale(key);
	            if (newLocaleData != null) {
	                this._locale = newLocaleData;
	            }
	            return this;
	        }
	    }

	    var lang = deprecate(
	        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
	        function (key) {
	            if (key === undefined) {
	                return this.localeData();
	            } else {
	                return this.locale(key);
	            }
	        }
	    );

	    function localeData () {
	        return this._locale;
	    }

	    function startOf (units) {
	        units = normalizeUnits(units);
	        // the following switch intentionally omits break keywords
	        // to utilize falling through the cases.
	        switch (units) {
	            case 'year':
	                this.month(0);
	                /* falls through */
	            case 'quarter':
	            case 'month':
	                this.date(1);
	                /* falls through */
	            case 'week':
	            case 'isoWeek':
	            case 'day':
	            case 'date':
	                this.hours(0);
	                /* falls through */
	            case 'hour':
	                this.minutes(0);
	                /* falls through */
	            case 'minute':
	                this.seconds(0);
	                /* falls through */
	            case 'second':
	                this.milliseconds(0);
	        }

	        // weeks are a special case
	        if (units === 'week') {
	            this.weekday(0);
	        }
	        if (units === 'isoWeek') {
	            this.isoWeekday(1);
	        }

	        // quarters are also special
	        if (units === 'quarter') {
	            this.month(Math.floor(this.month() / 3) * 3);
	        }

	        return this;
	    }

	    function endOf (units) {
	        units = normalizeUnits(units);
	        if (units === undefined || units === 'millisecond') {
	            return this;
	        }

	        // 'date' is an alias for 'day', so it should be considered as such.
	        if (units === 'date') {
	            units = 'day';
	        }

	        return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');
	    }

	    function to_type__valueOf () {
	        return this._d.valueOf() - ((this._offset || 0) * 60000);
	    }

	    function unix () {
	        return Math.floor(this.valueOf() / 1000);
	    }

	    function toDate () {
	        return new Date(this.valueOf());
	    }

	    function toArray () {
	        var m = this;
	        return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
	    }

	    function toObject () {
	        var m = this;
	        return {
	            years: m.year(),
	            months: m.month(),
	            date: m.date(),
	            hours: m.hours(),
	            minutes: m.minutes(),
	            seconds: m.seconds(),
	            milliseconds: m.milliseconds()
	        };
	    }

	    function toJSON () {
	        // new Date(NaN).toJSON() === null
	        return this.isValid() ? this.toISOString() : null;
	    }

	    function moment_valid__isValid () {
	        return valid__isValid(this);
	    }

	    function parsingFlags () {
	        return extend({}, getParsingFlags(this));
	    }

	    function invalidAt () {
	        return getParsingFlags(this).overflow;
	    }

	    function creationData() {
	        return {
	            input: this._i,
	            format: this._f,
	            locale: this._locale,
	            isUTC: this._isUTC,
	            strict: this._strict
	        };
	    }

	    // FORMATTING

	    addFormatToken(0, ['gg', 2], 0, function () {
	        return this.weekYear() % 100;
	    });

	    addFormatToken(0, ['GG', 2], 0, function () {
	        return this.isoWeekYear() % 100;
	    });

	    function addWeekYearFormatToken (token, getter) {
	        addFormatToken(0, [token, token.length], 0, getter);
	    }

	    addWeekYearFormatToken('gggg',     'weekYear');
	    addWeekYearFormatToken('ggggg',    'weekYear');
	    addWeekYearFormatToken('GGGG',  'isoWeekYear');
	    addWeekYearFormatToken('GGGGG', 'isoWeekYear');

	    // ALIASES

	    addUnitAlias('weekYear', 'gg');
	    addUnitAlias('isoWeekYear', 'GG');

	    // PRIORITY

	    addUnitPriority('weekYear', 1);
	    addUnitPriority('isoWeekYear', 1);


	    // PARSING

	    addRegexToken('G',      matchSigned);
	    addRegexToken('g',      matchSigned);
	    addRegexToken('GG',     match1to2, match2);
	    addRegexToken('gg',     match1to2, match2);
	    addRegexToken('GGGG',   match1to4, match4);
	    addRegexToken('gggg',   match1to4, match4);
	    addRegexToken('GGGGG',  match1to6, match6);
	    addRegexToken('ggggg',  match1to6, match6);

	    addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
	        week[token.substr(0, 2)] = toInt(input);
	    });

	    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
	        week[token] = utils_hooks__hooks.parseTwoDigitYear(input);
	    });

	    // MOMENTS

	    function getSetWeekYear (input) {
	        return getSetWeekYearHelper.call(this,
	                input,
	                this.week(),
	                this.weekday(),
	                this.localeData()._week.dow,
	                this.localeData()._week.doy);
	    }

	    function getSetISOWeekYear (input) {
	        return getSetWeekYearHelper.call(this,
	                input, this.isoWeek(), this.isoWeekday(), 1, 4);
	    }

	    function getISOWeeksInYear () {
	        return weeksInYear(this.year(), 1, 4);
	    }

	    function getWeeksInYear () {
	        var weekInfo = this.localeData()._week;
	        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
	    }

	    function getSetWeekYearHelper(input, week, weekday, dow, doy) {
	        var weeksTarget;
	        if (input == null) {
	            return weekOfYear(this, dow, doy).year;
	        } else {
	            weeksTarget = weeksInYear(input, dow, doy);
	            if (week > weeksTarget) {
	                week = weeksTarget;
	            }
	            return setWeekAll.call(this, input, week, weekday, dow, doy);
	        }
	    }

	    function setWeekAll(weekYear, week, weekday, dow, doy) {
	        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
	            date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);

	        this.year(date.getUTCFullYear());
	        this.month(date.getUTCMonth());
	        this.date(date.getUTCDate());
	        return this;
	    }

	    // FORMATTING

	    addFormatToken('Q', 0, 'Qo', 'quarter');

	    // ALIASES

	    addUnitAlias('quarter', 'Q');

	    // PRIORITY

	    addUnitPriority('quarter', 7);

	    // PARSING

	    addRegexToken('Q', match1);
	    addParseToken('Q', function (input, array) {
	        array[MONTH] = (toInt(input) - 1) * 3;
	    });

	    // MOMENTS

	    function getSetQuarter (input) {
	        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
	    }

	    // FORMATTING

	    addFormatToken('D', ['DD', 2], 'Do', 'date');

	    // ALIASES

	    addUnitAlias('date', 'D');

	    // PRIOROITY
	    addUnitPriority('date', 9);

	    // PARSING

	    addRegexToken('D',  match1to2);
	    addRegexToken('DD', match1to2, match2);
	    addRegexToken('Do', function (isStrict, locale) {
	        return isStrict ? locale._ordinalParse : locale._ordinalParseLenient;
	    });

	    addParseToken(['D', 'DD'], DATE);
	    addParseToken('Do', function (input, array) {
	        array[DATE] = toInt(input.match(match1to2)[0], 10);
	    });

	    // MOMENTS

	    var getSetDayOfMonth = makeGetSet('Date', true);

	    // FORMATTING

	    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

	    // ALIASES

	    addUnitAlias('dayOfYear', 'DDD');

	    // PRIORITY
	    addUnitPriority('dayOfYear', 4);

	    // PARSING

	    addRegexToken('DDD',  match1to3);
	    addRegexToken('DDDD', match3);
	    addParseToken(['DDD', 'DDDD'], function (input, array, config) {
	        config._dayOfYear = toInt(input);
	    });

	    // HELPERS

	    // MOMENTS

	    function getSetDayOfYear (input) {
	        var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
	        return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');
	    }

	    // FORMATTING

	    addFormatToken('m', ['mm', 2], 0, 'minute');

	    // ALIASES

	    addUnitAlias('minute', 'm');

	    // PRIORITY

	    addUnitPriority('minute', 14);

	    // PARSING

	    addRegexToken('m',  match1to2);
	    addRegexToken('mm', match1to2, match2);
	    addParseToken(['m', 'mm'], MINUTE);

	    // MOMENTS

	    var getSetMinute = makeGetSet('Minutes', false);

	    // FORMATTING

	    addFormatToken('s', ['ss', 2], 0, 'second');

	    // ALIASES

	    addUnitAlias('second', 's');

	    // PRIORITY

	    addUnitPriority('second', 15);

	    // PARSING

	    addRegexToken('s',  match1to2);
	    addRegexToken('ss', match1to2, match2);
	    addParseToken(['s', 'ss'], SECOND);

	    // MOMENTS

	    var getSetSecond = makeGetSet('Seconds', false);

	    // FORMATTING

	    addFormatToken('S', 0, 0, function () {
	        return ~~(this.millisecond() / 100);
	    });

	    addFormatToken(0, ['SS', 2], 0, function () {
	        return ~~(this.millisecond() / 10);
	    });

	    addFormatToken(0, ['SSS', 3], 0, 'millisecond');
	    addFormatToken(0, ['SSSS', 4], 0, function () {
	        return this.millisecond() * 10;
	    });
	    addFormatToken(0, ['SSSSS', 5], 0, function () {
	        return this.millisecond() * 100;
	    });
	    addFormatToken(0, ['SSSSSS', 6], 0, function () {
	        return this.millisecond() * 1000;
	    });
	    addFormatToken(0, ['SSSSSSS', 7], 0, function () {
	        return this.millisecond() * 10000;
	    });
	    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
	        return this.millisecond() * 100000;
	    });
	    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
	        return this.millisecond() * 1000000;
	    });


	    // ALIASES

	    addUnitAlias('millisecond', 'ms');

	    // PRIORITY

	    addUnitPriority('millisecond', 16);

	    // PARSING

	    addRegexToken('S',    match1to3, match1);
	    addRegexToken('SS',   match1to3, match2);
	    addRegexToken('SSS',  match1to3, match3);

	    var token;
	    for (token = 'SSSS'; token.length <= 9; token += 'S') {
	        addRegexToken(token, matchUnsigned);
	    }

	    function parseMs(input, array) {
	        array[MILLISECOND] = toInt(('0.' + input) * 1000);
	    }

	    for (token = 'S'; token.length <= 9; token += 'S') {
	        addParseToken(token, parseMs);
	    }
	    // MOMENTS

	    var getSetMillisecond = makeGetSet('Milliseconds', false);

	    // FORMATTING

	    addFormatToken('z',  0, 0, 'zoneAbbr');
	    addFormatToken('zz', 0, 0, 'zoneName');

	    // MOMENTS

	    function getZoneAbbr () {
	        return this._isUTC ? 'UTC' : '';
	    }

	    function getZoneName () {
	        return this._isUTC ? 'Coordinated Universal Time' : '';
	    }

	    var momentPrototype__proto = Moment.prototype;

	    momentPrototype__proto.add               = add_subtract__add;
	    momentPrototype__proto.calendar          = moment_calendar__calendar;
	    momentPrototype__proto.clone             = clone;
	    momentPrototype__proto.diff              = diff;
	    momentPrototype__proto.endOf             = endOf;
	    momentPrototype__proto.format            = format;
	    momentPrototype__proto.from              = from;
	    momentPrototype__proto.fromNow           = fromNow;
	    momentPrototype__proto.to                = to;
	    momentPrototype__proto.toNow             = toNow;
	    momentPrototype__proto.get               = stringGet;
	    momentPrototype__proto.invalidAt         = invalidAt;
	    momentPrototype__proto.isAfter           = isAfter;
	    momentPrototype__proto.isBefore          = isBefore;
	    momentPrototype__proto.isBetween         = isBetween;
	    momentPrototype__proto.isSame            = isSame;
	    momentPrototype__proto.isSameOrAfter     = isSameOrAfter;
	    momentPrototype__proto.isSameOrBefore    = isSameOrBefore;
	    momentPrototype__proto.isValid           = moment_valid__isValid;
	    momentPrototype__proto.lang              = lang;
	    momentPrototype__proto.locale            = locale;
	    momentPrototype__proto.localeData        = localeData;
	    momentPrototype__proto.max               = prototypeMax;
	    momentPrototype__proto.min               = prototypeMin;
	    momentPrototype__proto.parsingFlags      = parsingFlags;
	    momentPrototype__proto.set               = stringSet;
	    momentPrototype__proto.startOf           = startOf;
	    momentPrototype__proto.subtract          = add_subtract__subtract;
	    momentPrototype__proto.toArray           = toArray;
	    momentPrototype__proto.toObject          = toObject;
	    momentPrototype__proto.toDate            = toDate;
	    momentPrototype__proto.toISOString       = moment_format__toISOString;
	    momentPrototype__proto.toJSON            = toJSON;
	    momentPrototype__proto.toString          = toString;
	    momentPrototype__proto.unix              = unix;
	    momentPrototype__proto.valueOf           = to_type__valueOf;
	    momentPrototype__proto.creationData      = creationData;

	    // Year
	    momentPrototype__proto.year       = getSetYear;
	    momentPrototype__proto.isLeapYear = getIsLeapYear;

	    // Week Year
	    momentPrototype__proto.weekYear    = getSetWeekYear;
	    momentPrototype__proto.isoWeekYear = getSetISOWeekYear;

	    // Quarter
	    momentPrototype__proto.quarter = momentPrototype__proto.quarters = getSetQuarter;

	    // Month
	    momentPrototype__proto.month       = getSetMonth;
	    momentPrototype__proto.daysInMonth = getDaysInMonth;

	    // Week
	    momentPrototype__proto.week           = momentPrototype__proto.weeks        = getSetWeek;
	    momentPrototype__proto.isoWeek        = momentPrototype__proto.isoWeeks     = getSetISOWeek;
	    momentPrototype__proto.weeksInYear    = getWeeksInYear;
	    momentPrototype__proto.isoWeeksInYear = getISOWeeksInYear;

	    // Day
	    momentPrototype__proto.date       = getSetDayOfMonth;
	    momentPrototype__proto.day        = momentPrototype__proto.days             = getSetDayOfWeek;
	    momentPrototype__proto.weekday    = getSetLocaleDayOfWeek;
	    momentPrototype__proto.isoWeekday = getSetISODayOfWeek;
	    momentPrototype__proto.dayOfYear  = getSetDayOfYear;

	    // Hour
	    momentPrototype__proto.hour = momentPrototype__proto.hours = getSetHour;

	    // Minute
	    momentPrototype__proto.minute = momentPrototype__proto.minutes = getSetMinute;

	    // Second
	    momentPrototype__proto.second = momentPrototype__proto.seconds = getSetSecond;

	    // Millisecond
	    momentPrototype__proto.millisecond = momentPrototype__proto.milliseconds = getSetMillisecond;

	    // Offset
	    momentPrototype__proto.utcOffset            = getSetOffset;
	    momentPrototype__proto.utc                  = setOffsetToUTC;
	    momentPrototype__proto.local                = setOffsetToLocal;
	    momentPrototype__proto.parseZone            = setOffsetToParsedOffset;
	    momentPrototype__proto.hasAlignedHourOffset = hasAlignedHourOffset;
	    momentPrototype__proto.isDST                = isDaylightSavingTime;
	    momentPrototype__proto.isLocal              = isLocal;
	    momentPrototype__proto.isUtcOffset          = isUtcOffset;
	    momentPrototype__proto.isUtc                = isUtc;
	    momentPrototype__proto.isUTC                = isUtc;

	    // Timezone
	    momentPrototype__proto.zoneAbbr = getZoneAbbr;
	    momentPrototype__proto.zoneName = getZoneName;

	    // Deprecations
	    momentPrototype__proto.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
	    momentPrototype__proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
	    momentPrototype__proto.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);
	    momentPrototype__proto.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
	    momentPrototype__proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);

	    var momentPrototype = momentPrototype__proto;

	    function moment__createUnix (input) {
	        return local__createLocal(input * 1000);
	    }

	    function moment__createInZone () {
	        return local__createLocal.apply(null, arguments).parseZone();
	    }

	    function preParsePostFormat (string) {
	        return string;
	    }

	    var prototype__proto = Locale.prototype;

	    prototype__proto.calendar        = locale_calendar__calendar;
	    prototype__proto.longDateFormat  = longDateFormat;
	    prototype__proto.invalidDate     = invalidDate;
	    prototype__proto.ordinal         = ordinal;
	    prototype__proto.preparse        = preParsePostFormat;
	    prototype__proto.postformat      = preParsePostFormat;
	    prototype__proto.relativeTime    = relative__relativeTime;
	    prototype__proto.pastFuture      = pastFuture;
	    prototype__proto.set             = locale_set__set;

	    // Month
	    prototype__proto.months            =        localeMonths;
	    prototype__proto.monthsShort       =        localeMonthsShort;
	    prototype__proto.monthsParse       =        localeMonthsParse;
	    prototype__proto.monthsRegex       = monthsRegex;
	    prototype__proto.monthsShortRegex  = monthsShortRegex;

	    // Week
	    prototype__proto.week = localeWeek;
	    prototype__proto.firstDayOfYear = localeFirstDayOfYear;
	    prototype__proto.firstDayOfWeek = localeFirstDayOfWeek;

	    // Day of Week
	    prototype__proto.weekdays       =        localeWeekdays;
	    prototype__proto.weekdaysMin    =        localeWeekdaysMin;
	    prototype__proto.weekdaysShort  =        localeWeekdaysShort;
	    prototype__proto.weekdaysParse  =        localeWeekdaysParse;

	    prototype__proto.weekdaysRegex       =        weekdaysRegex;
	    prototype__proto.weekdaysShortRegex  =        weekdaysShortRegex;
	    prototype__proto.weekdaysMinRegex    =        weekdaysMinRegex;

	    // Hours
	    prototype__proto.isPM = localeIsPM;
	    prototype__proto.meridiem = localeMeridiem;

	    function lists__get (format, index, field, setter) {
	        var locale = locale_locales__getLocale();
	        var utc = create_utc__createUTC().set(setter, index);
	        return locale[field](utc, format);
	    }

	    function listMonthsImpl (format, index, field) {
	        if (typeof format === 'number') {
	            index = format;
	            format = undefined;
	        }

	        format = format || '';

	        if (index != null) {
	            return lists__get(format, index, field, 'month');
	        }

	        var i;
	        var out = [];
	        for (i = 0; i < 12; i++) {
	            out[i] = lists__get(format, i, field, 'month');
	        }
	        return out;
	    }

	    // ()
	    // (5)
	    // (fmt, 5)
	    // (fmt)
	    // (true)
	    // (true, 5)
	    // (true, fmt, 5)
	    // (true, fmt)
	    function listWeekdaysImpl (localeSorted, format, index, field) {
	        if (typeof localeSorted === 'boolean') {
	            if (typeof format === 'number') {
	                index = format;
	                format = undefined;
	            }

	            format = format || '';
	        } else {
	            format = localeSorted;
	            index = format;
	            localeSorted = false;

	            if (typeof format === 'number') {
	                index = format;
	                format = undefined;
	            }

	            format = format || '';
	        }

	        var locale = locale_locales__getLocale(),
	            shift = localeSorted ? locale._week.dow : 0;

	        if (index != null) {
	            return lists__get(format, (index + shift) % 7, field, 'day');
	        }

	        var i;
	        var out = [];
	        for (i = 0; i < 7; i++) {
	            out[i] = lists__get(format, (i + shift) % 7, field, 'day');
	        }
	        return out;
	    }

	    function lists__listMonths (format, index) {
	        return listMonthsImpl(format, index, 'months');
	    }

	    function lists__listMonthsShort (format, index) {
	        return listMonthsImpl(format, index, 'monthsShort');
	    }

	    function lists__listWeekdays (localeSorted, format, index) {
	        return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
	    }

	    function lists__listWeekdaysShort (localeSorted, format, index) {
	        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
	    }

	    function lists__listWeekdaysMin (localeSorted, format, index) {
	        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
	    }

	    locale_locales__getSetGlobalLocale('en', {
	        ordinalParse: /\d{1,2}(th|st|nd|rd)/,
	        ordinal : function (number) {
	            var b = number % 10,
	                output = (toInt(number % 100 / 10) === 1) ? 'th' :
	                (b === 1) ? 'st' :
	                (b === 2) ? 'nd' :
	                (b === 3) ? 'rd' : 'th';
	            return number + output;
	        }
	    });

	    // Side effect imports
	    utils_hooks__hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', locale_locales__getSetGlobalLocale);
	    utils_hooks__hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', locale_locales__getLocale);

	    var mathAbs = Math.abs;

	    function duration_abs__abs () {
	        var data           = this._data;

	        this._milliseconds = mathAbs(this._milliseconds);
	        this._days         = mathAbs(this._days);
	        this._months       = mathAbs(this._months);

	        data.milliseconds  = mathAbs(data.milliseconds);
	        data.seconds       = mathAbs(data.seconds);
	        data.minutes       = mathAbs(data.minutes);
	        data.hours         = mathAbs(data.hours);
	        data.months        = mathAbs(data.months);
	        data.years         = mathAbs(data.years);

	        return this;
	    }

	    function duration_add_subtract__addSubtract (duration, input, value, direction) {
	        var other = create__createDuration(input, value);

	        duration._milliseconds += direction * other._milliseconds;
	        duration._days         += direction * other._days;
	        duration._months       += direction * other._months;

	        return duration._bubble();
	    }

	    // supports only 2.0-style add(1, 's') or add(duration)
	    function duration_add_subtract__add (input, value) {
	        return duration_add_subtract__addSubtract(this, input, value, 1);
	    }

	    // supports only 2.0-style subtract(1, 's') or subtract(duration)
	    function duration_add_subtract__subtract (input, value) {
	        return duration_add_subtract__addSubtract(this, input, value, -1);
	    }

	    function absCeil (number) {
	        if (number < 0) {
	            return Math.floor(number);
	        } else {
	            return Math.ceil(number);
	        }
	    }

	    function bubble () {
	        var milliseconds = this._milliseconds;
	        var days         = this._days;
	        var months       = this._months;
	        var data         = this._data;
	        var seconds, minutes, hours, years, monthsFromDays;

	        // if we have a mix of positive and negative values, bubble down first
	        // check: https://github.com/moment/moment/issues/2166
	        if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||
	                (milliseconds <= 0 && days <= 0 && months <= 0))) {
	            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
	            days = 0;
	            months = 0;
	        }

	        // The following code bubbles up values, see the tests for
	        // examples of what that means.
	        data.milliseconds = milliseconds % 1000;

	        seconds           = absFloor(milliseconds / 1000);
	        data.seconds      = seconds % 60;

	        minutes           = absFloor(seconds / 60);
	        data.minutes      = minutes % 60;

	        hours             = absFloor(minutes / 60);
	        data.hours        = hours % 24;

	        days += absFloor(hours / 24);

	        // convert days to months
	        monthsFromDays = absFloor(daysToMonths(days));
	        months += monthsFromDays;
	        days -= absCeil(monthsToDays(monthsFromDays));

	        // 12 months -> 1 year
	        years = absFloor(months / 12);
	        months %= 12;

	        data.days   = days;
	        data.months = months;
	        data.years  = years;

	        return this;
	    }

	    function daysToMonths (days) {
	        // 400 years have 146097 days (taking into account leap year rules)
	        // 400 years have 12 months === 4800
	        return days * 4800 / 146097;
	    }

	    function monthsToDays (months) {
	        // the reverse of daysToMonths
	        return months * 146097 / 4800;
	    }

	    function as (units) {
	        var days;
	        var months;
	        var milliseconds = this._milliseconds;

	        units = normalizeUnits(units);

	        if (units === 'month' || units === 'year') {
	            days   = this._days   + milliseconds / 864e5;
	            months = this._months + daysToMonths(days);
	            return units === 'month' ? months : months / 12;
	        } else {
	            // handle milliseconds separately because of floating point math errors (issue #1867)
	            days = this._days + Math.round(monthsToDays(this._months));
	            switch (units) {
	                case 'week'   : return days / 7     + milliseconds / 6048e5;
	                case 'day'    : return days         + milliseconds / 864e5;
	                case 'hour'   : return days * 24    + milliseconds / 36e5;
	                case 'minute' : return days * 1440  + milliseconds / 6e4;
	                case 'second' : return days * 86400 + milliseconds / 1000;
	                // Math.floor prevents floating point math errors here
	                case 'millisecond': return Math.floor(days * 864e5) + milliseconds;
	                default: throw new Error('Unknown unit ' + units);
	            }
	        }
	    }

	    // TODO: Use this.as('ms')?
	    function duration_as__valueOf () {
	        return (
	            this._milliseconds +
	            this._days * 864e5 +
	            (this._months % 12) * 2592e6 +
	            toInt(this._months / 12) * 31536e6
	        );
	    }

	    function makeAs (alias) {
	        return function () {
	            return this.as(alias);
	        };
	    }

	    var asMilliseconds = makeAs('ms');
	    var asSeconds      = makeAs('s');
	    var asMinutes      = makeAs('m');
	    var asHours        = makeAs('h');
	    var asDays         = makeAs('d');
	    var asWeeks        = makeAs('w');
	    var asMonths       = makeAs('M');
	    var asYears        = makeAs('y');

	    function duration_get__get (units) {
	        units = normalizeUnits(units);
	        return this[units + 's']();
	    }

	    function makeGetter(name) {
	        return function () {
	            return this._data[name];
	        };
	    }

	    var milliseconds = makeGetter('milliseconds');
	    var seconds      = makeGetter('seconds');
	    var minutes      = makeGetter('minutes');
	    var hours        = makeGetter('hours');
	    var days         = makeGetter('days');
	    var months       = makeGetter('months');
	    var years        = makeGetter('years');

	    function weeks () {
	        return absFloor(this.days() / 7);
	    }

	    var round = Math.round;
	    var thresholds = {
	        s: 45,  // seconds to minute
	        m: 45,  // minutes to hour
	        h: 22,  // hours to day
	        d: 26,  // days to month
	        M: 11   // months to year
	    };

	    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
	    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
	        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
	    }

	    function duration_humanize__relativeTime (posNegDuration, withoutSuffix, locale) {
	        var duration = create__createDuration(posNegDuration).abs();
	        var seconds  = round(duration.as('s'));
	        var minutes  = round(duration.as('m'));
	        var hours    = round(duration.as('h'));
	        var days     = round(duration.as('d'));
	        var months   = round(duration.as('M'));
	        var years    = round(duration.as('y'));

	        var a = seconds < thresholds.s && ['s', seconds]  ||
	                minutes <= 1           && ['m']           ||
	                minutes < thresholds.m && ['mm', minutes] ||
	                hours   <= 1           && ['h']           ||
	                hours   < thresholds.h && ['hh', hours]   ||
	                days    <= 1           && ['d']           ||
	                days    < thresholds.d && ['dd', days]    ||
	                months  <= 1           && ['M']           ||
	                months  < thresholds.M && ['MM', months]  ||
	                years   <= 1           && ['y']           || ['yy', years];

	        a[2] = withoutSuffix;
	        a[3] = +posNegDuration > 0;
	        a[4] = locale;
	        return substituteTimeAgo.apply(null, a);
	    }

	    // This function allows you to set the rounding function for relative time strings
	    function duration_humanize__getSetRelativeTimeRounding (roundingFunction) {
	        if (roundingFunction === undefined) {
	            return round;
	        }
	        if (typeof(roundingFunction) === 'function') {
	            round = roundingFunction;
	            return true;
	        }
	        return false;
	    }

	    // This function allows you to set a threshold for relative time strings
	    function duration_humanize__getSetRelativeTimeThreshold (threshold, limit) {
	        if (thresholds[threshold] === undefined) {
	            return false;
	        }
	        if (limit === undefined) {
	            return thresholds[threshold];
	        }
	        thresholds[threshold] = limit;
	        return true;
	    }

	    function humanize (withSuffix) {
	        var locale = this.localeData();
	        var output = duration_humanize__relativeTime(this, !withSuffix, locale);

	        if (withSuffix) {
	            output = locale.pastFuture(+this, output);
	        }

	        return locale.postformat(output);
	    }

	    var iso_string__abs = Math.abs;

	    function iso_string__toISOString() {
	        // for ISO strings we do not use the normal bubbling rules:
	        //  * milliseconds bubble up until they become hours
	        //  * days do not bubble at all
	        //  * months bubble up until they become years
	        // This is because there is no context-free conversion between hours and days
	        // (think of clock changes)
	        // and also not between days and months (28-31 days per month)
	        var seconds = iso_string__abs(this._milliseconds) / 1000;
	        var days         = iso_string__abs(this._days);
	        var months       = iso_string__abs(this._months);
	        var minutes, hours, years;

	        // 3600 seconds -> 60 minutes -> 1 hour
	        minutes           = absFloor(seconds / 60);
	        hours             = absFloor(minutes / 60);
	        seconds %= 60;
	        minutes %= 60;

	        // 12 months -> 1 year
	        years  = absFloor(months / 12);
	        months %= 12;


	        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
	        var Y = years;
	        var M = months;
	        var D = days;
	        var h = hours;
	        var m = minutes;
	        var s = seconds;
	        var total = this.asSeconds();

	        if (!total) {
	            // this is the same as C#'s (Noda) and python (isodate)...
	            // but not other JS (goog.date)
	            return 'P0D';
	        }

	        return (total < 0 ? '-' : '') +
	            'P' +
	            (Y ? Y + 'Y' : '') +
	            (M ? M + 'M' : '') +
	            (D ? D + 'D' : '') +
	            ((h || m || s) ? 'T' : '') +
	            (h ? h + 'H' : '') +
	            (m ? m + 'M' : '') +
	            (s ? s + 'S' : '');
	    }

	    var duration_prototype__proto = Duration.prototype;

	    duration_prototype__proto.abs            = duration_abs__abs;
	    duration_prototype__proto.add            = duration_add_subtract__add;
	    duration_prototype__proto.subtract       = duration_add_subtract__subtract;
	    duration_prototype__proto.as             = as;
	    duration_prototype__proto.asMilliseconds = asMilliseconds;
	    duration_prototype__proto.asSeconds      = asSeconds;
	    duration_prototype__proto.asMinutes      = asMinutes;
	    duration_prototype__proto.asHours        = asHours;
	    duration_prototype__proto.asDays         = asDays;
	    duration_prototype__proto.asWeeks        = asWeeks;
	    duration_prototype__proto.asMonths       = asMonths;
	    duration_prototype__proto.asYears        = asYears;
	    duration_prototype__proto.valueOf        = duration_as__valueOf;
	    duration_prototype__proto._bubble        = bubble;
	    duration_prototype__proto.get            = duration_get__get;
	    duration_prototype__proto.milliseconds   = milliseconds;
	    duration_prototype__proto.seconds        = seconds;
	    duration_prototype__proto.minutes        = minutes;
	    duration_prototype__proto.hours          = hours;
	    duration_prototype__proto.days           = days;
	    duration_prototype__proto.weeks          = weeks;
	    duration_prototype__proto.months         = months;
	    duration_prototype__proto.years          = years;
	    duration_prototype__proto.humanize       = humanize;
	    duration_prototype__proto.toISOString    = iso_string__toISOString;
	    duration_prototype__proto.toString       = iso_string__toISOString;
	    duration_prototype__proto.toJSON         = iso_string__toISOString;
	    duration_prototype__proto.locale         = locale;
	    duration_prototype__proto.localeData     = localeData;

	    // Deprecations
	    duration_prototype__proto.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', iso_string__toISOString);
	    duration_prototype__proto.lang = lang;

	    // Side effect imports

	    // FORMATTING

	    addFormatToken('X', 0, 0, 'unix');
	    addFormatToken('x', 0, 0, 'valueOf');

	    // PARSING

	    addRegexToken('x', matchSigned);
	    addRegexToken('X', matchTimestamp);
	    addParseToken('X', function (input, array, config) {
	        config._d = new Date(parseFloat(input, 10) * 1000);
	    });
	    addParseToken('x', function (input, array, config) {
	        config._d = new Date(toInt(input));
	    });

	    // Side effect imports


	    utils_hooks__hooks.version = '2.15.1';

	    setHookCallback(local__createLocal);

	    utils_hooks__hooks.fn                    = momentPrototype;
	    utils_hooks__hooks.min                   = min;
	    utils_hooks__hooks.max                   = max;
	    utils_hooks__hooks.now                   = now;
	    utils_hooks__hooks.utc                   = create_utc__createUTC;
	    utils_hooks__hooks.unix                  = moment__createUnix;
	    utils_hooks__hooks.months                = lists__listMonths;
	    utils_hooks__hooks.isDate                = isDate;
	    utils_hooks__hooks.locale                = locale_locales__getSetGlobalLocale;
	    utils_hooks__hooks.invalid               = valid__createInvalid;
	    utils_hooks__hooks.duration              = create__createDuration;
	    utils_hooks__hooks.isMoment              = isMoment;
	    utils_hooks__hooks.weekdays              = lists__listWeekdays;
	    utils_hooks__hooks.parseZone             = moment__createInZone;
	    utils_hooks__hooks.localeData            = locale_locales__getLocale;
	    utils_hooks__hooks.isDuration            = isDuration;
	    utils_hooks__hooks.monthsShort           = lists__listMonthsShort;
	    utils_hooks__hooks.weekdaysMin           = lists__listWeekdaysMin;
	    utils_hooks__hooks.defineLocale          = defineLocale;
	    utils_hooks__hooks.updateLocale          = updateLocale;
	    utils_hooks__hooks.locales               = locale_locales__listLocales;
	    utils_hooks__hooks.weekdaysShort         = lists__listWeekdaysShort;
	    utils_hooks__hooks.normalizeUnits        = normalizeUnits;
	    utils_hooks__hooks.relativeTimeRounding = duration_humanize__getSetRelativeTimeRounding;
	    utils_hooks__hooks.relativeTimeThreshold = duration_humanize__getSetRelativeTimeThreshold;
	    utils_hooks__hooks.calendarFormat        = getCalendarFormat;
	    utils_hooks__hooks.prototype             = momentPrototype;

	    var _moment = utils_hooks__hooks;

	    return _moment;

	}));
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)(module)))

/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	var map = {
		"./af": 50,
		"./af.js": 50,
		"./ar": 51,
		"./ar-ly": 52,
		"./ar-ly.js": 52,
		"./ar-ma": 53,
		"./ar-ma.js": 53,
		"./ar-sa": 54,
		"./ar-sa.js": 54,
		"./ar-tn": 55,
		"./ar-tn.js": 55,
		"./ar.js": 51,
		"./az": 56,
		"./az.js": 56,
		"./be": 57,
		"./be.js": 57,
		"./bg": 58,
		"./bg.js": 58,
		"./bn": 59,
		"./bn.js": 59,
		"./bo": 60,
		"./bo.js": 60,
		"./br": 61,
		"./br.js": 61,
		"./bs": 62,
		"./bs.js": 62,
		"./ca": 63,
		"./ca.js": 63,
		"./cs": 64,
		"./cs.js": 64,
		"./cv": 65,
		"./cv.js": 65,
		"./cy": 66,
		"./cy.js": 66,
		"./da": 67,
		"./da.js": 67,
		"./de": 68,
		"./de-at": 69,
		"./de-at.js": 69,
		"./de.js": 68,
		"./dv": 70,
		"./dv.js": 70,
		"./el": 71,
		"./el.js": 71,
		"./en-au": 72,
		"./en-au.js": 72,
		"./en-ca": 73,
		"./en-ca.js": 73,
		"./en-gb": 74,
		"./en-gb.js": 74,
		"./en-ie": 75,
		"./en-ie.js": 75,
		"./en-nz": 76,
		"./en-nz.js": 76,
		"./eo": 77,
		"./eo.js": 77,
		"./es": 78,
		"./es-do": 79,
		"./es-do.js": 79,
		"./es.js": 78,
		"./et": 80,
		"./et.js": 80,
		"./eu": 81,
		"./eu.js": 81,
		"./fa": 82,
		"./fa.js": 82,
		"./fi": 83,
		"./fi.js": 83,
		"./fo": 84,
		"./fo.js": 84,
		"./fr": 85,
		"./fr-ca": 86,
		"./fr-ca.js": 86,
		"./fr-ch": 87,
		"./fr-ch.js": 87,
		"./fr.js": 85,
		"./fy": 88,
		"./fy.js": 88,
		"./gd": 89,
		"./gd.js": 89,
		"./gl": 90,
		"./gl.js": 90,
		"./he": 91,
		"./he.js": 91,
		"./hi": 92,
		"./hi.js": 92,
		"./hr": 93,
		"./hr.js": 93,
		"./hu": 94,
		"./hu.js": 94,
		"./hy-am": 95,
		"./hy-am.js": 95,
		"./id": 96,
		"./id.js": 96,
		"./is": 97,
		"./is.js": 97,
		"./it": 98,
		"./it.js": 98,
		"./ja": 99,
		"./ja.js": 99,
		"./jv": 100,
		"./jv.js": 100,
		"./ka": 101,
		"./ka.js": 101,
		"./kk": 102,
		"./kk.js": 102,
		"./km": 103,
		"./km.js": 103,
		"./ko": 104,
		"./ko.js": 104,
		"./ky": 105,
		"./ky.js": 105,
		"./lb": 106,
		"./lb.js": 106,
		"./lo": 107,
		"./lo.js": 107,
		"./lt": 108,
		"./lt.js": 108,
		"./lv": 109,
		"./lv.js": 109,
		"./me": 110,
		"./me.js": 110,
		"./mi": 111,
		"./mi.js": 111,
		"./mk": 112,
		"./mk.js": 112,
		"./ml": 113,
		"./ml.js": 113,
		"./mr": 114,
		"./mr.js": 114,
		"./ms": 115,
		"./ms-my": 116,
		"./ms-my.js": 116,
		"./ms.js": 115,
		"./my": 117,
		"./my.js": 117,
		"./nb": 118,
		"./nb.js": 118,
		"./ne": 119,
		"./ne.js": 119,
		"./nl": 120,
		"./nl.js": 120,
		"./nn": 121,
		"./nn.js": 121,
		"./pa-in": 122,
		"./pa-in.js": 122,
		"./pl": 123,
		"./pl.js": 123,
		"./pt": 124,
		"./pt-br": 125,
		"./pt-br.js": 125,
		"./pt.js": 124,
		"./ro": 126,
		"./ro.js": 126,
		"./ru": 127,
		"./ru.js": 127,
		"./se": 128,
		"./se.js": 128,
		"./si": 129,
		"./si.js": 129,
		"./sk": 130,
		"./sk.js": 130,
		"./sl": 131,
		"./sl.js": 131,
		"./sq": 132,
		"./sq.js": 132,
		"./sr": 133,
		"./sr-cyrl": 134,
		"./sr-cyrl.js": 134,
		"./sr.js": 133,
		"./ss": 135,
		"./ss.js": 135,
		"./sv": 136,
		"./sv.js": 136,
		"./sw": 137,
		"./sw.js": 137,
		"./ta": 138,
		"./ta.js": 138,
		"./te": 139,
		"./te.js": 139,
		"./th": 140,
		"./th.js": 140,
		"./tl-ph": 141,
		"./tl-ph.js": 141,
		"./tlh": 142,
		"./tlh.js": 142,
		"./tr": 143,
		"./tr.js": 143,
		"./tzl": 144,
		"./tzl.js": 144,
		"./tzm": 145,
		"./tzm-latn": 146,
		"./tzm-latn.js": 146,
		"./tzm.js": 145,
		"./uk": 147,
		"./uk.js": 147,
		"./uz": 148,
		"./uz.js": 148,
		"./vi": 149,
		"./vi.js": 149,
		"./x-pseudo": 150,
		"./x-pseudo.js": 150,
		"./zh-cn": 151,
		"./zh-cn.js": 151,
		"./zh-hk": 152,
		"./zh-hk.js": 152,
		"./zh-tw": 153,
		"./zh-tw.js": 153
	};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;
	webpackContext.id = 49;


/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Afrikaans [af]
	//! author : Werner Mollentze : https://github.com/wernerm

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var af = moment.defineLocale('af', {
	        months : 'Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember'.split('_'),
	        monthsShort : 'Jan_Feb_Mrt_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des'.split('_'),
	        weekdays : 'Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag'.split('_'),
	        weekdaysShort : 'Son_Maa_Din_Woe_Don_Vry_Sat'.split('_'),
	        weekdaysMin : 'So_Ma_Di_Wo_Do_Vr_Sa'.split('_'),
	        meridiemParse: /vm|nm/i,
	        isPM : function (input) {
	            return /^nm$/i.test(input);
	        },
	        meridiem : function (hours, minutes, isLower) {
	            if (hours < 12) {
	                return isLower ? 'vm' : 'VM';
	            } else {
	                return isLower ? 'nm' : 'NM';
	            }
	        },
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay : '[Vandag om] LT',
	            nextDay : '[Môre om] LT',
	            nextWeek : 'dddd [om] LT',
	            lastDay : '[Gister om] LT',
	            lastWeek : '[Laas] dddd [om] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'oor %s',
	            past : '%s gelede',
	            s : '\'n paar sekondes',
	            m : '\'n minuut',
	            mm : '%d minute',
	            h : '\'n uur',
	            hh : '%d ure',
	            d : '\'n dag',
	            dd : '%d dae',
	            M : '\'n maand',
	            MM : '%d maande',
	            y : '\'n jaar',
	            yy : '%d jaar'
	        },
	        ordinalParse: /\d{1,2}(ste|de)/,
	        ordinal : function (number) {
	            return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de'); // Thanks to Joris Röling : https://github.com/jjupiter
	        },
	        week : {
	            dow : 1, // Maandag is die eerste dag van die week.
	            doy : 4  // Die week wat die 4de Januarie bevat is die eerste week van die jaar.
	        }
	    });

	    return af;

	}));

/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Arabic [ar]
	//! author : Abdel Said: https://github.com/abdelsaid
	//! author : Ahmed Elkhatib
	//! author : forabi https://github.com/forabi

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var symbolMap = {
	        '1': '١',
	        '2': '٢',
	        '3': '٣',
	        '4': '٤',
	        '5': '٥',
	        '6': '٦',
	        '7': '٧',
	        '8': '٨',
	        '9': '٩',
	        '0': '٠'
	    }, numberMap = {
	        '١': '1',
	        '٢': '2',
	        '٣': '3',
	        '٤': '4',
	        '٥': '5',
	        '٦': '6',
	        '٧': '7',
	        '٨': '8',
	        '٩': '9',
	        '٠': '0'
	    }, pluralForm = function (n) {
	        return n === 0 ? 0 : n === 1 ? 1 : n === 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5;
	    }, plurals = {
	        s : ['أقل من ثانية', 'ثانية واحدة', ['ثانيتان', 'ثانيتين'], '%d ثوان', '%d ثانية', '%d ثانية'],
	        m : ['أقل من دقيقة', 'دقيقة واحدة', ['دقيقتان', 'دقيقتين'], '%d دقائق', '%d دقيقة', '%d دقيقة'],
	        h : ['أقل من ساعة', 'ساعة واحدة', ['ساعتان', 'ساعتين'], '%d ساعات', '%d ساعة', '%d ساعة'],
	        d : ['أقل من يوم', 'يوم واحد', ['يومان', 'يومين'], '%d أيام', '%d يومًا', '%d يوم'],
	        M : ['أقل من شهر', 'شهر واحد', ['شهران', 'شهرين'], '%d أشهر', '%d شهرا', '%d شهر'],
	        y : ['أقل من عام', 'عام واحد', ['عامان', 'عامين'], '%d أعوام', '%d عامًا', '%d عام']
	    }, pluralize = function (u) {
	        return function (number, withoutSuffix, string, isFuture) {
	            var f = pluralForm(number),
	                str = plurals[u][pluralForm(number)];
	            if (f === 2) {
	                str = str[withoutSuffix ? 0 : 1];
	            }
	            return str.replace(/%d/i, number);
	        };
	    }, months = [
	        'كانون الثاني يناير',
	        'شباط فبراير',
	        'آذار مارس',
	        'نيسان أبريل',
	        'أيار مايو',
	        'حزيران يونيو',
	        'تموز يوليو',
	        'آب أغسطس',
	        'أيلول سبتمبر',
	        'تشرين الأول أكتوبر',
	        'تشرين الثاني نوفمبر',
	        'كانون الأول ديسمبر'
	    ];

	    var ar = moment.defineLocale('ar', {
	        months : months,
	        monthsShort : months,
	        weekdays : 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
	        weekdaysShort : 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
	        weekdaysMin : 'ح_ن_ث_ر_خ_ج_س'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'D/\u200FM/\u200FYYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd D MMMM YYYY HH:mm'
	        },
	        meridiemParse: /ص|م/,
	        isPM : function (input) {
	            return 'م' === input;
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 12) {
	                return 'ص';
	            } else {
	                return 'م';
	            }
	        },
	        calendar : {
	            sameDay: '[اليوم عند الساعة] LT',
	            nextDay: '[غدًا عند الساعة] LT',
	            nextWeek: 'dddd [عند الساعة] LT',
	            lastDay: '[أمس عند الساعة] LT',
	            lastWeek: 'dddd [عند الساعة] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'بعد %s',
	            past : 'منذ %s',
	            s : pluralize('s'),
	            m : pluralize('m'),
	            mm : pluralize('m'),
	            h : pluralize('h'),
	            hh : pluralize('h'),
	            d : pluralize('d'),
	            dd : pluralize('d'),
	            M : pluralize('M'),
	            MM : pluralize('M'),
	            y : pluralize('y'),
	            yy : pluralize('y')
	        },
	        preparse: function (string) {
	            return string.replace(/\u200f/g, '').replace(/[١٢٣٤٥٦٧٨٩٠]/g, function (match) {
	                return numberMap[match];
	            }).replace(/،/g, ',');
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            }).replace(/,/g, '،');
	        },
	        week : {
	            dow : 6, // Saturday is the first day of the week.
	            doy : 12  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return ar;

	}));

/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Arabic (Lybia) [ar-ly]
	//! author : Ali Hmer: https://github.com/kikoanis

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var symbolMap = {
	        '1': '1',
	        '2': '2',
	        '3': '3',
	        '4': '4',
	        '5': '5',
	        '6': '6',
	        '7': '7',
	        '8': '8',
	        '9': '9',
	        '0': '0'
	    }, pluralForm = function (n) {
	        return n === 0 ? 0 : n === 1 ? 1 : n === 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5;
	    }, plurals = {
	        s : ['أقل من ثانية', 'ثانية واحدة', ['ثانيتان', 'ثانيتين'], '%d ثوان', '%d ثانية', '%d ثانية'],
	        m : ['أقل من دقيقة', 'دقيقة واحدة', ['دقيقتان', 'دقيقتين'], '%d دقائق', '%d دقيقة', '%d دقيقة'],
	        h : ['أقل من ساعة', 'ساعة واحدة', ['ساعتان', 'ساعتين'], '%d ساعات', '%d ساعة', '%d ساعة'],
	        d : ['أقل من يوم', 'يوم واحد', ['يومان', 'يومين'], '%d أيام', '%d يومًا', '%d يوم'],
	        M : ['أقل من شهر', 'شهر واحد', ['شهران', 'شهرين'], '%d أشهر', '%d شهرا', '%d شهر'],
	        y : ['أقل من عام', 'عام واحد', ['عامان', 'عامين'], '%d أعوام', '%d عامًا', '%d عام']
	    }, pluralize = function (u) {
	        return function (number, withoutSuffix, string, isFuture) {
	            var f = pluralForm(number),
	                str = plurals[u][pluralForm(number)];
	            if (f === 2) {
	                str = str[withoutSuffix ? 0 : 1];
	            }
	            return str.replace(/%d/i, number);
	        };
	    }, months = [
	        'يناير',
	        'فبراير',
	        'مارس',
	        'أبريل',
	        'مايو',
	        'يونيو',
	        'يوليو',
	        'أغسطس',
	        'سبتمبر',
	        'أكتوبر',
	        'نوفمبر',
	        'ديسمبر'
	    ];

	    var ar_ly = moment.defineLocale('ar-ly', {
	        months : months,
	        monthsShort : months,
	        weekdays : 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
	        weekdaysShort : 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
	        weekdaysMin : 'ح_ن_ث_ر_خ_ج_س'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'D/\u200FM/\u200FYYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd D MMMM YYYY HH:mm'
	        },
	        meridiemParse: /ص|م/,
	        isPM : function (input) {
	            return 'م' === input;
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 12) {
	                return 'ص';
	            } else {
	                return 'م';
	            }
	        },
	        calendar : {
	            sameDay: '[اليوم عند الساعة] LT',
	            nextDay: '[غدًا عند الساعة] LT',
	            nextWeek: 'dddd [عند الساعة] LT',
	            lastDay: '[أمس عند الساعة] LT',
	            lastWeek: 'dddd [عند الساعة] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'بعد %s',
	            past : 'منذ %s',
	            s : pluralize('s'),
	            m : pluralize('m'),
	            mm : pluralize('m'),
	            h : pluralize('h'),
	            hh : pluralize('h'),
	            d : pluralize('d'),
	            dd : pluralize('d'),
	            M : pluralize('M'),
	            MM : pluralize('M'),
	            y : pluralize('y'),
	            yy : pluralize('y')
	        },
	        preparse: function (string) {
	            return string.replace(/\u200f/g, '').replace(/،/g, ',');
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            }).replace(/,/g, '،');
	        },
	        week : {
	            dow : 6, // Saturday is the first day of the week.
	            doy : 12  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return ar_ly;

	}));

/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Arabic (Morocco) [ar-ma]
	//! author : ElFadili Yassine : https://github.com/ElFadiliY
	//! author : Abdel Said : https://github.com/abdelsaid

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var ar_ma = moment.defineLocale('ar-ma', {
	        months : 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),
	        monthsShort : 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),
	        weekdays : 'الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
	        weekdaysShort : 'احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت'.split('_'),
	        weekdaysMin : 'ح_ن_ث_ر_خ_ج_س'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[اليوم على الساعة] LT',
	            nextDay: '[غدا على الساعة] LT',
	            nextWeek: 'dddd [على الساعة] LT',
	            lastDay: '[أمس على الساعة] LT',
	            lastWeek: 'dddd [على الساعة] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'في %s',
	            past : 'منذ %s',
	            s : 'ثوان',
	            m : 'دقيقة',
	            mm : '%d دقائق',
	            h : 'ساعة',
	            hh : '%d ساعات',
	            d : 'يوم',
	            dd : '%d أيام',
	            M : 'شهر',
	            MM : '%d أشهر',
	            y : 'سنة',
	            yy : '%d سنوات'
	        },
	        week : {
	            dow : 6, // Saturday is the first day of the week.
	            doy : 12  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return ar_ma;

	}));

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Arabic (Saudi Arabia) [ar-sa]
	//! author : Suhail Alkowaileet : https://github.com/xsoh

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var symbolMap = {
	        '1': '١',
	        '2': '٢',
	        '3': '٣',
	        '4': '٤',
	        '5': '٥',
	        '6': '٦',
	        '7': '٧',
	        '8': '٨',
	        '9': '٩',
	        '0': '٠'
	    }, numberMap = {
	        '١': '1',
	        '٢': '2',
	        '٣': '3',
	        '٤': '4',
	        '٥': '5',
	        '٦': '6',
	        '٧': '7',
	        '٨': '8',
	        '٩': '9',
	        '٠': '0'
	    };

	    var ar_sa = moment.defineLocale('ar-sa', {
	        months : 'يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
	        monthsShort : 'يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
	        weekdays : 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
	        weekdaysShort : 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
	        weekdaysMin : 'ح_ن_ث_ر_خ_ج_س'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd D MMMM YYYY HH:mm'
	        },
	        meridiemParse: /ص|م/,
	        isPM : function (input) {
	            return 'م' === input;
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 12) {
	                return 'ص';
	            } else {
	                return 'م';
	            }
	        },
	        calendar : {
	            sameDay: '[اليوم على الساعة] LT',
	            nextDay: '[غدا على الساعة] LT',
	            nextWeek: 'dddd [على الساعة] LT',
	            lastDay: '[أمس على الساعة] LT',
	            lastWeek: 'dddd [على الساعة] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'في %s',
	            past : 'منذ %s',
	            s : 'ثوان',
	            m : 'دقيقة',
	            mm : '%d دقائق',
	            h : 'ساعة',
	            hh : '%d ساعات',
	            d : 'يوم',
	            dd : '%d أيام',
	            M : 'شهر',
	            MM : '%d أشهر',
	            y : 'سنة',
	            yy : '%d سنوات'
	        },
	        preparse: function (string) {
	            return string.replace(/[١٢٣٤٥٦٧٨٩٠]/g, function (match) {
	                return numberMap[match];
	            }).replace(/،/g, ',');
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            }).replace(/,/g, '،');
	        },
	        week : {
	            dow : 6, // Saturday is the first day of the week.
	            doy : 12  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return ar_sa;

	}));

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale  :  Arabic (Tunisia) [ar-tn]
	//! author : Nader Toukabri : https://github.com/naderio

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var ar_tn = moment.defineLocale('ar-tn', {
	        months: 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
	        monthsShort: 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
	        weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
	        weekdaysShort: 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
	        weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd D MMMM YYYY HH:mm'
	        },
	        calendar: {
	            sameDay: '[اليوم على الساعة] LT',
	            nextDay: '[غدا على الساعة] LT',
	            nextWeek: 'dddd [على الساعة] LT',
	            lastDay: '[أمس على الساعة] LT',
	            lastWeek: 'dddd [على الساعة] LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'في %s',
	            past: 'منذ %s',
	            s: 'ثوان',
	            m: 'دقيقة',
	            mm: '%d دقائق',
	            h: 'ساعة',
	            hh: '%d ساعات',
	            d: 'يوم',
	            dd: '%d أيام',
	            M: 'شهر',
	            MM: '%d أشهر',
	            y: 'سنة',
	            yy: '%d سنوات'
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4 // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return ar_tn;

	}));

/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Azerbaijani [az]
	//! author : topchiyev : https://github.com/topchiyev

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var suffixes = {
	        1: '-inci',
	        5: '-inci',
	        8: '-inci',
	        70: '-inci',
	        80: '-inci',
	        2: '-nci',
	        7: '-nci',
	        20: '-nci',
	        50: '-nci',
	        3: '-üncü',
	        4: '-üncü',
	        100: '-üncü',
	        6: '-ncı',
	        9: '-uncu',
	        10: '-uncu',
	        30: '-uncu',
	        60: '-ıncı',
	        90: '-ıncı'
	    };

	    var az = moment.defineLocale('az', {
	        months : 'yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr'.split('_'),
	        monthsShort : 'yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek'.split('_'),
	        weekdays : 'Bazar_Bazar ertəsi_Çərşənbə axşamı_Çərşənbə_Cümə axşamı_Cümə_Şənbə'.split('_'),
	        weekdaysShort : 'Baz_BzE_ÇAx_Çər_CAx_Cüm_Şən'.split('_'),
	        weekdaysMin : 'Bz_BE_ÇA_Çə_CA_Cü_Şə'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay : '[bugün saat] LT',
	            nextDay : '[sabah saat] LT',
	            nextWeek : '[gələn həftə] dddd [saat] LT',
	            lastDay : '[dünən] LT',
	            lastWeek : '[keçən həftə] dddd [saat] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s sonra',
	            past : '%s əvvəl',
	            s : 'birneçə saniyyə',
	            m : 'bir dəqiqə',
	            mm : '%d dəqiqə',
	            h : 'bir saat',
	            hh : '%d saat',
	            d : 'bir gün',
	            dd : '%d gün',
	            M : 'bir ay',
	            MM : '%d ay',
	            y : 'bir il',
	            yy : '%d il'
	        },
	        meridiemParse: /gecə|səhər|gündüz|axşam/,
	        isPM : function (input) {
	            return /^(gündüz|axşam)$/.test(input);
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'gecə';
	            } else if (hour < 12) {
	                return 'səhər';
	            } else if (hour < 17) {
	                return 'gündüz';
	            } else {
	                return 'axşam';
	            }
	        },
	        ordinalParse: /\d{1,2}-(ıncı|inci|nci|üncü|ncı|uncu)/,
	        ordinal : function (number) {
	            if (number === 0) {  // special case for zero
	                return number + '-ıncı';
	            }
	            var a = number % 10,
	                b = number % 100 - a,
	                c = number >= 100 ? 100 : null;
	            return number + (suffixes[a] || suffixes[b] || suffixes[c]);
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return az;

	}));

/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Belarusian [be]
	//! author : Dmitry Demidov : https://github.com/demidov91
	//! author: Praleska: http://praleska.pro/
	//! Author : Menelion Elensúle : https://github.com/Oire

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    function plural(word, num) {
	        var forms = word.split('_');
	        return num % 10 === 1 && num % 100 !== 11 ? forms[0] : (num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2]);
	    }
	    function relativeTimeWithPlural(number, withoutSuffix, key) {
	        var format = {
	            'mm': withoutSuffix ? 'хвіліна_хвіліны_хвілін' : 'хвіліну_хвіліны_хвілін',
	            'hh': withoutSuffix ? 'гадзіна_гадзіны_гадзін' : 'гадзіну_гадзіны_гадзін',
	            'dd': 'дзень_дні_дзён',
	            'MM': 'месяц_месяцы_месяцаў',
	            'yy': 'год_гады_гадоў'
	        };
	        if (key === 'm') {
	            return withoutSuffix ? 'хвіліна' : 'хвіліну';
	        }
	        else if (key === 'h') {
	            return withoutSuffix ? 'гадзіна' : 'гадзіну';
	        }
	        else {
	            return number + ' ' + plural(format[key], +number);
	        }
	    }

	    var be = moment.defineLocale('be', {
	        months : {
	            format: 'студзеня_лютага_сакавіка_красавіка_траўня_чэрвеня_ліпеня_жніўня_верасня_кастрычніка_лістапада_снежня'.split('_'),
	            standalone: 'студзень_люты_сакавік_красавік_травень_чэрвень_ліпень_жнівень_верасень_кастрычнік_лістапад_снежань'.split('_')
	        },
	        monthsShort : 'студ_лют_сак_крас_трав_чэрв_ліп_жнів_вер_каст_ліст_снеж'.split('_'),
	        weekdays : {
	            format: 'нядзелю_панядзелак_аўторак_сераду_чацвер_пятніцу_суботу'.split('_'),
	            standalone: 'нядзеля_панядзелак_аўторак_серада_чацвер_пятніца_субота'.split('_'),
	            isFormat: /\[ ?[Вв] ?(?:мінулую|наступную)? ?\] ?dddd/
	        },
	        weekdaysShort : 'нд_пн_ат_ср_чц_пт_сб'.split('_'),
	        weekdaysMin : 'нд_пн_ат_ср_чц_пт_сб'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D MMMM YYYY г.',
	            LLL : 'D MMMM YYYY г., HH:mm',
	            LLLL : 'dddd, D MMMM YYYY г., HH:mm'
	        },
	        calendar : {
	            sameDay: '[Сёння ў] LT',
	            nextDay: '[Заўтра ў] LT',
	            lastDay: '[Учора ў] LT',
	            nextWeek: function () {
	                return '[У] dddd [ў] LT';
	            },
	            lastWeek: function () {
	                switch (this.day()) {
	                    case 0:
	                    case 3:
	                    case 5:
	                    case 6:
	                        return '[У мінулую] dddd [ў] LT';
	                    case 1:
	                    case 2:
	                    case 4:
	                        return '[У мінулы] dddd [ў] LT';
	                }
	            },
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'праз %s',
	            past : '%s таму',
	            s : 'некалькі секунд',
	            m : relativeTimeWithPlural,
	            mm : relativeTimeWithPlural,
	            h : relativeTimeWithPlural,
	            hh : relativeTimeWithPlural,
	            d : 'дзень',
	            dd : relativeTimeWithPlural,
	            M : 'месяц',
	            MM : relativeTimeWithPlural,
	            y : 'год',
	            yy : relativeTimeWithPlural
	        },
	        meridiemParse: /ночы|раніцы|дня|вечара/,
	        isPM : function (input) {
	            return /^(дня|вечара)$/.test(input);
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'ночы';
	            } else if (hour < 12) {
	                return 'раніцы';
	            } else if (hour < 17) {
	                return 'дня';
	            } else {
	                return 'вечара';
	            }
	        },
	        ordinalParse: /\d{1,2}-(і|ы|га)/,
	        ordinal: function (number, period) {
	            switch (period) {
	                case 'M':
	                case 'd':
	                case 'DDD':
	                case 'w':
	                case 'W':
	                    return (number % 10 === 2 || number % 10 === 3) && (number % 100 !== 12 && number % 100 !== 13) ? number + '-і' : number + '-ы';
	                case 'D':
	                    return number + '-га';
	                default:
	                    return number;
	            }
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return be;

	}));

/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Bulgarian [bg]
	//! author : Krasen Borisov : https://github.com/kraz

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var bg = moment.defineLocale('bg', {
	        months : 'януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември'.split('_'),
	        monthsShort : 'янр_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек'.split('_'),
	        weekdays : 'неделя_понеделник_вторник_сряда_четвъртък_петък_събота'.split('_'),
	        weekdaysShort : 'нед_пон_вто_сря_чет_пет_съб'.split('_'),
	        weekdaysMin : 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
	        longDateFormat : {
	            LT : 'H:mm',
	            LTS : 'H:mm:ss',
	            L : 'D.MM.YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY H:mm',
	            LLLL : 'dddd, D MMMM YYYY H:mm'
	        },
	        calendar : {
	            sameDay : '[Днес в] LT',
	            nextDay : '[Утре в] LT',
	            nextWeek : 'dddd [в] LT',
	            lastDay : '[Вчера в] LT',
	            lastWeek : function () {
	                switch (this.day()) {
	                    case 0:
	                    case 3:
	                    case 6:
	                        return '[В изминалата] dddd [в] LT';
	                    case 1:
	                    case 2:
	                    case 4:
	                    case 5:
	                        return '[В изминалия] dddd [в] LT';
	                }
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'след %s',
	            past : 'преди %s',
	            s : 'няколко секунди',
	            m : 'минута',
	            mm : '%d минути',
	            h : 'час',
	            hh : '%d часа',
	            d : 'ден',
	            dd : '%d дни',
	            M : 'месец',
	            MM : '%d месеца',
	            y : 'година',
	            yy : '%d години'
	        },
	        ordinalParse: /\d{1,2}-(ев|ен|ти|ви|ри|ми)/,
	        ordinal : function (number) {
	            var lastDigit = number % 10,
	                last2Digits = number % 100;
	            if (number === 0) {
	                return number + '-ев';
	            } else if (last2Digits === 0) {
	                return number + '-ен';
	            } else if (last2Digits > 10 && last2Digits < 20) {
	                return number + '-ти';
	            } else if (lastDigit === 1) {
	                return number + '-ви';
	            } else if (lastDigit === 2) {
	                return number + '-ри';
	            } else if (lastDigit === 7 || lastDigit === 8) {
	                return number + '-ми';
	            } else {
	                return number + '-ти';
	            }
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return bg;

	}));

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Bengali [bn]
	//! author : Kaushik Gandhi : https://github.com/kaushikgandhi

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var symbolMap = {
	        '1': '১',
	        '2': '২',
	        '3': '৩',
	        '4': '৪',
	        '5': '৫',
	        '6': '৬',
	        '7': '৭',
	        '8': '৮',
	        '9': '৯',
	        '0': '০'
	    },
	    numberMap = {
	        '১': '1',
	        '২': '2',
	        '৩': '3',
	        '৪': '4',
	        '৫': '5',
	        '৬': '6',
	        '৭': '7',
	        '৮': '8',
	        '৯': '9',
	        '০': '0'
	    };

	    var bn = moment.defineLocale('bn', {
	        months : 'জানুয়ারী_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর'.split('_'),
	        monthsShort : 'জানু_ফেব_মার্চ_এপ্র_মে_জুন_জুল_আগ_সেপ্ট_অক্টো_নভে_ডিসে'.split('_'),
	        weekdays : 'রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার'.split('_'),
	        weekdaysShort : 'রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি'.split('_'),
	        weekdaysMin : 'রবি_সোম_মঙ্গ_বুধ_বৃহঃ_শুক্র_শনি'.split('_'),
	        longDateFormat : {
	            LT : 'A h:mm সময়',
	            LTS : 'A h:mm:ss সময়',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY, A h:mm সময়',
	            LLLL : 'dddd, D MMMM YYYY, A h:mm সময়'
	        },
	        calendar : {
	            sameDay : '[আজ] LT',
	            nextDay : '[আগামীকাল] LT',
	            nextWeek : 'dddd, LT',
	            lastDay : '[গতকাল] LT',
	            lastWeek : '[গত] dddd, LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s পরে',
	            past : '%s আগে',
	            s : 'কয়েক সেকেন্ড',
	            m : 'এক মিনিট',
	            mm : '%d মিনিট',
	            h : 'এক ঘন্টা',
	            hh : '%d ঘন্টা',
	            d : 'এক দিন',
	            dd : '%d দিন',
	            M : 'এক মাস',
	            MM : '%d মাস',
	            y : 'এক বছর',
	            yy : '%d বছর'
	        },
	        preparse: function (string) {
	            return string.replace(/[১২৩৪৫৬৭৮৯০]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        meridiemParse: /রাত|সকাল|দুপুর|বিকাল|রাত/,
	        meridiemHour : function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if ((meridiem === 'রাত' && hour >= 4) ||
	                    (meridiem === 'দুপুর' && hour < 5) ||
	                    meridiem === 'বিকাল') {
	                return hour + 12;
	            } else {
	                return hour;
	            }
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'রাত';
	            } else if (hour < 10) {
	                return 'সকাল';
	            } else if (hour < 17) {
	                return 'দুপুর';
	            } else if (hour < 20) {
	                return 'বিকাল';
	            } else {
	                return 'রাত';
	            }
	        },
	        week : {
	            dow : 0, // Sunday is the first day of the week.
	            doy : 6  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return bn;

	}));

/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Tibetan [bo]
	//! author : Thupten N. Chakrishar : https://github.com/vajradog

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var symbolMap = {
	        '1': '༡',
	        '2': '༢',
	        '3': '༣',
	        '4': '༤',
	        '5': '༥',
	        '6': '༦',
	        '7': '༧',
	        '8': '༨',
	        '9': '༩',
	        '0': '༠'
	    },
	    numberMap = {
	        '༡': '1',
	        '༢': '2',
	        '༣': '3',
	        '༤': '4',
	        '༥': '5',
	        '༦': '6',
	        '༧': '7',
	        '༨': '8',
	        '༩': '9',
	        '༠': '0'
	    };

	    var bo = moment.defineLocale('bo', {
	        months : 'ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ'.split('_'),
	        monthsShort : 'ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ'.split('_'),
	        weekdays : 'གཟའ་ཉི་མ་_གཟའ་ཟླ་བ་_གཟའ་མིག་དམར་_གཟའ་ལྷག་པ་_གཟའ་ཕུར་བུ_གཟའ་པ་སངས་_གཟའ་སྤེན་པ་'.split('_'),
	        weekdaysShort : 'ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་'.split('_'),
	        weekdaysMin : 'ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་'.split('_'),
	        longDateFormat : {
	            LT : 'A h:mm',
	            LTS : 'A h:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY, A h:mm',
	            LLLL : 'dddd, D MMMM YYYY, A h:mm'
	        },
	        calendar : {
	            sameDay : '[དི་རིང] LT',
	            nextDay : '[སང་ཉིན] LT',
	            nextWeek : '[བདུན་ཕྲག་རྗེས་མ], LT',
	            lastDay : '[ཁ་སང] LT',
	            lastWeek : '[བདུན་ཕྲག་མཐའ་མ] dddd, LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s ལ་',
	            past : '%s སྔན་ལ',
	            s : 'ལམ་སང',
	            m : 'སྐར་མ་གཅིག',
	            mm : '%d སྐར་མ',
	            h : 'ཆུ་ཚོད་གཅིག',
	            hh : '%d ཆུ་ཚོད',
	            d : 'ཉིན་གཅིག',
	            dd : '%d ཉིན་',
	            M : 'ཟླ་བ་གཅིག',
	            MM : '%d ཟླ་བ',
	            y : 'ལོ་གཅིག',
	            yy : '%d ལོ'
	        },
	        preparse: function (string) {
	            return string.replace(/[༡༢༣༤༥༦༧༨༩༠]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        meridiemParse: /མཚན་མོ|ཞོགས་ཀས|ཉིན་གུང|དགོང་དག|མཚན་མོ/,
	        meridiemHour : function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if ((meridiem === 'མཚན་མོ' && hour >= 4) ||
	                    (meridiem === 'ཉིན་གུང' && hour < 5) ||
	                    meridiem === 'དགོང་དག') {
	                return hour + 12;
	            } else {
	                return hour;
	            }
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'མཚན་མོ';
	            } else if (hour < 10) {
	                return 'ཞོགས་ཀས';
	            } else if (hour < 17) {
	                return 'ཉིན་གུང';
	            } else if (hour < 20) {
	                return 'དགོང་དག';
	            } else {
	                return 'མཚན་མོ';
	            }
	        },
	        week : {
	            dow : 0, // Sunday is the first day of the week.
	            doy : 6  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return bo;

	}));

/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Breton [br]
	//! author : Jean-Baptiste Le Duigou : https://github.com/jbleduigou

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    function relativeTimeWithMutation(number, withoutSuffix, key) {
	        var format = {
	            'mm': 'munutenn',
	            'MM': 'miz',
	            'dd': 'devezh'
	        };
	        return number + ' ' + mutation(format[key], number);
	    }
	    function specialMutationForYears(number) {
	        switch (lastNumber(number)) {
	            case 1:
	            case 3:
	            case 4:
	            case 5:
	            case 9:
	                return number + ' bloaz';
	            default:
	                return number + ' vloaz';
	        }
	    }
	    function lastNumber(number) {
	        if (number > 9) {
	            return lastNumber(number % 10);
	        }
	        return number;
	    }
	    function mutation(text, number) {
	        if (number === 2) {
	            return softMutation(text);
	        }
	        return text;
	    }
	    function softMutation(text) {
	        var mutationTable = {
	            'm': 'v',
	            'b': 'v',
	            'd': 'z'
	        };
	        if (mutationTable[text.charAt(0)] === undefined) {
	            return text;
	        }
	        return mutationTable[text.charAt(0)] + text.substring(1);
	    }

	    var br = moment.defineLocale('br', {
	        months : 'Genver_C\'hwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu'.split('_'),
	        monthsShort : 'Gen_C\'hwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker'.split('_'),
	        weekdays : 'Sul_Lun_Meurzh_Merc\'her_Yaou_Gwener_Sadorn'.split('_'),
	        weekdaysShort : 'Sul_Lun_Meu_Mer_Yao_Gwe_Sad'.split('_'),
	        weekdaysMin : 'Su_Lu_Me_Mer_Ya_Gw_Sa'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'h[e]mm A',
	            LTS : 'h[e]mm:ss A',
	            L : 'DD/MM/YYYY',
	            LL : 'D [a viz] MMMM YYYY',
	            LLL : 'D [a viz] MMMM YYYY h[e]mm A',
	            LLLL : 'dddd, D [a viz] MMMM YYYY h[e]mm A'
	        },
	        calendar : {
	            sameDay : '[Hiziv da] LT',
	            nextDay : '[Warc\'hoazh da] LT',
	            nextWeek : 'dddd [da] LT',
	            lastDay : '[Dec\'h da] LT',
	            lastWeek : 'dddd [paset da] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'a-benn %s',
	            past : '%s \'zo',
	            s : 'un nebeud segondennoù',
	            m : 'ur vunutenn',
	            mm : relativeTimeWithMutation,
	            h : 'un eur',
	            hh : '%d eur',
	            d : 'un devezh',
	            dd : relativeTimeWithMutation,
	            M : 'ur miz',
	            MM : relativeTimeWithMutation,
	            y : 'ur bloaz',
	            yy : specialMutationForYears
	        },
	        ordinalParse: /\d{1,2}(añ|vet)/,
	        ordinal : function (number) {
	            var output = (number === 1) ? 'añ' : 'vet';
	            return number + output;
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return br;

	}));

/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Bosnian [bs]
	//! author : Nedim Cholich : https://github.com/frontyard
	//! based on (hr) translation by Bojan Marković

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    function translate(number, withoutSuffix, key) {
	        var result = number + ' ';
	        switch (key) {
	            case 'm':
	                return withoutSuffix ? 'jedna minuta' : 'jedne minute';
	            case 'mm':
	                if (number === 1) {
	                    result += 'minuta';
	                } else if (number === 2 || number === 3 || number === 4) {
	                    result += 'minute';
	                } else {
	                    result += 'minuta';
	                }
	                return result;
	            case 'h':
	                return withoutSuffix ? 'jedan sat' : 'jednog sata';
	            case 'hh':
	                if (number === 1) {
	                    result += 'sat';
	                } else if (number === 2 || number === 3 || number === 4) {
	                    result += 'sata';
	                } else {
	                    result += 'sati';
	                }
	                return result;
	            case 'dd':
	                if (number === 1) {
	                    result += 'dan';
	                } else {
	                    result += 'dana';
	                }
	                return result;
	            case 'MM':
	                if (number === 1) {
	                    result += 'mjesec';
	                } else if (number === 2 || number === 3 || number === 4) {
	                    result += 'mjeseca';
	                } else {
	                    result += 'mjeseci';
	                }
	                return result;
	            case 'yy':
	                if (number === 1) {
	                    result += 'godina';
	                } else if (number === 2 || number === 3 || number === 4) {
	                    result += 'godine';
	                } else {
	                    result += 'godina';
	                }
	                return result;
	        }
	    }

	    var bs = moment.defineLocale('bs', {
	        months : 'januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar'.split('_'),
	        monthsShort : 'jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec.'.split('_'),
	        monthsParseExact: true,
	        weekdays : 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split('_'),
	        weekdaysShort : 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
	        weekdaysMin : 'ne_po_ut_sr_če_pe_su'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'H:mm',
	            LTS : 'H:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D. MMMM YYYY',
	            LLL : 'D. MMMM YYYY H:mm',
	            LLLL : 'dddd, D. MMMM YYYY H:mm'
	        },
	        calendar : {
	            sameDay  : '[danas u] LT',
	            nextDay  : '[sutra u] LT',
	            nextWeek : function () {
	                switch (this.day()) {
	                    case 0:
	                        return '[u] [nedjelju] [u] LT';
	                    case 3:
	                        return '[u] [srijedu] [u] LT';
	                    case 6:
	                        return '[u] [subotu] [u] LT';
	                    case 1:
	                    case 2:
	                    case 4:
	                    case 5:
	                        return '[u] dddd [u] LT';
	                }
	            },
	            lastDay  : '[jučer u] LT',
	            lastWeek : function () {
	                switch (this.day()) {
	                    case 0:
	                    case 3:
	                        return '[prošlu] dddd [u] LT';
	                    case 6:
	                        return '[prošle] [subote] [u] LT';
	                    case 1:
	                    case 2:
	                    case 4:
	                    case 5:
	                        return '[prošli] dddd [u] LT';
	                }
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'za %s',
	            past   : 'prije %s',
	            s      : 'par sekundi',
	            m      : translate,
	            mm     : translate,
	            h      : translate,
	            hh     : translate,
	            d      : 'dan',
	            dd     : translate,
	            M      : 'mjesec',
	            MM     : translate,
	            y      : 'godinu',
	            yy     : translate
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return bs;

	}));

/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Catalan [ca]
	//! author : Juan G. Hurtado : https://github.com/juanghurtado

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var ca = moment.defineLocale('ca', {
	        months : 'gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre'.split('_'),
	        monthsShort : 'gen._febr._mar._abr._mai._jun._jul._ag._set._oct._nov._des.'.split('_'),
	        monthsParseExact : true,
	        weekdays : 'diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte'.split('_'),
	        weekdaysShort : 'dg._dl._dt._dc._dj._dv._ds.'.split('_'),
	        weekdaysMin : 'Dg_Dl_Dt_Dc_Dj_Dv_Ds'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'H:mm',
	            LTS : 'H:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY H:mm',
	            LLLL : 'dddd D MMMM YYYY H:mm'
	        },
	        calendar : {
	            sameDay : function () {
	                return '[avui a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
	            },
	            nextDay : function () {
	                return '[demà a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
	            },
	            nextWeek : function () {
	                return 'dddd [a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
	            },
	            lastDay : function () {
	                return '[ahir a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
	            },
	            lastWeek : function () {
	                return '[el] dddd [passat a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'en %s',
	            past : 'fa %s',
	            s : 'uns segons',
	            m : 'un minut',
	            mm : '%d minuts',
	            h : 'una hora',
	            hh : '%d hores',
	            d : 'un dia',
	            dd : '%d dies',
	            M : 'un mes',
	            MM : '%d mesos',
	            y : 'un any',
	            yy : '%d anys'
	        },
	        ordinalParse: /\d{1,2}(r|n|t|è|a)/,
	        ordinal : function (number, period) {
	            var output = (number === 1) ? 'r' :
	                (number === 2) ? 'n' :
	                (number === 3) ? 'r' :
	                (number === 4) ? 't' : 'è';
	            if (period === 'w' || period === 'W') {
	                output = 'a';
	            }
	            return number + output;
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return ca;

	}));

/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Czech [cs]
	//! author : petrbela : https://github.com/petrbela

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var months = 'leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec'.split('_'),
	        monthsShort = 'led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro'.split('_');
	    function plural(n) {
	        return (n > 1) && (n < 5) && (~~(n / 10) !== 1);
	    }
	    function translate(number, withoutSuffix, key, isFuture) {
	        var result = number + ' ';
	        switch (key) {
	            case 's':  // a few seconds / in a few seconds / a few seconds ago
	                return (withoutSuffix || isFuture) ? 'pár sekund' : 'pár sekundami';
	            case 'm':  // a minute / in a minute / a minute ago
	                return withoutSuffix ? 'minuta' : (isFuture ? 'minutu' : 'minutou');
	            case 'mm': // 9 minutes / in 9 minutes / 9 minutes ago
	                if (withoutSuffix || isFuture) {
	                    return result + (plural(number) ? 'minuty' : 'minut');
	                } else {
	                    return result + 'minutami';
	                }
	                break;
	            case 'h':  // an hour / in an hour / an hour ago
	                return withoutSuffix ? 'hodina' : (isFuture ? 'hodinu' : 'hodinou');
	            case 'hh': // 9 hours / in 9 hours / 9 hours ago
	                if (withoutSuffix || isFuture) {
	                    return result + (plural(number) ? 'hodiny' : 'hodin');
	                } else {
	                    return result + 'hodinami';
	                }
	                break;
	            case 'd':  // a day / in a day / a day ago
	                return (withoutSuffix || isFuture) ? 'den' : 'dnem';
	            case 'dd': // 9 days / in 9 days / 9 days ago
	                if (withoutSuffix || isFuture) {
	                    return result + (plural(number) ? 'dny' : 'dní');
	                } else {
	                    return result + 'dny';
	                }
	                break;
	            case 'M':  // a month / in a month / a month ago
	                return (withoutSuffix || isFuture) ? 'měsíc' : 'měsícem';
	            case 'MM': // 9 months / in 9 months / 9 months ago
	                if (withoutSuffix || isFuture) {
	                    return result + (plural(number) ? 'měsíce' : 'měsíců');
	                } else {
	                    return result + 'měsíci';
	                }
	                break;
	            case 'y':  // a year / in a year / a year ago
	                return (withoutSuffix || isFuture) ? 'rok' : 'rokem';
	            case 'yy': // 9 years / in 9 years / 9 years ago
	                if (withoutSuffix || isFuture) {
	                    return result + (plural(number) ? 'roky' : 'let');
	                } else {
	                    return result + 'lety';
	                }
	                break;
	        }
	    }

	    var cs = moment.defineLocale('cs', {
	        months : months,
	        monthsShort : monthsShort,
	        monthsParse : (function (months, monthsShort) {
	            var i, _monthsParse = [];
	            for (i = 0; i < 12; i++) {
	                // use custom parser to solve problem with July (červenec)
	                _monthsParse[i] = new RegExp('^' + months[i] + '$|^' + monthsShort[i] + '$', 'i');
	            }
	            return _monthsParse;
	        }(months, monthsShort)),
	        shortMonthsParse : (function (monthsShort) {
	            var i, _shortMonthsParse = [];
	            for (i = 0; i < 12; i++) {
	                _shortMonthsParse[i] = new RegExp('^' + monthsShort[i] + '$', 'i');
	            }
	            return _shortMonthsParse;
	        }(monthsShort)),
	        longMonthsParse : (function (months) {
	            var i, _longMonthsParse = [];
	            for (i = 0; i < 12; i++) {
	                _longMonthsParse[i] = new RegExp('^' + months[i] + '$', 'i');
	            }
	            return _longMonthsParse;
	        }(months)),
	        weekdays : 'neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota'.split('_'),
	        weekdaysShort : 'ne_po_út_st_čt_pá_so'.split('_'),
	        weekdaysMin : 'ne_po_út_st_čt_pá_so'.split('_'),
	        longDateFormat : {
	            LT: 'H:mm',
	            LTS : 'H:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D. MMMM YYYY',
	            LLL : 'D. MMMM YYYY H:mm',
	            LLLL : 'dddd D. MMMM YYYY H:mm',
	            l : 'D. M. YYYY'
	        },
	        calendar : {
	            sameDay: '[dnes v] LT',
	            nextDay: '[zítra v] LT',
	            nextWeek: function () {
	                switch (this.day()) {
	                    case 0:
	                        return '[v neděli v] LT';
	                    case 1:
	                    case 2:
	                        return '[v] dddd [v] LT';
	                    case 3:
	                        return '[ve středu v] LT';
	                    case 4:
	                        return '[ve čtvrtek v] LT';
	                    case 5:
	                        return '[v pátek v] LT';
	                    case 6:
	                        return '[v sobotu v] LT';
	                }
	            },
	            lastDay: '[včera v] LT',
	            lastWeek: function () {
	                switch (this.day()) {
	                    case 0:
	                        return '[minulou neděli v] LT';
	                    case 1:
	                    case 2:
	                        return '[minulé] dddd [v] LT';
	                    case 3:
	                        return '[minulou středu v] LT';
	                    case 4:
	                    case 5:
	                        return '[minulý] dddd [v] LT';
	                    case 6:
	                        return '[minulou sobotu v] LT';
	                }
	            },
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'za %s',
	            past : 'před %s',
	            s : translate,
	            m : translate,
	            mm : translate,
	            h : translate,
	            hh : translate,
	            d : translate,
	            dd : translate,
	            M : translate,
	            MM : translate,
	            y : translate,
	            yy : translate
	        },
	        ordinalParse : /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return cs;

	}));

/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Chuvash [cv]
	//! author : Anatoly Mironov : https://github.com/mirontoli

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var cv = moment.defineLocale('cv', {
	        months : 'кӑрлач_нарӑс_пуш_ака_май_ҫӗртме_утӑ_ҫурла_авӑн_юпа_чӳк_раштав'.split('_'),
	        monthsShort : 'кӑр_нар_пуш_ака_май_ҫӗр_утӑ_ҫур_авн_юпа_чӳк_раш'.split('_'),
	        weekdays : 'вырсарникун_тунтикун_ытларикун_юнкун_кӗҫнерникун_эрнекун_шӑматкун'.split('_'),
	        weekdaysShort : 'выр_тун_ытл_юн_кӗҫ_эрн_шӑм'.split('_'),
	        weekdaysMin : 'вр_тн_ыт_юн_кҫ_эр_шм'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD-MM-YYYY',
	            LL : 'YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ]',
	            LLL : 'YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm',
	            LLLL : 'dddd, YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm'
	        },
	        calendar : {
	            sameDay: '[Паян] LT [сехетре]',
	            nextDay: '[Ыран] LT [сехетре]',
	            lastDay: '[Ӗнер] LT [сехетре]',
	            nextWeek: '[Ҫитес] dddd LT [сехетре]',
	            lastWeek: '[Иртнӗ] dddd LT [сехетре]',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : function (output) {
	                var affix = /сехет$/i.exec(output) ? 'рен' : /ҫул$/i.exec(output) ? 'тан' : 'ран';
	                return output + affix;
	            },
	            past : '%s каялла',
	            s : 'пӗр-ик ҫеккунт',
	            m : 'пӗр минут',
	            mm : '%d минут',
	            h : 'пӗр сехет',
	            hh : '%d сехет',
	            d : 'пӗр кун',
	            dd : '%d кун',
	            M : 'пӗр уйӑх',
	            MM : '%d уйӑх',
	            y : 'пӗр ҫул',
	            yy : '%d ҫул'
	        },
	        ordinalParse: /\d{1,2}-мӗш/,
	        ordinal : '%d-мӗш',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return cv;

	}));

/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Welsh [cy]
	//! author : Robert Allen : https://github.com/robgallen
	//! author : https://github.com/ryangreaves

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var cy = moment.defineLocale('cy', {
	        months: 'Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr'.split('_'),
	        monthsShort: 'Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag'.split('_'),
	        weekdays: 'Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn'.split('_'),
	        weekdaysShort: 'Sul_Llun_Maw_Mer_Iau_Gwe_Sad'.split('_'),
	        weekdaysMin: 'Su_Ll_Ma_Me_Ia_Gw_Sa'.split('_'),
	        weekdaysParseExact : true,
	        // time formats are the same as en-gb
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar: {
	            sameDay: '[Heddiw am] LT',
	            nextDay: '[Yfory am] LT',
	            nextWeek: 'dddd [am] LT',
	            lastDay: '[Ddoe am] LT',
	            lastWeek: 'dddd [diwethaf am] LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'mewn %s',
	            past: '%s yn ôl',
	            s: 'ychydig eiliadau',
	            m: 'munud',
	            mm: '%d munud',
	            h: 'awr',
	            hh: '%d awr',
	            d: 'diwrnod',
	            dd: '%d diwrnod',
	            M: 'mis',
	            MM: '%d mis',
	            y: 'blwyddyn',
	            yy: '%d flynedd'
	        },
	        ordinalParse: /\d{1,2}(fed|ain|af|il|ydd|ed|eg)/,
	        // traditional ordinal numbers above 31 are not commonly used in colloquial Welsh
	        ordinal: function (number) {
	            var b = number,
	                output = '',
	                lookup = [
	                    '', 'af', 'il', 'ydd', 'ydd', 'ed', 'ed', 'ed', 'fed', 'fed', 'fed', // 1af to 10fed
	                    'eg', 'fed', 'eg', 'eg', 'fed', 'eg', 'eg', 'fed', 'eg', 'fed' // 11eg to 20fed
	                ];
	            if (b > 20) {
	                if (b === 40 || b === 50 || b === 60 || b === 80 || b === 100) {
	                    output = 'fed'; // not 30ain, 70ain or 90ain
	                } else {
	                    output = 'ain';
	                }
	            } else if (b > 0) {
	                output = lookup[b];
	            }
	            return number + output;
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return cy;

	}));

/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Danish [da]
	//! author : Ulrik Nielsen : https://github.com/mrbase

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var da = moment.defineLocale('da', {
	        months : 'januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december'.split('_'),
	        monthsShort : 'jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec'.split('_'),
	        weekdays : 'søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag'.split('_'),
	        weekdaysShort : 'søn_man_tir_ons_tor_fre_lør'.split('_'),
	        weekdaysMin : 'sø_ma_ti_on_to_fr_lø'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D. MMMM YYYY',
	            LLL : 'D. MMMM YYYY HH:mm',
	            LLLL : 'dddd [d.] D. MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay : '[I dag kl.] LT',
	            nextDay : '[I morgen kl.] LT',
	            nextWeek : 'dddd [kl.] LT',
	            lastDay : '[I går kl.] LT',
	            lastWeek : '[sidste] dddd [kl] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'om %s',
	            past : '%s siden',
	            s : 'få sekunder',
	            m : 'et minut',
	            mm : '%d minutter',
	            h : 'en time',
	            hh : '%d timer',
	            d : 'en dag',
	            dd : '%d dage',
	            M : 'en måned',
	            MM : '%d måneder',
	            y : 'et år',
	            yy : '%d år'
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return da;

	}));

/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : German [de]
	//! author : lluchs : https://github.com/lluchs
	//! author: Menelion Elensúle: https://github.com/Oire
	//! author : Mikolaj Dadela : https://github.com/mik01aj

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    function processRelativeTime(number, withoutSuffix, key, isFuture) {
	        var format = {
	            'm': ['eine Minute', 'einer Minute'],
	            'h': ['eine Stunde', 'einer Stunde'],
	            'd': ['ein Tag', 'einem Tag'],
	            'dd': [number + ' Tage', number + ' Tagen'],
	            'M': ['ein Monat', 'einem Monat'],
	            'MM': [number + ' Monate', number + ' Monaten'],
	            'y': ['ein Jahr', 'einem Jahr'],
	            'yy': [number + ' Jahre', number + ' Jahren']
	        };
	        return withoutSuffix ? format[key][0] : format[key][1];
	    }

	    var de = moment.defineLocale('de', {
	        months : 'Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
	        monthsShort : 'Jan._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split('_'),
	        monthsParseExact : true,
	        weekdays : 'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split('_'),
	        weekdaysShort : 'So._Mo._Di._Mi._Do._Fr._Sa.'.split('_'),
	        weekdaysMin : 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D. MMMM YYYY',
	            LLL : 'D. MMMM YYYY HH:mm',
	            LLLL : 'dddd, D. MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[heute um] LT [Uhr]',
	            sameElse: 'L',
	            nextDay: '[morgen um] LT [Uhr]',
	            nextWeek: 'dddd [um] LT [Uhr]',
	            lastDay: '[gestern um] LT [Uhr]',
	            lastWeek: '[letzten] dddd [um] LT [Uhr]'
	        },
	        relativeTime : {
	            future : 'in %s',
	            past : 'vor %s',
	            s : 'ein paar Sekunden',
	            m : processRelativeTime,
	            mm : '%d Minuten',
	            h : processRelativeTime,
	            hh : '%d Stunden',
	            d : processRelativeTime,
	            dd : processRelativeTime,
	            M : processRelativeTime,
	            MM : processRelativeTime,
	            y : processRelativeTime,
	            yy : processRelativeTime
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return de;

	}));

/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : German (Austria) [de-at]
	//! author : lluchs : https://github.com/lluchs
	//! author: Menelion Elensúle: https://github.com/Oire
	//! author : Martin Groller : https://github.com/MadMG
	//! author : Mikolaj Dadela : https://github.com/mik01aj

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    function processRelativeTime(number, withoutSuffix, key, isFuture) {
	        var format = {
	            'm': ['eine Minute', 'einer Minute'],
	            'h': ['eine Stunde', 'einer Stunde'],
	            'd': ['ein Tag', 'einem Tag'],
	            'dd': [number + ' Tage', number + ' Tagen'],
	            'M': ['ein Monat', 'einem Monat'],
	            'MM': [number + ' Monate', number + ' Monaten'],
	            'y': ['ein Jahr', 'einem Jahr'],
	            'yy': [number + ' Jahre', number + ' Jahren']
	        };
	        return withoutSuffix ? format[key][0] : format[key][1];
	    }

	    var de_at = moment.defineLocale('de-at', {
	        months : 'Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
	        monthsShort : 'Jän._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split('_'),
	        monthsParseExact : true,
	        weekdays : 'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split('_'),
	        weekdaysShort : 'So._Mo._Di._Mi._Do._Fr._Sa.'.split('_'),
	        weekdaysMin : 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D. MMMM YYYY',
	            LLL : 'D. MMMM YYYY HH:mm',
	            LLLL : 'dddd, D. MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[heute um] LT [Uhr]',
	            sameElse: 'L',
	            nextDay: '[morgen um] LT [Uhr]',
	            nextWeek: 'dddd [um] LT [Uhr]',
	            lastDay: '[gestern um] LT [Uhr]',
	            lastWeek: '[letzten] dddd [um] LT [Uhr]'
	        },
	        relativeTime : {
	            future : 'in %s',
	            past : 'vor %s',
	            s : 'ein paar Sekunden',
	            m : processRelativeTime,
	            mm : '%d Minuten',
	            h : processRelativeTime,
	            hh : '%d Stunden',
	            d : processRelativeTime,
	            dd : processRelativeTime,
	            M : processRelativeTime,
	            MM : processRelativeTime,
	            y : processRelativeTime,
	            yy : processRelativeTime
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return de_at;

	}));

/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Maldivian [dv]
	//! author : Jawish Hameed : https://github.com/jawish

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var months = [
	        'ޖެނުއަރީ',
	        'ފެބްރުއަރީ',
	        'މާރިޗު',
	        'އޭޕްރީލު',
	        'މޭ',
	        'ޖޫން',
	        'ޖުލައި',
	        'އޯގަސްޓު',
	        'ސެޕްޓެމްބަރު',
	        'އޮކްޓޯބަރު',
	        'ނޮވެމްބަރު',
	        'ޑިސެމްބަރު'
	    ], weekdays = [
	        'އާދިއްތަ',
	        'ހޯމަ',
	        'އަންގާރަ',
	        'ބުދަ',
	        'ބުރާސްފަތި',
	        'ހުކުރު',
	        'ހޮނިހިރު'
	    ];

	    var dv = moment.defineLocale('dv', {
	        months : months,
	        monthsShort : months,
	        weekdays : weekdays,
	        weekdaysShort : weekdays,
	        weekdaysMin : 'އާދި_ހޯމަ_އަން_ބުދަ_ބުރާ_ހުކު_ހޮނި'.split('_'),
	        longDateFormat : {

	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'D/M/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd D MMMM YYYY HH:mm'
	        },
	        meridiemParse: /މކ|މފ/,
	        isPM : function (input) {
	            return 'މފ' === input;
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 12) {
	                return 'މކ';
	            } else {
	                return 'މފ';
	            }
	        },
	        calendar : {
	            sameDay : '[މިއަދު] LT',
	            nextDay : '[މާދަމާ] LT',
	            nextWeek : 'dddd LT',
	            lastDay : '[އިއްޔެ] LT',
	            lastWeek : '[ފާއިތުވި] dddd LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'ތެރޭގައި %s',
	            past : 'ކުރިން %s',
	            s : 'ސިކުންތުކޮޅެއް',
	            m : 'މިނިޓެއް',
	            mm : 'މިނިޓު %d',
	            h : 'ގަޑިއިރެއް',
	            hh : 'ގަޑިއިރު %d',
	            d : 'ދުވަހެއް',
	            dd : 'ދުވަސް %d',
	            M : 'މަހެއް',
	            MM : 'މަސް %d',
	            y : 'އަހަރެއް',
	            yy : 'އަހަރު %d'
	        },
	        preparse: function (string) {
	            return string.replace(/،/g, ',');
	        },
	        postformat: function (string) {
	            return string.replace(/,/g, '،');
	        },
	        week : {
	            dow : 7,  // Sunday is the first day of the week.
	            doy : 12  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return dv;

	}));

/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Greek [el]
	//! author : Aggelos Karalias : https://github.com/mehiel

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';

	    function isFunction(input) {
	        return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
	    }


	    var el = moment.defineLocale('el', {
	        monthsNominativeEl : 'Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος'.split('_'),
	        monthsGenitiveEl : 'Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου'.split('_'),
	        months : function (momentToFormat, format) {
	            if (/D/.test(format.substring(0, format.indexOf('MMMM')))) { // if there is a day number before 'MMMM'
	                return this._monthsGenitiveEl[momentToFormat.month()];
	            } else {
	                return this._monthsNominativeEl[momentToFormat.month()];
	            }
	        },
	        monthsShort : 'Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ'.split('_'),
	        weekdays : 'Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο'.split('_'),
	        weekdaysShort : 'Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ'.split('_'),
	        weekdaysMin : 'Κυ_Δε_Τρ_Τε_Πε_Πα_Σα'.split('_'),
	        meridiem : function (hours, minutes, isLower) {
	            if (hours > 11) {
	                return isLower ? 'μμ' : 'ΜΜ';
	            } else {
	                return isLower ? 'πμ' : 'ΠΜ';
	            }
	        },
	        isPM : function (input) {
	            return ((input + '').toLowerCase()[0] === 'μ');
	        },
	        meridiemParse : /[ΠΜ]\.?Μ?\.?/i,
	        longDateFormat : {
	            LT : 'h:mm A',
	            LTS : 'h:mm:ss A',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY h:mm A',
	            LLLL : 'dddd, D MMMM YYYY h:mm A'
	        },
	        calendarEl : {
	            sameDay : '[Σήμερα {}] LT',
	            nextDay : '[Αύριο {}] LT',
	            nextWeek : 'dddd [{}] LT',
	            lastDay : '[Χθες {}] LT',
	            lastWeek : function () {
	                switch (this.day()) {
	                    case 6:
	                        return '[το προηγούμενο] dddd [{}] LT';
	                    default:
	                        return '[την προηγούμενη] dddd [{}] LT';
	                }
	            },
	            sameElse : 'L'
	        },
	        calendar : function (key, mom) {
	            var output = this._calendarEl[key],
	                hours = mom && mom.hours();
	            if (isFunction(output)) {
	                output = output.apply(mom);
	            }
	            return output.replace('{}', (hours % 12 === 1 ? 'στη' : 'στις'));
	        },
	        relativeTime : {
	            future : 'σε %s',
	            past : '%s πριν',
	            s : 'λίγα δευτερόλεπτα',
	            m : 'ένα λεπτό',
	            mm : '%d λεπτά',
	            h : 'μία ώρα',
	            hh : '%d ώρες',
	            d : 'μία μέρα',
	            dd : '%d μέρες',
	            M : 'ένας μήνας',
	            MM : '%d μήνες',
	            y : 'ένας χρόνος',
	            yy : '%d χρόνια'
	        },
	        ordinalParse: /\d{1,2}η/,
	        ordinal: '%dη',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4st is the first week of the year.
	        }
	    });

	    return el;

	}));

/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : English (Australia) [en-au]
	//! author : Jared Morse : https://github.com/jarcoal

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var en_au = moment.defineLocale('en-au', {
	        months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
	        monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	        weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
	        weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	        weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	        longDateFormat : {
	            LT : 'h:mm A',
	            LTS : 'h:mm:ss A',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY h:mm A',
	            LLLL : 'dddd, D MMMM YYYY h:mm A'
	        },
	        calendar : {
	            sameDay : '[Today at] LT',
	            nextDay : '[Tomorrow at] LT',
	            nextWeek : 'dddd [at] LT',
	            lastDay : '[Yesterday at] LT',
	            lastWeek : '[Last] dddd [at] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'in %s',
	            past : '%s ago',
	            s : 'a few seconds',
	            m : 'a minute',
	            mm : '%d minutes',
	            h : 'an hour',
	            hh : '%d hours',
	            d : 'a day',
	            dd : '%d days',
	            M : 'a month',
	            MM : '%d months',
	            y : 'a year',
	            yy : '%d years'
	        },
	        ordinalParse: /\d{1,2}(st|nd|rd|th)/,
	        ordinal : function (number) {
	            var b = number % 10,
	                output = (~~(number % 100 / 10) === 1) ? 'th' :
	                (b === 1) ? 'st' :
	                (b === 2) ? 'nd' :
	                (b === 3) ? 'rd' : 'th';
	            return number + output;
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return en_au;

	}));

/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : English (Canada) [en-ca]
	//! author : Jonathan Abourbih : https://github.com/jonbca

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var en_ca = moment.defineLocale('en-ca', {
	        months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
	        monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	        weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
	        weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	        weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	        longDateFormat : {
	            LT : 'h:mm A',
	            LTS : 'h:mm:ss A',
	            L : 'YYYY-MM-DD',
	            LL : 'MMMM D, YYYY',
	            LLL : 'MMMM D, YYYY h:mm A',
	            LLLL : 'dddd, MMMM D, YYYY h:mm A'
	        },
	        calendar : {
	            sameDay : '[Today at] LT',
	            nextDay : '[Tomorrow at] LT',
	            nextWeek : 'dddd [at] LT',
	            lastDay : '[Yesterday at] LT',
	            lastWeek : '[Last] dddd [at] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'in %s',
	            past : '%s ago',
	            s : 'a few seconds',
	            m : 'a minute',
	            mm : '%d minutes',
	            h : 'an hour',
	            hh : '%d hours',
	            d : 'a day',
	            dd : '%d days',
	            M : 'a month',
	            MM : '%d months',
	            y : 'a year',
	            yy : '%d years'
	        },
	        ordinalParse: /\d{1,2}(st|nd|rd|th)/,
	        ordinal : function (number) {
	            var b = number % 10,
	                output = (~~(number % 100 / 10) === 1) ? 'th' :
	                (b === 1) ? 'st' :
	                (b === 2) ? 'nd' :
	                (b === 3) ? 'rd' : 'th';
	            return number + output;
	        }
	    });

	    return en_ca;

	}));

/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : English (United Kingdom) [en-gb]
	//! author : Chris Gedrim : https://github.com/chrisgedrim

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var en_gb = moment.defineLocale('en-gb', {
	        months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
	        monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	        weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
	        weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	        weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay : '[Today at] LT',
	            nextDay : '[Tomorrow at] LT',
	            nextWeek : 'dddd [at] LT',
	            lastDay : '[Yesterday at] LT',
	            lastWeek : '[Last] dddd [at] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'in %s',
	            past : '%s ago',
	            s : 'a few seconds',
	            m : 'a minute',
	            mm : '%d minutes',
	            h : 'an hour',
	            hh : '%d hours',
	            d : 'a day',
	            dd : '%d days',
	            M : 'a month',
	            MM : '%d months',
	            y : 'a year',
	            yy : '%d years'
	        },
	        ordinalParse: /\d{1,2}(st|nd|rd|th)/,
	        ordinal : function (number) {
	            var b = number % 10,
	                output = (~~(number % 100 / 10) === 1) ? 'th' :
	                (b === 1) ? 'st' :
	                (b === 2) ? 'nd' :
	                (b === 3) ? 'rd' : 'th';
	            return number + output;
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return en_gb;

	}));

/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : English (Ireland) [en-ie]
	//! author : Chris Cartlidge : https://github.com/chriscartlidge

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var en_ie = moment.defineLocale('en-ie', {
	        months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
	        monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	        weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
	        weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	        weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD-MM-YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay : '[Today at] LT',
	            nextDay : '[Tomorrow at] LT',
	            nextWeek : 'dddd [at] LT',
	            lastDay : '[Yesterday at] LT',
	            lastWeek : '[Last] dddd [at] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'in %s',
	            past : '%s ago',
	            s : 'a few seconds',
	            m : 'a minute',
	            mm : '%d minutes',
	            h : 'an hour',
	            hh : '%d hours',
	            d : 'a day',
	            dd : '%d days',
	            M : 'a month',
	            MM : '%d months',
	            y : 'a year',
	            yy : '%d years'
	        },
	        ordinalParse: /\d{1,2}(st|nd|rd|th)/,
	        ordinal : function (number) {
	            var b = number % 10,
	                output = (~~(number % 100 / 10) === 1) ? 'th' :
	                (b === 1) ? 'st' :
	                (b === 2) ? 'nd' :
	                (b === 3) ? 'rd' : 'th';
	            return number + output;
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return en_ie;

	}));

/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : English (New Zealand) [en-nz]
	//! author : Luke McGregor : https://github.com/lukemcgregor

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var en_nz = moment.defineLocale('en-nz', {
	        months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
	        monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	        weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
	        weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	        weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	        longDateFormat : {
	            LT : 'h:mm A',
	            LTS : 'h:mm:ss A',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY h:mm A',
	            LLLL : 'dddd, D MMMM YYYY h:mm A'
	        },
	        calendar : {
	            sameDay : '[Today at] LT',
	            nextDay : '[Tomorrow at] LT',
	            nextWeek : 'dddd [at] LT',
	            lastDay : '[Yesterday at] LT',
	            lastWeek : '[Last] dddd [at] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'in %s',
	            past : '%s ago',
	            s : 'a few seconds',
	            m : 'a minute',
	            mm : '%d minutes',
	            h : 'an hour',
	            hh : '%d hours',
	            d : 'a day',
	            dd : '%d days',
	            M : 'a month',
	            MM : '%d months',
	            y : 'a year',
	            yy : '%d years'
	        },
	        ordinalParse: /\d{1,2}(st|nd|rd|th)/,
	        ordinal : function (number) {
	            var b = number % 10,
	                output = (~~(number % 100 / 10) === 1) ? 'th' :
	                (b === 1) ? 'st' :
	                (b === 2) ? 'nd' :
	                (b === 3) ? 'rd' : 'th';
	            return number + output;
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return en_nz;

	}));

/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Esperanto [eo]
	//! author : Colin Dean : https://github.com/colindean
	//! komento: Mi estas malcerta se mi korekte traktis akuzativojn en tiu traduko.
	//!          Se ne, bonvolu korekti kaj avizi min por ke mi povas lerni!

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var eo = moment.defineLocale('eo', {
	        months : 'januaro_februaro_marto_aprilo_majo_junio_julio_aŭgusto_septembro_oktobro_novembro_decembro'.split('_'),
	        monthsShort : 'jan_feb_mar_apr_maj_jun_jul_aŭg_sep_okt_nov_dec'.split('_'),
	        weekdays : 'Dimanĉo_Lundo_Mardo_Merkredo_Ĵaŭdo_Vendredo_Sabato'.split('_'),
	        weekdaysShort : 'Dim_Lun_Mard_Merk_Ĵaŭ_Ven_Sab'.split('_'),
	        weekdaysMin : 'Di_Lu_Ma_Me_Ĵa_Ve_Sa'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'YYYY-MM-DD',
	            LL : 'D[-an de] MMMM, YYYY',
	            LLL : 'D[-an de] MMMM, YYYY HH:mm',
	            LLLL : 'dddd, [la] D[-an de] MMMM, YYYY HH:mm'
	        },
	        meridiemParse: /[ap]\.t\.m/i,
	        isPM: function (input) {
	            return input.charAt(0).toLowerCase() === 'p';
	        },
	        meridiem : function (hours, minutes, isLower) {
	            if (hours > 11) {
	                return isLower ? 'p.t.m.' : 'P.T.M.';
	            } else {
	                return isLower ? 'a.t.m.' : 'A.T.M.';
	            }
	        },
	        calendar : {
	            sameDay : '[Hodiaŭ je] LT',
	            nextDay : '[Morgaŭ je] LT',
	            nextWeek : 'dddd [je] LT',
	            lastDay : '[Hieraŭ je] LT',
	            lastWeek : '[pasinta] dddd [je] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'je %s',
	            past : 'antaŭ %s',
	            s : 'sekundoj',
	            m : 'minuto',
	            mm : '%d minutoj',
	            h : 'horo',
	            hh : '%d horoj',
	            d : 'tago',//ne 'diurno', ĉar estas uzita por proksimumo
	            dd : '%d tagoj',
	            M : 'monato',
	            MM : '%d monatoj',
	            y : 'jaro',
	            yy : '%d jaroj'
	        },
	        ordinalParse: /\d{1,2}a/,
	        ordinal : '%da',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return eo;

	}));

/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Spanish [es]
	//! author : Julio Napurí : https://github.com/julionc

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var monthsShortDot = 'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split('_'),
	        monthsShort = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_');

	    var es = moment.defineLocale('es', {
	        months : 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split('_'),
	        monthsShort : function (m, format) {
	            if (/-MMM-/.test(format)) {
	                return monthsShort[m.month()];
	            } else {
	                return monthsShortDot[m.month()];
	            }
	        },
	        monthsParseExact : true,
	        weekdays : 'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),
	        weekdaysShort : 'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),
	        weekdaysMin : 'do_lu_ma_mi_ju_vi_sá'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'H:mm',
	            LTS : 'H:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D [de] MMMM [de] YYYY',
	            LLL : 'D [de] MMMM [de] YYYY H:mm',
	            LLLL : 'dddd, D [de] MMMM [de] YYYY H:mm'
	        },
	        calendar : {
	            sameDay : function () {
	                return '[hoy a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	            },
	            nextDay : function () {
	                return '[mañana a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	            },
	            nextWeek : function () {
	                return 'dddd [a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	            },
	            lastDay : function () {
	                return '[ayer a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	            },
	            lastWeek : function () {
	                return '[el] dddd [pasado a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'en %s',
	            past : 'hace %s',
	            s : 'unos segundos',
	            m : 'un minuto',
	            mm : '%d minutos',
	            h : 'una hora',
	            hh : '%d horas',
	            d : 'un día',
	            dd : '%d días',
	            M : 'un mes',
	            MM : '%d meses',
	            y : 'un año',
	            yy : '%d años'
	        },
	        ordinalParse : /\d{1,2}º/,
	        ordinal : '%dº',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return es;

	}));

/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Spanish (Dominican Republic) [es-do]

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var monthsShortDot = 'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split('_'),
	        monthsShort = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_');

	    var es_do = moment.defineLocale('es-do', {
	        months : 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split('_'),
	        monthsShort : function (m, format) {
	            if (/-MMM-/.test(format)) {
	                return monthsShort[m.month()];
	            } else {
	                return monthsShortDot[m.month()];
	            }
	        },
	        monthsParseExact : true,
	        weekdays : 'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),
	        weekdaysShort : 'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),
	        weekdaysMin : 'do_lu_ma_mi_ju_vi_sá'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'h:mm A',
	            LTS : 'h:mm:ss A',
	            L : 'DD/MM/YYYY',
	            LL : 'D [de] MMMM [de] YYYY',
	            LLL : 'D [de] MMMM [de] YYYY h:mm A',
	            LLLL : 'dddd, D [de] MMMM [de] YYYY h:mm A'
	        },
	        calendar : {
	            sameDay : function () {
	                return '[hoy a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	            },
	            nextDay : function () {
	                return '[mañana a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	            },
	            nextWeek : function () {
	                return 'dddd [a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	            },
	            lastDay : function () {
	                return '[ayer a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	            },
	            lastWeek : function () {
	                return '[el] dddd [pasado a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'en %s',
	            past : 'hace %s',
	            s : 'unos segundos',
	            m : 'un minuto',
	            mm : '%d minutos',
	            h : 'una hora',
	            hh : '%d horas',
	            d : 'un día',
	            dd : '%d días',
	            M : 'un mes',
	            MM : '%d meses',
	            y : 'un año',
	            yy : '%d años'
	        },
	        ordinalParse : /\d{1,2}º/,
	        ordinal : '%dº',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return es_do;

	}));

/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Estonian [et]
	//! author : Henry Kehlmann : https://github.com/madhenry
	//! improvements : Illimar Tambek : https://github.com/ragulka

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    function processRelativeTime(number, withoutSuffix, key, isFuture) {
	        var format = {
	            's' : ['mõne sekundi', 'mõni sekund', 'paar sekundit'],
	            'm' : ['ühe minuti', 'üks minut'],
	            'mm': [number + ' minuti', number + ' minutit'],
	            'h' : ['ühe tunni', 'tund aega', 'üks tund'],
	            'hh': [number + ' tunni', number + ' tundi'],
	            'd' : ['ühe päeva', 'üks päev'],
	            'M' : ['kuu aja', 'kuu aega', 'üks kuu'],
	            'MM': [number + ' kuu', number + ' kuud'],
	            'y' : ['ühe aasta', 'aasta', 'üks aasta'],
	            'yy': [number + ' aasta', number + ' aastat']
	        };
	        if (withoutSuffix) {
	            return format[key][2] ? format[key][2] : format[key][1];
	        }
	        return isFuture ? format[key][0] : format[key][1];
	    }

	    var et = moment.defineLocale('et', {
	        months        : 'jaanuar_veebruar_märts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember'.split('_'),
	        monthsShort   : 'jaan_veebr_märts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets'.split('_'),
	        weekdays      : 'pühapäev_esmaspäev_teisipäev_kolmapäev_neljapäev_reede_laupäev'.split('_'),
	        weekdaysShort : 'P_E_T_K_N_R_L'.split('_'),
	        weekdaysMin   : 'P_E_T_K_N_R_L'.split('_'),
	        longDateFormat : {
	            LT   : 'H:mm',
	            LTS : 'H:mm:ss',
	            L    : 'DD.MM.YYYY',
	            LL   : 'D. MMMM YYYY',
	            LLL  : 'D. MMMM YYYY H:mm',
	            LLLL : 'dddd, D. MMMM YYYY H:mm'
	        },
	        calendar : {
	            sameDay  : '[Täna,] LT',
	            nextDay  : '[Homme,] LT',
	            nextWeek : '[Järgmine] dddd LT',
	            lastDay  : '[Eile,] LT',
	            lastWeek : '[Eelmine] dddd LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s pärast',
	            past   : '%s tagasi',
	            s      : processRelativeTime,
	            m      : processRelativeTime,
	            mm     : processRelativeTime,
	            h      : processRelativeTime,
	            hh     : processRelativeTime,
	            d      : processRelativeTime,
	            dd     : '%d päeva',
	            M      : processRelativeTime,
	            MM     : processRelativeTime,
	            y      : processRelativeTime,
	            yy     : processRelativeTime
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return et;

	}));

/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Basque [eu]
	//! author : Eneko Illarramendi : https://github.com/eillarra

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var eu = moment.defineLocale('eu', {
	        months : 'urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua'.split('_'),
	        monthsShort : 'urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.'.split('_'),
	        monthsParseExact : true,
	        weekdays : 'igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata'.split('_'),
	        weekdaysShort : 'ig._al._ar._az._og._ol._lr.'.split('_'),
	        weekdaysMin : 'ig_al_ar_az_og_ol_lr'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'YYYY-MM-DD',
	            LL : 'YYYY[ko] MMMM[ren] D[a]',
	            LLL : 'YYYY[ko] MMMM[ren] D[a] HH:mm',
	            LLLL : 'dddd, YYYY[ko] MMMM[ren] D[a] HH:mm',
	            l : 'YYYY-M-D',
	            ll : 'YYYY[ko] MMM D[a]',
	            lll : 'YYYY[ko] MMM D[a] HH:mm',
	            llll : 'ddd, YYYY[ko] MMM D[a] HH:mm'
	        },
	        calendar : {
	            sameDay : '[gaur] LT[etan]',
	            nextDay : '[bihar] LT[etan]',
	            nextWeek : 'dddd LT[etan]',
	            lastDay : '[atzo] LT[etan]',
	            lastWeek : '[aurreko] dddd LT[etan]',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s barru',
	            past : 'duela %s',
	            s : 'segundo batzuk',
	            m : 'minutu bat',
	            mm : '%d minutu',
	            h : 'ordu bat',
	            hh : '%d ordu',
	            d : 'egun bat',
	            dd : '%d egun',
	            M : 'hilabete bat',
	            MM : '%d hilabete',
	            y : 'urte bat',
	            yy : '%d urte'
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return eu;

	}));

/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Persian [fa]
	//! author : Ebrahim Byagowi : https://github.com/ebraminio

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var symbolMap = {
	        '1': '۱',
	        '2': '۲',
	        '3': '۳',
	        '4': '۴',
	        '5': '۵',
	        '6': '۶',
	        '7': '۷',
	        '8': '۸',
	        '9': '۹',
	        '0': '۰'
	    }, numberMap = {
	        '۱': '1',
	        '۲': '2',
	        '۳': '3',
	        '۴': '4',
	        '۵': '5',
	        '۶': '6',
	        '۷': '7',
	        '۸': '8',
	        '۹': '9',
	        '۰': '0'
	    };

	    var fa = moment.defineLocale('fa', {
	        months : 'ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر'.split('_'),
	        monthsShort : 'ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر'.split('_'),
	        weekdays : 'یک\u200cشنبه_دوشنبه_سه\u200cشنبه_چهارشنبه_پنج\u200cشنبه_جمعه_شنبه'.split('_'),
	        weekdaysShort : 'یک\u200cشنبه_دوشنبه_سه\u200cشنبه_چهارشنبه_پنج\u200cشنبه_جمعه_شنبه'.split('_'),
	        weekdaysMin : 'ی_د_س_چ_پ_ج_ش'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd, D MMMM YYYY HH:mm'
	        },
	        meridiemParse: /قبل از ظهر|بعد از ظهر/,
	        isPM: function (input) {
	            return /بعد از ظهر/.test(input);
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 12) {
	                return 'قبل از ظهر';
	            } else {
	                return 'بعد از ظهر';
	            }
	        },
	        calendar : {
	            sameDay : '[امروز ساعت] LT',
	            nextDay : '[فردا ساعت] LT',
	            nextWeek : 'dddd [ساعت] LT',
	            lastDay : '[دیروز ساعت] LT',
	            lastWeek : 'dddd [پیش] [ساعت] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'در %s',
	            past : '%s پیش',
	            s : 'چندین ثانیه',
	            m : 'یک دقیقه',
	            mm : '%d دقیقه',
	            h : 'یک ساعت',
	            hh : '%d ساعت',
	            d : 'یک روز',
	            dd : '%d روز',
	            M : 'یک ماه',
	            MM : '%d ماه',
	            y : 'یک سال',
	            yy : '%d سال'
	        },
	        preparse: function (string) {
	            return string.replace(/[۰-۹]/g, function (match) {
	                return numberMap[match];
	            }).replace(/،/g, ',');
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            }).replace(/,/g, '،');
	        },
	        ordinalParse: /\d{1,2}م/,
	        ordinal : '%dم',
	        week : {
	            dow : 6, // Saturday is the first day of the week.
	            doy : 12 // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return fa;

	}));

/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Finnish [fi]
	//! author : Tarmo Aidantausta : https://github.com/bleadof

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var numbersPast = 'nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän'.split(' '),
	        numbersFuture = [
	            'nolla', 'yhden', 'kahden', 'kolmen', 'neljän', 'viiden', 'kuuden',
	            numbersPast[7], numbersPast[8], numbersPast[9]
	        ];
	    function translate(number, withoutSuffix, key, isFuture) {
	        var result = '';
	        switch (key) {
	            case 's':
	                return isFuture ? 'muutaman sekunnin' : 'muutama sekunti';
	            case 'm':
	                return isFuture ? 'minuutin' : 'minuutti';
	            case 'mm':
	                result = isFuture ? 'minuutin' : 'minuuttia';
	                break;
	            case 'h':
	                return isFuture ? 'tunnin' : 'tunti';
	            case 'hh':
	                result = isFuture ? 'tunnin' : 'tuntia';
	                break;
	            case 'd':
	                return isFuture ? 'päivän' : 'päivä';
	            case 'dd':
	                result = isFuture ? 'päivän' : 'päivää';
	                break;
	            case 'M':
	                return isFuture ? 'kuukauden' : 'kuukausi';
	            case 'MM':
	                result = isFuture ? 'kuukauden' : 'kuukautta';
	                break;
	            case 'y':
	                return isFuture ? 'vuoden' : 'vuosi';
	            case 'yy':
	                result = isFuture ? 'vuoden' : 'vuotta';
	                break;
	        }
	        result = verbalNumber(number, isFuture) + ' ' + result;
	        return result;
	    }
	    function verbalNumber(number, isFuture) {
	        return number < 10 ? (isFuture ? numbersFuture[number] : numbersPast[number]) : number;
	    }

	    var fi = moment.defineLocale('fi', {
	        months : 'tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu'.split('_'),
	        monthsShort : 'tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu'.split('_'),
	        weekdays : 'sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai'.split('_'),
	        weekdaysShort : 'su_ma_ti_ke_to_pe_la'.split('_'),
	        weekdaysMin : 'su_ma_ti_ke_to_pe_la'.split('_'),
	        longDateFormat : {
	            LT : 'HH.mm',
	            LTS : 'HH.mm.ss',
	            L : 'DD.MM.YYYY',
	            LL : 'Do MMMM[ta] YYYY',
	            LLL : 'Do MMMM[ta] YYYY, [klo] HH.mm',
	            LLLL : 'dddd, Do MMMM[ta] YYYY, [klo] HH.mm',
	            l : 'D.M.YYYY',
	            ll : 'Do MMM YYYY',
	            lll : 'Do MMM YYYY, [klo] HH.mm',
	            llll : 'ddd, Do MMM YYYY, [klo] HH.mm'
	        },
	        calendar : {
	            sameDay : '[tänään] [klo] LT',
	            nextDay : '[huomenna] [klo] LT',
	            nextWeek : 'dddd [klo] LT',
	            lastDay : '[eilen] [klo] LT',
	            lastWeek : '[viime] dddd[na] [klo] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s päästä',
	            past : '%s sitten',
	            s : translate,
	            m : translate,
	            mm : translate,
	            h : translate,
	            hh : translate,
	            d : translate,
	            dd : translate,
	            M : translate,
	            MM : translate,
	            y : translate,
	            yy : translate
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return fi;

	}));

/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Faroese [fo]
	//! author : Ragnar Johannesen : https://github.com/ragnar123

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var fo = moment.defineLocale('fo', {
	        months : 'januar_februar_mars_apríl_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
	        monthsShort : 'jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_'),
	        weekdays : 'sunnudagur_mánadagur_týsdagur_mikudagur_hósdagur_fríggjadagur_leygardagur'.split('_'),
	        weekdaysShort : 'sun_mán_týs_mik_hós_frí_ley'.split('_'),
	        weekdaysMin : 'su_má_tý_mi_hó_fr_le'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd D. MMMM, YYYY HH:mm'
	        },
	        calendar : {
	            sameDay : '[Í dag kl.] LT',
	            nextDay : '[Í morgin kl.] LT',
	            nextWeek : 'dddd [kl.] LT',
	            lastDay : '[Í gjár kl.] LT',
	            lastWeek : '[síðstu] dddd [kl] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'um %s',
	            past : '%s síðani',
	            s : 'fá sekund',
	            m : 'ein minutt',
	            mm : '%d minuttir',
	            h : 'ein tími',
	            hh : '%d tímar',
	            d : 'ein dagur',
	            dd : '%d dagar',
	            M : 'ein mánaði',
	            MM : '%d mánaðir',
	            y : 'eitt ár',
	            yy : '%d ár'
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return fo;

	}));

/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : French [fr]
	//! author : John Fischer : https://github.com/jfroffice

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var fr = moment.defineLocale('fr', {
	        months : 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),
	        monthsShort : 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),
	        monthsParseExact : true,
	        weekdays : 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
	        weekdaysShort : 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
	        weekdaysMin : 'Di_Lu_Ma_Me_Je_Ve_Sa'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[Aujourd\'hui à] LT',
	            nextDay: '[Demain à] LT',
	            nextWeek: 'dddd [à] LT',
	            lastDay: '[Hier à] LT',
	            lastWeek: 'dddd [dernier à] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'dans %s',
	            past : 'il y a %s',
	            s : 'quelques secondes',
	            m : 'une minute',
	            mm : '%d minutes',
	            h : 'une heure',
	            hh : '%d heures',
	            d : 'un jour',
	            dd : '%d jours',
	            M : 'un mois',
	            MM : '%d mois',
	            y : 'un an',
	            yy : '%d ans'
	        },
	        ordinalParse: /\d{1,2}(er|)/,
	        ordinal : function (number) {
	            return number + (number === 1 ? 'er' : '');
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return fr;

	}));

/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : French (Canada) [fr-ca]
	//! author : Jonathan Abourbih : https://github.com/jonbca

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var fr_ca = moment.defineLocale('fr-ca', {
	        months : 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),
	        monthsShort : 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),
	        monthsParseExact : true,
	        weekdays : 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
	        weekdaysShort : 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
	        weekdaysMin : 'Di_Lu_Ma_Me_Je_Ve_Sa'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'YYYY-MM-DD',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[Aujourd\'hui à] LT',
	            nextDay: '[Demain à] LT',
	            nextWeek: 'dddd [à] LT',
	            lastDay: '[Hier à] LT',
	            lastWeek: 'dddd [dernier à] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'dans %s',
	            past : 'il y a %s',
	            s : 'quelques secondes',
	            m : 'une minute',
	            mm : '%d minutes',
	            h : 'une heure',
	            hh : '%d heures',
	            d : 'un jour',
	            dd : '%d jours',
	            M : 'un mois',
	            MM : '%d mois',
	            y : 'un an',
	            yy : '%d ans'
	        },
	        ordinalParse: /\d{1,2}(er|e)/,
	        ordinal : function (number) {
	            return number + (number === 1 ? 'er' : 'e');
	        }
	    });

	    return fr_ca;

	}));

/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : French (Switzerland) [fr-ch]
	//! author : Gaspard Bucher : https://github.com/gaspard

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var fr_ch = moment.defineLocale('fr-ch', {
	        months : 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),
	        monthsShort : 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),
	        monthsParseExact : true,
	        weekdays : 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
	        weekdaysShort : 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
	        weekdaysMin : 'Di_Lu_Ma_Me_Je_Ve_Sa'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[Aujourd\'hui à] LT',
	            nextDay: '[Demain à] LT',
	            nextWeek: 'dddd [à] LT',
	            lastDay: '[Hier à] LT',
	            lastWeek: 'dddd [dernier à] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'dans %s',
	            past : 'il y a %s',
	            s : 'quelques secondes',
	            m : 'une minute',
	            mm : '%d minutes',
	            h : 'une heure',
	            hh : '%d heures',
	            d : 'un jour',
	            dd : '%d jours',
	            M : 'un mois',
	            MM : '%d mois',
	            y : 'un an',
	            yy : '%d ans'
	        },
	        ordinalParse: /\d{1,2}(er|e)/,
	        ordinal : function (number) {
	            return number + (number === 1 ? 'er' : 'e');
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return fr_ch;

	}));

/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Frisian [fy]
	//! author : Robin van der Vliet : https://github.com/robin0van0der0v

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var monthsShortWithDots = 'jan._feb._mrt._apr._mai_jun._jul._aug._sep._okt._nov._des.'.split('_'),
	        monthsShortWithoutDots = 'jan_feb_mrt_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_');

	    var fy = moment.defineLocale('fy', {
	        months : 'jannewaris_febrewaris_maart_april_maaie_juny_july_augustus_septimber_oktober_novimber_desimber'.split('_'),
	        monthsShort : function (m, format) {
	            if (/-MMM-/.test(format)) {
	                return monthsShortWithoutDots[m.month()];
	            } else {
	                return monthsShortWithDots[m.month()];
	            }
	        },
	        monthsParseExact : true,
	        weekdays : 'snein_moandei_tiisdei_woansdei_tongersdei_freed_sneon'.split('_'),
	        weekdaysShort : 'si._mo._ti._wo._to._fr._so.'.split('_'),
	        weekdaysMin : 'Si_Mo_Ti_Wo_To_Fr_So'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD-MM-YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[hjoed om] LT',
	            nextDay: '[moarn om] LT',
	            nextWeek: 'dddd [om] LT',
	            lastDay: '[juster om] LT',
	            lastWeek: '[ôfrûne] dddd [om] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'oer %s',
	            past : '%s lyn',
	            s : 'in pear sekonden',
	            m : 'ien minút',
	            mm : '%d minuten',
	            h : 'ien oere',
	            hh : '%d oeren',
	            d : 'ien dei',
	            dd : '%d dagen',
	            M : 'ien moanne',
	            MM : '%d moannen',
	            y : 'ien jier',
	            yy : '%d jierren'
	        },
	        ordinalParse: /\d{1,2}(ste|de)/,
	        ordinal : function (number) {
	            return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de');
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return fy;

	}));

/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Scottish Gaelic [gd]
	//! author : Jon Ashdown : https://github.com/jonashdown

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var months = [
	        'Am Faoilleach', 'An Gearran', 'Am Màrt', 'An Giblean', 'An Cèitean', 'An t-Ògmhios', 'An t-Iuchar', 'An Lùnastal', 'An t-Sultain', 'An Dàmhair', 'An t-Samhain', 'An Dùbhlachd'
	    ];

	    var monthsShort = ['Faoi', 'Gear', 'Màrt', 'Gibl', 'Cèit', 'Ògmh', 'Iuch', 'Lùn', 'Sult', 'Dàmh', 'Samh', 'Dùbh'];

	    var weekdays = ['Didòmhnaich', 'Diluain', 'Dimàirt', 'Diciadain', 'Diardaoin', 'Dihaoine', 'Disathairne'];

	    var weekdaysShort = ['Did', 'Dil', 'Dim', 'Dic', 'Dia', 'Dih', 'Dis'];

	    var weekdaysMin = ['Dò', 'Lu', 'Mà', 'Ci', 'Ar', 'Ha', 'Sa'];

	    var gd = moment.defineLocale('gd', {
	        months : months,
	        monthsShort : monthsShort,
	        monthsParseExact : true,
	        weekdays : weekdays,
	        weekdaysShort : weekdaysShort,
	        weekdaysMin : weekdaysMin,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay : '[An-diugh aig] LT',
	            nextDay : '[A-màireach aig] LT',
	            nextWeek : 'dddd [aig] LT',
	            lastDay : '[An-dè aig] LT',
	            lastWeek : 'dddd [seo chaidh] [aig] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'ann an %s',
	            past : 'bho chionn %s',
	            s : 'beagan diogan',
	            m : 'mionaid',
	            mm : '%d mionaidean',
	            h : 'uair',
	            hh : '%d uairean',
	            d : 'latha',
	            dd : '%d latha',
	            M : 'mìos',
	            MM : '%d mìosan',
	            y : 'bliadhna',
	            yy : '%d bliadhna'
	        },
	        ordinalParse : /\d{1,2}(d|na|mh)/,
	        ordinal : function (number) {
	            var output = number === 1 ? 'd' : number % 10 === 2 ? 'na' : 'mh';
	            return number + output;
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return gd;

	}));

/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Galician [gl]
	//! author : Juan G. Hurtado : https://github.com/juanghurtado

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var gl = moment.defineLocale('gl', {
	        months : 'xaneiro_febreiro_marzo_abril_maio_xuño_xullo_agosto_setembro_outubro_novembro_decembro'.split('_'),
	        monthsShort : 'xan._feb._mar._abr._mai._xuñ._xul._ago._set._out._nov._dec.'.split('_'),
	        monthsParseExact: true,
	        weekdays : 'domingo_luns_martes_mércores_xoves_venres_sábado'.split('_'),
	        weekdaysShort : 'dom._lun._mar._mér._xov._ven._sáb.'.split('_'),
	        weekdaysMin : 'do_lu_ma_mé_xo_ve_sá'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'H:mm',
	            LTS : 'H:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D [de] MMMM [de] YYYY',
	            LLL : 'D [de] MMMM [de] YYYY H:mm',
	            LLLL : 'dddd, D [de] MMMM [de] YYYY H:mm'
	        },
	        calendar : {
	            sameDay : function () {
	                return '[hoxe ' + ((this.hours() !== 1) ? 'ás' : 'á') + '] LT';
	            },
	            nextDay : function () {
	                return '[mañá ' + ((this.hours() !== 1) ? 'ás' : 'á') + '] LT';
	            },
	            nextWeek : function () {
	                return 'dddd [' + ((this.hours() !== 1) ? 'ás' : 'a') + '] LT';
	            },
	            lastDay : function () {
	                return '[onte ' + ((this.hours() !== 1) ? 'á' : 'a') + '] LT';
	            },
	            lastWeek : function () {
	                return '[o] dddd [pasado ' + ((this.hours() !== 1) ? 'ás' : 'a') + '] LT';
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : function (str) {
	                if (str.indexOf('un') === 0) {
	                    return 'n' + str;
	                }
	                return 'en ' + str;
	            },
	            past : 'hai %s',
	            s : 'uns segundos',
	            m : 'un minuto',
	            mm : '%d minutos',
	            h : 'unha hora',
	            hh : '%d horas',
	            d : 'un día',
	            dd : '%d días',
	            M : 'un mes',
	            MM : '%d meses',
	            y : 'un ano',
	            yy : '%d anos'
	        },
	        ordinalParse : /\d{1,2}º/,
	        ordinal : '%dº',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return gl;

	}));

/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Hebrew [he]
	//! author : Tomer Cohen : https://github.com/tomer
	//! author : Moshe Simantov : https://github.com/DevelopmentIL
	//! author : Tal Ater : https://github.com/TalAter

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var he = moment.defineLocale('he', {
	        months : 'ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר'.split('_'),
	        monthsShort : 'ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳'.split('_'),
	        weekdays : 'ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת'.split('_'),
	        weekdaysShort : 'א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳'.split('_'),
	        weekdaysMin : 'א_ב_ג_ד_ה_ו_ש'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D [ב]MMMM YYYY',
	            LLL : 'D [ב]MMMM YYYY HH:mm',
	            LLLL : 'dddd, D [ב]MMMM YYYY HH:mm',
	            l : 'D/M/YYYY',
	            ll : 'D MMM YYYY',
	            lll : 'D MMM YYYY HH:mm',
	            llll : 'ddd, D MMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay : '[היום ב־]LT',
	            nextDay : '[מחר ב־]LT',
	            nextWeek : 'dddd [בשעה] LT',
	            lastDay : '[אתמול ב־]LT',
	            lastWeek : '[ביום] dddd [האחרון בשעה] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'בעוד %s',
	            past : 'לפני %s',
	            s : 'מספר שניות',
	            m : 'דקה',
	            mm : '%d דקות',
	            h : 'שעה',
	            hh : function (number) {
	                if (number === 2) {
	                    return 'שעתיים';
	                }
	                return number + ' שעות';
	            },
	            d : 'יום',
	            dd : function (number) {
	                if (number === 2) {
	                    return 'יומיים';
	                }
	                return number + ' ימים';
	            },
	            M : 'חודש',
	            MM : function (number) {
	                if (number === 2) {
	                    return 'חודשיים';
	                }
	                return number + ' חודשים';
	            },
	            y : 'שנה',
	            yy : function (number) {
	                if (number === 2) {
	                    return 'שנתיים';
	                } else if (number % 10 === 0 && number !== 10) {
	                    return number + ' שנה';
	                }
	                return number + ' שנים';
	            }
	        },
	        meridiemParse: /אחה"צ|לפנה"צ|אחרי הצהריים|לפני הצהריים|לפנות בוקר|בבוקר|בערב/i,
	        isPM : function (input) {
	            return /^(אחה"צ|אחרי הצהריים|בערב)$/.test(input);
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 5) {
	                return 'לפנות בוקר';
	            } else if (hour < 10) {
	                return 'בבוקר';
	            } else if (hour < 12) {
	                return isLower ? 'לפנה"צ' : 'לפני הצהריים';
	            } else if (hour < 18) {
	                return isLower ? 'אחה"צ' : 'אחרי הצהריים';
	            } else {
	                return 'בערב';
	            }
	        }
	    });

	    return he;

	}));

/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Hindi [hi]
	//! author : Mayank Singhal : https://github.com/mayanksinghal

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var symbolMap = {
	        '1': '१',
	        '2': '२',
	        '3': '३',
	        '4': '४',
	        '5': '५',
	        '6': '६',
	        '7': '७',
	        '8': '८',
	        '9': '९',
	        '0': '०'
	    },
	    numberMap = {
	        '१': '1',
	        '२': '2',
	        '३': '3',
	        '४': '4',
	        '५': '5',
	        '६': '6',
	        '७': '7',
	        '८': '8',
	        '९': '9',
	        '०': '0'
	    };

	    var hi = moment.defineLocale('hi', {
	        months : 'जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर'.split('_'),
	        monthsShort : 'जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.'.split('_'),
	        monthsParseExact: true,
	        weekdays : 'रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार'.split('_'),
	        weekdaysShort : 'रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि'.split('_'),
	        weekdaysMin : 'र_सो_मं_बु_गु_शु_श'.split('_'),
	        longDateFormat : {
	            LT : 'A h:mm बजे',
	            LTS : 'A h:mm:ss बजे',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY, A h:mm बजे',
	            LLLL : 'dddd, D MMMM YYYY, A h:mm बजे'
	        },
	        calendar : {
	            sameDay : '[आज] LT',
	            nextDay : '[कल] LT',
	            nextWeek : 'dddd, LT',
	            lastDay : '[कल] LT',
	            lastWeek : '[पिछले] dddd, LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s में',
	            past : '%s पहले',
	            s : 'कुछ ही क्षण',
	            m : 'एक मिनट',
	            mm : '%d मिनट',
	            h : 'एक घंटा',
	            hh : '%d घंटे',
	            d : 'एक दिन',
	            dd : '%d दिन',
	            M : 'एक महीने',
	            MM : '%d महीने',
	            y : 'एक वर्ष',
	            yy : '%d वर्ष'
	        },
	        preparse: function (string) {
	            return string.replace(/[१२३४५६७८९०]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        // Hindi notation for meridiems are quite fuzzy in practice. While there exists
	        // a rigid notion of a 'Pahar' it is not used as rigidly in modern Hindi.
	        meridiemParse: /रात|सुबह|दोपहर|शाम/,
	        meridiemHour : function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'रात') {
	                return hour < 4 ? hour : hour + 12;
	            } else if (meridiem === 'सुबह') {
	                return hour;
	            } else if (meridiem === 'दोपहर') {
	                return hour >= 10 ? hour : hour + 12;
	            } else if (meridiem === 'शाम') {
	                return hour + 12;
	            }
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'रात';
	            } else if (hour < 10) {
	                return 'सुबह';
	            } else if (hour < 17) {
	                return 'दोपहर';
	            } else if (hour < 20) {
	                return 'शाम';
	            } else {
	                return 'रात';
	            }
	        },
	        week : {
	            dow : 0, // Sunday is the first day of the week.
	            doy : 6  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return hi;

	}));

/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Croatian [hr]
	//! author : Bojan Marković : https://github.com/bmarkovic

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    function translate(number, withoutSuffix, key) {
	        var result = number + ' ';
	        switch (key) {
	            case 'm':
	                return withoutSuffix ? 'jedna minuta' : 'jedne minute';
	            case 'mm':
	                if (number === 1) {
	                    result += 'minuta';
	                } else if (number === 2 || number === 3 || number === 4) {
	                    result += 'minute';
	                } else {
	                    result += 'minuta';
	                }
	                return result;
	            case 'h':
	                return withoutSuffix ? 'jedan sat' : 'jednog sata';
	            case 'hh':
	                if (number === 1) {
	                    result += 'sat';
	                } else if (number === 2 || number === 3 || number === 4) {
	                    result += 'sata';
	                } else {
	                    result += 'sati';
	                }
	                return result;
	            case 'dd':
	                if (number === 1) {
	                    result += 'dan';
	                } else {
	                    result += 'dana';
	                }
	                return result;
	            case 'MM':
	                if (number === 1) {
	                    result += 'mjesec';
	                } else if (number === 2 || number === 3 || number === 4) {
	                    result += 'mjeseca';
	                } else {
	                    result += 'mjeseci';
	                }
	                return result;
	            case 'yy':
	                if (number === 1) {
	                    result += 'godina';
	                } else if (number === 2 || number === 3 || number === 4) {
	                    result += 'godine';
	                } else {
	                    result += 'godina';
	                }
	                return result;
	        }
	    }

	    var hr = moment.defineLocale('hr', {
	        months : {
	            format: 'siječnja_veljače_ožujka_travnja_svibnja_lipnja_srpnja_kolovoza_rujna_listopada_studenoga_prosinca'.split('_'),
	            standalone: 'siječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac'.split('_')
	        },
	        monthsShort : 'sij._velj._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.'.split('_'),
	        monthsParseExact: true,
	        weekdays : 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split('_'),
	        weekdaysShort : 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
	        weekdaysMin : 'ne_po_ut_sr_če_pe_su'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'H:mm',
	            LTS : 'H:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D. MMMM YYYY',
	            LLL : 'D. MMMM YYYY H:mm',
	            LLLL : 'dddd, D. MMMM YYYY H:mm'
	        },
	        calendar : {
	            sameDay  : '[danas u] LT',
	            nextDay  : '[sutra u] LT',
	            nextWeek : function () {
	                switch (this.day()) {
	                    case 0:
	                        return '[u] [nedjelju] [u] LT';
	                    case 3:
	                        return '[u] [srijedu] [u] LT';
	                    case 6:
	                        return '[u] [subotu] [u] LT';
	                    case 1:
	                    case 2:
	                    case 4:
	                    case 5:
	                        return '[u] dddd [u] LT';
	                }
	            },
	            lastDay  : '[jučer u] LT',
	            lastWeek : function () {
	                switch (this.day()) {
	                    case 0:
	                    case 3:
	                        return '[prošlu] dddd [u] LT';
	                    case 6:
	                        return '[prošle] [subote] [u] LT';
	                    case 1:
	                    case 2:
	                    case 4:
	                    case 5:
	                        return '[prošli] dddd [u] LT';
	                }
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'za %s',
	            past   : 'prije %s',
	            s      : 'par sekundi',
	            m      : translate,
	            mm     : translate,
	            h      : translate,
	            hh     : translate,
	            d      : 'dan',
	            dd     : translate,
	            M      : 'mjesec',
	            MM     : translate,
	            y      : 'godinu',
	            yy     : translate
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return hr;

	}));

/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Hungarian [hu]
	//! author : Adam Brunner : https://github.com/adambrunner

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var weekEndings = 'vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton'.split(' ');
	    function translate(number, withoutSuffix, key, isFuture) {
	        var num = number,
	            suffix;
	        switch (key) {
	            case 's':
	                return (isFuture || withoutSuffix) ? 'néhány másodperc' : 'néhány másodperce';
	            case 'm':
	                return 'egy' + (isFuture || withoutSuffix ? ' perc' : ' perce');
	            case 'mm':
	                return num + (isFuture || withoutSuffix ? ' perc' : ' perce');
	            case 'h':
	                return 'egy' + (isFuture || withoutSuffix ? ' óra' : ' órája');
	            case 'hh':
	                return num + (isFuture || withoutSuffix ? ' óra' : ' órája');
	            case 'd':
	                return 'egy' + (isFuture || withoutSuffix ? ' nap' : ' napja');
	            case 'dd':
	                return num + (isFuture || withoutSuffix ? ' nap' : ' napja');
	            case 'M':
	                return 'egy' + (isFuture || withoutSuffix ? ' hónap' : ' hónapja');
	            case 'MM':
	                return num + (isFuture || withoutSuffix ? ' hónap' : ' hónapja');
	            case 'y':
	                return 'egy' + (isFuture || withoutSuffix ? ' év' : ' éve');
	            case 'yy':
	                return num + (isFuture || withoutSuffix ? ' év' : ' éve');
	        }
	        return '';
	    }
	    function week(isFuture) {
	        return (isFuture ? '' : '[múlt] ') + '[' + weekEndings[this.day()] + '] LT[-kor]';
	    }

	    var hu = moment.defineLocale('hu', {
	        months : 'január_február_március_április_május_június_július_augusztus_szeptember_október_november_december'.split('_'),
	        monthsShort : 'jan_feb_márc_ápr_máj_jún_júl_aug_szept_okt_nov_dec'.split('_'),
	        weekdays : 'vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat'.split('_'),
	        weekdaysShort : 'vas_hét_kedd_sze_csüt_pén_szo'.split('_'),
	        weekdaysMin : 'v_h_k_sze_cs_p_szo'.split('_'),
	        longDateFormat : {
	            LT : 'H:mm',
	            LTS : 'H:mm:ss',
	            L : 'YYYY.MM.DD.',
	            LL : 'YYYY. MMMM D.',
	            LLL : 'YYYY. MMMM D. H:mm',
	            LLLL : 'YYYY. MMMM D., dddd H:mm'
	        },
	        meridiemParse: /de|du/i,
	        isPM: function (input) {
	            return input.charAt(1).toLowerCase() === 'u';
	        },
	        meridiem : function (hours, minutes, isLower) {
	            if (hours < 12) {
	                return isLower === true ? 'de' : 'DE';
	            } else {
	                return isLower === true ? 'du' : 'DU';
	            }
	        },
	        calendar : {
	            sameDay : '[ma] LT[-kor]',
	            nextDay : '[holnap] LT[-kor]',
	            nextWeek : function () {
	                return week.call(this, true);
	            },
	            lastDay : '[tegnap] LT[-kor]',
	            lastWeek : function () {
	                return week.call(this, false);
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s múlva',
	            past : '%s',
	            s : translate,
	            m : translate,
	            mm : translate,
	            h : translate,
	            hh : translate,
	            d : translate,
	            dd : translate,
	            M : translate,
	            MM : translate,
	            y : translate,
	            yy : translate
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return hu;

	}));

/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Armenian [hy-am]
	//! author : Armendarabyan : https://github.com/armendarabyan

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var hy_am = moment.defineLocale('hy-am', {
	        months : {
	            format: 'հունվարի_փետրվարի_մարտի_ապրիլի_մայիսի_հունիսի_հուլիսի_օգոստոսի_սեպտեմբերի_հոկտեմբերի_նոյեմբերի_դեկտեմբերի'.split('_'),
	            standalone: 'հունվար_փետրվար_մարտ_ապրիլ_մայիս_հունիս_հուլիս_օգոստոս_սեպտեմբեր_հոկտեմբեր_նոյեմբեր_դեկտեմբեր'.split('_')
	        },
	        monthsShort : 'հնվ_փտր_մրտ_ապր_մյս_հնս_հլս_օգս_սպտ_հկտ_նմբ_դկտ'.split('_'),
	        weekdays : 'կիրակի_երկուշաբթի_երեքշաբթի_չորեքշաբթի_հինգշաբթի_ուրբաթ_շաբաթ'.split('_'),
	        weekdaysShort : 'կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ'.split('_'),
	        weekdaysMin : 'կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D MMMM YYYY թ.',
	            LLL : 'D MMMM YYYY թ., HH:mm',
	            LLLL : 'dddd, D MMMM YYYY թ., HH:mm'
	        },
	        calendar : {
	            sameDay: '[այսօր] LT',
	            nextDay: '[վաղը] LT',
	            lastDay: '[երեկ] LT',
	            nextWeek: function () {
	                return 'dddd [օրը ժամը] LT';
	            },
	            lastWeek: function () {
	                return '[անցած] dddd [օրը ժամը] LT';
	            },
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : '%s հետո',
	            past : '%s առաջ',
	            s : 'մի քանի վայրկյան',
	            m : 'րոպե',
	            mm : '%d րոպե',
	            h : 'ժամ',
	            hh : '%d ժամ',
	            d : 'օր',
	            dd : '%d օր',
	            M : 'ամիս',
	            MM : '%d ամիս',
	            y : 'տարի',
	            yy : '%d տարի'
	        },
	        meridiemParse: /գիշերվա|առավոտվա|ցերեկվա|երեկոյան/,
	        isPM: function (input) {
	            return /^(ցերեկվա|երեկոյան)$/.test(input);
	        },
	        meridiem : function (hour) {
	            if (hour < 4) {
	                return 'գիշերվա';
	            } else if (hour < 12) {
	                return 'առավոտվա';
	            } else if (hour < 17) {
	                return 'ցերեկվա';
	            } else {
	                return 'երեկոյան';
	            }
	        },
	        ordinalParse: /\d{1,2}|\d{1,2}-(ին|րդ)/,
	        ordinal: function (number, period) {
	            switch (period) {
	                case 'DDD':
	                case 'w':
	                case 'W':
	                case 'DDDo':
	                    if (number === 1) {
	                        return number + '-ին';
	                    }
	                    return number + '-րդ';
	                default:
	                    return number;
	            }
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return hy_am;

	}));

/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Indonesian [id]
	//! author : Mohammad Satrio Utomo : https://github.com/tyok
	//! reference: http://id.wikisource.org/wiki/Pedoman_Umum_Ejaan_Bahasa_Indonesia_yang_Disempurnakan

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var id = moment.defineLocale('id', {
	        months : 'Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember'.split('_'),
	        monthsShort : 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nov_Des'.split('_'),
	        weekdays : 'Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu'.split('_'),
	        weekdaysShort : 'Min_Sen_Sel_Rab_Kam_Jum_Sab'.split('_'),
	        weekdaysMin : 'Mg_Sn_Sl_Rb_Km_Jm_Sb'.split('_'),
	        longDateFormat : {
	            LT : 'HH.mm',
	            LTS : 'HH.mm.ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY [pukul] HH.mm',
	            LLLL : 'dddd, D MMMM YYYY [pukul] HH.mm'
	        },
	        meridiemParse: /pagi|siang|sore|malam/,
	        meridiemHour : function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'pagi') {
	                return hour;
	            } else if (meridiem === 'siang') {
	                return hour >= 11 ? hour : hour + 12;
	            } else if (meridiem === 'sore' || meridiem === 'malam') {
	                return hour + 12;
	            }
	        },
	        meridiem : function (hours, minutes, isLower) {
	            if (hours < 11) {
	                return 'pagi';
	            } else if (hours < 15) {
	                return 'siang';
	            } else if (hours < 19) {
	                return 'sore';
	            } else {
	                return 'malam';
	            }
	        },
	        calendar : {
	            sameDay : '[Hari ini pukul] LT',
	            nextDay : '[Besok pukul] LT',
	            nextWeek : 'dddd [pukul] LT',
	            lastDay : '[Kemarin pukul] LT',
	            lastWeek : 'dddd [lalu pukul] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'dalam %s',
	            past : '%s yang lalu',
	            s : 'beberapa detik',
	            m : 'semenit',
	            mm : '%d menit',
	            h : 'sejam',
	            hh : '%d jam',
	            d : 'sehari',
	            dd : '%d hari',
	            M : 'sebulan',
	            MM : '%d bulan',
	            y : 'setahun',
	            yy : '%d tahun'
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return id;

	}));

/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Icelandic [is]
	//! author : Hinrik Örn Sigurðsson : https://github.com/hinrik

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    function plural(n) {
	        if (n % 100 === 11) {
	            return true;
	        } else if (n % 10 === 1) {
	            return false;
	        }
	        return true;
	    }
	    function translate(number, withoutSuffix, key, isFuture) {
	        var result = number + ' ';
	        switch (key) {
	            case 's':
	                return withoutSuffix || isFuture ? 'nokkrar sekúndur' : 'nokkrum sekúndum';
	            case 'm':
	                return withoutSuffix ? 'mínúta' : 'mínútu';
	            case 'mm':
	                if (plural(number)) {
	                    return result + (withoutSuffix || isFuture ? 'mínútur' : 'mínútum');
	                } else if (withoutSuffix) {
	                    return result + 'mínúta';
	                }
	                return result + 'mínútu';
	            case 'hh':
	                if (plural(number)) {
	                    return result + (withoutSuffix || isFuture ? 'klukkustundir' : 'klukkustundum');
	                }
	                return result + 'klukkustund';
	            case 'd':
	                if (withoutSuffix) {
	                    return 'dagur';
	                }
	                return isFuture ? 'dag' : 'degi';
	            case 'dd':
	                if (plural(number)) {
	                    if (withoutSuffix) {
	                        return result + 'dagar';
	                    }
	                    return result + (isFuture ? 'daga' : 'dögum');
	                } else if (withoutSuffix) {
	                    return result + 'dagur';
	                }
	                return result + (isFuture ? 'dag' : 'degi');
	            case 'M':
	                if (withoutSuffix) {
	                    return 'mánuður';
	                }
	                return isFuture ? 'mánuð' : 'mánuði';
	            case 'MM':
	                if (plural(number)) {
	                    if (withoutSuffix) {
	                        return result + 'mánuðir';
	                    }
	                    return result + (isFuture ? 'mánuði' : 'mánuðum');
	                } else if (withoutSuffix) {
	                    return result + 'mánuður';
	                }
	                return result + (isFuture ? 'mánuð' : 'mánuði');
	            case 'y':
	                return withoutSuffix || isFuture ? 'ár' : 'ári';
	            case 'yy':
	                if (plural(number)) {
	                    return result + (withoutSuffix || isFuture ? 'ár' : 'árum');
	                }
	                return result + (withoutSuffix || isFuture ? 'ár' : 'ári');
	        }
	    }

	    var is = moment.defineLocale('is', {
	        months : 'janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember'.split('_'),
	        monthsShort : 'jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des'.split('_'),
	        weekdays : 'sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur'.split('_'),
	        weekdaysShort : 'sun_mán_þri_mið_fim_fös_lau'.split('_'),
	        weekdaysMin : 'Su_Má_Þr_Mi_Fi_Fö_La'.split('_'),
	        longDateFormat : {
	            LT : 'H:mm',
	            LTS : 'H:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D. MMMM YYYY',
	            LLL : 'D. MMMM YYYY [kl.] H:mm',
	            LLLL : 'dddd, D. MMMM YYYY [kl.] H:mm'
	        },
	        calendar : {
	            sameDay : '[í dag kl.] LT',
	            nextDay : '[á morgun kl.] LT',
	            nextWeek : 'dddd [kl.] LT',
	            lastDay : '[í gær kl.] LT',
	            lastWeek : '[síðasta] dddd [kl.] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'eftir %s',
	            past : 'fyrir %s síðan',
	            s : translate,
	            m : translate,
	            mm : translate,
	            h : 'klukkustund',
	            hh : translate,
	            d : translate,
	            dd : translate,
	            M : translate,
	            MM : translate,
	            y : translate,
	            yy : translate
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return is;

	}));

/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Italian [it]
	//! author : Lorenzo : https://github.com/aliem
	//! author: Mattia Larentis: https://github.com/nostalgiaz

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var it = moment.defineLocale('it', {
	        months : 'gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre'.split('_'),
	        monthsShort : 'gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic'.split('_'),
	        weekdays : 'Domenica_Lunedì_Martedì_Mercoledì_Giovedì_Venerdì_Sabato'.split('_'),
	        weekdaysShort : 'Dom_Lun_Mar_Mer_Gio_Ven_Sab'.split('_'),
	        weekdaysMin : 'Do_Lu_Ma_Me_Gi_Ve_Sa'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[Oggi alle] LT',
	            nextDay: '[Domani alle] LT',
	            nextWeek: 'dddd [alle] LT',
	            lastDay: '[Ieri alle] LT',
	            lastWeek: function () {
	                switch (this.day()) {
	                    case 0:
	                        return '[la scorsa] dddd [alle] LT';
	                    default:
	                        return '[lo scorso] dddd [alle] LT';
	                }
	            },
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : function (s) {
	                return ((/^[0-9].+$/).test(s) ? 'tra' : 'in') + ' ' + s;
	            },
	            past : '%s fa',
	            s : 'alcuni secondi',
	            m : 'un minuto',
	            mm : '%d minuti',
	            h : 'un\'ora',
	            hh : '%d ore',
	            d : 'un giorno',
	            dd : '%d giorni',
	            M : 'un mese',
	            MM : '%d mesi',
	            y : 'un anno',
	            yy : '%d anni'
	        },
	        ordinalParse : /\d{1,2}º/,
	        ordinal: '%dº',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return it;

	}));

/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Japanese [ja]
	//! author : LI Long : https://github.com/baryon

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var ja = moment.defineLocale('ja', {
	        months : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
	        monthsShort : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
	        weekdays : '日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日'.split('_'),
	        weekdaysShort : '日_月_火_水_木_金_土'.split('_'),
	        weekdaysMin : '日_月_火_水_木_金_土'.split('_'),
	        longDateFormat : {
	            LT : 'Ah時m分',
	            LTS : 'Ah時m分s秒',
	            L : 'YYYY/MM/DD',
	            LL : 'YYYY年M月D日',
	            LLL : 'YYYY年M月D日Ah時m分',
	            LLLL : 'YYYY年M月D日Ah時m分 dddd'
	        },
	        meridiemParse: /午前|午後/i,
	        isPM : function (input) {
	            return input === '午後';
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 12) {
	                return '午前';
	            } else {
	                return '午後';
	            }
	        },
	        calendar : {
	            sameDay : '[今日] LT',
	            nextDay : '[明日] LT',
	            nextWeek : '[来週]dddd LT',
	            lastDay : '[昨日] LT',
	            lastWeek : '[前週]dddd LT',
	            sameElse : 'L'
	        },
	        ordinalParse : /\d{1,2}日/,
	        ordinal : function (number, period) {
	            switch (period) {
	                case 'd':
	                case 'D':
	                case 'DDD':
	                    return number + '日';
	                default:
	                    return number;
	            }
	        },
	        relativeTime : {
	            future : '%s後',
	            past : '%s前',
	            s : '数秒',
	            m : '1分',
	            mm : '%d分',
	            h : '1時間',
	            hh : '%d時間',
	            d : '1日',
	            dd : '%d日',
	            M : '1ヶ月',
	            MM : '%dヶ月',
	            y : '1年',
	            yy : '%d年'
	        }
	    });

	    return ja;

	}));

/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Japanese [jv]
	//! author : Rony Lantip : https://github.com/lantip
	//! reference: http://jv.wikipedia.org/wiki/Basa_Jawa

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var jv = moment.defineLocale('jv', {
	        months : 'Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_Nopember_Desember'.split('_'),
	        monthsShort : 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nop_Des'.split('_'),
	        weekdays : 'Minggu_Senen_Seloso_Rebu_Kemis_Jemuwah_Septu'.split('_'),
	        weekdaysShort : 'Min_Sen_Sel_Reb_Kem_Jem_Sep'.split('_'),
	        weekdaysMin : 'Mg_Sn_Sl_Rb_Km_Jm_Sp'.split('_'),
	        longDateFormat : {
	            LT : 'HH.mm',
	            LTS : 'HH.mm.ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY [pukul] HH.mm',
	            LLLL : 'dddd, D MMMM YYYY [pukul] HH.mm'
	        },
	        meridiemParse: /enjing|siyang|sonten|ndalu/,
	        meridiemHour : function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'enjing') {
	                return hour;
	            } else if (meridiem === 'siyang') {
	                return hour >= 11 ? hour : hour + 12;
	            } else if (meridiem === 'sonten' || meridiem === 'ndalu') {
	                return hour + 12;
	            }
	        },
	        meridiem : function (hours, minutes, isLower) {
	            if (hours < 11) {
	                return 'enjing';
	            } else if (hours < 15) {
	                return 'siyang';
	            } else if (hours < 19) {
	                return 'sonten';
	            } else {
	                return 'ndalu';
	            }
	        },
	        calendar : {
	            sameDay : '[Dinten puniko pukul] LT',
	            nextDay : '[Mbenjang pukul] LT',
	            nextWeek : 'dddd [pukul] LT',
	            lastDay : '[Kala wingi pukul] LT',
	            lastWeek : 'dddd [kepengker pukul] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'wonten ing %s',
	            past : '%s ingkang kepengker',
	            s : 'sawetawis detik',
	            m : 'setunggal menit',
	            mm : '%d menit',
	            h : 'setunggal jam',
	            hh : '%d jam',
	            d : 'sedinten',
	            dd : '%d dinten',
	            M : 'sewulan',
	            MM : '%d wulan',
	            y : 'setaun',
	            yy : '%d taun'
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return jv;

	}));

/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Georgian [ka]
	//! author : Irakli Janiashvili : https://github.com/irakli-janiashvili

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var ka = moment.defineLocale('ka', {
	        months : {
	            standalone: 'იანვარი_თებერვალი_მარტი_აპრილი_მაისი_ივნისი_ივლისი_აგვისტო_სექტემბერი_ოქტომბერი_ნოემბერი_დეკემბერი'.split('_'),
	            format: 'იანვარს_თებერვალს_მარტს_აპრილის_მაისს_ივნისს_ივლისს_აგვისტს_სექტემბერს_ოქტომბერს_ნოემბერს_დეკემბერს'.split('_')
	        },
	        monthsShort : 'იან_თებ_მარ_აპრ_მაი_ივნ_ივლ_აგვ_სექ_ოქტ_ნოე_დეკ'.split('_'),
	        weekdays : {
	            standalone: 'კვირა_ორშაბათი_სამშაბათი_ოთხშაბათი_ხუთშაბათი_პარასკევი_შაბათი'.split('_'),
	            format: 'კვირას_ორშაბათს_სამშაბათს_ოთხშაბათს_ხუთშაბათს_პარასკევს_შაბათს'.split('_'),
	            isFormat: /(წინა|შემდეგ)/
	        },
	        weekdaysShort : 'კვი_ორშ_სამ_ოთხ_ხუთ_პარ_შაბ'.split('_'),
	        weekdaysMin : 'კვ_ორ_სა_ოთ_ხუ_პა_შა'.split('_'),
	        longDateFormat : {
	            LT : 'h:mm A',
	            LTS : 'h:mm:ss A',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY h:mm A',
	            LLLL : 'dddd, D MMMM YYYY h:mm A'
	        },
	        calendar : {
	            sameDay : '[დღეს] LT[-ზე]',
	            nextDay : '[ხვალ] LT[-ზე]',
	            lastDay : '[გუშინ] LT[-ზე]',
	            nextWeek : '[შემდეგ] dddd LT[-ზე]',
	            lastWeek : '[წინა] dddd LT-ზე',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : function (s) {
	                return (/(წამი|წუთი|საათი|წელი)/).test(s) ?
	                    s.replace(/ი$/, 'ში') :
	                    s + 'ში';
	            },
	            past : function (s) {
	                if ((/(წამი|წუთი|საათი|დღე|თვე)/).test(s)) {
	                    return s.replace(/(ი|ე)$/, 'ის წინ');
	                }
	                if ((/წელი/).test(s)) {
	                    return s.replace(/წელი$/, 'წლის წინ');
	                }
	            },
	            s : 'რამდენიმე წამი',
	            m : 'წუთი',
	            mm : '%d წუთი',
	            h : 'საათი',
	            hh : '%d საათი',
	            d : 'დღე',
	            dd : '%d დღე',
	            M : 'თვე',
	            MM : '%d თვე',
	            y : 'წელი',
	            yy : '%d წელი'
	        },
	        ordinalParse: /0|1-ლი|მე-\d{1,2}|\d{1,2}-ე/,
	        ordinal : function (number) {
	            if (number === 0) {
	                return number;
	            }
	            if (number === 1) {
	                return number + '-ლი';
	            }
	            if ((number < 20) || (number <= 100 && (number % 20 === 0)) || (number % 100 === 0)) {
	                return 'მე-' + number;
	            }
	            return number + '-ე';
	        },
	        week : {
	            dow : 1,
	            doy : 7
	        }
	    });

	    return ka;

	}));

/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Kazakh [kk]
	//! authors : Nurlan Rakhimzhanov : https://github.com/nurlan

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var suffixes = {
	        0: '-ші',
	        1: '-ші',
	        2: '-ші',
	        3: '-ші',
	        4: '-ші',
	        5: '-ші',
	        6: '-шы',
	        7: '-ші',
	        8: '-ші',
	        9: '-шы',
	        10: '-шы',
	        20: '-шы',
	        30: '-шы',
	        40: '-шы',
	        50: '-ші',
	        60: '-шы',
	        70: '-ші',
	        80: '-ші',
	        90: '-шы',
	        100: '-ші'
	    };

	    var kk = moment.defineLocale('kk', {
	        months : 'қаңтар_ақпан_наурыз_сәуір_мамыр_маусым_шілде_тамыз_қыркүйек_қазан_қараша_желтоқсан'.split('_'),
	        monthsShort : 'қаң_ақп_нау_сәу_мам_мау_шіл_там_қыр_қаз_қар_жел'.split('_'),
	        weekdays : 'жексенбі_дүйсенбі_сейсенбі_сәрсенбі_бейсенбі_жұма_сенбі'.split('_'),
	        weekdaysShort : 'жек_дүй_сей_сәр_бей_жұм_сен'.split('_'),
	        weekdaysMin : 'жк_дй_сй_ср_бй_жм_сн'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay : '[Бүгін сағат] LT',
	            nextDay : '[Ертең сағат] LT',
	            nextWeek : 'dddd [сағат] LT',
	            lastDay : '[Кеше сағат] LT',
	            lastWeek : '[Өткен аптаның] dddd [сағат] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s ішінде',
	            past : '%s бұрын',
	            s : 'бірнеше секунд',
	            m : 'бір минут',
	            mm : '%d минут',
	            h : 'бір сағат',
	            hh : '%d сағат',
	            d : 'бір күн',
	            dd : '%d күн',
	            M : 'бір ай',
	            MM : '%d ай',
	            y : 'бір жыл',
	            yy : '%d жыл'
	        },
	        ordinalParse: /\d{1,2}-(ші|шы)/,
	        ordinal : function (number) {
	            var a = number % 10,
	                b = number >= 100 ? 100 : null;
	            return number + (suffixes[number] || suffixes[a] || suffixes[b]);
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return kk;

	}));

/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Cambodian [km]
	//! author : Kruy Vanna : https://github.com/kruyvanna

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var km = moment.defineLocale('km', {
	        months: 'មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ'.split('_'),
	        monthsShort: 'មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ'.split('_'),
	        weekdays: 'អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍'.split('_'),
	        weekdaysShort: 'អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍'.split('_'),
	        weekdaysMin: 'អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar: {
	            sameDay: '[ថ្ងៃនេះ ម៉ោង] LT',
	            nextDay: '[ស្អែក ម៉ោង] LT',
	            nextWeek: 'dddd [ម៉ោង] LT',
	            lastDay: '[ម្សិលមិញ ម៉ោង] LT',
	            lastWeek: 'dddd [សប្តាហ៍មុន] [ម៉ោង] LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: '%sទៀត',
	            past: '%sមុន',
	            s: 'ប៉ុន្មានវិនាទី',
	            m: 'មួយនាទី',
	            mm: '%d នាទី',
	            h: 'មួយម៉ោង',
	            hh: '%d ម៉ោង',
	            d: 'មួយថ្ងៃ',
	            dd: '%d ថ្ងៃ',
	            M: 'មួយខែ',
	            MM: '%d ខែ',
	            y: 'មួយឆ្នាំ',
	            yy: '%d ឆ្នាំ'
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4 // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return km;

	}));

/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Korean [ko]
	//! author : Kyungwook, Park : https://github.com/kyungw00k
	//! author : Jeeeyul Lee <jeeeyul@gmail.com>

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var ko = moment.defineLocale('ko', {
	        months : '1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월'.split('_'),
	        monthsShort : '1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월'.split('_'),
	        weekdays : '일요일_월요일_화요일_수요일_목요일_금요일_토요일'.split('_'),
	        weekdaysShort : '일_월_화_수_목_금_토'.split('_'),
	        weekdaysMin : '일_월_화_수_목_금_토'.split('_'),
	        longDateFormat : {
	            LT : 'A h시 m분',
	            LTS : 'A h시 m분 s초',
	            L : 'YYYY.MM.DD',
	            LL : 'YYYY년 MMMM D일',
	            LLL : 'YYYY년 MMMM D일 A h시 m분',
	            LLLL : 'YYYY년 MMMM D일 dddd A h시 m분'
	        },
	        calendar : {
	            sameDay : '오늘 LT',
	            nextDay : '내일 LT',
	            nextWeek : 'dddd LT',
	            lastDay : '어제 LT',
	            lastWeek : '지난주 dddd LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s 후',
	            past : '%s 전',
	            s : '몇 초',
	            ss : '%d초',
	            m : '일분',
	            mm : '%d분',
	            h : '한 시간',
	            hh : '%d시간',
	            d : '하루',
	            dd : '%d일',
	            M : '한 달',
	            MM : '%d달',
	            y : '일 년',
	            yy : '%d년'
	        },
	        ordinalParse : /\d{1,2}일/,
	        ordinal : '%d일',
	        meridiemParse : /오전|오후/,
	        isPM : function (token) {
	            return token === '오후';
	        },
	        meridiem : function (hour, minute, isUpper) {
	            return hour < 12 ? '오전' : '오후';
	        }
	    });

	    return ko;

	}));

/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Kyrgyz [ky]
	//! author : Chyngyz Arystan uulu : https://github.com/chyngyz

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';



	    var suffixes = {
	        0: '-чү',
	        1: '-чи',
	        2: '-чи',
	        3: '-чү',
	        4: '-чү',
	        5: '-чи',
	        6: '-чы',
	        7: '-чи',
	        8: '-чи',
	        9: '-чу',
	        10: '-чу',
	        20: '-чы',
	        30: '-чу',
	        40: '-чы',
	        50: '-чү',
	        60: '-чы',
	        70: '-чи',
	        80: '-чи',
	        90: '-чу',
	        100: '-чү'
	    };

	    var ky = moment.defineLocale('ky', {
	        months : 'январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь'.split('_'),
	        monthsShort : 'янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек'.split('_'),
	        weekdays : 'Жекшемби_Дүйшөмбү_Шейшемби_Шаршемби_Бейшемби_Жума_Ишемби'.split('_'),
	        weekdaysShort : 'Жек_Дүй_Шей_Шар_Бей_Жум_Ише'.split('_'),
	        weekdaysMin : 'Жк_Дй_Шй_Шр_Бй_Жм_Иш'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay : '[Бүгүн саат] LT',
	            nextDay : '[Эртең саат] LT',
	            nextWeek : 'dddd [саат] LT',
	            lastDay : '[Кече саат] LT',
	            lastWeek : '[Өткен аптанын] dddd [күнү] [саат] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s ичинде',
	            past : '%s мурун',
	            s : 'бирнече секунд',
	            m : 'бир мүнөт',
	            mm : '%d мүнөт',
	            h : 'бир саат',
	            hh : '%d саат',
	            d : 'бир күн',
	            dd : '%d күн',
	            M : 'бир ай',
	            MM : '%d ай',
	            y : 'бир жыл',
	            yy : '%d жыл'
	        },
	        ordinalParse: /\d{1,2}-(чи|чы|чү|чу)/,
	        ordinal : function (number) {
	            var a = number % 10,
	                b = number >= 100 ? 100 : null;
	            return number + (suffixes[number] || suffixes[a] || suffixes[b]);
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return ky;

	}));

/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Luxembourgish [lb]
	//! author : mweimerskirch : https://github.com/mweimerskirch
	//! author : David Raison : https://github.com/kwisatz

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    function processRelativeTime(number, withoutSuffix, key, isFuture) {
	        var format = {
	            'm': ['eng Minutt', 'enger Minutt'],
	            'h': ['eng Stonn', 'enger Stonn'],
	            'd': ['een Dag', 'engem Dag'],
	            'M': ['ee Mount', 'engem Mount'],
	            'y': ['ee Joer', 'engem Joer']
	        };
	        return withoutSuffix ? format[key][0] : format[key][1];
	    }
	    function processFutureTime(string) {
	        var number = string.substr(0, string.indexOf(' '));
	        if (eifelerRegelAppliesToNumber(number)) {
	            return 'a ' + string;
	        }
	        return 'an ' + string;
	    }
	    function processPastTime(string) {
	        var number = string.substr(0, string.indexOf(' '));
	        if (eifelerRegelAppliesToNumber(number)) {
	            return 'viru ' + string;
	        }
	        return 'virun ' + string;
	    }
	    /**
	     * Returns true if the word before the given number loses the '-n' ending.
	     * e.g. 'an 10 Deeg' but 'a 5 Deeg'
	     *
	     * @param number {integer}
	     * @returns {boolean}
	     */
	    function eifelerRegelAppliesToNumber(number) {
	        number = parseInt(number, 10);
	        if (isNaN(number)) {
	            return false;
	        }
	        if (number < 0) {
	            // Negative Number --> always true
	            return true;
	        } else if (number < 10) {
	            // Only 1 digit
	            if (4 <= number && number <= 7) {
	                return true;
	            }
	            return false;
	        } else if (number < 100) {
	            // 2 digits
	            var lastDigit = number % 10, firstDigit = number / 10;
	            if (lastDigit === 0) {
	                return eifelerRegelAppliesToNumber(firstDigit);
	            }
	            return eifelerRegelAppliesToNumber(lastDigit);
	        } else if (number < 10000) {
	            // 3 or 4 digits --> recursively check first digit
	            while (number >= 10) {
	                number = number / 10;
	            }
	            return eifelerRegelAppliesToNumber(number);
	        } else {
	            // Anything larger than 4 digits: recursively check first n-3 digits
	            number = number / 1000;
	            return eifelerRegelAppliesToNumber(number);
	        }
	    }

	    var lb = moment.defineLocale('lb', {
	        months: 'Januar_Februar_Mäerz_Abrëll_Mee_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
	        monthsShort: 'Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split('_'),
	        monthsParseExact : true,
	        weekdays: 'Sonndeg_Méindeg_Dënschdeg_Mëttwoch_Donneschdeg_Freideg_Samschdeg'.split('_'),
	        weekdaysShort: 'So._Mé._Dë._Më._Do._Fr._Sa.'.split('_'),
	        weekdaysMin: 'So_Mé_Dë_Më_Do_Fr_Sa'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat: {
	            LT: 'H:mm [Auer]',
	            LTS: 'H:mm:ss [Auer]',
	            L: 'DD.MM.YYYY',
	            LL: 'D. MMMM YYYY',
	            LLL: 'D. MMMM YYYY H:mm [Auer]',
	            LLLL: 'dddd, D. MMMM YYYY H:mm [Auer]'
	        },
	        calendar: {
	            sameDay: '[Haut um] LT',
	            sameElse: 'L',
	            nextDay: '[Muer um] LT',
	            nextWeek: 'dddd [um] LT',
	            lastDay: '[Gëschter um] LT',
	            lastWeek: function () {
	                // Different date string for 'Dënschdeg' (Tuesday) and 'Donneschdeg' (Thursday) due to phonological rule
	                switch (this.day()) {
	                    case 2:
	                    case 4:
	                        return '[Leschten] dddd [um] LT';
	                    default:
	                        return '[Leschte] dddd [um] LT';
	                }
	            }
	        },
	        relativeTime : {
	            future : processFutureTime,
	            past : processPastTime,
	            s : 'e puer Sekonnen',
	            m : processRelativeTime,
	            mm : '%d Minutten',
	            h : processRelativeTime,
	            hh : '%d Stonnen',
	            d : processRelativeTime,
	            dd : '%d Deeg',
	            M : processRelativeTime,
	            MM : '%d Méint',
	            y : processRelativeTime,
	            yy : '%d Joer'
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal: '%d.',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return lb;

	}));

/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Lao [lo]
	//! author : Ryan Hart : https://github.com/ryanhart2

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var lo = moment.defineLocale('lo', {
	        months : 'ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ'.split('_'),
	        monthsShort : 'ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ'.split('_'),
	        weekdays : 'ອາທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ'.split('_'),
	        weekdaysShort : 'ທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ'.split('_'),
	        weekdaysMin : 'ທ_ຈ_ອຄ_ພ_ພຫ_ສກ_ສ'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'ວັນdddd D MMMM YYYY HH:mm'
	        },
	        meridiemParse: /ຕອນເຊົ້າ|ຕອນແລງ/,
	        isPM: function (input) {
	            return input === 'ຕອນແລງ';
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 12) {
	                return 'ຕອນເຊົ້າ';
	            } else {
	                return 'ຕອນແລງ';
	            }
	        },
	        calendar : {
	            sameDay : '[ມື້ນີ້ເວລາ] LT',
	            nextDay : '[ມື້ອື່ນເວລາ] LT',
	            nextWeek : '[ວັນ]dddd[ໜ້າເວລາ] LT',
	            lastDay : '[ມື້ວານນີ້ເວລາ] LT',
	            lastWeek : '[ວັນ]dddd[ແລ້ວນີ້ເວລາ] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'ອີກ %s',
	            past : '%sຜ່ານມາ',
	            s : 'ບໍ່ເທົ່າໃດວິນາທີ',
	            m : '1 ນາທີ',
	            mm : '%d ນາທີ',
	            h : '1 ຊົ່ວໂມງ',
	            hh : '%d ຊົ່ວໂມງ',
	            d : '1 ມື້',
	            dd : '%d ມື້',
	            M : '1 ເດືອນ',
	            MM : '%d ເດືອນ',
	            y : '1 ປີ',
	            yy : '%d ປີ'
	        },
	        ordinalParse: /(ທີ່)\d{1,2}/,
	        ordinal : function (number) {
	            return 'ທີ່' + number;
	        }
	    });

	    return lo;

	}));

/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Lithuanian [lt]
	//! author : Mindaugas Mozūras : https://github.com/mmozuras

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var units = {
	        'm' : 'minutė_minutės_minutę',
	        'mm': 'minutės_minučių_minutes',
	        'h' : 'valanda_valandos_valandą',
	        'hh': 'valandos_valandų_valandas',
	        'd' : 'diena_dienos_dieną',
	        'dd': 'dienos_dienų_dienas',
	        'M' : 'mėnuo_mėnesio_mėnesį',
	        'MM': 'mėnesiai_mėnesių_mėnesius',
	        'y' : 'metai_metų_metus',
	        'yy': 'metai_metų_metus'
	    };
	    function translateSeconds(number, withoutSuffix, key, isFuture) {
	        if (withoutSuffix) {
	            return 'kelios sekundės';
	        } else {
	            return isFuture ? 'kelių sekundžių' : 'kelias sekundes';
	        }
	    }
	    function translateSingular(number, withoutSuffix, key, isFuture) {
	        return withoutSuffix ? forms(key)[0] : (isFuture ? forms(key)[1] : forms(key)[2]);
	    }
	    function special(number) {
	        return number % 10 === 0 || (number > 10 && number < 20);
	    }
	    function forms(key) {
	        return units[key].split('_');
	    }
	    function translate(number, withoutSuffix, key, isFuture) {
	        var result = number + ' ';
	        if (number === 1) {
	            return result + translateSingular(number, withoutSuffix, key[0], isFuture);
	        } else if (withoutSuffix) {
	            return result + (special(number) ? forms(key)[1] : forms(key)[0]);
	        } else {
	            if (isFuture) {
	                return result + forms(key)[1];
	            } else {
	                return result + (special(number) ? forms(key)[1] : forms(key)[2]);
	            }
	        }
	    }
	    var lt = moment.defineLocale('lt', {
	        months : {
	            format: 'sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio'.split('_'),
	            standalone: 'sausis_vasaris_kovas_balandis_gegužė_birželis_liepa_rugpjūtis_rugsėjis_spalis_lapkritis_gruodis'.split('_'),
	            isFormat: /D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?|MMMM?(\[[^\[\]]*\]|\s+)+D[oD]?/
	        },
	        monthsShort : 'sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd'.split('_'),
	        weekdays : {
	            format: 'sekmadienį_pirmadienį_antradienį_trečiadienį_ketvirtadienį_penktadienį_šeštadienį'.split('_'),
	            standalone: 'sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis'.split('_'),
	            isFormat: /dddd HH:mm/
	        },
	        weekdaysShort : 'Sek_Pir_Ant_Tre_Ket_Pen_Šeš'.split('_'),
	        weekdaysMin : 'S_P_A_T_K_Pn_Š'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'YYYY-MM-DD',
	            LL : 'YYYY [m.] MMMM D [d.]',
	            LLL : 'YYYY [m.] MMMM D [d.], HH:mm [val.]',
	            LLLL : 'YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]',
	            l : 'YYYY-MM-DD',
	            ll : 'YYYY [m.] MMMM D [d.]',
	            lll : 'YYYY [m.] MMMM D [d.], HH:mm [val.]',
	            llll : 'YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]'
	        },
	        calendar : {
	            sameDay : '[Šiandien] LT',
	            nextDay : '[Rytoj] LT',
	            nextWeek : 'dddd LT',
	            lastDay : '[Vakar] LT',
	            lastWeek : '[Praėjusį] dddd LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'po %s',
	            past : 'prieš %s',
	            s : translateSeconds,
	            m : translateSingular,
	            mm : translate,
	            h : translateSingular,
	            hh : translate,
	            d : translateSingular,
	            dd : translate,
	            M : translateSingular,
	            MM : translate,
	            y : translateSingular,
	            yy : translate
	        },
	        ordinalParse: /\d{1,2}-oji/,
	        ordinal : function (number) {
	            return number + '-oji';
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return lt;

	}));

/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Latvian [lv]
	//! author : Kristaps Karlsons : https://github.com/skakri
	//! author : Jānis Elmeris : https://github.com/JanisE

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var units = {
	        'm': 'minūtes_minūtēm_minūte_minūtes'.split('_'),
	        'mm': 'minūtes_minūtēm_minūte_minūtes'.split('_'),
	        'h': 'stundas_stundām_stunda_stundas'.split('_'),
	        'hh': 'stundas_stundām_stunda_stundas'.split('_'),
	        'd': 'dienas_dienām_diena_dienas'.split('_'),
	        'dd': 'dienas_dienām_diena_dienas'.split('_'),
	        'M': 'mēneša_mēnešiem_mēnesis_mēneši'.split('_'),
	        'MM': 'mēneša_mēnešiem_mēnesis_mēneši'.split('_'),
	        'y': 'gada_gadiem_gads_gadi'.split('_'),
	        'yy': 'gada_gadiem_gads_gadi'.split('_')
	    };
	    /**
	     * @param withoutSuffix boolean true = a length of time; false = before/after a period of time.
	     */
	    function format(forms, number, withoutSuffix) {
	        if (withoutSuffix) {
	            // E.g. "21 minūte", "3 minūtes".
	            return number % 10 === 1 && number % 100 !== 11 ? forms[2] : forms[3];
	        } else {
	            // E.g. "21 minūtes" as in "pēc 21 minūtes".
	            // E.g. "3 minūtēm" as in "pēc 3 minūtēm".
	            return number % 10 === 1 && number % 100 !== 11 ? forms[0] : forms[1];
	        }
	    }
	    function relativeTimeWithPlural(number, withoutSuffix, key) {
	        return number + ' ' + format(units[key], number, withoutSuffix);
	    }
	    function relativeTimeWithSingular(number, withoutSuffix, key) {
	        return format(units[key], number, withoutSuffix);
	    }
	    function relativeSeconds(number, withoutSuffix) {
	        return withoutSuffix ? 'dažas sekundes' : 'dažām sekundēm';
	    }

	    var lv = moment.defineLocale('lv', {
	        months : 'janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris'.split('_'),
	        monthsShort : 'jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec'.split('_'),
	        weekdays : 'svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena'.split('_'),
	        weekdaysShort : 'Sv_P_O_T_C_Pk_S'.split('_'),
	        weekdaysMin : 'Sv_P_O_T_C_Pk_S'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD.MM.YYYY.',
	            LL : 'YYYY. [gada] D. MMMM',
	            LLL : 'YYYY. [gada] D. MMMM, HH:mm',
	            LLLL : 'YYYY. [gada] D. MMMM, dddd, HH:mm'
	        },
	        calendar : {
	            sameDay : '[Šodien pulksten] LT',
	            nextDay : '[Rīt pulksten] LT',
	            nextWeek : 'dddd [pulksten] LT',
	            lastDay : '[Vakar pulksten] LT',
	            lastWeek : '[Pagājušā] dddd [pulksten] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'pēc %s',
	            past : 'pirms %s',
	            s : relativeSeconds,
	            m : relativeTimeWithSingular,
	            mm : relativeTimeWithPlural,
	            h : relativeTimeWithSingular,
	            hh : relativeTimeWithPlural,
	            d : relativeTimeWithSingular,
	            dd : relativeTimeWithPlural,
	            M : relativeTimeWithSingular,
	            MM : relativeTimeWithPlural,
	            y : relativeTimeWithSingular,
	            yy : relativeTimeWithPlural
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return lv;

	}));

/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Montenegrin [me]
	//! author : Miodrag Nikač <miodrag@restartit.me> : https://github.com/miodragnikac

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var translator = {
	        words: { //Different grammatical cases
	            m: ['jedan minut', 'jednog minuta'],
	            mm: ['minut', 'minuta', 'minuta'],
	            h: ['jedan sat', 'jednog sata'],
	            hh: ['sat', 'sata', 'sati'],
	            dd: ['dan', 'dana', 'dana'],
	            MM: ['mjesec', 'mjeseca', 'mjeseci'],
	            yy: ['godina', 'godine', 'godina']
	        },
	        correctGrammaticalCase: function (number, wordKey) {
	            return number === 1 ? wordKey[0] : (number >= 2 && number <= 4 ? wordKey[1] : wordKey[2]);
	        },
	        translate: function (number, withoutSuffix, key) {
	            var wordKey = translator.words[key];
	            if (key.length === 1) {
	                return withoutSuffix ? wordKey[0] : wordKey[1];
	            } else {
	                return number + ' ' + translator.correctGrammaticalCase(number, wordKey);
	            }
	        }
	    };

	    var me = moment.defineLocale('me', {
	        months: 'januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar'.split('_'),
	        monthsShort: 'jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.'.split('_'),
	        monthsParseExact : true,
	        weekdays: 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split('_'),
	        weekdaysShort: 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
	        weekdaysMin: 'ne_po_ut_sr_če_pe_su'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat: {
	            LT: 'H:mm',
	            LTS : 'H:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D. MMMM YYYY',
	            LLL: 'D. MMMM YYYY H:mm',
	            LLLL: 'dddd, D. MMMM YYYY H:mm'
	        },
	        calendar: {
	            sameDay: '[danas u] LT',
	            nextDay: '[sjutra u] LT',

	            nextWeek: function () {
	                switch (this.day()) {
	                    case 0:
	                        return '[u] [nedjelju] [u] LT';
	                    case 3:
	                        return '[u] [srijedu] [u] LT';
	                    case 6:
	                        return '[u] [subotu] [u] LT';
	                    case 1:
	                    case 2:
	                    case 4:
	                    case 5:
	                        return '[u] dddd [u] LT';
	                }
	            },
	            lastDay  : '[juče u] LT',
	            lastWeek : function () {
	                var lastWeekDays = [
	                    '[prošle] [nedjelje] [u] LT',
	                    '[prošlog] [ponedjeljka] [u] LT',
	                    '[prošlog] [utorka] [u] LT',
	                    '[prošle] [srijede] [u] LT',
	                    '[prošlog] [četvrtka] [u] LT',
	                    '[prošlog] [petka] [u] LT',
	                    '[prošle] [subote] [u] LT'
	                ];
	                return lastWeekDays[this.day()];
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'za %s',
	            past   : 'prije %s',
	            s      : 'nekoliko sekundi',
	            m      : translator.translate,
	            mm     : translator.translate,
	            h      : translator.translate,
	            hh     : translator.translate,
	            d      : 'dan',
	            dd     : translator.translate,
	            M      : 'mjesec',
	            MM     : translator.translate,
	            y      : 'godinu',
	            yy     : translator.translate
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return me;

	}));

/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Maori [mi]
	//! author : John Corrigan <robbiecloset@gmail.com> : https://github.com/johnideal

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var mi = moment.defineLocale('mi', {
	        months: 'Kohi-tāte_Hui-tanguru_Poutū-te-rangi_Paenga-whāwhā_Haratua_Pipiri_Hōngoingoi_Here-turi-kōkā_Mahuru_Whiringa-ā-nuku_Whiringa-ā-rangi_Hakihea'.split('_'),
	        monthsShort: 'Kohi_Hui_Pou_Pae_Hara_Pipi_Hōngoi_Here_Mahu_Whi-nu_Whi-ra_Haki'.split('_'),
	        monthsRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
	        monthsStrictRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
	        monthsShortRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
	        monthsShortStrictRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,2}/i,
	        weekdays: 'Rātapu_Mane_Tūrei_Wenerei_Tāite_Paraire_Hātarei'.split('_'),
	        weekdaysShort: 'Ta_Ma_Tū_We_Tāi_Pa_Hā'.split('_'),
	        weekdaysMin: 'Ta_Ma_Tū_We_Tāi_Pa_Hā'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY [i] HH:mm',
	            LLLL: 'dddd, D MMMM YYYY [i] HH:mm'
	        },
	        calendar: {
	            sameDay: '[i teie mahana, i] LT',
	            nextDay: '[apopo i] LT',
	            nextWeek: 'dddd [i] LT',
	            lastDay: '[inanahi i] LT',
	            lastWeek: 'dddd [whakamutunga i] LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'i roto i %s',
	            past: '%s i mua',
	            s: 'te hēkona ruarua',
	            m: 'he meneti',
	            mm: '%d meneti',
	            h: 'te haora',
	            hh: '%d haora',
	            d: 'he ra',
	            dd: '%d ra',
	            M: 'he marama',
	            MM: '%d marama',
	            y: 'he tau',
	            yy: '%d tau'
	        },
	        ordinalParse: /\d{1,2}º/,
	        ordinal: '%dº',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return mi;

	}));

/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Macedonian [mk]
	//! author : Borislav Mickov : https://github.com/B0k0

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var mk = moment.defineLocale('mk', {
	        months : 'јануари_февруари_март_април_мај_јуни_јули_август_септември_октомври_ноември_декември'.split('_'),
	        monthsShort : 'јан_фев_мар_апр_мај_јун_јул_авг_сеп_окт_ное_дек'.split('_'),
	        weekdays : 'недела_понеделник_вторник_среда_четврток_петок_сабота'.split('_'),
	        weekdaysShort : 'нед_пон_вто_сре_чет_пет_саб'.split('_'),
	        weekdaysMin : 'нe_пo_вт_ср_че_пе_сa'.split('_'),
	        longDateFormat : {
	            LT : 'H:mm',
	            LTS : 'H:mm:ss',
	            L : 'D.MM.YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY H:mm',
	            LLLL : 'dddd, D MMMM YYYY H:mm'
	        },
	        calendar : {
	            sameDay : '[Денес во] LT',
	            nextDay : '[Утре во] LT',
	            nextWeek : '[Во] dddd [во] LT',
	            lastDay : '[Вчера во] LT',
	            lastWeek : function () {
	                switch (this.day()) {
	                    case 0:
	                    case 3:
	                    case 6:
	                        return '[Изминатата] dddd [во] LT';
	                    case 1:
	                    case 2:
	                    case 4:
	                    case 5:
	                        return '[Изминатиот] dddd [во] LT';
	                }
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'после %s',
	            past : 'пред %s',
	            s : 'неколку секунди',
	            m : 'минута',
	            mm : '%d минути',
	            h : 'час',
	            hh : '%d часа',
	            d : 'ден',
	            dd : '%d дена',
	            M : 'месец',
	            MM : '%d месеци',
	            y : 'година',
	            yy : '%d години'
	        },
	        ordinalParse: /\d{1,2}-(ев|ен|ти|ви|ри|ми)/,
	        ordinal : function (number) {
	            var lastDigit = number % 10,
	                last2Digits = number % 100;
	            if (number === 0) {
	                return number + '-ев';
	            } else if (last2Digits === 0) {
	                return number + '-ен';
	            } else if (last2Digits > 10 && last2Digits < 20) {
	                return number + '-ти';
	            } else if (lastDigit === 1) {
	                return number + '-ви';
	            } else if (lastDigit === 2) {
	                return number + '-ри';
	            } else if (lastDigit === 7 || lastDigit === 8) {
	                return number + '-ми';
	            } else {
	                return number + '-ти';
	            }
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return mk;

	}));

/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Malayalam [ml]
	//! author : Floyd Pink : https://github.com/floydpink

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var ml = moment.defineLocale('ml', {
	        months : 'ജനുവരി_ഫെബ്രുവരി_മാർച്ച്_ഏപ്രിൽ_മേയ്_ജൂൺ_ജൂലൈ_ഓഗസ്റ്റ്_സെപ്റ്റംബർ_ഒക്ടോബർ_നവംബർ_ഡിസംബർ'.split('_'),
	        monthsShort : 'ജനു._ഫെബ്രു._മാർ._ഏപ്രി._മേയ്_ജൂൺ_ജൂലൈ._ഓഗ._സെപ്റ്റ._ഒക്ടോ._നവം._ഡിസം.'.split('_'),
	        monthsParseExact : true,
	        weekdays : 'ഞായറാഴ്ച_തിങ്കളാഴ്ച_ചൊവ്വാഴ്ച_ബുധനാഴ്ച_വ്യാഴാഴ്ച_വെള്ളിയാഴ്ച_ശനിയാഴ്ച'.split('_'),
	        weekdaysShort : 'ഞായർ_തിങ്കൾ_ചൊവ്വ_ബുധൻ_വ്യാഴം_വെള്ളി_ശനി'.split('_'),
	        weekdaysMin : 'ഞാ_തി_ചൊ_ബു_വ്യാ_വെ_ശ'.split('_'),
	        longDateFormat : {
	            LT : 'A h:mm -നു',
	            LTS : 'A h:mm:ss -നു',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY, A h:mm -നു',
	            LLLL : 'dddd, D MMMM YYYY, A h:mm -നു'
	        },
	        calendar : {
	            sameDay : '[ഇന്ന്] LT',
	            nextDay : '[നാളെ] LT',
	            nextWeek : 'dddd, LT',
	            lastDay : '[ഇന്നലെ] LT',
	            lastWeek : '[കഴിഞ്ഞ] dddd, LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s കഴിഞ്ഞ്',
	            past : '%s മുൻപ്',
	            s : 'അൽപ നിമിഷങ്ങൾ',
	            m : 'ഒരു മിനിറ്റ്',
	            mm : '%d മിനിറ്റ്',
	            h : 'ഒരു മണിക്കൂർ',
	            hh : '%d മണിക്കൂർ',
	            d : 'ഒരു ദിവസം',
	            dd : '%d ദിവസം',
	            M : 'ഒരു മാസം',
	            MM : '%d മാസം',
	            y : 'ഒരു വർഷം',
	            yy : '%d വർഷം'
	        },
	        meridiemParse: /രാത്രി|രാവിലെ|ഉച്ച കഴിഞ്ഞ്|വൈകുന്നേരം|രാത്രി/i,
	        meridiemHour : function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if ((meridiem === 'രാത്രി' && hour >= 4) ||
	                    meridiem === 'ഉച്ച കഴിഞ്ഞ്' ||
	                    meridiem === 'വൈകുന്നേരം') {
	                return hour + 12;
	            } else {
	                return hour;
	            }
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'രാത്രി';
	            } else if (hour < 12) {
	                return 'രാവിലെ';
	            } else if (hour < 17) {
	                return 'ഉച്ച കഴിഞ്ഞ്';
	            } else if (hour < 20) {
	                return 'വൈകുന്നേരം';
	            } else {
	                return 'രാത്രി';
	            }
	        }
	    });

	    return ml;

	}));

/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Marathi [mr]
	//! author : Harshad Kale : https://github.com/kalehv
	//! author : Vivek Athalye : https://github.com/vnathalye

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var symbolMap = {
	        '1': '१',
	        '2': '२',
	        '3': '३',
	        '4': '४',
	        '5': '५',
	        '6': '६',
	        '7': '७',
	        '8': '८',
	        '9': '९',
	        '0': '०'
	    },
	    numberMap = {
	        '१': '1',
	        '२': '2',
	        '३': '3',
	        '४': '4',
	        '५': '5',
	        '६': '6',
	        '७': '7',
	        '८': '8',
	        '९': '9',
	        '०': '0'
	    };

	    function relativeTimeMr(number, withoutSuffix, string, isFuture)
	    {
	        var output = '';
	        if (withoutSuffix) {
	            switch (string) {
	                case 's': output = 'काही सेकंद'; break;
	                case 'm': output = 'एक मिनिट'; break;
	                case 'mm': output = '%d मिनिटे'; break;
	                case 'h': output = 'एक तास'; break;
	                case 'hh': output = '%d तास'; break;
	                case 'd': output = 'एक दिवस'; break;
	                case 'dd': output = '%d दिवस'; break;
	                case 'M': output = 'एक महिना'; break;
	                case 'MM': output = '%d महिने'; break;
	                case 'y': output = 'एक वर्ष'; break;
	                case 'yy': output = '%d वर्षे'; break;
	            }
	        }
	        else {
	            switch (string) {
	                case 's': output = 'काही सेकंदां'; break;
	                case 'm': output = 'एका मिनिटा'; break;
	                case 'mm': output = '%d मिनिटां'; break;
	                case 'h': output = 'एका तासा'; break;
	                case 'hh': output = '%d तासां'; break;
	                case 'd': output = 'एका दिवसा'; break;
	                case 'dd': output = '%d दिवसां'; break;
	                case 'M': output = 'एका महिन्या'; break;
	                case 'MM': output = '%d महिन्यां'; break;
	                case 'y': output = 'एका वर्षा'; break;
	                case 'yy': output = '%d वर्षां'; break;
	            }
	        }
	        return output.replace(/%d/i, number);
	    }

	    var mr = moment.defineLocale('mr', {
	        months : 'जानेवारी_फेब्रुवारी_मार्च_एप्रिल_मे_जून_जुलै_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर'.split('_'),
	        monthsShort: 'जाने._फेब्रु._मार्च._एप्रि._मे._जून._जुलै._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.'.split('_'),
	        monthsParseExact : true,
	        weekdays : 'रविवार_सोमवार_मंगळवार_बुधवार_गुरूवार_शुक्रवार_शनिवार'.split('_'),
	        weekdaysShort : 'रवि_सोम_मंगळ_बुध_गुरू_शुक्र_शनि'.split('_'),
	        weekdaysMin : 'र_सो_मं_बु_गु_शु_श'.split('_'),
	        longDateFormat : {
	            LT : 'A h:mm वाजता',
	            LTS : 'A h:mm:ss वाजता',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY, A h:mm वाजता',
	            LLLL : 'dddd, D MMMM YYYY, A h:mm वाजता'
	        },
	        calendar : {
	            sameDay : '[आज] LT',
	            nextDay : '[उद्या] LT',
	            nextWeek : 'dddd, LT',
	            lastDay : '[काल] LT',
	            lastWeek: '[मागील] dddd, LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future: '%sमध्ये',
	            past: '%sपूर्वी',
	            s: relativeTimeMr,
	            m: relativeTimeMr,
	            mm: relativeTimeMr,
	            h: relativeTimeMr,
	            hh: relativeTimeMr,
	            d: relativeTimeMr,
	            dd: relativeTimeMr,
	            M: relativeTimeMr,
	            MM: relativeTimeMr,
	            y: relativeTimeMr,
	            yy: relativeTimeMr
	        },
	        preparse: function (string) {
	            return string.replace(/[१२३४५६७८९०]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        meridiemParse: /रात्री|सकाळी|दुपारी|सायंकाळी/,
	        meridiemHour : function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'रात्री') {
	                return hour < 4 ? hour : hour + 12;
	            } else if (meridiem === 'सकाळी') {
	                return hour;
	            } else if (meridiem === 'दुपारी') {
	                return hour >= 10 ? hour : hour + 12;
	            } else if (meridiem === 'सायंकाळी') {
	                return hour + 12;
	            }
	        },
	        meridiem: function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'रात्री';
	            } else if (hour < 10) {
	                return 'सकाळी';
	            } else if (hour < 17) {
	                return 'दुपारी';
	            } else if (hour < 20) {
	                return 'सायंकाळी';
	            } else {
	                return 'रात्री';
	            }
	        },
	        week : {
	            dow : 0, // Sunday is the first day of the week.
	            doy : 6  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return mr;

	}));

/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Malay [ms]
	//! author : Weldan Jamili : https://github.com/weldan

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var ms = moment.defineLocale('ms', {
	        months : 'Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember'.split('_'),
	        monthsShort : 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis'.split('_'),
	        weekdays : 'Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu'.split('_'),
	        weekdaysShort : 'Ahd_Isn_Sel_Rab_Kha_Jum_Sab'.split('_'),
	        weekdaysMin : 'Ah_Is_Sl_Rb_Km_Jm_Sb'.split('_'),
	        longDateFormat : {
	            LT : 'HH.mm',
	            LTS : 'HH.mm.ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY [pukul] HH.mm',
	            LLLL : 'dddd, D MMMM YYYY [pukul] HH.mm'
	        },
	        meridiemParse: /pagi|tengahari|petang|malam/,
	        meridiemHour: function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'pagi') {
	                return hour;
	            } else if (meridiem === 'tengahari') {
	                return hour >= 11 ? hour : hour + 12;
	            } else if (meridiem === 'petang' || meridiem === 'malam') {
	                return hour + 12;
	            }
	        },
	        meridiem : function (hours, minutes, isLower) {
	            if (hours < 11) {
	                return 'pagi';
	            } else if (hours < 15) {
	                return 'tengahari';
	            } else if (hours < 19) {
	                return 'petang';
	            } else {
	                return 'malam';
	            }
	        },
	        calendar : {
	            sameDay : '[Hari ini pukul] LT',
	            nextDay : '[Esok pukul] LT',
	            nextWeek : 'dddd [pukul] LT',
	            lastDay : '[Kelmarin pukul] LT',
	            lastWeek : 'dddd [lepas pukul] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'dalam %s',
	            past : '%s yang lepas',
	            s : 'beberapa saat',
	            m : 'seminit',
	            mm : '%d minit',
	            h : 'sejam',
	            hh : '%d jam',
	            d : 'sehari',
	            dd : '%d hari',
	            M : 'sebulan',
	            MM : '%d bulan',
	            y : 'setahun',
	            yy : '%d tahun'
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return ms;

	}));

/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Malay [ms-my]
	//! note : DEPRECATED, the correct one is [ms]
	//! author : Weldan Jamili : https://github.com/weldan

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var ms_my = moment.defineLocale('ms-my', {
	        months : 'Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember'.split('_'),
	        monthsShort : 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis'.split('_'),
	        weekdays : 'Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu'.split('_'),
	        weekdaysShort : 'Ahd_Isn_Sel_Rab_Kha_Jum_Sab'.split('_'),
	        weekdaysMin : 'Ah_Is_Sl_Rb_Km_Jm_Sb'.split('_'),
	        longDateFormat : {
	            LT : 'HH.mm',
	            LTS : 'HH.mm.ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY [pukul] HH.mm',
	            LLLL : 'dddd, D MMMM YYYY [pukul] HH.mm'
	        },
	        meridiemParse: /pagi|tengahari|petang|malam/,
	        meridiemHour: function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'pagi') {
	                return hour;
	            } else if (meridiem === 'tengahari') {
	                return hour >= 11 ? hour : hour + 12;
	            } else if (meridiem === 'petang' || meridiem === 'malam') {
	                return hour + 12;
	            }
	        },
	        meridiem : function (hours, minutes, isLower) {
	            if (hours < 11) {
	                return 'pagi';
	            } else if (hours < 15) {
	                return 'tengahari';
	            } else if (hours < 19) {
	                return 'petang';
	            } else {
	                return 'malam';
	            }
	        },
	        calendar : {
	            sameDay : '[Hari ini pukul] LT',
	            nextDay : '[Esok pukul] LT',
	            nextWeek : 'dddd [pukul] LT',
	            lastDay : '[Kelmarin pukul] LT',
	            lastWeek : 'dddd [lepas pukul] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'dalam %s',
	            past : '%s yang lepas',
	            s : 'beberapa saat',
	            m : 'seminit',
	            mm : '%d minit',
	            h : 'sejam',
	            hh : '%d jam',
	            d : 'sehari',
	            dd : '%d hari',
	            M : 'sebulan',
	            MM : '%d bulan',
	            y : 'setahun',
	            yy : '%d tahun'
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return ms_my;

	}));

/***/ },
/* 117 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Burmese [my]
	//! author : Squar team, mysquar.com
	//! author : David Rossellat : https://github.com/gholadr
	//! author : Tin Aung Lin : https://github.com/thanyawzinmin

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var symbolMap = {
	        '1': '၁',
	        '2': '၂',
	        '3': '၃',
	        '4': '၄',
	        '5': '၅',
	        '6': '၆',
	        '7': '၇',
	        '8': '၈',
	        '9': '၉',
	        '0': '၀'
	    }, numberMap = {
	        '၁': '1',
	        '၂': '2',
	        '၃': '3',
	        '၄': '4',
	        '၅': '5',
	        '၆': '6',
	        '၇': '7',
	        '၈': '8',
	        '၉': '9',
	        '၀': '0'
	    };

	    var my = moment.defineLocale('my', {
	        months: 'ဇန်နဝါရီ_ဖေဖော်ဝါရီ_မတ်_ဧပြီ_မေ_ဇွန်_ဇူလိုင်_သြဂုတ်_စက်တင်ဘာ_အောက်တိုဘာ_နိုဝင်ဘာ_ဒီဇင်ဘာ'.split('_'),
	        monthsShort: 'ဇန်_ဖေ_မတ်_ပြီ_မေ_ဇွန်_လိုင်_သြ_စက်_အောက်_နို_ဒီ'.split('_'),
	        weekdays: 'တနင်္ဂနွေ_တနင်္လာ_အင်္ဂါ_ဗုဒ္ဓဟူး_ကြာသပတေး_သောကြာ_စနေ'.split('_'),
	        weekdaysShort: 'နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ'.split('_'),
	        weekdaysMin: 'နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ'.split('_'),

	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd D MMMM YYYY HH:mm'
	        },
	        calendar: {
	            sameDay: '[ယနေ.] LT [မှာ]',
	            nextDay: '[မနက်ဖြန်] LT [မှာ]',
	            nextWeek: 'dddd LT [မှာ]',
	            lastDay: '[မနေ.က] LT [မှာ]',
	            lastWeek: '[ပြီးခဲ့သော] dddd LT [မှာ]',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'လာမည့် %s မှာ',
	            past: 'လွန်ခဲ့သော %s က',
	            s: 'စက္ကန်.အနည်းငယ်',
	            m: 'တစ်မိနစ်',
	            mm: '%d မိနစ်',
	            h: 'တစ်နာရီ',
	            hh: '%d နာရီ',
	            d: 'တစ်ရက်',
	            dd: '%d ရက်',
	            M: 'တစ်လ',
	            MM: '%d လ',
	            y: 'တစ်နှစ်',
	            yy: '%d နှစ်'
	        },
	        preparse: function (string) {
	            return string.replace(/[၁၂၃၄၅၆၇၈၉၀]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4 // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return my;

	}));

/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Norwegian Bokmål [nb]
	//! authors : Espen Hovlandsdal : https://github.com/rexxars
	//!           Sigurd Gartmann : https://github.com/sigurdga

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var nb = moment.defineLocale('nb', {
	        months : 'januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
	        monthsShort : 'jan._feb._mars_april_mai_juni_juli_aug._sep._okt._nov._des.'.split('_'),
	        monthsParseExact : true,
	        weekdays : 'søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag'.split('_'),
	        weekdaysShort : 'sø._ma._ti._on._to._fr._lø.'.split('_'),
	        weekdaysMin : 'sø_ma_ti_on_to_fr_lø'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D. MMMM YYYY',
	            LLL : 'D. MMMM YYYY [kl.] HH:mm',
	            LLLL : 'dddd D. MMMM YYYY [kl.] HH:mm'
	        },
	        calendar : {
	            sameDay: '[i dag kl.] LT',
	            nextDay: '[i morgen kl.] LT',
	            nextWeek: 'dddd [kl.] LT',
	            lastDay: '[i går kl.] LT',
	            lastWeek: '[forrige] dddd [kl.] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'om %s',
	            past : '%s siden',
	            s : 'noen sekunder',
	            m : 'ett minutt',
	            mm : '%d minutter',
	            h : 'en time',
	            hh : '%d timer',
	            d : 'en dag',
	            dd : '%d dager',
	            M : 'en måned',
	            MM : '%d måneder',
	            y : 'ett år',
	            yy : '%d år'
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return nb;

	}));

/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Nepalese [ne]
	//! author : suvash : https://github.com/suvash

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var symbolMap = {
	        '1': '१',
	        '2': '२',
	        '3': '३',
	        '4': '४',
	        '5': '५',
	        '6': '६',
	        '7': '७',
	        '8': '८',
	        '9': '९',
	        '0': '०'
	    },
	    numberMap = {
	        '१': '1',
	        '२': '2',
	        '३': '3',
	        '४': '4',
	        '५': '5',
	        '६': '6',
	        '७': '7',
	        '८': '8',
	        '९': '9',
	        '०': '0'
	    };

	    var ne = moment.defineLocale('ne', {
	        months : 'जनवरी_फेब्रुवरी_मार्च_अप्रिल_मई_जुन_जुलाई_अगष्ट_सेप्टेम्बर_अक्टोबर_नोभेम्बर_डिसेम्बर'.split('_'),
	        monthsShort : 'जन._फेब्रु._मार्च_अप्रि._मई_जुन_जुलाई._अग._सेप्ट._अक्टो._नोभे._डिसे.'.split('_'),
	        monthsParseExact : true,
	        weekdays : 'आइतबार_सोमबार_मङ्गलबार_बुधबार_बिहिबार_शुक्रबार_शनिबार'.split('_'),
	        weekdaysShort : 'आइत._सोम._मङ्गल._बुध._बिहि._शुक्र._शनि.'.split('_'),
	        weekdaysMin : 'आ._सो._मं._बु._बि._शु._श.'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'Aको h:mm बजे',
	            LTS : 'Aको h:mm:ss बजे',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY, Aको h:mm बजे',
	            LLLL : 'dddd, D MMMM YYYY, Aको h:mm बजे'
	        },
	        preparse: function (string) {
	            return string.replace(/[१२३४५६७८९०]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        meridiemParse: /राति|बिहान|दिउँसो|साँझ/,
	        meridiemHour : function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'राति') {
	                return hour < 4 ? hour : hour + 12;
	            } else if (meridiem === 'बिहान') {
	                return hour;
	            } else if (meridiem === 'दिउँसो') {
	                return hour >= 10 ? hour : hour + 12;
	            } else if (meridiem === 'साँझ') {
	                return hour + 12;
	            }
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 3) {
	                return 'राति';
	            } else if (hour < 12) {
	                return 'बिहान';
	            } else if (hour < 16) {
	                return 'दिउँसो';
	            } else if (hour < 20) {
	                return 'साँझ';
	            } else {
	                return 'राति';
	            }
	        },
	        calendar : {
	            sameDay : '[आज] LT',
	            nextDay : '[भोलि] LT',
	            nextWeek : '[आउँदो] dddd[,] LT',
	            lastDay : '[हिजो] LT',
	            lastWeek : '[गएको] dddd[,] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%sमा',
	            past : '%s अगाडि',
	            s : 'केही क्षण',
	            m : 'एक मिनेट',
	            mm : '%d मिनेट',
	            h : 'एक घण्टा',
	            hh : '%d घण्टा',
	            d : 'एक दिन',
	            dd : '%d दिन',
	            M : 'एक महिना',
	            MM : '%d महिना',
	            y : 'एक बर्ष',
	            yy : '%d बर्ष'
	        },
	        week : {
	            dow : 0, // Sunday is the first day of the week.
	            doy : 6  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return ne;

	}));

/***/ },
/* 120 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Dutch [nl]
	//! author : Joris Röling : https://github.com/jorisroling
	//! author : Jacob Middag : https://github.com/middagj

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var monthsShortWithDots = 'jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.'.split('_'),
	        monthsShortWithoutDots = 'jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec'.split('_');

	    var monthsParse = [/^jan/i, /^feb/i, /^maart|mrt.?$/i, /^apr/i, /^mei$/i, /^jun[i.]?$/i, /^jul[i.]?$/i, /^aug/i, /^sep/i, /^okt/i, /^nov/i, /^dec/i];
	    var monthsRegex = /^(januari|februari|maart|april|mei|april|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;

	    var nl = moment.defineLocale('nl', {
	        months : 'januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december'.split('_'),
	        monthsShort : function (m, format) {
	            if (/-MMM-/.test(format)) {
	                return monthsShortWithoutDots[m.month()];
	            } else {
	                return monthsShortWithDots[m.month()];
	            }
	        },

	        monthsRegex: monthsRegex,
	        monthsShortRegex: monthsRegex,
	        monthsStrictRegex: /^(januari|februari|maart|mei|ju[nl]i|april|augustus|september|oktober|november|december)/i,
	        monthsShortStrictRegex: /^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,

	        monthsParse : monthsParse,
	        longMonthsParse : monthsParse,
	        shortMonthsParse : monthsParse,

	        weekdays : 'zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag'.split('_'),
	        weekdaysShort : 'zo._ma._di._wo._do._vr._za.'.split('_'),
	        weekdaysMin : 'Zo_Ma_Di_Wo_Do_Vr_Za'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD-MM-YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[vandaag om] LT',
	            nextDay: '[morgen om] LT',
	            nextWeek: 'dddd [om] LT',
	            lastDay: '[gisteren om] LT',
	            lastWeek: '[afgelopen] dddd [om] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'over %s',
	            past : '%s geleden',
	            s : 'een paar seconden',
	            m : 'één minuut',
	            mm : '%d minuten',
	            h : 'één uur',
	            hh : '%d uur',
	            d : 'één dag',
	            dd : '%d dagen',
	            M : 'één maand',
	            MM : '%d maanden',
	            y : 'één jaar',
	            yy : '%d jaar'
	        },
	        ordinalParse: /\d{1,2}(ste|de)/,
	        ordinal : function (number) {
	            return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de');
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return nl;

	}));

/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Nynorsk [nn]
	//! author : https://github.com/mechuwind

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var nn = moment.defineLocale('nn', {
	        months : 'januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
	        monthsShort : 'jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_'),
	        weekdays : 'sundag_måndag_tysdag_onsdag_torsdag_fredag_laurdag'.split('_'),
	        weekdaysShort : 'sun_mån_tys_ons_tor_fre_lau'.split('_'),
	        weekdaysMin : 'su_må_ty_on_to_fr_lø'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D. MMMM YYYY',
	            LLL : 'D. MMMM YYYY [kl.] H:mm',
	            LLLL : 'dddd D. MMMM YYYY [kl.] HH:mm'
	        },
	        calendar : {
	            sameDay: '[I dag klokka] LT',
	            nextDay: '[I morgon klokka] LT',
	            nextWeek: 'dddd [klokka] LT',
	            lastDay: '[I går klokka] LT',
	            lastWeek: '[Føregåande] dddd [klokka] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'om %s',
	            past : '%s sidan',
	            s : 'nokre sekund',
	            m : 'eit minutt',
	            mm : '%d minutt',
	            h : 'ein time',
	            hh : '%d timar',
	            d : 'ein dag',
	            dd : '%d dagar',
	            M : 'ein månad',
	            MM : '%d månader',
	            y : 'eit år',
	            yy : '%d år'
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return nn;

	}));

/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Punjabi (India) [pa-in]
	//! author : Harpreet Singh : https://github.com/harpreetkhalsagtbit

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var symbolMap = {
	        '1': '੧',
	        '2': '੨',
	        '3': '੩',
	        '4': '੪',
	        '5': '੫',
	        '6': '੬',
	        '7': '੭',
	        '8': '੮',
	        '9': '੯',
	        '0': '੦'
	    },
	    numberMap = {
	        '੧': '1',
	        '੨': '2',
	        '੩': '3',
	        '੪': '4',
	        '੫': '5',
	        '੬': '6',
	        '੭': '7',
	        '੮': '8',
	        '੯': '9',
	        '੦': '0'
	    };

	    var pa_in = moment.defineLocale('pa-in', {
	        // There are months name as per Nanakshahi Calender but they are not used as rigidly in modern Punjabi.
	        months : 'ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ'.split('_'),
	        monthsShort : 'ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ'.split('_'),
	        weekdays : 'ਐਤਵਾਰ_ਸੋਮਵਾਰ_ਮੰਗਲਵਾਰ_ਬੁਧਵਾਰ_ਵੀਰਵਾਰ_ਸ਼ੁੱਕਰਵਾਰ_ਸ਼ਨੀਚਰਵਾਰ'.split('_'),
	        weekdaysShort : 'ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ'.split('_'),
	        weekdaysMin : 'ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ'.split('_'),
	        longDateFormat : {
	            LT : 'A h:mm ਵਜੇ',
	            LTS : 'A h:mm:ss ਵਜੇ',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY, A h:mm ਵਜੇ',
	            LLLL : 'dddd, D MMMM YYYY, A h:mm ਵਜੇ'
	        },
	        calendar : {
	            sameDay : '[ਅਜ] LT',
	            nextDay : '[ਕਲ] LT',
	            nextWeek : 'dddd, LT',
	            lastDay : '[ਕਲ] LT',
	            lastWeek : '[ਪਿਛਲੇ] dddd, LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s ਵਿੱਚ',
	            past : '%s ਪਿਛਲੇ',
	            s : 'ਕੁਝ ਸਕਿੰਟ',
	            m : 'ਇਕ ਮਿੰਟ',
	            mm : '%d ਮਿੰਟ',
	            h : 'ਇੱਕ ਘੰਟਾ',
	            hh : '%d ਘੰਟੇ',
	            d : 'ਇੱਕ ਦਿਨ',
	            dd : '%d ਦਿਨ',
	            M : 'ਇੱਕ ਮਹੀਨਾ',
	            MM : '%d ਮਹੀਨੇ',
	            y : 'ਇੱਕ ਸਾਲ',
	            yy : '%d ਸਾਲ'
	        },
	        preparse: function (string) {
	            return string.replace(/[੧੨੩੪੫੬੭੮੯੦]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        // Punjabi notation for meridiems are quite fuzzy in practice. While there exists
	        // a rigid notion of a 'Pahar' it is not used as rigidly in modern Punjabi.
	        meridiemParse: /ਰਾਤ|ਸਵੇਰ|ਦੁਪਹਿਰ|ਸ਼ਾਮ/,
	        meridiemHour : function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'ਰਾਤ') {
	                return hour < 4 ? hour : hour + 12;
	            } else if (meridiem === 'ਸਵੇਰ') {
	                return hour;
	            } else if (meridiem === 'ਦੁਪਹਿਰ') {
	                return hour >= 10 ? hour : hour + 12;
	            } else if (meridiem === 'ਸ਼ਾਮ') {
	                return hour + 12;
	            }
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'ਰਾਤ';
	            } else if (hour < 10) {
	                return 'ਸਵੇਰ';
	            } else if (hour < 17) {
	                return 'ਦੁਪਹਿਰ';
	            } else if (hour < 20) {
	                return 'ਸ਼ਾਮ';
	            } else {
	                return 'ਰਾਤ';
	            }
	        },
	        week : {
	            dow : 0, // Sunday is the first day of the week.
	            doy : 6  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return pa_in;

	}));

/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Polish [pl]
	//! author : Rafal Hirsz : https://github.com/evoL

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var monthsNominative = 'styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień'.split('_'),
	        monthsSubjective = 'stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia'.split('_');
	    function plural(n) {
	        return (n % 10 < 5) && (n % 10 > 1) && ((~~(n / 10) % 10) !== 1);
	    }
	    function translate(number, withoutSuffix, key) {
	        var result = number + ' ';
	        switch (key) {
	            case 'm':
	                return withoutSuffix ? 'minuta' : 'minutę';
	            case 'mm':
	                return result + (plural(number) ? 'minuty' : 'minut');
	            case 'h':
	                return withoutSuffix  ? 'godzina'  : 'godzinę';
	            case 'hh':
	                return result + (plural(number) ? 'godziny' : 'godzin');
	            case 'MM':
	                return result + (plural(number) ? 'miesiące' : 'miesięcy');
	            case 'yy':
	                return result + (plural(number) ? 'lata' : 'lat');
	        }
	    }

	    var pl = moment.defineLocale('pl', {
	        months : function (momentToFormat, format) {
	            if (format === '') {
	                // Hack: if format empty we know this is used to generate
	                // RegExp by moment. Give then back both valid forms of months
	                // in RegExp ready format.
	                return '(' + monthsSubjective[momentToFormat.month()] + '|' + monthsNominative[momentToFormat.month()] + ')';
	            } else if (/D MMMM/.test(format)) {
	                return monthsSubjective[momentToFormat.month()];
	            } else {
	                return monthsNominative[momentToFormat.month()];
	            }
	        },
	        monthsShort : 'sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru'.split('_'),
	        weekdays : 'niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota'.split('_'),
	        weekdaysShort : 'nie_pon_wt_śr_czw_pt_sb'.split('_'),
	        weekdaysMin : 'Nd_Pn_Wt_Śr_Cz_Pt_So'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[Dziś o] LT',
	            nextDay: '[Jutro o] LT',
	            nextWeek: '[W] dddd [o] LT',
	            lastDay: '[Wczoraj o] LT',
	            lastWeek: function () {
	                switch (this.day()) {
	                    case 0:
	                        return '[W zeszłą niedzielę o] LT';
	                    case 3:
	                        return '[W zeszłą środę o] LT';
	                    case 6:
	                        return '[W zeszłą sobotę o] LT';
	                    default:
	                        return '[W zeszły] dddd [o] LT';
	                }
	            },
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'za %s',
	            past : '%s temu',
	            s : 'kilka sekund',
	            m : translate,
	            mm : translate,
	            h : translate,
	            hh : translate,
	            d : '1 dzień',
	            dd : '%d dni',
	            M : 'miesiąc',
	            MM : translate,
	            y : 'rok',
	            yy : translate
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return pl;

	}));

/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Portuguese [pt]
	//! author : Jefferson : https://github.com/jalex79

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var pt = moment.defineLocale('pt', {
	        months : 'Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro'.split('_'),
	        monthsShort : 'Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez'.split('_'),
	        weekdays : 'Domingo_Segunda-Feira_Terça-Feira_Quarta-Feira_Quinta-Feira_Sexta-Feira_Sábado'.split('_'),
	        weekdaysShort : 'Dom_Seg_Ter_Qua_Qui_Sex_Sáb'.split('_'),
	        weekdaysMin : 'Dom_2ª_3ª_4ª_5ª_6ª_Sáb'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D [de] MMMM [de] YYYY',
	            LLL : 'D [de] MMMM [de] YYYY HH:mm',
	            LLLL : 'dddd, D [de] MMMM [de] YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[Hoje às] LT',
	            nextDay: '[Amanhã às] LT',
	            nextWeek: 'dddd [às] LT',
	            lastDay: '[Ontem às] LT',
	            lastWeek: function () {
	                return (this.day() === 0 || this.day() === 6) ?
	                    '[Último] dddd [às] LT' : // Saturday + Sunday
	                    '[Última] dddd [às] LT'; // Monday - Friday
	            },
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'em %s',
	            past : 'há %s',
	            s : 'segundos',
	            m : 'um minuto',
	            mm : '%d minutos',
	            h : 'uma hora',
	            hh : '%d horas',
	            d : 'um dia',
	            dd : '%d dias',
	            M : 'um mês',
	            MM : '%d meses',
	            y : 'um ano',
	            yy : '%d anos'
	        },
	        ordinalParse: /\d{1,2}º/,
	        ordinal : '%dº',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return pt;

	}));

/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Portuguese (Brazil) [pt-br]
	//! author : Caio Ribeiro Pereira : https://github.com/caio-ribeiro-pereira

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var pt_br = moment.defineLocale('pt-br', {
	        months : 'Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro'.split('_'),
	        monthsShort : 'Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez'.split('_'),
	        weekdays : 'Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado'.split('_'),
	        weekdaysShort : 'Dom_Seg_Ter_Qua_Qui_Sex_Sáb'.split('_'),
	        weekdaysMin : 'Dom_2ª_3ª_4ª_5ª_6ª_Sáb'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D [de] MMMM [de] YYYY',
	            LLL : 'D [de] MMMM [de] YYYY [às] HH:mm',
	            LLLL : 'dddd, D [de] MMMM [de] YYYY [às] HH:mm'
	        },
	        calendar : {
	            sameDay: '[Hoje às] LT',
	            nextDay: '[Amanhã às] LT',
	            nextWeek: 'dddd [às] LT',
	            lastDay: '[Ontem às] LT',
	            lastWeek: function () {
	                return (this.day() === 0 || this.day() === 6) ?
	                    '[Último] dddd [às] LT' : // Saturday + Sunday
	                    '[Última] dddd [às] LT'; // Monday - Friday
	            },
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'em %s',
	            past : '%s atrás',
	            s : 'poucos segundos',
	            m : 'um minuto',
	            mm : '%d minutos',
	            h : 'uma hora',
	            hh : '%d horas',
	            d : 'um dia',
	            dd : '%d dias',
	            M : 'um mês',
	            MM : '%d meses',
	            y : 'um ano',
	            yy : '%d anos'
	        },
	        ordinalParse: /\d{1,2}º/,
	        ordinal : '%dº'
	    });

	    return pt_br;

	}));

/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Romanian [ro]
	//! author : Vlad Gurdiga : https://github.com/gurdiga
	//! author : Valentin Agachi : https://github.com/avaly

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    function relativeTimeWithPlural(number, withoutSuffix, key) {
	        var format = {
	                'mm': 'minute',
	                'hh': 'ore',
	                'dd': 'zile',
	                'MM': 'luni',
	                'yy': 'ani'
	            },
	            separator = ' ';
	        if (number % 100 >= 20 || (number >= 100 && number % 100 === 0)) {
	            separator = ' de ';
	        }
	        return number + separator + format[key];
	    }

	    var ro = moment.defineLocale('ro', {
	        months : 'ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie'.split('_'),
	        monthsShort : 'ian._febr._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.'.split('_'),
	        monthsParseExact: true,
	        weekdays : 'duminică_luni_marți_miercuri_joi_vineri_sâmbătă'.split('_'),
	        weekdaysShort : 'Dum_Lun_Mar_Mie_Joi_Vin_Sâm'.split('_'),
	        weekdaysMin : 'Du_Lu_Ma_Mi_Jo_Vi_Sâ'.split('_'),
	        longDateFormat : {
	            LT : 'H:mm',
	            LTS : 'H:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY H:mm',
	            LLLL : 'dddd, D MMMM YYYY H:mm'
	        },
	        calendar : {
	            sameDay: '[azi la] LT',
	            nextDay: '[mâine la] LT',
	            nextWeek: 'dddd [la] LT',
	            lastDay: '[ieri la] LT',
	            lastWeek: '[fosta] dddd [la] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'peste %s',
	            past : '%s în urmă',
	            s : 'câteva secunde',
	            m : 'un minut',
	            mm : relativeTimeWithPlural,
	            h : 'o oră',
	            hh : relativeTimeWithPlural,
	            d : 'o zi',
	            dd : relativeTimeWithPlural,
	            M : 'o lună',
	            MM : relativeTimeWithPlural,
	            y : 'un an',
	            yy : relativeTimeWithPlural
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return ro;

	}));

/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Russian [ru]
	//! author : Viktorminator : https://github.com/Viktorminator
	//! Author : Menelion Elensúle : https://github.com/Oire
	//! author : Коренберг Марк : https://github.com/socketpair

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    function plural(word, num) {
	        var forms = word.split('_');
	        return num % 10 === 1 && num % 100 !== 11 ? forms[0] : (num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2]);
	    }
	    function relativeTimeWithPlural(number, withoutSuffix, key) {
	        var format = {
	            'mm': withoutSuffix ? 'минута_минуты_минут' : 'минуту_минуты_минут',
	            'hh': 'час_часа_часов',
	            'dd': 'день_дня_дней',
	            'MM': 'месяц_месяца_месяцев',
	            'yy': 'год_года_лет'
	        };
	        if (key === 'm') {
	            return withoutSuffix ? 'минута' : 'минуту';
	        }
	        else {
	            return number + ' ' + plural(format[key], +number);
	        }
	    }
	    var monthsParse = [/^янв/i, /^фев/i, /^мар/i, /^апр/i, /^ма[йя]/i, /^июн/i, /^июл/i, /^авг/i, /^сен/i, /^окт/i, /^ноя/i, /^дек/i];

	    // http://new.gramota.ru/spravka/rules/139-prop : § 103
	    // Сокращения месяцев: http://new.gramota.ru/spravka/buro/search-answer?s=242637
	    // CLDR data:          http://www.unicode.org/cldr/charts/28/summary/ru.html#1753
	    var ru = moment.defineLocale('ru', {
	        months : {
	            format: 'января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря'.split('_'),
	            standalone: 'январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь'.split('_')
	        },
	        monthsShort : {
	            // по CLDR именно "июл." и "июн.", но какой смысл менять букву на точку ?
	            format: 'янв._февр._мар._апр._мая_июня_июля_авг._сент._окт._нояб._дек.'.split('_'),
	            standalone: 'янв._февр._март_апр._май_июнь_июль_авг._сент._окт._нояб._дек.'.split('_')
	        },
	        weekdays : {
	            standalone: 'воскресенье_понедельник_вторник_среда_четверг_пятница_суббота'.split('_'),
	            format: 'воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу'.split('_'),
	            isFormat: /\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?\] ?dddd/
	        },
	        weekdaysShort : 'вс_пн_вт_ср_чт_пт_сб'.split('_'),
	        weekdaysMin : 'вс_пн_вт_ср_чт_пт_сб'.split('_'),
	        monthsParse : monthsParse,
	        longMonthsParse : monthsParse,
	        shortMonthsParse : monthsParse,

	        // полные названия с падежами, по три буквы, для некоторых, по 4 буквы, сокращения с точкой и без точки
	        monthsRegex: /^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,

	        // копия предыдущего
	        monthsShortRegex: /^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,

	        // полные названия с падежами
	        monthsStrictRegex: /^(январ[яь]|феврал[яь]|марта?|апрел[яь]|ма[яй]|июн[яь]|июл[яь]|августа?|сентябр[яь]|октябр[яь]|ноябр[яь]|декабр[яь])/i,

	        // Выражение, которое соотвествует только сокращённым формам
	        monthsShortStrictRegex: /^(янв\.|февр?\.|мар[т.]|апр\.|ма[яй]|июн[ья.]|июл[ья.]|авг\.|сент?\.|окт\.|нояб?\.|дек\.)/i,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D MMMM YYYY г.',
	            LLL : 'D MMMM YYYY г., HH:mm',
	            LLLL : 'dddd, D MMMM YYYY г., HH:mm'
	        },
	        calendar : {
	            sameDay: '[Сегодня в] LT',
	            nextDay: '[Завтра в] LT',
	            lastDay: '[Вчера в] LT',
	            nextWeek: function (now) {
	                if (now.week() !== this.week()) {
	                    switch (this.day()) {
	                        case 0:
	                            return '[В следующее] dddd [в] LT';
	                        case 1:
	                        case 2:
	                        case 4:
	                            return '[В следующий] dddd [в] LT';
	                        case 3:
	                        case 5:
	                        case 6:
	                            return '[В следующую] dddd [в] LT';
	                    }
	                } else {
	                    if (this.day() === 2) {
	                        return '[Во] dddd [в] LT';
	                    } else {
	                        return '[В] dddd [в] LT';
	                    }
	                }
	            },
	            lastWeek: function (now) {
	                if (now.week() !== this.week()) {
	                    switch (this.day()) {
	                        case 0:
	                            return '[В прошлое] dddd [в] LT';
	                        case 1:
	                        case 2:
	                        case 4:
	                            return '[В прошлый] dddd [в] LT';
	                        case 3:
	                        case 5:
	                        case 6:
	                            return '[В прошлую] dddd [в] LT';
	                    }
	                } else {
	                    if (this.day() === 2) {
	                        return '[Во] dddd [в] LT';
	                    } else {
	                        return '[В] dddd [в] LT';
	                    }
	                }
	            },
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'через %s',
	            past : '%s назад',
	            s : 'несколько секунд',
	            m : relativeTimeWithPlural,
	            mm : relativeTimeWithPlural,
	            h : 'час',
	            hh : relativeTimeWithPlural,
	            d : 'день',
	            dd : relativeTimeWithPlural,
	            M : 'месяц',
	            MM : relativeTimeWithPlural,
	            y : 'год',
	            yy : relativeTimeWithPlural
	        },
	        meridiemParse: /ночи|утра|дня|вечера/i,
	        isPM : function (input) {
	            return /^(дня|вечера)$/.test(input);
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'ночи';
	            } else if (hour < 12) {
	                return 'утра';
	            } else if (hour < 17) {
	                return 'дня';
	            } else {
	                return 'вечера';
	            }
	        },
	        ordinalParse: /\d{1,2}-(й|го|я)/,
	        ordinal: function (number, period) {
	            switch (period) {
	                case 'M':
	                case 'd':
	                case 'DDD':
	                    return number + '-й';
	                case 'D':
	                    return number + '-го';
	                case 'w':
	                case 'W':
	                    return number + '-я';
	                default:
	                    return number;
	            }
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return ru;

	}));

/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Northern Sami [se]
	//! authors : Bård Rolstad Henriksen : https://github.com/karamell

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';



	    var se = moment.defineLocale('se', {
	        months : 'ođđajagemánnu_guovvamánnu_njukčamánnu_cuoŋománnu_miessemánnu_geassemánnu_suoidnemánnu_borgemánnu_čakčamánnu_golggotmánnu_skábmamánnu_juovlamánnu'.split('_'),
	        monthsShort : 'ođđj_guov_njuk_cuo_mies_geas_suoi_borg_čakč_golg_skáb_juov'.split('_'),
	        weekdays : 'sotnabeaivi_vuossárga_maŋŋebárga_gaskavahkku_duorastat_bearjadat_lávvardat'.split('_'),
	        weekdaysShort : 'sotn_vuos_maŋ_gask_duor_bear_láv'.split('_'),
	        weekdaysMin : 's_v_m_g_d_b_L'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'MMMM D. [b.] YYYY',
	            LLL : 'MMMM D. [b.] YYYY [ti.] HH:mm',
	            LLLL : 'dddd, MMMM D. [b.] YYYY [ti.] HH:mm'
	        },
	        calendar : {
	            sameDay: '[otne ti] LT',
	            nextDay: '[ihttin ti] LT',
	            nextWeek: 'dddd [ti] LT',
	            lastDay: '[ikte ti] LT',
	            lastWeek: '[ovddit] dddd [ti] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : '%s geažes',
	            past : 'maŋit %s',
	            s : 'moadde sekunddat',
	            m : 'okta minuhta',
	            mm : '%d minuhtat',
	            h : 'okta diimmu',
	            hh : '%d diimmut',
	            d : 'okta beaivi',
	            dd : '%d beaivvit',
	            M : 'okta mánnu',
	            MM : '%d mánut',
	            y : 'okta jahki',
	            yy : '%d jagit'
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return se;

	}));

/***/ },
/* 129 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Sinhalese [si]
	//! author : Sampath Sitinamaluwa : https://github.com/sampathsris

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    /*jshint -W100*/
	    var si = moment.defineLocale('si', {
	        months : 'ජනවාරි_පෙබරවාරි_මාර්තු_අප්‍රේල්_මැයි_ජූනි_ජූලි_අගෝස්තු_සැප්තැම්බර්_ඔක්තෝබර්_නොවැම්බර්_දෙසැම්බර්'.split('_'),
	        monthsShort : 'ජන_පෙබ_මාර්_අප්_මැයි_ජූනි_ජූලි_අගෝ_සැප්_ඔක්_නොවැ_දෙසැ'.split('_'),
	        weekdays : 'ඉරිදා_සඳුදා_අඟහරුවාදා_බදාදා_බ්‍රහස්පතින්දා_සිකුරාදා_සෙනසුරාදා'.split('_'),
	        weekdaysShort : 'ඉරි_සඳු_අඟ_බදා_බ්‍රහ_සිකු_සෙන'.split('_'),
	        weekdaysMin : 'ඉ_ස_අ_බ_බ්‍ර_සි_සෙ'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'a h:mm',
	            LTS : 'a h:mm:ss',
	            L : 'YYYY/MM/DD',
	            LL : 'YYYY MMMM D',
	            LLL : 'YYYY MMMM D, a h:mm',
	            LLLL : 'YYYY MMMM D [වැනි] dddd, a h:mm:ss'
	        },
	        calendar : {
	            sameDay : '[අද] LT[ට]',
	            nextDay : '[හෙට] LT[ට]',
	            nextWeek : 'dddd LT[ට]',
	            lastDay : '[ඊයේ] LT[ට]',
	            lastWeek : '[පසුගිය] dddd LT[ට]',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%sකින්',
	            past : '%sකට පෙර',
	            s : 'තත්පර කිහිපය',
	            m : 'මිනිත්තුව',
	            mm : 'මිනිත්තු %d',
	            h : 'පැය',
	            hh : 'පැය %d',
	            d : 'දිනය',
	            dd : 'දින %d',
	            M : 'මාසය',
	            MM : 'මාස %d',
	            y : 'වසර',
	            yy : 'වසර %d'
	        },
	        ordinalParse: /\d{1,2} වැනි/,
	        ordinal : function (number) {
	            return number + ' වැනි';
	        },
	        meridiemParse : /පෙර වරු|පස් වරු|පෙ.ව|ප.ව./,
	        isPM : function (input) {
	            return input === 'ප.ව.' || input === 'පස් වරු';
	        },
	        meridiem : function (hours, minutes, isLower) {
	            if (hours > 11) {
	                return isLower ? 'ප.ව.' : 'පස් වරු';
	            } else {
	                return isLower ? 'පෙ.ව.' : 'පෙර වරු';
	            }
	        }
	    });

	    return si;

	}));

/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Slovak [sk]
	//! author : Martin Minka : https://github.com/k2s
	//! based on work of petrbela : https://github.com/petrbela

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var months = 'január_február_marec_apríl_máj_jún_júl_august_september_október_november_december'.split('_'),
	        monthsShort = 'jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec'.split('_');
	    function plural(n) {
	        return (n > 1) && (n < 5);
	    }
	    function translate(number, withoutSuffix, key, isFuture) {
	        var result = number + ' ';
	        switch (key) {
	            case 's':  // a few seconds / in a few seconds / a few seconds ago
	                return (withoutSuffix || isFuture) ? 'pár sekúnd' : 'pár sekundami';
	            case 'm':  // a minute / in a minute / a minute ago
	                return withoutSuffix ? 'minúta' : (isFuture ? 'minútu' : 'minútou');
	            case 'mm': // 9 minutes / in 9 minutes / 9 minutes ago
	                if (withoutSuffix || isFuture) {
	                    return result + (plural(number) ? 'minúty' : 'minút');
	                } else {
	                    return result + 'minútami';
	                }
	                break;
	            case 'h':  // an hour / in an hour / an hour ago
	                return withoutSuffix ? 'hodina' : (isFuture ? 'hodinu' : 'hodinou');
	            case 'hh': // 9 hours / in 9 hours / 9 hours ago
	                if (withoutSuffix || isFuture) {
	                    return result + (plural(number) ? 'hodiny' : 'hodín');
	                } else {
	                    return result + 'hodinami';
	                }
	                break;
	            case 'd':  // a day / in a day / a day ago
	                return (withoutSuffix || isFuture) ? 'deň' : 'dňom';
	            case 'dd': // 9 days / in 9 days / 9 days ago
	                if (withoutSuffix || isFuture) {
	                    return result + (plural(number) ? 'dni' : 'dní');
	                } else {
	                    return result + 'dňami';
	                }
	                break;
	            case 'M':  // a month / in a month / a month ago
	                return (withoutSuffix || isFuture) ? 'mesiac' : 'mesiacom';
	            case 'MM': // 9 months / in 9 months / 9 months ago
	                if (withoutSuffix || isFuture) {
	                    return result + (plural(number) ? 'mesiace' : 'mesiacov');
	                } else {
	                    return result + 'mesiacmi';
	                }
	                break;
	            case 'y':  // a year / in a year / a year ago
	                return (withoutSuffix || isFuture) ? 'rok' : 'rokom';
	            case 'yy': // 9 years / in 9 years / 9 years ago
	                if (withoutSuffix || isFuture) {
	                    return result + (plural(number) ? 'roky' : 'rokov');
	                } else {
	                    return result + 'rokmi';
	                }
	                break;
	        }
	    }

	    var sk = moment.defineLocale('sk', {
	        months : months,
	        monthsShort : monthsShort,
	        weekdays : 'nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota'.split('_'),
	        weekdaysShort : 'ne_po_ut_st_št_pi_so'.split('_'),
	        weekdaysMin : 'ne_po_ut_st_št_pi_so'.split('_'),
	        longDateFormat : {
	            LT: 'H:mm',
	            LTS : 'H:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D. MMMM YYYY',
	            LLL : 'D. MMMM YYYY H:mm',
	            LLLL : 'dddd D. MMMM YYYY H:mm'
	        },
	        calendar : {
	            sameDay: '[dnes o] LT',
	            nextDay: '[zajtra o] LT',
	            nextWeek: function () {
	                switch (this.day()) {
	                    case 0:
	                        return '[v nedeľu o] LT';
	                    case 1:
	                    case 2:
	                        return '[v] dddd [o] LT';
	                    case 3:
	                        return '[v stredu o] LT';
	                    case 4:
	                        return '[vo štvrtok o] LT';
	                    case 5:
	                        return '[v piatok o] LT';
	                    case 6:
	                        return '[v sobotu o] LT';
	                }
	            },
	            lastDay: '[včera o] LT',
	            lastWeek: function () {
	                switch (this.day()) {
	                    case 0:
	                        return '[minulú nedeľu o] LT';
	                    case 1:
	                    case 2:
	                        return '[minulý] dddd [o] LT';
	                    case 3:
	                        return '[minulú stredu o] LT';
	                    case 4:
	                    case 5:
	                        return '[minulý] dddd [o] LT';
	                    case 6:
	                        return '[minulú sobotu o] LT';
	                }
	            },
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'za %s',
	            past : 'pred %s',
	            s : translate,
	            m : translate,
	            mm : translate,
	            h : translate,
	            hh : translate,
	            d : translate,
	            dd : translate,
	            M : translate,
	            MM : translate,
	            y : translate,
	            yy : translate
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return sk;

	}));

/***/ },
/* 131 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Slovenian [sl]
	//! author : Robert Sedovšek : https://github.com/sedovsek

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    function processRelativeTime(number, withoutSuffix, key, isFuture) {
	        var result = number + ' ';
	        switch (key) {
	            case 's':
	                return withoutSuffix || isFuture ? 'nekaj sekund' : 'nekaj sekundami';
	            case 'm':
	                return withoutSuffix ? 'ena minuta' : 'eno minuto';
	            case 'mm':
	                if (number === 1) {
	                    result += withoutSuffix ? 'minuta' : 'minuto';
	                } else if (number === 2) {
	                    result += withoutSuffix || isFuture ? 'minuti' : 'minutama';
	                } else if (number < 5) {
	                    result += withoutSuffix || isFuture ? 'minute' : 'minutami';
	                } else {
	                    result += withoutSuffix || isFuture ? 'minut' : 'minutami';
	                }
	                return result;
	            case 'h':
	                return withoutSuffix ? 'ena ura' : 'eno uro';
	            case 'hh':
	                if (number === 1) {
	                    result += withoutSuffix ? 'ura' : 'uro';
	                } else if (number === 2) {
	                    result += withoutSuffix || isFuture ? 'uri' : 'urama';
	                } else if (number < 5) {
	                    result += withoutSuffix || isFuture ? 'ure' : 'urami';
	                } else {
	                    result += withoutSuffix || isFuture ? 'ur' : 'urami';
	                }
	                return result;
	            case 'd':
	                return withoutSuffix || isFuture ? 'en dan' : 'enim dnem';
	            case 'dd':
	                if (number === 1) {
	                    result += withoutSuffix || isFuture ? 'dan' : 'dnem';
	                } else if (number === 2) {
	                    result += withoutSuffix || isFuture ? 'dni' : 'dnevoma';
	                } else {
	                    result += withoutSuffix || isFuture ? 'dni' : 'dnevi';
	                }
	                return result;
	            case 'M':
	                return withoutSuffix || isFuture ? 'en mesec' : 'enim mesecem';
	            case 'MM':
	                if (number === 1) {
	                    result += withoutSuffix || isFuture ? 'mesec' : 'mesecem';
	                } else if (number === 2) {
	                    result += withoutSuffix || isFuture ? 'meseca' : 'mesecema';
	                } else if (number < 5) {
	                    result += withoutSuffix || isFuture ? 'mesece' : 'meseci';
	                } else {
	                    result += withoutSuffix || isFuture ? 'mesecev' : 'meseci';
	                }
	                return result;
	            case 'y':
	                return withoutSuffix || isFuture ? 'eno leto' : 'enim letom';
	            case 'yy':
	                if (number === 1) {
	                    result += withoutSuffix || isFuture ? 'leto' : 'letom';
	                } else if (number === 2) {
	                    result += withoutSuffix || isFuture ? 'leti' : 'letoma';
	                } else if (number < 5) {
	                    result += withoutSuffix || isFuture ? 'leta' : 'leti';
	                } else {
	                    result += withoutSuffix || isFuture ? 'let' : 'leti';
	                }
	                return result;
	        }
	    }

	    var sl = moment.defineLocale('sl', {
	        months : 'januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december'.split('_'),
	        monthsShort : 'jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.'.split('_'),
	        monthsParseExact: true,
	        weekdays : 'nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota'.split('_'),
	        weekdaysShort : 'ned._pon._tor._sre._čet._pet._sob.'.split('_'),
	        weekdaysMin : 'ne_po_to_sr_če_pe_so'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'H:mm',
	            LTS : 'H:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D. MMMM YYYY',
	            LLL : 'D. MMMM YYYY H:mm',
	            LLLL : 'dddd, D. MMMM YYYY H:mm'
	        },
	        calendar : {
	            sameDay  : '[danes ob] LT',
	            nextDay  : '[jutri ob] LT',

	            nextWeek : function () {
	                switch (this.day()) {
	                    case 0:
	                        return '[v] [nedeljo] [ob] LT';
	                    case 3:
	                        return '[v] [sredo] [ob] LT';
	                    case 6:
	                        return '[v] [soboto] [ob] LT';
	                    case 1:
	                    case 2:
	                    case 4:
	                    case 5:
	                        return '[v] dddd [ob] LT';
	                }
	            },
	            lastDay  : '[včeraj ob] LT',
	            lastWeek : function () {
	                switch (this.day()) {
	                    case 0:
	                        return '[prejšnjo] [nedeljo] [ob] LT';
	                    case 3:
	                        return '[prejšnjo] [sredo] [ob] LT';
	                    case 6:
	                        return '[prejšnjo] [soboto] [ob] LT';
	                    case 1:
	                    case 2:
	                    case 4:
	                    case 5:
	                        return '[prejšnji] dddd [ob] LT';
	                }
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'čez %s',
	            past   : 'pred %s',
	            s      : processRelativeTime,
	            m      : processRelativeTime,
	            mm     : processRelativeTime,
	            h      : processRelativeTime,
	            hh     : processRelativeTime,
	            d      : processRelativeTime,
	            dd     : processRelativeTime,
	            M      : processRelativeTime,
	            MM     : processRelativeTime,
	            y      : processRelativeTime,
	            yy     : processRelativeTime
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return sl;

	}));

/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Albanian [sq]
	//! author : Flakërim Ismani : https://github.com/flakerimi
	//! author : Menelion Elensúle : https://github.com/Oire
	//! author : Oerd Cukalla : https://github.com/oerd

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var sq = moment.defineLocale('sq', {
	        months : 'Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_Nëntor_Dhjetor'.split('_'),
	        monthsShort : 'Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_Nën_Dhj'.split('_'),
	        weekdays : 'E Diel_E Hënë_E Martë_E Mërkurë_E Enjte_E Premte_E Shtunë'.split('_'),
	        weekdaysShort : 'Die_Hën_Mar_Mër_Enj_Pre_Sht'.split('_'),
	        weekdaysMin : 'D_H_Ma_Më_E_P_Sh'.split('_'),
	        weekdaysParseExact : true,
	        meridiemParse: /PD|MD/,
	        isPM: function (input) {
	            return input.charAt(0) === 'M';
	        },
	        meridiem : function (hours, minutes, isLower) {
	            return hours < 12 ? 'PD' : 'MD';
	        },
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay : '[Sot në] LT',
	            nextDay : '[Nesër në] LT',
	            nextWeek : 'dddd [në] LT',
	            lastDay : '[Dje në] LT',
	            lastWeek : 'dddd [e kaluar në] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'në %s',
	            past : '%s më parë',
	            s : 'disa sekonda',
	            m : 'një minutë',
	            mm : '%d minuta',
	            h : 'një orë',
	            hh : '%d orë',
	            d : 'një ditë',
	            dd : '%d ditë',
	            M : 'një muaj',
	            MM : '%d muaj',
	            y : 'një vit',
	            yy : '%d vite'
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return sq;

	}));

/***/ },
/* 133 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Serbian [sr]
	//! author : Milan Janačković<milanjanackovic@gmail.com> : https://github.com/milan-j

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var translator = {
	        words: { //Different grammatical cases
	            m: ['jedan minut', 'jedne minute'],
	            mm: ['minut', 'minute', 'minuta'],
	            h: ['jedan sat', 'jednog sata'],
	            hh: ['sat', 'sata', 'sati'],
	            dd: ['dan', 'dana', 'dana'],
	            MM: ['mesec', 'meseca', 'meseci'],
	            yy: ['godina', 'godine', 'godina']
	        },
	        correctGrammaticalCase: function (number, wordKey) {
	            return number === 1 ? wordKey[0] : (number >= 2 && number <= 4 ? wordKey[1] : wordKey[2]);
	        },
	        translate: function (number, withoutSuffix, key) {
	            var wordKey = translator.words[key];
	            if (key.length === 1) {
	                return withoutSuffix ? wordKey[0] : wordKey[1];
	            } else {
	                return number + ' ' + translator.correctGrammaticalCase(number, wordKey);
	            }
	        }
	    };

	    var sr = moment.defineLocale('sr', {
	        months: 'januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar'.split('_'),
	        monthsShort: 'jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.'.split('_'),
	        monthsParseExact: true,
	        weekdays: 'nedelja_ponedeljak_utorak_sreda_četvrtak_petak_subota'.split('_'),
	        weekdaysShort: 'ned._pon._uto._sre._čet._pet._sub.'.split('_'),
	        weekdaysMin: 'ne_po_ut_sr_če_pe_su'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat: {
	            LT: 'H:mm',
	            LTS : 'H:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D. MMMM YYYY',
	            LLL: 'D. MMMM YYYY H:mm',
	            LLLL: 'dddd, D. MMMM YYYY H:mm'
	        },
	        calendar: {
	            sameDay: '[danas u] LT',
	            nextDay: '[sutra u] LT',
	            nextWeek: function () {
	                switch (this.day()) {
	                    case 0:
	                        return '[u] [nedelju] [u] LT';
	                    case 3:
	                        return '[u] [sredu] [u] LT';
	                    case 6:
	                        return '[u] [subotu] [u] LT';
	                    case 1:
	                    case 2:
	                    case 4:
	                    case 5:
	                        return '[u] dddd [u] LT';
	                }
	            },
	            lastDay  : '[juče u] LT',
	            lastWeek : function () {
	                var lastWeekDays = [
	                    '[prošle] [nedelje] [u] LT',
	                    '[prošlog] [ponedeljka] [u] LT',
	                    '[prošlog] [utorka] [u] LT',
	                    '[prošle] [srede] [u] LT',
	                    '[prošlog] [četvrtka] [u] LT',
	                    '[prošlog] [petka] [u] LT',
	                    '[prošle] [subote] [u] LT'
	                ];
	                return lastWeekDays[this.day()];
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'za %s',
	            past   : 'pre %s',
	            s      : 'nekoliko sekundi',
	            m      : translator.translate,
	            mm     : translator.translate,
	            h      : translator.translate,
	            hh     : translator.translate,
	            d      : 'dan',
	            dd     : translator.translate,
	            M      : 'mesec',
	            MM     : translator.translate,
	            y      : 'godinu',
	            yy     : translator.translate
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return sr;

	}));

/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Serbian Cyrillic [sr-cyrl]
	//! author : Milan Janačković<milanjanackovic@gmail.com> : https://github.com/milan-j

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var translator = {
	        words: { //Different grammatical cases
	            m: ['један минут', 'једне минуте'],
	            mm: ['минут', 'минуте', 'минута'],
	            h: ['један сат', 'једног сата'],
	            hh: ['сат', 'сата', 'сати'],
	            dd: ['дан', 'дана', 'дана'],
	            MM: ['месец', 'месеца', 'месеци'],
	            yy: ['година', 'године', 'година']
	        },
	        correctGrammaticalCase: function (number, wordKey) {
	            return number === 1 ? wordKey[0] : (number >= 2 && number <= 4 ? wordKey[1] : wordKey[2]);
	        },
	        translate: function (number, withoutSuffix, key) {
	            var wordKey = translator.words[key];
	            if (key.length === 1) {
	                return withoutSuffix ? wordKey[0] : wordKey[1];
	            } else {
	                return number + ' ' + translator.correctGrammaticalCase(number, wordKey);
	            }
	        }
	    };

	    var sr_cyrl = moment.defineLocale('sr-cyrl', {
	        months: 'јануар_фебруар_март_април_мај_јун_јул_август_септембар_октобар_новембар_децембар'.split('_'),
	        monthsShort: 'јан._феб._мар._апр._мај_јун_јул_авг._сеп._окт._нов._дец.'.split('_'),
	        monthsParseExact: true,
	        weekdays: 'недеља_понедељак_уторак_среда_четвртак_петак_субота'.split('_'),
	        weekdaysShort: 'нед._пон._уто._сре._чет._пет._суб.'.split('_'),
	        weekdaysMin: 'не_по_ут_ср_че_пе_су'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat: {
	            LT: 'H:mm',
	            LTS : 'H:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D. MMMM YYYY',
	            LLL: 'D. MMMM YYYY H:mm',
	            LLLL: 'dddd, D. MMMM YYYY H:mm'
	        },
	        calendar: {
	            sameDay: '[данас у] LT',
	            nextDay: '[сутра у] LT',
	            nextWeek: function () {
	                switch (this.day()) {
	                    case 0:
	                        return '[у] [недељу] [у] LT';
	                    case 3:
	                        return '[у] [среду] [у] LT';
	                    case 6:
	                        return '[у] [суботу] [у] LT';
	                    case 1:
	                    case 2:
	                    case 4:
	                    case 5:
	                        return '[у] dddd [у] LT';
	                }
	            },
	            lastDay  : '[јуче у] LT',
	            lastWeek : function () {
	                var lastWeekDays = [
	                    '[прошле] [недеље] [у] LT',
	                    '[прошлог] [понедељка] [у] LT',
	                    '[прошлог] [уторка] [у] LT',
	                    '[прошле] [среде] [у] LT',
	                    '[прошлог] [четвртка] [у] LT',
	                    '[прошлог] [петка] [у] LT',
	                    '[прошле] [суботе] [у] LT'
	                ];
	                return lastWeekDays[this.day()];
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'за %s',
	            past   : 'пре %s',
	            s      : 'неколико секунди',
	            m      : translator.translate,
	            mm     : translator.translate,
	            h      : translator.translate,
	            hh     : translator.translate,
	            d      : 'дан',
	            dd     : translator.translate,
	            M      : 'месец',
	            MM     : translator.translate,
	            y      : 'годину',
	            yy     : translator.translate
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return sr_cyrl;

	}));

/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : siSwati [ss]
	//! author : Nicolai Davies<mail@nicolai.io> : https://github.com/nicolaidavies

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';



	    var ss = moment.defineLocale('ss', {
	        months : "Bhimbidvwane_Indlovana_Indlov'lenkhulu_Mabasa_Inkhwekhweti_Inhlaba_Kholwane_Ingci_Inyoni_Imphala_Lweti_Ingongoni".split('_'),
	        monthsShort : 'Bhi_Ina_Inu_Mab_Ink_Inh_Kho_Igc_Iny_Imp_Lwe_Igo'.split('_'),
	        weekdays : 'Lisontfo_Umsombuluko_Lesibili_Lesitsatfu_Lesine_Lesihlanu_Umgcibelo'.split('_'),
	        weekdaysShort : 'Lis_Umb_Lsb_Les_Lsi_Lsh_Umg'.split('_'),
	        weekdaysMin : 'Li_Us_Lb_Lt_Ls_Lh_Ug'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'h:mm A',
	            LTS : 'h:mm:ss A',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY h:mm A',
	            LLLL : 'dddd, D MMMM YYYY h:mm A'
	        },
	        calendar : {
	            sameDay : '[Namuhla nga] LT',
	            nextDay : '[Kusasa nga] LT',
	            nextWeek : 'dddd [nga] LT',
	            lastDay : '[Itolo nga] LT',
	            lastWeek : 'dddd [leliphelile] [nga] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'nga %s',
	            past : 'wenteka nga %s',
	            s : 'emizuzwana lomcane',
	            m : 'umzuzu',
	            mm : '%d emizuzu',
	            h : 'lihora',
	            hh : '%d emahora',
	            d : 'lilanga',
	            dd : '%d emalanga',
	            M : 'inyanga',
	            MM : '%d tinyanga',
	            y : 'umnyaka',
	            yy : '%d iminyaka'
	        },
	        meridiemParse: /ekuseni|emini|entsambama|ebusuku/,
	        meridiem : function (hours, minutes, isLower) {
	            if (hours < 11) {
	                return 'ekuseni';
	            } else if (hours < 15) {
	                return 'emini';
	            } else if (hours < 19) {
	                return 'entsambama';
	            } else {
	                return 'ebusuku';
	            }
	        },
	        meridiemHour : function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'ekuseni') {
	                return hour;
	            } else if (meridiem === 'emini') {
	                return hour >= 11 ? hour : hour + 12;
	            } else if (meridiem === 'entsambama' || meridiem === 'ebusuku') {
	                if (hour === 0) {
	                    return 0;
	                }
	                return hour + 12;
	            }
	        },
	        ordinalParse: /\d{1,2}/,
	        ordinal : '%d',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return ss;

	}));

/***/ },
/* 136 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Swedish [sv]
	//! author : Jens Alm : https://github.com/ulmus

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var sv = moment.defineLocale('sv', {
	        months : 'januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december'.split('_'),
	        monthsShort : 'jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec'.split('_'),
	        weekdays : 'söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag'.split('_'),
	        weekdaysShort : 'sön_mån_tis_ons_tor_fre_lör'.split('_'),
	        weekdaysMin : 'sö_må_ti_on_to_fr_lö'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'YYYY-MM-DD',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY [kl.] HH:mm',
	            LLLL : 'dddd D MMMM YYYY [kl.] HH:mm',
	            lll : 'D MMM YYYY HH:mm',
	            llll : 'ddd D MMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[Idag] LT',
	            nextDay: '[Imorgon] LT',
	            lastDay: '[Igår] LT',
	            nextWeek: '[På] dddd LT',
	            lastWeek: '[I] dddd[s] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'om %s',
	            past : 'för %s sedan',
	            s : 'några sekunder',
	            m : 'en minut',
	            mm : '%d minuter',
	            h : 'en timme',
	            hh : '%d timmar',
	            d : 'en dag',
	            dd : '%d dagar',
	            M : 'en månad',
	            MM : '%d månader',
	            y : 'ett år',
	            yy : '%d år'
	        },
	        ordinalParse: /\d{1,2}(e|a)/,
	        ordinal : function (number) {
	            var b = number % 10,
	                output = (~~(number % 100 / 10) === 1) ? 'e' :
	                (b === 1) ? 'a' :
	                (b === 2) ? 'a' :
	                (b === 3) ? 'e' : 'e';
	            return number + output;
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return sv;

	}));

/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Swahili [sw]
	//! author : Fahad Kassim : https://github.com/fadsel

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var sw = moment.defineLocale('sw', {
	        months : 'Januari_Februari_Machi_Aprili_Mei_Juni_Julai_Agosti_Septemba_Oktoba_Novemba_Desemba'.split('_'),
	        monthsShort : 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ago_Sep_Okt_Nov_Des'.split('_'),
	        weekdays : 'Jumapili_Jumatatu_Jumanne_Jumatano_Alhamisi_Ijumaa_Jumamosi'.split('_'),
	        weekdaysShort : 'Jpl_Jtat_Jnne_Jtan_Alh_Ijm_Jmos'.split('_'),
	        weekdaysMin : 'J2_J3_J4_J5_Al_Ij_J1'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay : '[leo saa] LT',
	            nextDay : '[kesho saa] LT',
	            nextWeek : '[wiki ijayo] dddd [saat] LT',
	            lastDay : '[jana] LT',
	            lastWeek : '[wiki iliyopita] dddd [saat] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s baadaye',
	            past : 'tokea %s',
	            s : 'hivi punde',
	            m : 'dakika moja',
	            mm : 'dakika %d',
	            h : 'saa limoja',
	            hh : 'masaa %d',
	            d : 'siku moja',
	            dd : 'masiku %d',
	            M : 'mwezi mmoja',
	            MM : 'miezi %d',
	            y : 'mwaka mmoja',
	            yy : 'miaka %d'
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return sw;

	}));

/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Tamil [ta]
	//! author : Arjunkumar Krishnamoorthy : https://github.com/tk120404

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var symbolMap = {
	        '1': '௧',
	        '2': '௨',
	        '3': '௩',
	        '4': '௪',
	        '5': '௫',
	        '6': '௬',
	        '7': '௭',
	        '8': '௮',
	        '9': '௯',
	        '0': '௦'
	    }, numberMap = {
	        '௧': '1',
	        '௨': '2',
	        '௩': '3',
	        '௪': '4',
	        '௫': '5',
	        '௬': '6',
	        '௭': '7',
	        '௮': '8',
	        '௯': '9',
	        '௦': '0'
	    };

	    var ta = moment.defineLocale('ta', {
	        months : 'ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்'.split('_'),
	        monthsShort : 'ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்'.split('_'),
	        weekdays : 'ஞாயிற்றுக்கிழமை_திங்கட்கிழமை_செவ்வாய்கிழமை_புதன்கிழமை_வியாழக்கிழமை_வெள்ளிக்கிழமை_சனிக்கிழமை'.split('_'),
	        weekdaysShort : 'ஞாயிறு_திங்கள்_செவ்வாய்_புதன்_வியாழன்_வெள்ளி_சனி'.split('_'),
	        weekdaysMin : 'ஞா_தி_செ_பு_வி_வெ_ச'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY, HH:mm',
	            LLLL : 'dddd, D MMMM YYYY, HH:mm'
	        },
	        calendar : {
	            sameDay : '[இன்று] LT',
	            nextDay : '[நாளை] LT',
	            nextWeek : 'dddd, LT',
	            lastDay : '[நேற்று] LT',
	            lastWeek : '[கடந்த வாரம்] dddd, LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s இல்',
	            past : '%s முன்',
	            s : 'ஒரு சில விநாடிகள்',
	            m : 'ஒரு நிமிடம்',
	            mm : '%d நிமிடங்கள்',
	            h : 'ஒரு மணி நேரம்',
	            hh : '%d மணி நேரம்',
	            d : 'ஒரு நாள்',
	            dd : '%d நாட்கள்',
	            M : 'ஒரு மாதம்',
	            MM : '%d மாதங்கள்',
	            y : 'ஒரு வருடம்',
	            yy : '%d ஆண்டுகள்'
	        },
	        ordinalParse: /\d{1,2}வது/,
	        ordinal : function (number) {
	            return number + 'வது';
	        },
	        preparse: function (string) {
	            return string.replace(/[௧௨௩௪௫௬௭௮௯௦]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        // refer http://ta.wikipedia.org/s/1er1
	        meridiemParse: /யாமம்|வைகறை|காலை|நண்பகல்|எற்பாடு|மாலை/,
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 2) {
	                return ' யாமம்';
	            } else if (hour < 6) {
	                return ' வைகறை';  // வைகறை
	            } else if (hour < 10) {
	                return ' காலை'; // காலை
	            } else if (hour < 14) {
	                return ' நண்பகல்'; // நண்பகல்
	            } else if (hour < 18) {
	                return ' எற்பாடு'; // எற்பாடு
	            } else if (hour < 22) {
	                return ' மாலை'; // மாலை
	            } else {
	                return ' யாமம்';
	            }
	        },
	        meridiemHour : function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'யாமம்') {
	                return hour < 2 ? hour : hour + 12;
	            } else if (meridiem === 'வைகறை' || meridiem === 'காலை') {
	                return hour;
	            } else if (meridiem === 'நண்பகல்') {
	                return hour >= 10 ? hour : hour + 12;
	            } else {
	                return hour + 12;
	            }
	        },
	        week : {
	            dow : 0, // Sunday is the first day of the week.
	            doy : 6  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return ta;

	}));

/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Telugu [te]
	//! author : Krishna Chaitanya Thota : https://github.com/kcthota

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var te = moment.defineLocale('te', {
	        months : 'జనవరి_ఫిబ్రవరి_మార్చి_ఏప్రిల్_మే_జూన్_జూలై_ఆగస్టు_సెప్టెంబర్_అక్టోబర్_నవంబర్_డిసెంబర్'.split('_'),
	        monthsShort : 'జన._ఫిబ్ర._మార్చి_ఏప్రి._మే_జూన్_జూలై_ఆగ._సెప్._అక్టో._నవ._డిసె.'.split('_'),
	        monthsParseExact : true,
	        weekdays : 'ఆదివారం_సోమవారం_మంగళవారం_బుధవారం_గురువారం_శుక్రవారం_శనివారం'.split('_'),
	        weekdaysShort : 'ఆది_సోమ_మంగళ_బుధ_గురు_శుక్ర_శని'.split('_'),
	        weekdaysMin : 'ఆ_సో_మం_బు_గు_శు_శ'.split('_'),
	        longDateFormat : {
	            LT : 'A h:mm',
	            LTS : 'A h:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY, A h:mm',
	            LLLL : 'dddd, D MMMM YYYY, A h:mm'
	        },
	        calendar : {
	            sameDay : '[నేడు] LT',
	            nextDay : '[రేపు] LT',
	            nextWeek : 'dddd, LT',
	            lastDay : '[నిన్న] LT',
	            lastWeek : '[గత] dddd, LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s లో',
	            past : '%s క్రితం',
	            s : 'కొన్ని క్షణాలు',
	            m : 'ఒక నిమిషం',
	            mm : '%d నిమిషాలు',
	            h : 'ఒక గంట',
	            hh : '%d గంటలు',
	            d : 'ఒక రోజు',
	            dd : '%d రోజులు',
	            M : 'ఒక నెల',
	            MM : '%d నెలలు',
	            y : 'ఒక సంవత్సరం',
	            yy : '%d సంవత్సరాలు'
	        },
	        ordinalParse : /\d{1,2}వ/,
	        ordinal : '%dవ',
	        meridiemParse: /రాత్రి|ఉదయం|మధ్యాహ్నం|సాయంత్రం/,
	        meridiemHour : function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'రాత్రి') {
	                return hour < 4 ? hour : hour + 12;
	            } else if (meridiem === 'ఉదయం') {
	                return hour;
	            } else if (meridiem === 'మధ్యాహ్నం') {
	                return hour >= 10 ? hour : hour + 12;
	            } else if (meridiem === 'సాయంత్రం') {
	                return hour + 12;
	            }
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'రాత్రి';
	            } else if (hour < 10) {
	                return 'ఉదయం';
	            } else if (hour < 17) {
	                return 'మధ్యాహ్నం';
	            } else if (hour < 20) {
	                return 'సాయంత్రం';
	            } else {
	                return 'రాత్రి';
	            }
	        },
	        week : {
	            dow : 0, // Sunday is the first day of the week.
	            doy : 6  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return te;

	}));

/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Thai [th]
	//! author : Kridsada Thanabulpong : https://github.com/sirn

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var th = moment.defineLocale('th', {
	        months : 'มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม'.split('_'),
	        monthsShort : 'ม.ค._ก.พ._มี.ค._เม.ย._พ.ค._มิ.ย._ก.ค._ส.ค._ก.ย._ต.ค._พ.ย._ธ.ค.'.split('_'),
	        monthsParseExact: true,
	        weekdays : 'อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์'.split('_'),
	        weekdaysShort : 'อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์'.split('_'), // yes, three characters difference
	        weekdaysMin : 'อา._จ._อ._พ._พฤ._ศ._ส.'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'H:mm',
	            LTS : 'H:mm:ss',
	            L : 'YYYY/MM/DD',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY เวลา H:mm',
	            LLLL : 'วันddddที่ D MMMM YYYY เวลา H:mm'
	        },
	        meridiemParse: /ก่อนเที่ยง|หลังเที่ยง/,
	        isPM: function (input) {
	            return input === 'หลังเที่ยง';
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 12) {
	                return 'ก่อนเที่ยง';
	            } else {
	                return 'หลังเที่ยง';
	            }
	        },
	        calendar : {
	            sameDay : '[วันนี้ เวลา] LT',
	            nextDay : '[พรุ่งนี้ เวลา] LT',
	            nextWeek : 'dddd[หน้า เวลา] LT',
	            lastDay : '[เมื่อวานนี้ เวลา] LT',
	            lastWeek : '[วัน]dddd[ที่แล้ว เวลา] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'อีก %s',
	            past : '%sที่แล้ว',
	            s : 'ไม่กี่วินาที',
	            m : '1 นาที',
	            mm : '%d นาที',
	            h : '1 ชั่วโมง',
	            hh : '%d ชั่วโมง',
	            d : '1 วัน',
	            dd : '%d วัน',
	            M : '1 เดือน',
	            MM : '%d เดือน',
	            y : '1 ปี',
	            yy : '%d ปี'
	        }
	    });

	    return th;

	}));

/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Tagalog (Philippines) [tl-ph]
	//! author : Dan Hagman : https://github.com/hagmandan

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var tl_ph = moment.defineLocale('tl-ph', {
	        months : 'Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre'.split('_'),
	        monthsShort : 'Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis'.split('_'),
	        weekdays : 'Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado'.split('_'),
	        weekdaysShort : 'Lin_Lun_Mar_Miy_Huw_Biy_Sab'.split('_'),
	        weekdaysMin : 'Li_Lu_Ma_Mi_Hu_Bi_Sab'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'MM/D/YYYY',
	            LL : 'MMMM D, YYYY',
	            LLL : 'MMMM D, YYYY HH:mm',
	            LLLL : 'dddd, MMMM DD, YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[Ngayon sa] LT',
	            nextDay: '[Bukas sa] LT',
	            nextWeek: 'dddd [sa] LT',
	            lastDay: '[Kahapon sa] LT',
	            lastWeek: 'dddd [huling linggo] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'sa loob ng %s',
	            past : '%s ang nakalipas',
	            s : 'ilang segundo',
	            m : 'isang minuto',
	            mm : '%d minuto',
	            h : 'isang oras',
	            hh : '%d oras',
	            d : 'isang araw',
	            dd : '%d araw',
	            M : 'isang buwan',
	            MM : '%d buwan',
	            y : 'isang taon',
	            yy : '%d taon'
	        },
	        ordinalParse: /\d{1,2}/,
	        ordinal : function (number) {
	            return number;
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return tl_ph;

	}));

/***/ },
/* 142 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Klingon [tlh]
	//! author : Dominika Kruk : https://github.com/amaranthrose

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var numbersNouns = 'pagh_wa’_cha’_wej_loS_vagh_jav_Soch_chorgh_Hut'.split('_');

	    function translateFuture(output) {
	        var time = output;
	        time = (output.indexOf('jaj') !== -1) ?
	        time.slice(0, -3) + 'leS' :
	        (output.indexOf('jar') !== -1) ?
	        time.slice(0, -3) + 'waQ' :
	        (output.indexOf('DIS') !== -1) ?
	        time.slice(0, -3) + 'nem' :
	        time + ' pIq';
	        return time;
	    }

	    function translatePast(output) {
	        var time = output;
	        time = (output.indexOf('jaj') !== -1) ?
	        time.slice(0, -3) + 'Hu’' :
	        (output.indexOf('jar') !== -1) ?
	        time.slice(0, -3) + 'wen' :
	        (output.indexOf('DIS') !== -1) ?
	        time.slice(0, -3) + 'ben' :
	        time + ' ret';
	        return time;
	    }

	    function translate(number, withoutSuffix, string, isFuture) {
	        var numberNoun = numberAsNoun(number);
	        switch (string) {
	            case 'mm':
	                return numberNoun + ' tup';
	            case 'hh':
	                return numberNoun + ' rep';
	            case 'dd':
	                return numberNoun + ' jaj';
	            case 'MM':
	                return numberNoun + ' jar';
	            case 'yy':
	                return numberNoun + ' DIS';
	        }
	    }

	    function numberAsNoun(number) {
	        var hundred = Math.floor((number % 1000) / 100),
	        ten = Math.floor((number % 100) / 10),
	        one = number % 10,
	        word = '';
	        if (hundred > 0) {
	            word += numbersNouns[hundred] + 'vatlh';
	        }
	        if (ten > 0) {
	            word += ((word !== '') ? ' ' : '') + numbersNouns[ten] + 'maH';
	        }
	        if (one > 0) {
	            word += ((word !== '') ? ' ' : '') + numbersNouns[one];
	        }
	        return (word === '') ? 'pagh' : word;
	    }

	    var tlh = moment.defineLocale('tlh', {
	        months : 'tera’ jar wa’_tera’ jar cha’_tera’ jar wej_tera’ jar loS_tera’ jar vagh_tera’ jar jav_tera’ jar Soch_tera’ jar chorgh_tera’ jar Hut_tera’ jar wa’maH_tera’ jar wa’maH wa’_tera’ jar wa’maH cha’'.split('_'),
	        monthsShort : 'jar wa’_jar cha’_jar wej_jar loS_jar vagh_jar jav_jar Soch_jar chorgh_jar Hut_jar wa’maH_jar wa’maH wa’_jar wa’maH cha’'.split('_'),
	        monthsParseExact : true,
	        weekdays : 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),
	        weekdaysShort : 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),
	        weekdaysMin : 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[DaHjaj] LT',
	            nextDay: '[wa’leS] LT',
	            nextWeek: 'LLL',
	            lastDay: '[wa’Hu’] LT',
	            lastWeek: 'LLL',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : translateFuture,
	            past : translatePast,
	            s : 'puS lup',
	            m : 'wa’ tup',
	            mm : translate,
	            h : 'wa’ rep',
	            hh : translate,
	            d : 'wa’ jaj',
	            dd : translate,
	            M : 'wa’ jar',
	            MM : translate,
	            y : 'wa’ DIS',
	            yy : translate
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return tlh;

	}));

/***/ },
/* 143 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Turkish [tr]
	//! authors : Erhan Gundogan : https://github.com/erhangundogan,
	//!           Burak Yiğit Kaya: https://github.com/BYK

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var suffixes = {
	        1: '\'inci',
	        5: '\'inci',
	        8: '\'inci',
	        70: '\'inci',
	        80: '\'inci',
	        2: '\'nci',
	        7: '\'nci',
	        20: '\'nci',
	        50: '\'nci',
	        3: '\'üncü',
	        4: '\'üncü',
	        100: '\'üncü',
	        6: '\'ncı',
	        9: '\'uncu',
	        10: '\'uncu',
	        30: '\'uncu',
	        60: '\'ıncı',
	        90: '\'ıncı'
	    };

	    var tr = moment.defineLocale('tr', {
	        months : 'Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık'.split('_'),
	        monthsShort : 'Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara'.split('_'),
	        weekdays : 'Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi'.split('_'),
	        weekdaysShort : 'Paz_Pts_Sal_Çar_Per_Cum_Cts'.split('_'),
	        weekdaysMin : 'Pz_Pt_Sa_Ça_Pe_Cu_Ct'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay : '[bugün saat] LT',
	            nextDay : '[yarın saat] LT',
	            nextWeek : '[haftaya] dddd [saat] LT',
	            lastDay : '[dün] LT',
	            lastWeek : '[geçen hafta] dddd [saat] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s sonra',
	            past : '%s önce',
	            s : 'birkaç saniye',
	            m : 'bir dakika',
	            mm : '%d dakika',
	            h : 'bir saat',
	            hh : '%d saat',
	            d : 'bir gün',
	            dd : '%d gün',
	            M : 'bir ay',
	            MM : '%d ay',
	            y : 'bir yıl',
	            yy : '%d yıl'
	        },
	        ordinalParse: /\d{1,2}'(inci|nci|üncü|ncı|uncu|ıncı)/,
	        ordinal : function (number) {
	            if (number === 0) {  // special case for zero
	                return number + '\'ıncı';
	            }
	            var a = number % 10,
	                b = number % 100 - a,
	                c = number >= 100 ? 100 : null;
	            return number + (suffixes[a] || suffixes[b] || suffixes[c]);
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return tr;

	}));

/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Talossan [tzl]
	//! author : Robin van der Vliet : https://github.com/robin0van0der0v
	//! author : Iustì Canun

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    // After the year there should be a slash and the amount of years since December 26, 1979 in Roman numerals.
	    // This is currently too difficult (maybe even impossible) to add.
	    var tzl = moment.defineLocale('tzl', {
	        months : 'Januar_Fevraglh_Març_Avrïu_Mai_Gün_Julia_Guscht_Setemvar_Listopäts_Noemvar_Zecemvar'.split('_'),
	        monthsShort : 'Jan_Fev_Mar_Avr_Mai_Gün_Jul_Gus_Set_Lis_Noe_Zec'.split('_'),
	        weekdays : 'Súladi_Lúneçi_Maitzi_Márcuri_Xhúadi_Viénerçi_Sáturi'.split('_'),
	        weekdaysShort : 'Súl_Lún_Mai_Már_Xhú_Vié_Sát'.split('_'),
	        weekdaysMin : 'Sú_Lú_Ma_Má_Xh_Vi_Sá'.split('_'),
	        longDateFormat : {
	            LT : 'HH.mm',
	            LTS : 'HH.mm.ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D. MMMM [dallas] YYYY',
	            LLL : 'D. MMMM [dallas] YYYY HH.mm',
	            LLLL : 'dddd, [li] D. MMMM [dallas] YYYY HH.mm'
	        },
	        meridiemParse: /d\'o|d\'a/i,
	        isPM : function (input) {
	            return 'd\'o' === input.toLowerCase();
	        },
	        meridiem : function (hours, minutes, isLower) {
	            if (hours > 11) {
	                return isLower ? 'd\'o' : 'D\'O';
	            } else {
	                return isLower ? 'd\'a' : 'D\'A';
	            }
	        },
	        calendar : {
	            sameDay : '[oxhi à] LT',
	            nextDay : '[demà à] LT',
	            nextWeek : 'dddd [à] LT',
	            lastDay : '[ieiri à] LT',
	            lastWeek : '[sür el] dddd [lasteu à] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'osprei %s',
	            past : 'ja%s',
	            s : processRelativeTime,
	            m : processRelativeTime,
	            mm : processRelativeTime,
	            h : processRelativeTime,
	            hh : processRelativeTime,
	            d : processRelativeTime,
	            dd : processRelativeTime,
	            M : processRelativeTime,
	            MM : processRelativeTime,
	            y : processRelativeTime,
	            yy : processRelativeTime
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    function processRelativeTime(number, withoutSuffix, key, isFuture) {
	        var format = {
	            's': ['viensas secunds', '\'iensas secunds'],
	            'm': ['\'n míut', '\'iens míut'],
	            'mm': [number + ' míuts', '' + number + ' míuts'],
	            'h': ['\'n þora', '\'iensa þora'],
	            'hh': [number + ' þoras', '' + number + ' þoras'],
	            'd': ['\'n ziua', '\'iensa ziua'],
	            'dd': [number + ' ziuas', '' + number + ' ziuas'],
	            'M': ['\'n mes', '\'iens mes'],
	            'MM': [number + ' mesen', '' + number + ' mesen'],
	            'y': ['\'n ar', '\'iens ar'],
	            'yy': [number + ' ars', '' + number + ' ars']
	        };
	        return isFuture ? format[key][0] : (withoutSuffix ? format[key][0] : format[key][1]);
	    }

	    return tzl;

	}));

/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Central Atlas Tamazight [tzm]
	//! author : Abdel Said : https://github.com/abdelsaid

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var tzm = moment.defineLocale('tzm', {
	        months : 'ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ'.split('_'),
	        monthsShort : 'ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ'.split('_'),
	        weekdays : 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
	        weekdaysShort : 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
	        weekdaysMin : 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[ⴰⵙⴷⵅ ⴴ] LT',
	            nextDay: '[ⴰⵙⴽⴰ ⴴ] LT',
	            nextWeek: 'dddd [ⴴ] LT',
	            lastDay: '[ⴰⵚⴰⵏⵜ ⴴ] LT',
	            lastWeek: 'dddd [ⴴ] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'ⴷⴰⴷⵅ ⵙ ⵢⴰⵏ %s',
	            past : 'ⵢⴰⵏ %s',
	            s : 'ⵉⵎⵉⴽ',
	            m : 'ⵎⵉⵏⵓⴺ',
	            mm : '%d ⵎⵉⵏⵓⴺ',
	            h : 'ⵙⴰⵄⴰ',
	            hh : '%d ⵜⴰⵙⵙⴰⵄⵉⵏ',
	            d : 'ⴰⵙⵙ',
	            dd : '%d oⵙⵙⴰⵏ',
	            M : 'ⴰⵢoⵓⵔ',
	            MM : '%d ⵉⵢⵢⵉⵔⵏ',
	            y : 'ⴰⵙⴳⴰⵙ',
	            yy : '%d ⵉⵙⴳⴰⵙⵏ'
	        },
	        week : {
	            dow : 6, // Saturday is the first day of the week.
	            doy : 12  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return tzm;

	}));

/***/ },
/* 146 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Central Atlas Tamazight Latin [tzm-latn]
	//! author : Abdel Said : https://github.com/abdelsaid

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var tzm_latn = moment.defineLocale('tzm-latn', {
	        months : 'innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir'.split('_'),
	        monthsShort : 'innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir'.split('_'),
	        weekdays : 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
	        weekdaysShort : 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
	        weekdaysMin : 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[asdkh g] LT',
	            nextDay: '[aska g] LT',
	            nextWeek: 'dddd [g] LT',
	            lastDay: '[assant g] LT',
	            lastWeek: 'dddd [g] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'dadkh s yan %s',
	            past : 'yan %s',
	            s : 'imik',
	            m : 'minuḍ',
	            mm : '%d minuḍ',
	            h : 'saɛa',
	            hh : '%d tassaɛin',
	            d : 'ass',
	            dd : '%d ossan',
	            M : 'ayowr',
	            MM : '%d iyyirn',
	            y : 'asgas',
	            yy : '%d isgasn'
	        },
	        week : {
	            dow : 6, // Saturday is the first day of the week.
	            doy : 12  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return tzm_latn;

	}));

/***/ },
/* 147 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Ukrainian [uk]
	//! author : zemlanin : https://github.com/zemlanin
	//! Author : Menelion Elensúle : https://github.com/Oire

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    function plural(word, num) {
	        var forms = word.split('_');
	        return num % 10 === 1 && num % 100 !== 11 ? forms[0] : (num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2]);
	    }
	    function relativeTimeWithPlural(number, withoutSuffix, key) {
	        var format = {
	            'mm': withoutSuffix ? 'хвилина_хвилини_хвилин' : 'хвилину_хвилини_хвилин',
	            'hh': withoutSuffix ? 'година_години_годин' : 'годину_години_годин',
	            'dd': 'день_дні_днів',
	            'MM': 'місяць_місяці_місяців',
	            'yy': 'рік_роки_років'
	        };
	        if (key === 'm') {
	            return withoutSuffix ? 'хвилина' : 'хвилину';
	        }
	        else if (key === 'h') {
	            return withoutSuffix ? 'година' : 'годину';
	        }
	        else {
	            return number + ' ' + plural(format[key], +number);
	        }
	    }
	    function weekdaysCaseReplace(m, format) {
	        var weekdays = {
	            'nominative': 'неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота'.split('_'),
	            'accusative': 'неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу'.split('_'),
	            'genitive': 'неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи'.split('_')
	        },
	        nounCase = (/(\[[ВвУу]\]) ?dddd/).test(format) ?
	            'accusative' :
	            ((/\[?(?:минулої|наступної)? ?\] ?dddd/).test(format) ?
	                'genitive' :
	                'nominative');
	        return weekdays[nounCase][m.day()];
	    }
	    function processHoursFunction(str) {
	        return function () {
	            return str + 'о' + (this.hours() === 11 ? 'б' : '') + '] LT';
	        };
	    }

	    var uk = moment.defineLocale('uk', {
	        months : {
	            'format': 'січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня'.split('_'),
	            'standalone': 'січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень'.split('_')
	        },
	        monthsShort : 'січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд'.split('_'),
	        weekdays : weekdaysCaseReplace,
	        weekdaysShort : 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
	        weekdaysMin : 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D MMMM YYYY р.',
	            LLL : 'D MMMM YYYY р., HH:mm',
	            LLLL : 'dddd, D MMMM YYYY р., HH:mm'
	        },
	        calendar : {
	            sameDay: processHoursFunction('[Сьогодні '),
	            nextDay: processHoursFunction('[Завтра '),
	            lastDay: processHoursFunction('[Вчора '),
	            nextWeek: processHoursFunction('[У] dddd ['),
	            lastWeek: function () {
	                switch (this.day()) {
	                    case 0:
	                    case 3:
	                    case 5:
	                    case 6:
	                        return processHoursFunction('[Минулої] dddd [').call(this);
	                    case 1:
	                    case 2:
	                    case 4:
	                        return processHoursFunction('[Минулого] dddd [').call(this);
	                }
	            },
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'за %s',
	            past : '%s тому',
	            s : 'декілька секунд',
	            m : relativeTimeWithPlural,
	            mm : relativeTimeWithPlural,
	            h : 'годину',
	            hh : relativeTimeWithPlural,
	            d : 'день',
	            dd : relativeTimeWithPlural,
	            M : 'місяць',
	            MM : relativeTimeWithPlural,
	            y : 'рік',
	            yy : relativeTimeWithPlural
	        },
	        // M. E.: those two are virtually unused but a user might want to implement them for his/her website for some reason
	        meridiemParse: /ночі|ранку|дня|вечора/,
	        isPM: function (input) {
	            return /^(дня|вечора)$/.test(input);
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'ночі';
	            } else if (hour < 12) {
	                return 'ранку';
	            } else if (hour < 17) {
	                return 'дня';
	            } else {
	                return 'вечора';
	            }
	        },
	        ordinalParse: /\d{1,2}-(й|го)/,
	        ordinal: function (number, period) {
	            switch (period) {
	                case 'M':
	                case 'd':
	                case 'DDD':
	                case 'w':
	                case 'W':
	                    return number + '-й';
	                case 'D':
	                    return number + '-го';
	                default:
	                    return number;
	            }
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return uk;

	}));

/***/ },
/* 148 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Uzbek [uz]
	//! author : Sardor Muminov : https://github.com/muminoff

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var uz = moment.defineLocale('uz', {
	        months : 'январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр'.split('_'),
	        monthsShort : 'янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек'.split('_'),
	        weekdays : 'Якшанба_Душанба_Сешанба_Чоршанба_Пайшанба_Жума_Шанба'.split('_'),
	        weekdaysShort : 'Якш_Душ_Сеш_Чор_Пай_Жум_Шан'.split('_'),
	        weekdaysMin : 'Як_Ду_Се_Чо_Па_Жу_Ша'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'D MMMM YYYY, dddd HH:mm'
	        },
	        calendar : {
	            sameDay : '[Бугун соат] LT [да]',
	            nextDay : '[Эртага] LT [да]',
	            nextWeek : 'dddd [куни соат] LT [да]',
	            lastDay : '[Кеча соат] LT [да]',
	            lastWeek : '[Утган] dddd [куни соат] LT [да]',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'Якин %s ичида',
	            past : 'Бир неча %s олдин',
	            s : 'фурсат',
	            m : 'бир дакика',
	            mm : '%d дакика',
	            h : 'бир соат',
	            hh : '%d соат',
	            d : 'бир кун',
	            dd : '%d кун',
	            M : 'бир ой',
	            MM : '%d ой',
	            y : 'бир йил',
	            yy : '%d йил'
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return uz;

	}));

/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Vietnamese [vi]
	//! author : Bang Nguyen : https://github.com/bangnk

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var vi = moment.defineLocale('vi', {
	        months : 'tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12'.split('_'),
	        monthsShort : 'Th01_Th02_Th03_Th04_Th05_Th06_Th07_Th08_Th09_Th10_Th11_Th12'.split('_'),
	        monthsParseExact : true,
	        weekdays : 'chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy'.split('_'),
	        weekdaysShort : 'CN_T2_T3_T4_T5_T6_T7'.split('_'),
	        weekdaysMin : 'CN_T2_T3_T4_T5_T6_T7'.split('_'),
	        weekdaysParseExact : true,
	        meridiemParse: /sa|ch/i,
	        isPM : function (input) {
	            return /^ch$/i.test(input);
	        },
	        meridiem : function (hours, minutes, isLower) {
	            if (hours < 12) {
	                return isLower ? 'sa' : 'SA';
	            } else {
	                return isLower ? 'ch' : 'CH';
	            }
	        },
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM [năm] YYYY',
	            LLL : 'D MMMM [năm] YYYY HH:mm',
	            LLLL : 'dddd, D MMMM [năm] YYYY HH:mm',
	            l : 'DD/M/YYYY',
	            ll : 'D MMM YYYY',
	            lll : 'D MMM YYYY HH:mm',
	            llll : 'ddd, D MMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[Hôm nay lúc] LT',
	            nextDay: '[Ngày mai lúc] LT',
	            nextWeek: 'dddd [tuần tới lúc] LT',
	            lastDay: '[Hôm qua lúc] LT',
	            lastWeek: 'dddd [tuần rồi lúc] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : '%s tới',
	            past : '%s trước',
	            s : 'vài giây',
	            m : 'một phút',
	            mm : '%d phút',
	            h : 'một giờ',
	            hh : '%d giờ',
	            d : 'một ngày',
	            dd : '%d ngày',
	            M : 'một tháng',
	            MM : '%d tháng',
	            y : 'một năm',
	            yy : '%d năm'
	        },
	        ordinalParse: /\d{1,2}/,
	        ordinal : function (number) {
	            return number;
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return vi;

	}));

/***/ },
/* 150 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Pseudo [x-pseudo]
	//! author : Andrew Hood : https://github.com/andrewhood125

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var x_pseudo = moment.defineLocale('x-pseudo', {
	        months : 'J~áñúá~rý_F~ébrú~árý_~Márc~h_Áp~ríl_~Máý_~Júñé~_Júl~ý_Áú~gúst~_Sép~témb~ér_Ó~ctób~ér_Ñ~óvém~bér_~Décé~mbér'.split('_'),
	        monthsShort : 'J~áñ_~Féb_~Már_~Ápr_~Máý_~Júñ_~Júl_~Áúg_~Sép_~Óct_~Ñóv_~Déc'.split('_'),
	        monthsParseExact : true,
	        weekdays : 'S~úñdá~ý_Mó~ñdáý~_Túé~sdáý~_Wéd~ñésd~áý_T~húrs~dáý_~Fríd~áý_S~átúr~dáý'.split('_'),
	        weekdaysShort : 'S~úñ_~Móñ_~Túé_~Wéd_~Thú_~Frí_~Sát'.split('_'),
	        weekdaysMin : 'S~ú_Mó~_Tú_~Wé_T~h_Fr~_Sá'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'HH:mm',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay : '[T~ódá~ý át] LT',
	            nextDay : '[T~ómó~rró~w át] LT',
	            nextWeek : 'dddd [át] LT',
	            lastDay : '[Ý~ést~érdá~ý át] LT',
	            lastWeek : '[L~ást] dddd [át] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'í~ñ %s',
	            past : '%s á~gó',
	            s : 'á ~féw ~sécó~ñds',
	            m : 'á ~míñ~úté',
	            mm : '%d m~íñú~tés',
	            h : 'á~ñ hó~úr',
	            hh : '%d h~óúrs',
	            d : 'á ~dáý',
	            dd : '%d d~áýs',
	            M : 'á ~móñ~th',
	            MM : '%d m~óñt~hs',
	            y : 'á ~ýéár',
	            yy : '%d ý~éárs'
	        },
	        ordinalParse: /\d{1,2}(th|st|nd|rd)/,
	        ordinal : function (number) {
	            var b = number % 10,
	                output = (~~(number % 100 / 10) === 1) ? 'th' :
	                (b === 1) ? 'st' :
	                (b === 2) ? 'nd' :
	                (b === 3) ? 'rd' : 'th';
	            return number + output;
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return x_pseudo;

	}));

/***/ },
/* 151 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Chinese (China) [zh-cn]
	//! author : suupic : https://github.com/suupic
	//! author : Zeno Zeng : https://github.com/zenozeng

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var zh_cn = moment.defineLocale('zh-cn', {
	        months : '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),
	        monthsShort : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
	        weekdays : '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
	        weekdaysShort : '周日_周一_周二_周三_周四_周五_周六'.split('_'),
	        weekdaysMin : '日_一_二_三_四_五_六'.split('_'),
	        longDateFormat : {
	            LT : 'Ah点mm分',
	            LTS : 'Ah点m分s秒',
	            L : 'YYYY-MM-DD',
	            LL : 'YYYY年MMMD日',
	            LLL : 'YYYY年MMMD日Ah点mm分',
	            LLLL : 'YYYY年MMMD日ddddAh点mm分',
	            l : 'YYYY-MM-DD',
	            ll : 'YYYY年MMMD日',
	            lll : 'YYYY年MMMD日Ah点mm分',
	            llll : 'YYYY年MMMD日ddddAh点mm分'
	        },
	        meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
	        meridiemHour: function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === '凌晨' || meridiem === '早上' ||
	                    meridiem === '上午') {
	                return hour;
	            } else if (meridiem === '下午' || meridiem === '晚上') {
	                return hour + 12;
	            } else {
	                // '中午'
	                return hour >= 11 ? hour : hour + 12;
	            }
	        },
	        meridiem : function (hour, minute, isLower) {
	            var hm = hour * 100 + minute;
	            if (hm < 600) {
	                return '凌晨';
	            } else if (hm < 900) {
	                return '早上';
	            } else if (hm < 1130) {
	                return '上午';
	            } else if (hm < 1230) {
	                return '中午';
	            } else if (hm < 1800) {
	                return '下午';
	            } else {
	                return '晚上';
	            }
	        },
	        calendar : {
	            sameDay : function () {
	                return this.minutes() === 0 ? '[今天]Ah[点整]' : '[今天]LT';
	            },
	            nextDay : function () {
	                return this.minutes() === 0 ? '[明天]Ah[点整]' : '[明天]LT';
	            },
	            lastDay : function () {
	                return this.minutes() === 0 ? '[昨天]Ah[点整]' : '[昨天]LT';
	            },
	            nextWeek : function () {
	                var startOfWeek, prefix;
	                startOfWeek = moment().startOf('week');
	                prefix = this.diff(startOfWeek, 'days') >= 7 ? '[下]' : '[本]';
	                return this.minutes() === 0 ? prefix + 'dddAh点整' : prefix + 'dddAh点mm';
	            },
	            lastWeek : function () {
	                var startOfWeek, prefix;
	                startOfWeek = moment().startOf('week');
	                prefix = this.unix() < startOfWeek.unix()  ? '[上]' : '[本]';
	                return this.minutes() === 0 ? prefix + 'dddAh点整' : prefix + 'dddAh点mm';
	            },
	            sameElse : 'LL'
	        },
	        ordinalParse: /\d{1,2}(日|月|周)/,
	        ordinal : function (number, period) {
	            switch (period) {
	                case 'd':
	                case 'D':
	                case 'DDD':
	                    return number + '日';
	                case 'M':
	                    return number + '月';
	                case 'w':
	                case 'W':
	                    return number + '周';
	                default:
	                    return number;
	            }
	        },
	        relativeTime : {
	            future : '%s内',
	            past : '%s前',
	            s : '几秒',
	            m : '1 分钟',
	            mm : '%d 分钟',
	            h : '1 小时',
	            hh : '%d 小时',
	            d : '1 天',
	            dd : '%d 天',
	            M : '1 个月',
	            MM : '%d 个月',
	            y : '1 年',
	            yy : '%d 年'
	        },
	        week : {
	            // GB/T 7408-1994《数据元和交换格式·信息交换·日期和时间表示法》与ISO 8601:1988等效
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return zh_cn;

	}));

/***/ },
/* 152 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Chinese (Hong Kong) [zh-hk]
	//! author : Ben : https://github.com/ben-lin
	//! author : Chris Lam : https://github.com/hehachris
	//! author : Konstantin : https://github.com/skfd

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var zh_hk = moment.defineLocale('zh-hk', {
	        months : '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),
	        monthsShort : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
	        weekdays : '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
	        weekdaysShort : '週日_週一_週二_週三_週四_週五_週六'.split('_'),
	        weekdaysMin : '日_一_二_三_四_五_六'.split('_'),
	        longDateFormat : {
	            LT : 'Ah點mm分',
	            LTS : 'Ah點m分s秒',
	            L : 'YYYY年MMMD日',
	            LL : 'YYYY年MMMD日',
	            LLL : 'YYYY年MMMD日Ah點mm分',
	            LLLL : 'YYYY年MMMD日ddddAh點mm分',
	            l : 'YYYY年MMMD日',
	            ll : 'YYYY年MMMD日',
	            lll : 'YYYY年MMMD日Ah點mm分',
	            llll : 'YYYY年MMMD日ddddAh點mm分'
	        },
	        meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
	        meridiemHour : function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === '凌晨' || meridiem === '早上' || meridiem === '上午') {
	                return hour;
	            } else if (meridiem === '中午') {
	                return hour >= 11 ? hour : hour + 12;
	            } else if (meridiem === '下午' || meridiem === '晚上') {
	                return hour + 12;
	            }
	        },
	        meridiem : function (hour, minute, isLower) {
	            var hm = hour * 100 + minute;
	            if (hm < 600) {
	                return '凌晨';
	            } else if (hm < 900) {
	                return '早上';
	            } else if (hm < 1130) {
	                return '上午';
	            } else if (hm < 1230) {
	                return '中午';
	            } else if (hm < 1800) {
	                return '下午';
	            } else {
	                return '晚上';
	            }
	        },
	        calendar : {
	            sameDay : '[今天]LT',
	            nextDay : '[明天]LT',
	            nextWeek : '[下]ddddLT',
	            lastDay : '[昨天]LT',
	            lastWeek : '[上]ddddLT',
	            sameElse : 'L'
	        },
	        ordinalParse: /\d{1,2}(日|月|週)/,
	        ordinal : function (number, period) {
	            switch (period) {
	                case 'd' :
	                case 'D' :
	                case 'DDD' :
	                    return number + '日';
	                case 'M' :
	                    return number + '月';
	                case 'w' :
	                case 'W' :
	                    return number + '週';
	                default :
	                    return number;
	            }
	        },
	        relativeTime : {
	            future : '%s內',
	            past : '%s前',
	            s : '幾秒',
	            m : '1 分鐘',
	            mm : '%d 分鐘',
	            h : '1 小時',
	            hh : '%d 小時',
	            d : '1 天',
	            dd : '%d 天',
	            M : '1 個月',
	            MM : '%d 個月',
	            y : '1 年',
	            yy : '%d 年'
	        }
	    });

	    return zh_hk;

	}));

/***/ },
/* 153 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Chinese (Taiwan) [zh-tw]
	//! author : Ben : https://github.com/ben-lin
	//! author : Chris Lam : https://github.com/hehachris

	;(function (global, factory) {
	    true ? factory(__webpack_require__(48)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var zh_tw = moment.defineLocale('zh-tw', {
	        months : '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),
	        monthsShort : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
	        weekdays : '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
	        weekdaysShort : '週日_週一_週二_週三_週四_週五_週六'.split('_'),
	        weekdaysMin : '日_一_二_三_四_五_六'.split('_'),
	        longDateFormat : {
	            LT : 'Ah點mm分',
	            LTS : 'Ah點m分s秒',
	            L : 'YYYY年MMMD日',
	            LL : 'YYYY年MMMD日',
	            LLL : 'YYYY年MMMD日Ah點mm分',
	            LLLL : 'YYYY年MMMD日ddddAh點mm分',
	            l : 'YYYY年MMMD日',
	            ll : 'YYYY年MMMD日',
	            lll : 'YYYY年MMMD日Ah點mm分',
	            llll : 'YYYY年MMMD日ddddAh點mm分'
	        },
	        meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
	        meridiemHour : function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === '凌晨' || meridiem === '早上' || meridiem === '上午') {
	                return hour;
	            } else if (meridiem === '中午') {
	                return hour >= 11 ? hour : hour + 12;
	            } else if (meridiem === '下午' || meridiem === '晚上') {
	                return hour + 12;
	            }
	        },
	        meridiem : function (hour, minute, isLower) {
	            var hm = hour * 100 + minute;
	            if (hm < 600) {
	                return '凌晨';
	            } else if (hm < 900) {
	                return '早上';
	            } else if (hm < 1130) {
	                return '上午';
	            } else if (hm < 1230) {
	                return '中午';
	            } else if (hm < 1800) {
	                return '下午';
	            } else {
	                return '晚上';
	            }
	        },
	        calendar : {
	            sameDay : '[今天]LT',
	            nextDay : '[明天]LT',
	            nextWeek : '[下]ddddLT',
	            lastDay : '[昨天]LT',
	            lastWeek : '[上]ddddLT',
	            sameElse : 'L'
	        },
	        ordinalParse: /\d{1,2}(日|月|週)/,
	        ordinal : function (number, period) {
	            switch (period) {
	                case 'd' :
	                case 'D' :
	                case 'DDD' :
	                    return number + '日';
	                case 'M' :
	                    return number + '月';
	                case 'w' :
	                case 'W' :
	                    return number + '週';
	                default :
	                    return number;
	            }
	        },
	        relativeTime : {
	            future : '%s內',
	            past : '%s前',
	            s : '幾秒',
	            m : '1 分鐘',
	            mm : '%d 分鐘',
	            h : '1 小時',
	            hh : '%d 小時',
	            d : '1 天',
	            dd : '%d 天',
	            M : '1 個月',
	            MM : '%d 個月',
	            y : '1 年',
	            yy : '%d 年'
	        }
	    });

	    return zh_tw;

	}));

/***/ },
/* 154 */
/***/ function(module, exports) {

	"use strict";

	var internals = {};
	internals.STS = {
	  SUCCESS: 0,
	  FAILURE: 1
	};

	internals.CHAT_MESSAGE_TYPE = {
	  TEXT: 1,
	  //IMAGE:2,
	  //FILE: 3,
	  //SYSTEM: 4
	  FILE: 2,
	  LOCATION: 3
	};

	internals.MSG = {
	  DIA_DIEM_NOTFOUND: "Địa điểm bạn tìm kiếm không tồn tại!",
	  USER_EXISTS: "Người sử dụng đã tồn tại!",
	  LOGIN_REQUIRED: "Đăng nhập để sử dụng tính năng này",
	  USER_OFFLINE: "Tin nhắn được gửi đi trong chế độ offline",
	  EXIST_SAVE_SEARCH: "Điều kiện tìm kiếm này đã được lưu",
	  SUCCESS_SAVE_SEARCH: "Điều kiện tìm kiếm được lưu thành công",
	  SUCCESS_LIKE_ADS: "Đã like bất động sản thành công",
	  SUCCESS_UNLIKE_ADS: "Đã unlike bất động sản thành công",
	  EXIST_LIKE_ADS: "Bất động sản đã được like từ trước",
	  PASSWORD_NOT_CORRECT: "Mật khẩu không đúng",
	  USER_NOT_EXIST: "User không tồn tại",
	  SUCCESS_UPDATE_PASSWORD: "Cập nhật mật khẩu thành công",
	  SUCCESS_DELETE_ADS: "Xóa thành công tin đăng"

	};

	internals.DB_ERR = {
	  USER_EXISTS: {
	    code: 101,
	    message: "Người sử dụng đã tồn tại"
	  }
	};

	internals.FORMAT = {
	  DATE_IN_DB: 'YYYYMMDD',
	  DATE_IN_GUI: 'DD/MM/YYYY'
	};

	internals.DB_SEQ = {
	  ScratchTopup: "idGeneratorForScratchTopup",
	  User: "idGeneratorForUsers",
	  Ads: "idGeneratorForAds"
	};

	internals.ADS_ID_PREFIX = {
	  REWAY: "Ads_00",
	  BATDONGSAN: "Ads_01",
	  DOTHI: "Ads_02"
	};

	internals.ADS_SOURCE = {
	  REWAY: "reway",
	  BATDONGSAN: "bds",
	  DOTHI: "dothi"
	};

	internals.DATA_TYPE = {
	  ADS: "Ads",
	  USER: "User",
	  PLACE: "Place",
	  DEVICE: "Device",
	  CHAT: "Chat"
	};

	internals.TOPUP_STAGE = {
	  INIT: -1,
	  SUCCESS: 0,
	  FAIL: 1
	};

	//topup type
	internals.PAYMENT = {
	  SCRATCH: "scratch",
	  SMSPLUS: "smsplus",
	  IN_APP_PURCHASE: "inAppPurchase",
	  MANUAL_BANK_TRANSFER: "manualBankTransfer"
	};

	//Convert
	internals.CONVERT = {
	  GEO_TOLERANCE: 2500 //cho phep sai so xxx met
	};

	internals.DBCACHE = {
	  REFRESH_INTERVAL: 180 //seconds
	};

	internals.ADS_STATUS = {
	  OK: 0,
	  KHONG_CO_DANH_MUC_DIA_CHINH_TUONG_UNG: 1
	};

	if (typeof window !== 'undefined') window.RewayConst = internals;
	module.exports = internals;

/***/ },
/* 155 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  mongodb: {
	    ip: '127.0.0.1',
	    port: '27017',
	    app: 'nodejs'
	  },
	  crypto: {
	    privateKey: '37LvDSasdfasfsaf3a3IEIA;3r3oi3joijpjfa3a3m4XvjYOh9Yaa.p3id#IEYDNeaken',
	    tokenExpiry: 1 * 30 * 1000 * 60 //1 hour
	  },
	  validation: {
	    username: /^[a-zA-Z0-9]{6,12}$/,
	    password: /^(?=.*[0-9])(?=.*[!@#$%^&*])[a-zA-Z0-9!@#$%^&*]{6,12}$/
	  },
	  onepay: {
	    secret: "iv9wvzqvy9bhpk1xv7w2hol9qbzsw1i4",
	    access_key: "89drdkir1hsi8uie7uuq",
	    //rootUrl : "https://api.1pay.vn"
	    //rootUrl : `http://${process.env.OPENSHIFT_NODEJS_IP || '192.168.0.109'}:5000`,
	    rootUrl: "http://192.168.0.109:5000"
	  },
	  noCoverUrl: "http://203.162.13.177:5000/web/asset/img/reland_house_large.jpg",
	  esms: {
	    APIKEY: "80FFA052B5321FE40A7633AA0F01F6",
	    SECRETKEY: "6697FF3D7420874690FFC6CAC9C7CE",

	    SendMultipleMessageURL: "http://api.esms.vn/MainService.svc/xml/SendMultipleMessage_V2/",
	    RETURN_CODE: {
	      SUCCESS: 100,
	      100: "Request thành công",
	      99: "Lỗi không xác định , thử lại sau",
	      101: "Đăng nhập thất bại (api key hoặc secrect key không đúng )",
	      102: "Tài khoản đã bị khóa",
	      103: "Số dư tài khoản không đủ dể gửi tin",
	      104: "Mã Brandname không đúng"
	    }
	  }
	};

/***/ }
/******/ ]);